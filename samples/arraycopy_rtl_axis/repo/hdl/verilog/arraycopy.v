// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="arraycopy,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.518000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module arraycopy (
        s_axi_s_axilite_AWVALID,
        s_axi_s_axilite_AWREADY,
        s_axi_s_axilite_AWADDR,
        s_axi_s_axilite_WVALID,
        s_axi_s_axilite_WREADY,
        s_axi_s_axilite_WDATA,
        s_axi_s_axilite_WSTRB,
        s_axi_s_axilite_ARVALID,
        s_axi_s_axilite_ARREADY,
        s_axi_s_axilite_ARADDR,
        s_axi_s_axilite_RVALID,
        s_axi_s_axilite_RREADY,
        s_axi_s_axilite_RDATA,
        s_axi_s_axilite_RRESP,
        s_axi_s_axilite_BVALID,
        s_axi_s_axilite_BREADY,
        s_axi_s_axilite_BRESP,
        ap_clk,
        ap_rst_n,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        A_TSTRB,
        A_TKEEP,
        A_TUSER,
        A_TLAST,
        A_TID,
        A_TDEST,
        B_TDATA,
        B_TVALID,
        B_TREADY,
        B_TSTRB,
        B_TKEEP,
        B_TUSER,
        B_TLAST,
        B_TID,
        B_TDEST,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_pp0_stg0_fsm_1 = 2'b1;
parameter    ap_ST_st4_fsm_2 = 2'b10;
parameter    C_S_AXI_S_AXILITE_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_S_AXILITE_ADDR_WIDTH = 5;
parameter    C_DATA_WIDTH = 32;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_S_AXILITE_WSTRB_WIDTH = (C_S_AXI_S_AXILITE_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);

input   s_axi_s_axilite_AWVALID;
output   s_axi_s_axilite_AWREADY;
input  [C_S_AXI_S_AXILITE_ADDR_WIDTH - 1 : 0] s_axi_s_axilite_AWADDR;
input   s_axi_s_axilite_WVALID;
output   s_axi_s_axilite_WREADY;
input  [C_S_AXI_S_AXILITE_DATA_WIDTH - 1 : 0] s_axi_s_axilite_WDATA;
input  [C_S_AXI_S_AXILITE_WSTRB_WIDTH - 1 : 0] s_axi_s_axilite_WSTRB;
input   s_axi_s_axilite_ARVALID;
output   s_axi_s_axilite_ARREADY;
input  [C_S_AXI_S_AXILITE_ADDR_WIDTH - 1 : 0] s_axi_s_axilite_ARADDR;
output   s_axi_s_axilite_RVALID;
input   s_axi_s_axilite_RREADY;
output  [C_S_AXI_S_AXILITE_DATA_WIDTH - 1 : 0] s_axi_s_axilite_RDATA;
output  [1:0] s_axi_s_axilite_RRESP;
output   s_axi_s_axilite_BVALID;
input   s_axi_s_axilite_BREADY;
output  [1:0] s_axi_s_axilite_BRESP;
input   ap_clk;
input   ap_rst_n;
input  [63:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
input  [7:0] A_TSTRB;
input  [7:0] A_TKEEP;
input  [0:0] A_TUSER;
input  [0:0] A_TLAST;
input  [0:0] A_TID;
input  [0:0] A_TDEST;
output  [63:0] B_TDATA;
output   B_TVALID;
input   B_TREADY;
output  [7:0] B_TSTRB;
output  [7:0] B_TKEEP;
output  [0:0] B_TUSER;
output  [0:0] B_TLAST;
output  [0:0] B_TID;
output  [0:0] B_TDEST;
output   interrupt;

reg A_TREADY;
reg B_TVALID;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [1:0] ap_CS_fsm = 2'b00;
reg    ap_ready;
wire   [31:0] M;
wire    arraycopy_s_axilite_s_axi_U_ap_dummy_ce;
reg   [31:0] i_reg_141;
wire   [0:0] tmp_fu_153_p2;
reg   [0:0] tmp_reg_302;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_92;
reg    ap_sig_ioackin_B_TREADY;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [31:0] i_1_fu_158_p2;
reg   [0:0] tmp_dest_V_fu_64;
reg   [0:0] tmp_id_V_fu_68;
reg   [0:0] tmp_last_V_fu_72;
reg   [0:0] tmp_user_V_fu_76;
reg   [7:0] tmp_keep_V_fu_80;
reg   [7:0] tmp_strb_V_fu_84;
reg   [63:0] tmp_data_V_fu_88;
reg    ap_reg_ioackin_B_TREADY = 1'b0;
reg   [1:0] ap_NS_fsm;


arraycopy_s_axilite_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_S_AXILITE_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_S_AXILITE_DATA_WIDTH ))
arraycopy_s_axilite_s_axi_U(
    .AWVALID( s_axi_s_axilite_AWVALID ),
    .AWREADY( s_axi_s_axilite_AWREADY ),
    .AWADDR( s_axi_s_axilite_AWADDR ),
    .WVALID( s_axi_s_axilite_WVALID ),
    .WREADY( s_axi_s_axilite_WREADY ),
    .WDATA( s_axi_s_axilite_WDATA ),
    .WSTRB( s_axi_s_axilite_WSTRB ),
    .ARVALID( s_axi_s_axilite_ARVALID ),
    .ARREADY( s_axi_s_axilite_ARREADY ),
    .ARADDR( s_axi_s_axilite_ARADDR ),
    .RVALID( s_axi_s_axilite_RVALID ),
    .RREADY( s_axi_s_axilite_RREADY ),
    .RDATA( s_axi_s_axilite_RDATA ),
    .RRESP( s_axi_s_axilite_RRESP ),
    .BVALID( s_axi_s_axilite_BVALID ),
    .BREADY( s_axi_s_axilite_BREADY ),
    .BRESP( s_axi_s_axilite_BRESP ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ACLK_EN( arraycopy_s_axilite_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .M( M )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_B_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_B_TREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
        end else if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) & (ap_const_logic_1 == B_TREADY))) begin
            ap_reg_ioackin_B_TREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (tmp_fu_153_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n == 1'b0) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(tmp_fu_153_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | ((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (tmp_fu_153_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(tmp_fu_153_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        i_reg_141 <= i_1_fu_158_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_141 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(tmp_fu_153_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        tmp_data_V_fu_88 <= A_TDATA;
        tmp_dest_V_fu_64 <= A_TDEST;
        tmp_id_V_fu_68 <= A_TID;
        tmp_keep_V_fu_80 <= A_TKEEP;
        tmp_last_V_fu_72 <= A_TLAST;
        tmp_strb_V_fu_84 <= A_TSTRB;
        tmp_user_V_fu_76 <= A_TUSER;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        tmp_reg_302 <= tmp_fu_153_p2;
    end
end

/// A_TREADY assign process. ///
always @ (ap_CS_fsm or tmp_fu_153_p2 or tmp_reg_302 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_92 or ap_sig_ioackin_B_TREADY or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(tmp_fu_153_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        A_TREADY = ap_const_logic_1;
    end else begin
        A_TREADY = ap_const_logic_0;
    end
end

/// B_TVALID assign process. ///
always @ (ap_CS_fsm or tmp_reg_302 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_92 or ap_reg_ppiten_pp0_it1 or ap_reg_ioackin_B_TREADY)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) & (ap_const_logic_0 == ap_reg_ioackin_B_TREADY))) begin
        B_TVALID = ap_const_logic_1;
    end else begin
        B_TVALID = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_2 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_2 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_B_TREADY assign process. ///
always @ (B_TREADY or ap_reg_ioackin_B_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_B_TREADY)) begin
        ap_sig_ioackin_B_TREADY = B_TREADY;
    end else begin
        ap_sig_ioackin_B_TREADY = ap_const_logic_1;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_153_p2 or tmp_reg_302 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_92 or ap_sig_ioackin_B_TREADY or ap_reg_ppiten_pp0_it1)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (tmp_fu_153_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (tmp_fu_153_p2 == ap_const_lv1_0) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_92) | (~(tmp_reg_302 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st4_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_TDATA = tmp_data_V_fu_88;
assign B_TDEST = tmp_dest_V_fu_64;
assign B_TID = tmp_id_V_fu_68;
assign B_TKEEP = tmp_keep_V_fu_80;
assign B_TLAST = tmp_last_V_fu_72;
assign B_TSTRB = tmp_strb_V_fu_84;
assign B_TUSER = tmp_user_V_fu_76;

/// ap_sig_bdd_92 assign process. ///
always @ (A_TVALID or tmp_fu_153_p2)
begin
    ap_sig_bdd_92 = ((A_TVALID == ap_const_logic_0) & ~(tmp_fu_153_p2 == ap_const_lv1_0));
end
assign arraycopy_s_axilite_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign i_1_fu_158_p2 = (i_reg_141 + ap_const_lv32_1);
assign tmp_fu_153_p2 = ($signed(i_reg_141) < $signed(M)? 1'b1: 1'b0);


endmodule //arraycopy

