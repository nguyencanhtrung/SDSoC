

================================================================
== Vivado HLS Report for 'correlation_accel_v4_midEnd_1'
================================================================
* Date:           Thu Feb  9 13:42:53 2017

* Version:        2014.4 (Build 1071461 on Tue Nov 18 16:42:57 PM 2014)
* Project:        correlation_accel_v4
* Solution:       solution
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |   8.50|      9.65|        1.06|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +--------------------+-----+-----+----------+-----------+-----------+------+----------+
        |                    |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |      Loop Name     | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +--------------------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1            |    ?|    ?|         ?|          -|          -|     ?|    no    |
        | + ACCUMULATIONS    |    ?|    ?|        41|          1|          1|     ?|    yes   |
        | + LAST_ACCUM_LOOP  |   34|   34|        10|          5|          5|     6|    yes   |
        +--------------------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 41
  * Pipeline-1: initiation interval (II) = 5, depth = 10


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 57
* Pipeline: 2
  Pipeline-0: II = 1, D = 41, States = { 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 }
  Pipeline-1: II = 5, D = 10, States = { 47 48 49 50 51 52 53 54 55 56 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / (!tmp_1_i)
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	47  / (tmp_9_i)
	7  / (!tmp_9_i)
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	6  / true
47 --> 
	57  / (exitcond_i)
	48  / (!exitcond_i)
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	47  / true
57 --> 
	3  / true
* FSM state operations: 

 <State 1>: 1.86ns
ST_1: acc_returnA [1/1] 0.00ns
entry:2  %acc_returnA = alloca [6 x float], align 16

ST_1: acc_weight_returnSquareA [1/1] 0.00ns
entry:3  %acc_weight_returnSquareA = alloca [6 x float], align 16

ST_1: acc_weight_returnA [1/1] 0.00ns
entry:4  %acc_weight_returnA = alloca [6 x float], align 16

ST_1: acc_returnB [1/1] 0.00ns
entry:5  %acc_returnB = alloca [6 x float], align 16

ST_1: acc_weight_returnSquareB [1/1] 0.00ns
entry:6  %acc_weight_returnSquareB = alloca [6 x float], align 16

ST_1: acc_weight_returnB [1/1] 0.00ns
entry:7  %acc_weight_returnB = alloca [6 x float], align 16

ST_1: acc_weight_returnA_returnB [1/1] 0.00ns
entry:8  %acc_weight_returnA_returnB = alloca [6 x float], align 16

ST_1: NUMBER_OF_INDICES_read [1/1] 1.86ns
entry:9  %NUMBER_OF_INDICES_read = call i32 @_ssdm_op_Read.ap_fifo.i32P(i32* %NUMBER_OF_INDICES)

ST_1: NUMBER_OF_DAYS_read [1/1] 1.86ns
entry:10  %NUMBER_OF_DAYS_read = call i32 @_ssdm_op_Read.ap_fifo.i32P(i32* %NUMBER_OF_DAYS)


 <State 2>: 6.25ns
ST_2: stg_67 [1/1] 0.00ns
entry:0  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_INDICES, [8 x i8]* @str198, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str198, [8 x i8]* @str198, [8 x i8]* @str198)

ST_2: stg_68 [1/1] 0.00ns
entry:1  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_DAYS, [8 x i8]* @str197, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str197, [8 x i8]* @str197, [8 x i8]* @str197)

ST_2: stg_69 [1/1] 0.00ns
entry:11  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_returnA_out_V, [8 x i8]* @str111, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str112, [1 x i8]* @str112, [8 x i8]* @str111)

ST_2: stg_70 [1/1] 0.00ns
entry:12  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_returnSquareA_out_V, [8 x i8]* @str107, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str108, [1 x i8]* @str108, [8 x i8]* @str107)

ST_2: stg_71 [1/1] 0.00ns
entry:13  call void (...)* @_ssdm_op_SpecInterface(float* %sum_returnA_out_V, [8 x i8]* @str103, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str104, [1 x i8]* @str104, [8 x i8]* @str103)

ST_2: stg_72 [1/1] 0.00ns
entry:14  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_returnA_returnB_out, [8 x i8]* @str99, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str100, [1 x i8]* @str100, [8 x i8]* @str99)

ST_2: stg_73 [1/1] 0.00ns
entry:15  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_return_out_V, [8 x i8]* @str95, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str96, [1 x i8]* @str96, [8 x i8]* @str95)

ST_2: stg_74 [1/1] 0.00ns
entry:16  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_returnSquare_out_V, [8 x i8]* @str91, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str92, [1 x i8]* @str92, [8 x i8]* @str91)

ST_2: stg_75 [1/1] 0.00ns
entry:17  call void (...)* @_ssdm_op_SpecInterface(float* %sum_return_out_V, [8 x i8]* @str87, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str88, [1 x i8]* @str88, [8 x i8]* @str87)

ST_2: stg_76 [1/1] 0.00ns
entry:18  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_out_V, [8 x i8]* @str83, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str84, [1 x i8]* @str84, [8 x i8]* @str83)

ST_2: stg_77 [1/1] 0.00ns
entry:19  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnA_returnB_in_V, [8 x i8]* @str59, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str60, [1 x i8]* @str60, [8 x i8]* @str59)

ST_2: stg_78 [1/1] 0.00ns
entry:20  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnB_in_V, [8 x i8]* @str55, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str56, [1 x i8]* @str56, [8 x i8]* @str55)

ST_2: stg_79 [1/1] 0.00ns
entry:21  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnSquareB_in_V, [8 x i8]* @str51, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str52, [1 x i8]* @str52, [8 x i8]* @str51)

ST_2: stg_80 [1/1] 0.00ns
entry:22  call void (...)* @_ssdm_op_SpecInterface(float* %ln_returnB_in_V, [8 x i8]* @str47, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str48, [1 x i8]* @str48, [8 x i8]* @str47)

ST_2: stg_81 [1/1] 0.00ns
entry:23  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_in_V, [8 x i8]* @str43, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str44, [1 x i8]* @str44, [8 x i8]* @str43)

ST_2: stg_82 [1/1] 0.00ns
entry:24  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnA_in_V, [8 x i8]* @str27, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str28, [1 x i8]* @str28, [8 x i8]* @str27)

ST_2: stg_83 [1/1] 0.00ns
entry:25  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnSquareA_in_V, [8 x i8]* @str23, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str24, [1 x i8]* @str24, [8 x i8]* @str23)

ST_2: stg_84 [1/1] 0.00ns
entry:26  call void (...)* @_ssdm_op_SpecInterface(float* %ln_returnA_in_V, [8 x i8]* @str19, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str20, [1 x i8]* @str20, [8 x i8]* @str19)

ST_2: tmp_i [1/1] 2.44ns
entry:27  %tmp_i = add nsw i32 %NUMBER_OF_INDICES_read, -1

ST_2: tmp [1/1] 0.00ns
entry:28  %tmp = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %tmp_i, i32 31)

ST_2: p_neg_i [1/1] 2.44ns
entry:29  %p_neg_i = sub i32 1, %NUMBER_OF_INDICES_read

ST_2: p_lshr_i [1/1] 0.00ns
entry:30  %p_lshr_i = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %p_neg_i, i32 1, i32 31)

ST_2: tmp_s [1/1] 0.00ns
entry:31  %tmp_s = zext i31 %p_lshr_i to i32

ST_2: p_neg_t_i [1/1] 2.44ns
entry:32  %p_neg_t_i = sub i32 0, %tmp_s

ST_2: p_lshr_f_i [1/1] 0.00ns
entry:33  %p_lshr_f_i = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %tmp_i, i32 1, i32 31)

ST_2: tmp_9 [1/1] 0.00ns
entry:34  %tmp_9 = zext i31 %p_lshr_f_i to i32

ST_2: upper_bound [1/1] 1.37ns
entry:35  %upper_bound = select i1 %tmp, i32 %p_neg_t_i, i32 %tmp_9

ST_2: tmp_i_9 [1/1] 2.44ns
entry:36  %tmp_i_9 = add nsw i32 %NUMBER_OF_DAYS_read, -1

ST_2: acc_returnB_addr [1/1] 0.00ns
entry:37  %acc_returnB_addr = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 0

ST_2: acc_weight_returnSquareB_addr [1/1] 0.00ns
entry:38  %acc_weight_returnSquareB_addr = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 0

ST_2: acc_weight_returnB_addr [1/1] 0.00ns
entry:39  %acc_weight_returnB_addr = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 0

ST_2: acc_weight_returnA_returnB_add [1/1] 0.00ns
entry:40  %acc_weight_returnA_returnB_add = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 0

ST_2: acc_returnA_addr [1/1] 0.00ns
entry:41  %acc_returnA_addr = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 0

ST_2: acc_weight_returnSquareA_addr [1/1] 0.00ns
entry:42  %acc_weight_returnSquareA_addr = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 0

ST_2: acc_weight_returnA_addr [1/1] 0.00ns
entry:43  %acc_weight_returnA_addr = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 0

ST_2: acc_returnB_addr_8 [1/1] 0.00ns
entry:44  %acc_returnB_addr_8 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 1

ST_2: acc_weight_returnSquareB_addr_8 [1/1] 0.00ns
entry:45  %acc_weight_returnSquareB_addr_8 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 1

ST_2: acc_weight_returnB_addr_8 [1/1] 0.00ns
entry:46  %acc_weight_returnB_addr_8 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 1

ST_2: acc_weight_returnA_returnB_add_8 [1/1] 0.00ns
entry:47  %acc_weight_returnA_returnB_add_8 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 1

ST_2: acc_returnA_addr_8 [1/1] 0.00ns
entry:48  %acc_returnA_addr_8 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 1

ST_2: acc_weight_returnSquareA_addr_8 [1/1] 0.00ns
entry:49  %acc_weight_returnSquareA_addr_8 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 1

ST_2: acc_weight_returnA_addr_8 [1/1] 0.00ns
entry:50  %acc_weight_returnA_addr_8 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 1

ST_2: acc_returnB_addr_9 [1/1] 0.00ns
entry:51  %acc_returnB_addr_9 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 2

ST_2: acc_weight_returnSquareB_addr_9 [1/1] 0.00ns
entry:52  %acc_weight_returnSquareB_addr_9 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 2

ST_2: acc_weight_returnB_addr_9 [1/1] 0.00ns
entry:53  %acc_weight_returnB_addr_9 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 2

ST_2: acc_weight_returnA_returnB_add_9 [1/1] 0.00ns
entry:54  %acc_weight_returnA_returnB_add_9 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 2

ST_2: acc_returnA_addr_9 [1/1] 0.00ns
entry:55  %acc_returnA_addr_9 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 2

ST_2: acc_weight_returnSquareA_addr_9 [1/1] 0.00ns
entry:56  %acc_weight_returnSquareA_addr_9 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 2

ST_2: acc_weight_returnA_addr_9 [1/1] 0.00ns
entry:57  %acc_weight_returnA_addr_9 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 2

ST_2: acc_returnB_addr_10 [1/1] 0.00ns
entry:58  %acc_returnB_addr_10 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 3

ST_2: acc_weight_returnSquareB_addr_10 [1/1] 0.00ns
entry:59  %acc_weight_returnSquareB_addr_10 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 3

ST_2: acc_weight_returnB_addr_10 [1/1] 0.00ns
entry:60  %acc_weight_returnB_addr_10 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 3

ST_2: acc_weight_returnA_returnB_add_10 [1/1] 0.00ns
entry:61  %acc_weight_returnA_returnB_add_10 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 3

ST_2: acc_returnA_addr_10 [1/1] 0.00ns
entry:62  %acc_returnA_addr_10 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 3

ST_2: acc_weight_returnSquareA_addr_10 [1/1] 0.00ns
entry:63  %acc_weight_returnSquareA_addr_10 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 3

ST_2: acc_weight_returnA_addr_10 [1/1] 0.00ns
entry:64  %acc_weight_returnA_addr_10 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 3

ST_2: acc_returnB_addr_11 [1/1] 0.00ns
entry:65  %acc_returnB_addr_11 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 4

ST_2: acc_weight_returnSquareB_addr_11 [1/1] 0.00ns
entry:66  %acc_weight_returnSquareB_addr_11 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 4

ST_2: acc_weight_returnB_addr_11 [1/1] 0.00ns
entry:67  %acc_weight_returnB_addr_11 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 4

ST_2: acc_weight_returnA_returnB_add_11 [1/1] 0.00ns
entry:68  %acc_weight_returnA_returnB_add_11 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 4

ST_2: acc_returnA_addr_11 [1/1] 0.00ns
entry:69  %acc_returnA_addr_11 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 4

ST_2: acc_weight_returnSquareA_addr_11 [1/1] 0.00ns
entry:70  %acc_weight_returnSquareA_addr_11 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 4

ST_2: acc_weight_returnA_addr_11 [1/1] 0.00ns
entry:71  %acc_weight_returnA_addr_11 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 4

ST_2: acc_returnB_addr_12 [1/1] 0.00ns
entry:72  %acc_returnB_addr_12 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 5

ST_2: acc_weight_returnSquareB_addr_12 [1/1] 0.00ns
entry:73  %acc_weight_returnSquareB_addr_12 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 5

ST_2: acc_weight_returnB_addr_12 [1/1] 0.00ns
entry:74  %acc_weight_returnB_addr_12 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 5

ST_2: acc_weight_returnA_returnB_add_12 [1/1] 0.00ns
entry:75  %acc_weight_returnA_returnB_add_12 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 5

ST_2: acc_returnA_addr_12 [1/1] 0.00ns
entry:76  %acc_returnA_addr_12 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 5

ST_2: acc_weight_returnSquareA_addr_12 [1/1] 0.00ns
entry:77  %acc_weight_returnSquareA_addr_12 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 5

ST_2: acc_weight_returnA_addr_12 [1/1] 0.00ns
entry:78  %acc_weight_returnA_addr_12 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 5

ST_2: stg_137 [1/1] 1.57ns
entry:79  br label %0


 <State 3>: 2.52ns
ST_3: column_index_i [1/1] 0.00ns
:0  %column_index_i = phi i32 [ 1, %entry ], [ %column_index, %3 ]

ST_3: tmp_1_i [1/1] 2.52ns
:1  %tmp_1_i = icmp sgt i32 %column_index_i, %upper_bound

ST_3: stg_140 [1/1] 0.00ns
:2  br i1 %tmp_1_i, label %midEnd.2.exit, label %.preheader34.0.i

ST_3: stg_141 [1/1] 2.39ns
.preheader34.0.i:0  store float 0.000000e+00, float* %acc_returnB_addr, align 16

ST_3: stg_142 [1/1] 2.39ns
.preheader34.0.i:1  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr, align 16

ST_3: stg_143 [1/1] 2.39ns
.preheader34.0.i:2  store float 0.000000e+00, float* %acc_weight_returnB_addr, align 16

ST_3: stg_144 [1/1] 2.39ns
.preheader34.0.i:3  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add, align 16

ST_3: stg_145 [1/1] 2.39ns
.preheader34.0.i:4  store float 0.000000e+00, float* %acc_returnA_addr, align 16

ST_3: stg_146 [1/1] 2.39ns
.preheader34.0.i:5  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr, align 16

ST_3: stg_147 [1/1] 2.39ns
.preheader34.0.i:6  store float 0.000000e+00, float* %acc_weight_returnA_addr, align 16

ST_3: stg_148 [1/1] 2.39ns
.preheader34.0.i:7  store float 0.000000e+00, float* %acc_returnB_addr_8, align 4

ST_3: stg_149 [1/1] 2.39ns
.preheader34.0.i:8  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_8, align 4

ST_3: stg_150 [1/1] 2.39ns
.preheader34.0.i:9  store float 0.000000e+00, float* %acc_weight_returnB_addr_8, align 4

ST_3: stg_151 [1/1] 2.39ns
.preheader34.0.i:10  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_8, align 4

ST_3: stg_152 [1/1] 2.39ns
.preheader34.0.i:11  store float 0.000000e+00, float* %acc_returnA_addr_8, align 4

ST_3: stg_153 [1/1] 2.39ns
.preheader34.0.i:12  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_8, align 4

ST_3: stg_154 [1/1] 2.39ns
.preheader34.0.i:13  store float 0.000000e+00, float* %acc_weight_returnA_addr_8, align 4

ST_3: stg_155 [1/1] 0.00ns
midEnd.2.exit:0  ret void


 <State 4>: 2.39ns
ST_4: stg_156 [1/1] 2.39ns
.preheader34.0.i:14  store float 0.000000e+00, float* %acc_returnB_addr_9, align 8

ST_4: stg_157 [1/1] 2.39ns
.preheader34.0.i:15  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_9, align 8

ST_4: stg_158 [1/1] 2.39ns
.preheader34.0.i:16  store float 0.000000e+00, float* %acc_weight_returnB_addr_9, align 8

ST_4: stg_159 [1/1] 2.39ns
.preheader34.0.i:17  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_9, align 8

ST_4: stg_160 [1/1] 2.39ns
.preheader34.0.i:18  store float 0.000000e+00, float* %acc_returnA_addr_9, align 8

ST_4: stg_161 [1/1] 2.39ns
.preheader34.0.i:19  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_9, align 8

ST_4: stg_162 [1/1] 2.39ns
.preheader34.0.i:20  store float 0.000000e+00, float* %acc_weight_returnA_addr_9, align 8

ST_4: stg_163 [1/1] 2.39ns
.preheader34.0.i:21  store float 0.000000e+00, float* %acc_returnB_addr_10, align 4

ST_4: stg_164 [1/1] 2.39ns
.preheader34.0.i:22  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_10, align 4

ST_4: stg_165 [1/1] 2.39ns
.preheader34.0.i:23  store float 0.000000e+00, float* %acc_weight_returnB_addr_10, align 4

ST_4: stg_166 [1/1] 2.39ns
.preheader34.0.i:24  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_10, align 4

ST_4: stg_167 [1/1] 2.39ns
.preheader34.0.i:25  store float 0.000000e+00, float* %acc_returnA_addr_10, align 4

ST_4: stg_168 [1/1] 2.39ns
.preheader34.0.i:26  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_10, align 4

ST_4: stg_169 [1/1] 2.39ns
.preheader34.0.i:27  store float 0.000000e+00, float* %acc_weight_returnA_addr_10, align 4


 <State 5>: 2.39ns
ST_5: stg_170 [1/1] 2.39ns
.preheader34.0.i:28  store float 0.000000e+00, float* %acc_returnB_addr_11, align 16

ST_5: stg_171 [1/1] 2.39ns
.preheader34.0.i:29  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_11, align 16

ST_5: stg_172 [1/1] 2.39ns
.preheader34.0.i:30  store float 0.000000e+00, float* %acc_weight_returnB_addr_11, align 16

ST_5: stg_173 [1/1] 2.39ns
.preheader34.0.i:31  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_11, align 16

ST_5: stg_174 [1/1] 2.39ns
.preheader34.0.i:32  store float 0.000000e+00, float* %acc_returnA_addr_11, align 16

ST_5: stg_175 [1/1] 2.39ns
.preheader34.0.i:33  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_11, align 16

ST_5: stg_176 [1/1] 2.39ns
.preheader34.0.i:34  store float 0.000000e+00, float* %acc_weight_returnA_addr_11, align 16

ST_5: stg_177 [1/1] 2.39ns
.preheader34.0.i:35  store float 0.000000e+00, float* %acc_returnB_addr_12, align 4

ST_5: stg_178 [1/1] 2.39ns
.preheader34.0.i:36  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_12, align 4

ST_5: stg_179 [1/1] 2.39ns
.preheader34.0.i:37  store float 0.000000e+00, float* %acc_weight_returnB_addr_12, align 4

ST_5: stg_180 [1/1] 2.39ns
.preheader34.0.i:38  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_12, align 4

ST_5: stg_181 [1/1] 2.39ns
.preheader34.0.i:39  store float 0.000000e+00, float* %acc_returnA_addr_12, align 4

ST_5: stg_182 [1/1] 2.39ns
.preheader34.0.i:40  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_12, align 4

ST_5: stg_183 [1/1] 2.39ns
.preheader34.0.i:41  store float 0.000000e+00, float* %acc_weight_returnA_addr_12, align 4

ST_5: stg_184 [1/1] 1.57ns
.preheader34.0.i:42  br label %.preheader33.i


 <State 6>: 4.62ns
ST_6: tmp_10 [1/1] 0.00ns
.preheader33.i:0  %tmp_10 = phi float [ %tmp_34, %1 ], [ 0.000000e+00, %.preheader34.0.i ]

ST_6: i1_i [1/1] 0.00ns
.preheader33.i:1  %i1_i = phi i32 [ %i, %1 ], [ 1, %.preheader34.0.i ]

ST_6: tmp_9_i [1/1] 2.52ns
.preheader33.i:2  %tmp_9_i = icmp sgt i32 %i1_i, %tmp_i_9

ST_6: stg_188 [1/1] 1.57ns
.preheader33.i:3  br i1 %tmp_9_i, label %.preheader.i, label %1

ST_6: channel_id [36/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6

ST_6: i [1/1] 2.44ns
:42  %i = add nsw i32 %i1_i, 1


 <State 7>: 4.62ns
ST_7: channel_id [35/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 8>: 4.62ns
ST_8: channel_id [34/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 9>: 4.62ns
ST_9: channel_id [33/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 10>: 4.62ns
ST_10: channel_id [32/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 11>: 4.62ns
ST_11: channel_id [31/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 12>: 4.62ns
ST_12: channel_id [30/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 13>: 4.62ns
ST_13: channel_id [29/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 14>: 4.62ns
ST_14: channel_id [28/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 15>: 4.62ns
ST_15: channel_id [27/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 16>: 4.62ns
ST_16: channel_id [26/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 17>: 4.62ns
ST_17: channel_id [25/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 18>: 4.62ns
ST_18: channel_id [24/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 19>: 4.62ns
ST_19: channel_id [23/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 20>: 4.62ns
ST_20: channel_id [22/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 21>: 4.62ns
ST_21: channel_id [21/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 22>: 4.62ns
ST_22: channel_id [20/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 23>: 4.62ns
ST_23: channel_id [19/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 24>: 4.62ns
ST_24: channel_id [18/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 25>: 4.62ns
ST_25: channel_id [17/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 26>: 4.62ns
ST_26: channel_id [16/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 27>: 4.62ns
ST_27: channel_id [15/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 28>: 4.62ns
ST_28: channel_id [14/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 29>: 4.62ns
ST_29: channel_id [13/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 30>: 4.62ns
ST_30: channel_id [12/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 31>: 4.62ns
ST_31: channel_id [11/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 32>: 4.62ns
ST_32: channel_id [10/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 33>: 4.62ns
ST_33: channel_id [9/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 34>: 4.62ns
ST_34: channel_id [8/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 35>: 4.62ns
ST_35: channel_id [7/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 36>: 4.62ns
ST_36: channel_id [6/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 37>: 4.62ns
ST_37: channel_id [5/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 38>: 4.62ns
ST_38: channel_id [4/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 39>: 4.62ns
ST_39: channel_id [3/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 40>: 4.62ns
ST_40: channel_id [2/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6


 <State 41>: 7.01ns
ST_41: channel_id [1/36] 4.62ns
:2  %channel_id = srem i32 %i1_i, 6

ST_41: tmp_34 [1/1] 1.86ns
:4  %tmp_34 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %sum_weight_in_V)

ST_41: tmp_35 [1/1] 1.86ns
:5  %tmp_35 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %ln_returnA_in_V)

ST_41: tmp_36 [1/1] 1.86ns
:6  %tmp_36 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %weight_returnA_in_V)

ST_41: tmp_37 [1/1] 1.86ns
:7  %tmp_37 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %weight_returnSquareA_in_V)

ST_41: tmp_38 [1/1] 1.86ns
:8  %tmp_38 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %ln_returnB_in_V)

ST_41: tmp_39 [1/1] 1.86ns
:9  %tmp_39 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %weight_returnB_in_V)

ST_41: tmp_40 [1/1] 1.86ns
:10  %tmp_40 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %weight_returnSquareB_in_V)

ST_41: tmp_41 [1/1] 1.86ns
:11  %tmp_41 = call float @_ssdm_op_Read.ap_fifo.volatile.floatP(float* %weight_returnA_returnB_in_V)

ST_41: tmp_26_i [1/1] 0.00ns
:12  %tmp_26_i = zext i32 %channel_id to i64

ST_41: acc_returnA_addr_13 [1/1] 0.00ns
:13  %acc_returnA_addr_13 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 %tmp_26_i

ST_41: acc_returnA_load [2/2] 2.39ns
:14  %acc_returnA_load = load float* %acc_returnA_addr_13, align 4

ST_41: acc_weight_returnSquareA_addr_13 [1/1] 0.00ns
:17  %acc_weight_returnSquareA_addr_13 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 %tmp_26_i

ST_41: acc_weight_returnSquareA_load [2/2] 2.39ns
:18  %acc_weight_returnSquareA_load = load float* %acc_weight_returnSquareA_addr_13, align 4

ST_41: acc_weight_returnA_addr_13 [1/1] 0.00ns
:21  %acc_weight_returnA_addr_13 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 %tmp_26_i

ST_41: acc_weight_returnA_load [2/2] 2.39ns
:22  %acc_weight_returnA_load = load float* %acc_weight_returnA_addr_13, align 4

ST_41: acc_returnB_addr_13 [1/1] 0.00ns
:25  %acc_returnB_addr_13 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 %tmp_26_i

ST_41: acc_returnB_load [2/2] 2.39ns
:26  %acc_returnB_load = load float* %acc_returnB_addr_13, align 4

ST_41: acc_weight_returnSquareB_addr_13 [1/1] 0.00ns
:29  %acc_weight_returnSquareB_addr_13 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 %tmp_26_i

ST_41: acc_weight_returnSquareB_load [2/2] 2.39ns
:30  %acc_weight_returnSquareB_load = load float* %acc_weight_returnSquareB_addr_13, align 4

ST_41: acc_weight_returnB_addr_13 [1/1] 0.00ns
:33  %acc_weight_returnB_addr_13 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 %tmp_26_i

ST_41: acc_weight_returnB_load [2/2] 2.39ns
:34  %acc_weight_returnB_load = load float* %acc_weight_returnB_addr_13, align 4

ST_41: acc_weight_returnA_returnB_add_13 [1/1] 0.00ns
:37  %acc_weight_returnA_returnB_add_13 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 %tmp_26_i

ST_41: acc_weight_returnA_returnB_loa [2/2] 2.39ns
:38  %acc_weight_returnA_returnB_loa = load float* %acc_weight_returnA_returnB_add_13, align 4


 <State 42>: 9.65ns
ST_42: acc_returnA_load [1/2] 2.39ns
:14  %acc_returnA_load = load float* %acc_returnA_addr_13, align 4

ST_42: tmp_27_i [5/5] 7.26ns
:15  %tmp_27_i = fadd float %acc_returnA_load, %tmp_35

ST_42: acc_weight_returnSquareA_load [1/2] 2.39ns
:18  %acc_weight_returnSquareA_load = load float* %acc_weight_returnSquareA_addr_13, align 4

ST_42: tmp_28_i [5/5] 7.26ns
:19  %tmp_28_i = fadd float %acc_weight_returnSquareA_load, %tmp_37

ST_42: acc_weight_returnA_load [1/2] 2.39ns
:22  %acc_weight_returnA_load = load float* %acc_weight_returnA_addr_13, align 4

ST_42: tmp_29_i [5/5] 7.26ns
:23  %tmp_29_i = fadd float %acc_weight_returnA_load, %tmp_36

ST_42: acc_returnB_load [1/2] 2.39ns
:26  %acc_returnB_load = load float* %acc_returnB_addr_13, align 4

ST_42: tmp_30_i [5/5] 7.26ns
:27  %tmp_30_i = fadd float %acc_returnB_load, %tmp_38

ST_42: acc_weight_returnSquareB_load [1/2] 2.39ns
:30  %acc_weight_returnSquareB_load = load float* %acc_weight_returnSquareB_addr_13, align 4

ST_42: tmp_31_i [5/5] 7.26ns
:31  %tmp_31_i = fadd float %acc_weight_returnSquareB_load, %tmp_40

ST_42: acc_weight_returnB_load [1/2] 2.39ns
:34  %acc_weight_returnB_load = load float* %acc_weight_returnB_addr_13, align 4

ST_42: tmp_32_i [5/5] 7.26ns
:35  %tmp_32_i = fadd float %acc_weight_returnB_load, %tmp_39

ST_42: acc_weight_returnA_returnB_loa [1/2] 2.39ns
:38  %acc_weight_returnA_returnB_loa = load float* %acc_weight_returnA_returnB_add_13, align 4

ST_42: tmp_33_i [5/5] 7.26ns
:39  %tmp_33_i = fadd float %acc_weight_returnA_returnB_loa, %tmp_41


 <State 43>: 7.26ns
ST_43: tmp_27_i [4/5] 7.26ns
:15  %tmp_27_i = fadd float %acc_returnA_load, %tmp_35

ST_43: tmp_28_i [4/5] 7.26ns
:19  %tmp_28_i = fadd float %acc_weight_returnSquareA_load, %tmp_37

ST_43: tmp_29_i [4/5] 7.26ns
:23  %tmp_29_i = fadd float %acc_weight_returnA_load, %tmp_36

ST_43: tmp_30_i [4/5] 7.26ns
:27  %tmp_30_i = fadd float %acc_returnB_load, %tmp_38

ST_43: tmp_31_i [4/5] 7.26ns
:31  %tmp_31_i = fadd float %acc_weight_returnSquareB_load, %tmp_40

ST_43: tmp_32_i [4/5] 7.26ns
:35  %tmp_32_i = fadd float %acc_weight_returnB_load, %tmp_39

ST_43: tmp_33_i [4/5] 7.26ns
:39  %tmp_33_i = fadd float %acc_weight_returnA_returnB_loa, %tmp_41


 <State 44>: 7.26ns
ST_44: tmp_27_i [3/5] 7.26ns
:15  %tmp_27_i = fadd float %acc_returnA_load, %tmp_35

ST_44: tmp_28_i [3/5] 7.26ns
:19  %tmp_28_i = fadd float %acc_weight_returnSquareA_load, %tmp_37

ST_44: tmp_29_i [3/5] 7.26ns
:23  %tmp_29_i = fadd float %acc_weight_returnA_load, %tmp_36

ST_44: tmp_30_i [3/5] 7.26ns
:27  %tmp_30_i = fadd float %acc_returnB_load, %tmp_38

ST_44: tmp_31_i [3/5] 7.26ns
:31  %tmp_31_i = fadd float %acc_weight_returnSquareB_load, %tmp_40

ST_44: tmp_32_i [3/5] 7.26ns
:35  %tmp_32_i = fadd float %acc_weight_returnB_load, %tmp_39

ST_44: tmp_33_i [3/5] 7.26ns
:39  %tmp_33_i = fadd float %acc_weight_returnA_returnB_loa, %tmp_41


 <State 45>: 7.26ns
ST_45: tmp_27_i [2/5] 7.26ns
:15  %tmp_27_i = fadd float %acc_returnA_load, %tmp_35

ST_45: tmp_28_i [2/5] 7.26ns
:19  %tmp_28_i = fadd float %acc_weight_returnSquareA_load, %tmp_37

ST_45: tmp_29_i [2/5] 7.26ns
:23  %tmp_29_i = fadd float %acc_weight_returnA_load, %tmp_36

ST_45: tmp_30_i [2/5] 7.26ns
:27  %tmp_30_i = fadd float %acc_returnB_load, %tmp_38

ST_45: tmp_31_i [2/5] 7.26ns
:31  %tmp_31_i = fadd float %acc_weight_returnSquareB_load, %tmp_40

ST_45: tmp_32_i [2/5] 7.26ns
:35  %tmp_32_i = fadd float %acc_weight_returnB_load, %tmp_39

ST_45: tmp_33_i [2/5] 7.26ns
:39  %tmp_33_i = fadd float %acc_weight_returnA_returnB_loa, %tmp_41


 <State 46>: 9.65ns
ST_46: stg_284 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str7) nounwind

ST_46: tmp_17_i [1/1] 0.00ns
:1  %tmp_17_i = call i32 (...)* @_ssdm_op_SpecRegionBegin([14 x i8]* @p_str7)

ST_46: stg_286 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_46: tmp_27_i [1/5] 7.26ns
:15  %tmp_27_i = fadd float %acc_returnA_load, %tmp_35

ST_46: stg_288 [1/1] 2.39ns
:16  store float %tmp_27_i, float* %acc_returnA_addr_13, align 4

ST_46: tmp_28_i [1/5] 7.26ns
:19  %tmp_28_i = fadd float %acc_weight_returnSquareA_load, %tmp_37

ST_46: stg_290 [1/1] 2.39ns
:20  store float %tmp_28_i, float* %acc_weight_returnSquareA_addr_13, align 4

ST_46: tmp_29_i [1/5] 7.26ns
:23  %tmp_29_i = fadd float %acc_weight_returnA_load, %tmp_36

ST_46: stg_292 [1/1] 2.39ns
:24  store float %tmp_29_i, float* %acc_weight_returnA_addr_13, align 4

ST_46: tmp_30_i [1/5] 7.26ns
:27  %tmp_30_i = fadd float %acc_returnB_load, %tmp_38

ST_46: stg_294 [1/1] 2.39ns
:28  store float %tmp_30_i, float* %acc_returnB_addr_13, align 4

ST_46: tmp_31_i [1/5] 7.26ns
:31  %tmp_31_i = fadd float %acc_weight_returnSquareB_load, %tmp_40

ST_46: stg_296 [1/1] 2.39ns
:32  store float %tmp_31_i, float* %acc_weight_returnSquareB_addr_13, align 4

ST_46: tmp_32_i [1/5] 7.26ns
:35  %tmp_32_i = fadd float %acc_weight_returnB_load, %tmp_39

ST_46: stg_298 [1/1] 2.39ns
:36  store float %tmp_32_i, float* %acc_weight_returnB_addr_13, align 4

ST_46: tmp_33_i [1/5] 7.26ns
:39  %tmp_33_i = fadd float %acc_weight_returnA_returnB_loa, %tmp_41

ST_46: stg_300 [1/1] 2.39ns
:40  store float %tmp_33_i, float* %acc_weight_returnA_returnB_add_13, align 4

ST_46: empty [1/1] 0.00ns
:41  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([14 x i8]* @p_str7, i32 %tmp_17_i)

ST_46: stg_302 [1/1] 0.00ns
:43  br label %.preheader33.i


 <State 47>: 2.39ns
ST_47: tmp_11 [1/1] 0.00ns
.preheader.i:0  %tmp_11 = phi float [ %sum_weight_returnA_returnB, %2 ], [ 0.000000e+00, %.preheader33.i ]

ST_47: tmp_12 [1/1] 0.00ns
.preheader.i:1  %tmp_12 = phi float [ %sum_weight_returnB, %2 ], [ 0.000000e+00, %.preheader33.i ]

ST_47: tmp_13 [1/1] 0.00ns
.preheader.i:2  %tmp_13 = phi float [ %sum_weight_returnSquareB, %2 ], [ 0.000000e+00, %.preheader33.i ]

ST_47: tmp_14 [1/1] 0.00ns
.preheader.i:3  %tmp_14 = phi float [ %sum_returnB, %2 ], [ 0.000000e+00, %.preheader33.i ]

ST_47: tmp_15 [1/1] 0.00ns
.preheader.i:4  %tmp_15 = phi float [ %sum_weight_returnA, %2 ], [ 0.000000e+00, %.preheader33.i ]

ST_47: tmp_16 [1/1] 0.00ns
.preheader.i:5  %tmp_16 = phi float [ %sum_weight_returnSquareA, %2 ], [ 0.000000e+00, %.preheader33.i ]

ST_47: tmp_17 [1/1] 0.00ns
.preheader.i:6  %tmp_17 = phi float [ %sum_returnA, %2 ], [ 0.000000e+00, %.preheader33.i ]

ST_47: i2_i [1/1] 0.00ns
.preheader.i:7  %i2_i = phi i3 [ %i_2, %2 ], [ 0, %.preheader33.i ]

ST_47: exitcond_i [1/1] 1.62ns
.preheader.i:8  %exitcond_i = icmp eq i3 %i2_i, -2

ST_47: i_2 [1/1] 0.80ns
.preheader.i:9  %i_2 = add i3 %i2_i, 1

ST_47: stg_313 [1/1] 0.00ns
.preheader.i:10  br i1 %exitcond_i, label %3, label %2

ST_47: tmp_43_i [1/1] 0.00ns
:4  %tmp_43_i = zext i3 %i2_i to i64

ST_47: acc_returnA_addr_14 [1/1] 0.00ns
:5  %acc_returnA_addr_14 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 %tmp_43_i

ST_47: acc_returnA_load_2 [2/2] 2.39ns
:6  %acc_returnA_load_2 = load float* %acc_returnA_addr_14, align 4

ST_47: acc_weight_returnSquareA_addr_14 [1/1] 0.00ns
:8  %acc_weight_returnSquareA_addr_14 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 %tmp_43_i

ST_47: acc_weight_returnSquareA_load_2 [2/2] 2.39ns
:9  %acc_weight_returnSquareA_load_2 = load float* %acc_weight_returnSquareA_addr_14, align 4


 <State 48>: 2.39ns
ST_48: acc_returnA_load_2 [1/2] 2.39ns
:6  %acc_returnA_load_2 = load float* %acc_returnA_addr_14, align 4

ST_48: acc_weight_returnSquareA_load_2 [1/2] 2.39ns
:9  %acc_weight_returnSquareA_load_2 = load float* %acc_weight_returnSquareA_addr_14, align 4

ST_48: acc_weight_returnA_addr_14 [1/1] 0.00ns
:11  %acc_weight_returnA_addr_14 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 %tmp_43_i

ST_48: acc_weight_returnA_load_2 [2/2] 2.39ns
:12  %acc_weight_returnA_load_2 = load float* %acc_weight_returnA_addr_14, align 4

ST_48: acc_returnB_addr_14 [1/1] 0.00ns
:14  %acc_returnB_addr_14 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 %tmp_43_i

ST_48: acc_returnB_load_2 [2/2] 2.39ns
:15  %acc_returnB_load_2 = load float* %acc_returnB_addr_14, align 4


 <State 49>: 7.26ns
ST_49: sum_returnA [5/5] 7.26ns
:7  %sum_returnA = fadd float %tmp_17, %acc_returnA_load_2

ST_49: sum_weight_returnSquareA [5/5] 7.26ns
:10  %sum_weight_returnSquareA = fadd float %tmp_16, %acc_weight_returnSquareA_load_2

ST_49: acc_weight_returnA_load_2 [1/2] 2.39ns
:12  %acc_weight_returnA_load_2 = load float* %acc_weight_returnA_addr_14, align 4

ST_49: acc_returnB_load_2 [1/2] 2.39ns
:15  %acc_returnB_load_2 = load float* %acc_returnB_addr_14, align 4

ST_49: acc_weight_returnSquareB_addr_14 [1/1] 0.00ns
:17  %acc_weight_returnSquareB_addr_14 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 %tmp_43_i

ST_49: acc_weight_returnSquareB_load_2 [2/2] 2.39ns
:18  %acc_weight_returnSquareB_load_2 = load float* %acc_weight_returnSquareB_addr_14, align 4

ST_49: acc_weight_returnB_addr_14 [1/1] 0.00ns
:20  %acc_weight_returnB_addr_14 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 %tmp_43_i

ST_49: acc_weight_returnB_load_2 [2/2] 2.39ns
:21  %acc_weight_returnB_load_2 = load float* %acc_weight_returnB_addr_14, align 4

ST_49: acc_weight_returnA_returnB_add_14 [1/1] 0.00ns
:23  %acc_weight_returnA_returnB_add_14 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 %tmp_43_i

ST_49: acc_weight_returnA_returnB_loa_2 [2/2] 2.39ns
:24  %acc_weight_returnA_returnB_loa_2 = load float* %acc_weight_returnA_returnB_add_14, align 4


 <State 50>: 7.26ns
ST_50: sum_returnA [4/5] 7.26ns
:7  %sum_returnA = fadd float %tmp_17, %acc_returnA_load_2

ST_50: sum_weight_returnSquareA [4/5] 7.26ns
:10  %sum_weight_returnSquareA = fadd float %tmp_16, %acc_weight_returnSquareA_load_2

ST_50: sum_weight_returnA [5/5] 7.26ns
:13  %sum_weight_returnA = fadd float %tmp_15, %acc_weight_returnA_load_2

ST_50: sum_returnB [5/5] 7.26ns
:16  %sum_returnB = fadd float %tmp_14, %acc_returnB_load_2

ST_50: acc_weight_returnSquareB_load_2 [1/2] 2.39ns
:18  %acc_weight_returnSquareB_load_2 = load float* %acc_weight_returnSquareB_addr_14, align 4

ST_50: acc_weight_returnB_load_2 [1/2] 2.39ns
:21  %acc_weight_returnB_load_2 = load float* %acc_weight_returnB_addr_14, align 4

ST_50: acc_weight_returnA_returnB_loa_2 [1/2] 2.39ns
:24  %acc_weight_returnA_returnB_loa_2 = load float* %acc_weight_returnA_returnB_add_14, align 4


 <State 51>: 7.26ns
ST_51: sum_returnA [3/5] 7.26ns
:7  %sum_returnA = fadd float %tmp_17, %acc_returnA_load_2

ST_51: sum_weight_returnSquareA [3/5] 7.26ns
:10  %sum_weight_returnSquareA = fadd float %tmp_16, %acc_weight_returnSquareA_load_2

ST_51: sum_weight_returnA [4/5] 7.26ns
:13  %sum_weight_returnA = fadd float %tmp_15, %acc_weight_returnA_load_2

ST_51: sum_returnB [4/5] 7.26ns
:16  %sum_returnB = fadd float %tmp_14, %acc_returnB_load_2

ST_51: sum_weight_returnSquareB [5/5] 7.26ns
:19  %sum_weight_returnSquareB = fadd float %tmp_13, %acc_weight_returnSquareB_load_2

ST_51: sum_weight_returnB [5/5] 7.26ns
:22  %sum_weight_returnB = fadd float %tmp_12, %acc_weight_returnB_load_2


 <State 52>: 7.26ns
ST_52: sum_returnA [2/5] 7.26ns
:7  %sum_returnA = fadd float %tmp_17, %acc_returnA_load_2

ST_52: sum_weight_returnSquareA [2/5] 7.26ns
:10  %sum_weight_returnSquareA = fadd float %tmp_16, %acc_weight_returnSquareA_load_2

ST_52: sum_weight_returnA [3/5] 7.26ns
:13  %sum_weight_returnA = fadd float %tmp_15, %acc_weight_returnA_load_2

ST_52: sum_returnB [3/5] 7.26ns
:16  %sum_returnB = fadd float %tmp_14, %acc_returnB_load_2

ST_52: sum_weight_returnSquareB [4/5] 7.26ns
:19  %sum_weight_returnSquareB = fadd float %tmp_13, %acc_weight_returnSquareB_load_2

ST_52: sum_weight_returnB [4/5] 7.26ns
:22  %sum_weight_returnB = fadd float %tmp_12, %acc_weight_returnB_load_2

ST_52: sum_weight_returnA_returnB [5/5] 7.26ns
:25  %sum_weight_returnA_returnB = fadd float %tmp_11, %acc_weight_returnA_returnB_loa_2


 <State 53>: 7.26ns
ST_53: sum_returnA [1/5] 7.26ns
:7  %sum_returnA = fadd float %tmp_17, %acc_returnA_load_2

ST_53: sum_weight_returnSquareA [1/5] 7.26ns
:10  %sum_weight_returnSquareA = fadd float %tmp_16, %acc_weight_returnSquareA_load_2

ST_53: sum_weight_returnA [2/5] 7.26ns
:13  %sum_weight_returnA = fadd float %tmp_15, %acc_weight_returnA_load_2

ST_53: sum_returnB [2/5] 7.26ns
:16  %sum_returnB = fadd float %tmp_14, %acc_returnB_load_2

ST_53: sum_weight_returnSquareB [3/5] 7.26ns
:19  %sum_weight_returnSquareB = fadd float %tmp_13, %acc_weight_returnSquareB_load_2

ST_53: sum_weight_returnB [3/5] 7.26ns
:22  %sum_weight_returnB = fadd float %tmp_12, %acc_weight_returnB_load_2

ST_53: sum_weight_returnA_returnB [4/5] 7.26ns
:25  %sum_weight_returnA_returnB = fadd float %tmp_11, %acc_weight_returnA_returnB_loa_2


 <State 54>: 7.26ns
ST_54: sum_weight_returnA [1/5] 7.26ns
:13  %sum_weight_returnA = fadd float %tmp_15, %acc_weight_returnA_load_2

ST_54: sum_returnB [1/5] 7.26ns
:16  %sum_returnB = fadd float %tmp_14, %acc_returnB_load_2

ST_54: sum_weight_returnSquareB [2/5] 7.26ns
:19  %sum_weight_returnSquareB = fadd float %tmp_13, %acc_weight_returnSquareB_load_2

ST_54: sum_weight_returnB [2/5] 7.26ns
:22  %sum_weight_returnB = fadd float %tmp_12, %acc_weight_returnB_load_2

ST_54: sum_weight_returnA_returnB [3/5] 7.26ns
:25  %sum_weight_returnA_returnB = fadd float %tmp_11, %acc_weight_returnA_returnB_loa_2


 <State 55>: 7.26ns
ST_55: sum_weight_returnSquareB [1/5] 7.26ns
:19  %sum_weight_returnSquareB = fadd float %tmp_13, %acc_weight_returnSquareB_load_2

ST_55: sum_weight_returnB [1/5] 7.26ns
:22  %sum_weight_returnB = fadd float %tmp_12, %acc_weight_returnB_load_2

ST_55: sum_weight_returnA_returnB [2/5] 7.26ns
:25  %sum_weight_returnA_returnB = fadd float %tmp_11, %acc_weight_returnA_returnB_loa_2


 <State 56>: 7.26ns
ST_56: empty_10 [1/1] 0.00ns
:0  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 6, i64 6, i64 6)

ST_56: stg_371 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([16 x i8]* @p_str8) nounwind

ST_56: tmp_42_i [1/1] 0.00ns
:2  %tmp_42_i = call i32 (...)* @_ssdm_op_SpecRegionBegin([16 x i8]* @p_str8)

ST_56: stg_373 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 5, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_56: sum_weight_returnA_returnB [1/5] 7.26ns
:25  %sum_weight_returnA_returnB = fadd float %tmp_11, %acc_weight_returnA_returnB_loa_2

ST_56: empty_11 [1/1] 0.00ns
:26  %empty_11 = call i32 (...)* @_ssdm_op_SpecRegionEnd([16 x i8]* @p_str8, i32 %tmp_42_i)

ST_56: stg_376 [1/1] 0.00ns
:27  br label %.preheader.i


 <State 57>: 2.44ns
ST_57: stg_377 [1/1] 1.86ns
:0  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_weight_out_V, float %tmp_10)

ST_57: stg_378 [1/1] 1.86ns
:1  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_return_out_V, float %tmp_14)

ST_57: stg_379 [1/1] 1.86ns
:2  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_weight_returnSquare_out_V, float %tmp_13)

ST_57: stg_380 [1/1] 1.86ns
:3  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_weight_return_out_V, float %tmp_12)

ST_57: stg_381 [1/1] 1.86ns
:4  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_weight_returnA_returnB_out, float %tmp_11)

ST_57: stg_382 [1/1] 1.86ns
:5  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_returnA_out_V, float %tmp_17)

ST_57: stg_383 [1/1] 1.86ns
:6  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_weight_returnSquareA_out_V, float %tmp_16)

ST_57: stg_384 [1/1] 1.86ns
:7  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_weight_returnA_out_V, float %tmp_15)

ST_57: column_index [1/1] 2.44ns
:8  %column_index = add nsw i32 %column_index_i, 1

ST_57: stg_386 [1/1] 0.00ns
:9  br label %0



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
