-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlation_accel_v3_frontEnd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NUMBER_OF_DAYS : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES : IN STD_LOGIC_VECTOR (31 downto 0);
    in_indices_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_indices_TVALID : IN STD_LOGIC;
    in_indices_TREADY : OUT STD_LOGIC;
    in_indices_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_indices_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_indices_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_indices_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_indices_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_indices_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    sum_weight_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_out_V_full_n : IN STD_LOGIC;
    sum_weight_out_V_write : OUT STD_LOGIC;
    sum_return_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_return_out_V_full_n : IN STD_LOGIC;
    sum_return_out_V_write : OUT STD_LOGIC;
    sum_weight_returnSquare_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquare_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnSquare_out_V_write : OUT STD_LOGIC;
    sum_weight_return_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_return_out_V_full_n : IN STD_LOGIC;
    sum_weight_return_out_V_write : OUT STD_LOGIC;
    sum_weight_returnA_returnB_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_returnB_out_full_n : IN STD_LOGIC;
    sum_weight_returnA_returnB_out_write : OUT STD_LOGIC;
    sum_returnA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_returnA_out_V_full_n : IN STD_LOGIC;
    sum_returnA_out_V_write : OUT STD_LOGIC;
    sum_weight_returnSquareA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquareA_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnSquareA_out_V_write : OUT STD_LOGIC;
    sum_weight_returnA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnA_out_V_write : OUT STD_LOGIC;
    NUMBER_OF_DAYS_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_DAYS_out_full_n : IN STD_LOGIC;
    NUMBER_OF_DAYS_out_write : OUT STD_LOGIC;
    NUMBER_OF_INDICES_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES_out_full_n : IN STD_LOGIC;
    NUMBER_OF_INDICES_out_write : OUT STD_LOGIC );
end;


architecture behav of correlation_accel_v3_frontEnd is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_pp0_stg0_fsm_16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_pp1_stg0_fsm_17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_pp1_stg1_fsm_18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_pp1_stg2_fsm_19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_pp1_stg3_fsm_20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_pp1_stg4_fsm_21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_st69_fsm_22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_st70_fsm_23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_st71_fsm_24 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_st72_fsm_25 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_pp2_stg0_fsm_26 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_27 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_pp3_stg1_fsm_28 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_pp3_stg2_fsm_29 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_pp3_stg3_fsm_30 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_pp3_stg4_fsm_31 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_st126_fsm_32 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F70A3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011100001010001111010111";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_52 : BOOLEAN;
    signal weight_rom_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_rom_ce0 : STD_LOGIC;
    signal weight_rom_we0 : STD_LOGIC;
    signal weight_rom_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_rom_ce1 : STD_LOGIC;
    signal weight_rom_we1 : STD_LOGIC;
    signal weight_rom_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnA_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lnReturnA_ce0 : STD_LOGIC;
    signal lnReturnA_we0 : STD_LOGIC;
    signal lnReturnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_147 : BOOLEAN;
    signal tmp_6_i_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_154 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it40 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it41 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it42 : STD_LOGIC := '0';
    signal tmp_9_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_reg_842 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_i_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_i_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_295 : BOOLEAN;
    signal tmp_31_i_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_300 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it40 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it41 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it42 : STD_LOGIC := '0';
    signal tmp_8_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal i8_i_reg_938 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_987_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_440 : BOOLEAN;
    signal tmp_6_i_reg_1545 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_i_reg_1669 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_465 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_472 : BOOLEAN;
    signal reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it21 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it22 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it23 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it24 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it25 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it26 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it27 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it28 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it29 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it30 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp0_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it21 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it22 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it23 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it24 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it25 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it26 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it27 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it28 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it29 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it30 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1063_pp2_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_560 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg1_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_567 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond2_i_reg_1594 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg1_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_584 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal exitcond_i_reg_1743 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1009_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1080 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1013_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_reg_1085_pp0_it30 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp0_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp0_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp0_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp0_it34 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp0_it35 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp2_it30 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp2_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp2_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp2_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp2_it34 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1085_pp2_it35 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_993_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_return_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_return_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_weight_return_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg2_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_708 : BOOLEAN;
    signal acc_weight_return_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg3_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_721 : BOOLEAN;
    signal grp_fu_997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_weight_returnSquare_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1122 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_weight_returnSquare_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg2_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_765 : BOOLEAN;
    signal reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg3_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_781 : BOOLEAN;
    signal acc_weight_returnA_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_805 : BOOLEAN;
    signal i_fu_1158_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_817 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_826 : BOOLEAN;
    signal tmp_69_i_i_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_1178_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_1439 : STD_LOGIC_VECTOR (30 downto 0);
    signal acc_return_addr_gep_fu_381_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_reg_1444 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_gep_fu_394_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_reg_1449 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_gep_fu_407_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_reg_1454 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_1_gep_fu_420_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_1_reg_1459 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_1_gep_fu_432_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_1_reg_1464 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_1_gep_fu_444_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_1_reg_1469 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_2_gep_fu_457_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_2_reg_1474 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_854 : BOOLEAN;
    signal acc_weight_returnSquare_addr_2_gep_fu_465_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_2_reg_1479 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_2_gep_fu_473_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_2_reg_1484 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_3_gep_fu_481_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_3_reg_1489 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_3_gep_fu_489_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_3_reg_1494 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_3_gep_fu_497_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_3_reg_1499 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_4_gep_fu_505_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_4_reg_1504 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_4_gep_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_4_reg_1509 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_4_gep_fu_521_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_4_reg_1514 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_5_gep_fu_529_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_5_reg_1519 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_5_gep_fu_537_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_5_reg_1524 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_5_gep_fu_545_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_5_reg_1529 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_fu_1184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_1188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_1539 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it40 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it41 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1198_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_reg_1549 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it5 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it6 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it7 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it8 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it9 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it11 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it12 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it13 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it14 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it15 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it16 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it17 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it18 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it19 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it21 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it22 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it23 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it24 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it25 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it26 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it27 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it28 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1549_pp0_it29 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_i_tmp_4_i_fu_1208_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_tmp_4_i_reg_1554 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_fu_1216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_reg_1560 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_1231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_1571 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_return_addr_7_reg_1576 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_7_reg_1582 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it40 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it41 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_7_reg_1588 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_i_fu_1254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_1022 : BOOLEAN;
    signal i_2_fu_1260_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1598 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_i_fu_1266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_i_reg_1603 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_weight_returnA_returnB_add_gep_fu_614_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_reg_1631 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st69_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_1045 : BOOLEAN;
    signal acc_weight_returnA_returnB_add_1_gep_fu_621_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_1_reg_1636 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_gep_fu_628_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_reg_1641 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_gep_fu_635_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_reg_1646 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_gep_fu_642_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_reg_1651 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_gep_fu_649_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_reg_1656 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_28_i_fu_1285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st72_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_1064 : BOOLEAN;
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it40 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_1297_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_reg_1673 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it5 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it6 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it7 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it8 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it9 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it11 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it12 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it13 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it14 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it15 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it16 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it17 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it18 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it19 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it21 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it22 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it23 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it24 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it25 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it26 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1673_pp2_it27 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_i_shift_reg_load_i_fu_1307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_shift_reg_load_i_reg_1678 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_fu_1315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_reg_1684 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_1330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnA_load_reg_1704 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_return_addr_9_reg_1709 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_9_reg_1715 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it40 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it41 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_9_reg_1721 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_6_reg_1727 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it40 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it41 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1001_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_i_reg_1733 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1005_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_i_reg_1738 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_1240 : BOOLEAN;
    signal i_4_fu_1365_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_1747 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_22_fu_1371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_22_reg_1752 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp3_stg4_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_1264 : BOOLEAN;
    signal column_index_fu_1376_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st126_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_1275 : BOOLEAN;
    signal ap_sig_bdd_1292 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg4_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_1306 : BOOLEAN;
    signal acc_return_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_ce0 : STD_LOGIC;
    signal acc_return_we0 : STD_LOGIC;
    signal acc_return_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_return_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_ce1 : STD_LOGIC;
    signal acc_return_we1 : STD_LOGIC;
    signal acc_return_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquare_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_ce0 : STD_LOGIC;
    signal acc_weight_returnSquare_we0 : STD_LOGIC;
    signal acc_weight_returnSquare_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquare_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_ce1 : STD_LOGIC;
    signal acc_weight_returnSquare_we1 : STD_LOGIC;
    signal acc_weight_returnSquare_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_return_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_ce0 : STD_LOGIC;
    signal acc_weight_return_we0 : STD_LOGIC;
    signal acc_weight_return_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_return_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_ce1 : STD_LOGIC;
    signal acc_weight_return_we1 : STD_LOGIC;
    signal acc_weight_return_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_i_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal i1_i_i_reg_759 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_1385 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_1393 : BOOLEAN;
    signal exitcond_i_i_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_phi_fu_774_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_phi_fu_785_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_phi_fu_795_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_phi_fu_821_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_phi_fu_834_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_phi_fu_846_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal column_index_i_reg_853 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_i_phi_fu_868_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_i_phi_fu_878_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_phi_fu_904_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_phi_fu_917_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_phi_fu_930_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i8_i_phi_fu_942_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_i_i_fu_1153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_i_i_fu_1173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_i_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_i_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_i_fu_1247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_i_fu_1319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_i_fu_1346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_i_fu_1351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shift_reg_load1_i_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st70_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_1511 : BOOLEAN;
    signal tmp_26_i_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st71_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_1524 : BOOLEAN;
    signal grp_fu_962_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_950_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_1635 : BOOLEAN;
    signal grp_fu_956_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_962_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_977_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_977_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_987_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_987_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_993_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_997_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_997_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1001_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1005_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1009_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1009_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1013_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_cast_i_fu_1164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1225_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1225_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_i_fu_1237_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_cast_i_fu_1276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1324_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1324_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_64_i_fu_1341_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_950_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_1770 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_1778 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_1786 : BOOLEAN;
    signal grp_fu_956_ce : STD_LOGIC;
    signal grp_fu_962_ce : STD_LOGIC;
    signal grp_fu_977_ce : STD_LOGIC;
    signal grp_fu_987_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_1854 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_1862 : BOOLEAN;
    signal grp_fu_993_ce : STD_LOGIC;
    signal grp_fu_997_ce : STD_LOGIC;
    signal grp_fu_1001_ce : STD_LOGIC;
    signal grp_fu_1005_ce : STD_LOGIC;
    signal grp_fu_1009_ce : STD_LOGIC;
    signal grp_fu_1013_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1013_ce : STD_LOGIC;
    signal grp_fu_1225_ce : STD_LOGIC;
    signal grp_fu_1324_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_flog_32ns_32ns_32_13_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_urem_32ns_4ns_32_36 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_frontEnd_weight_rom IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_frontEnd_lnReturnA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_frontEnd_acc_return IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_frontEnd_acc_weight_returnA_returnB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    weight_rom_U : component correlation_accel_v3_frontEnd_weight_rom
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_rom_address0,
        ce0 => weight_rom_ce0,
        we0 => weight_rom_we0,
        d0 => weight_rom_d0,
        q0 => weight_rom_q0,
        address1 => weight_rom_address1,
        ce1 => weight_rom_ce1,
        we1 => weight_rom_we1,
        d1 => weight_rom_d1,
        q1 => weight_rom_q1);

    lnReturnA_U : component correlation_accel_v3_frontEnd_lnReturnA
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lnReturnA_address0,
        ce0 => lnReturnA_ce0,
        we0 => lnReturnA_we0,
        d0 => lnReturnA_d0,
        q0 => lnReturnA_q0);

    acc_return_U : component correlation_accel_v3_frontEnd_acc_return
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_return_address0,
        ce0 => acc_return_ce0,
        we0 => acc_return_we0,
        d0 => acc_return_d0,
        q0 => acc_return_q0,
        address1 => acc_return_address1,
        ce1 => acc_return_ce1,
        we1 => acc_return_we1,
        d1 => acc_return_d1,
        q1 => acc_return_q1);

    acc_weight_returnSquare_U : component correlation_accel_v3_frontEnd_acc_return
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnSquare_address0,
        ce0 => acc_weight_returnSquare_ce0,
        we0 => acc_weight_returnSquare_we0,
        d0 => acc_weight_returnSquare_d0,
        q0 => acc_weight_returnSquare_q0,
        address1 => acc_weight_returnSquare_address1,
        ce1 => acc_weight_returnSquare_ce1,
        we1 => acc_weight_returnSquare_we1,
        d1 => acc_weight_returnSquare_d1,
        q1 => acc_weight_returnSquare_q1);

    acc_weight_return_U : component correlation_accel_v3_frontEnd_acc_return
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_return_address0,
        ce0 => acc_weight_return_ce0,
        we0 => acc_weight_return_we0,
        d0 => acc_weight_return_d0,
        q0 => acc_weight_return_q0,
        address1 => acc_weight_return_address1,
        ce1 => acc_weight_return_ce1,
        we1 => acc_weight_return_we1,
        d1 => acc_weight_return_d1,
        q1 => acc_weight_return_q1);

    acc_weight_returnA_returnB_U : component correlation_accel_v3_frontEnd_acc_weight_returnA_returnB
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnA_returnB_address0,
        ce0 => acc_weight_returnA_returnB_ce0,
        we0 => acc_weight_returnA_returnB_we0,
        d0 => acc_weight_returnA_returnB_d0,
        q0 => acc_weight_returnA_returnB_q0,
        address1 => acc_weight_returnA_returnB_address1,
        ce1 => acc_weight_returnA_returnB_ce1,
        we1 => acc_weight_returnA_returnB_we1,
        d1 => acc_weight_returnA_returnB_d1);

    correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp_U1 : component correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_950_p0,
        din1 => grp_fu_950_p1,
        ce => grp_fu_950_ce,
        dout => grp_fu_950_p2);

    correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp_U2 : component correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_956_p0,
        din1 => grp_fu_956_p1,
        ce => grp_fu_956_ce,
        dout => grp_fu_956_p2);

    correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp_U3 : component correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_962_p0,
        din1 => grp_fu_962_p1,
        ce => grp_fu_962_ce,
        dout => grp_fu_962_p2);

    correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp_U4 : component correlation_accel_v3_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_977_p0,
        din1 => grp_fu_977_p1,
        ce => grp_fu_977_ce,
        dout => grp_fu_977_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp_U5 : component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_987_p0,
        din1 => grp_fu_987_p1,
        ce => grp_fu_987_ce,
        dout => grp_fu_987_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp_U6 : component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_993_p0,
        din1 => grp_fu_993_p1,
        ce => grp_fu_993_ce,
        dout => grp_fu_993_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp_U7 : component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_997_p0,
        din1 => grp_fu_997_p1,
        ce => grp_fu_997_ce,
        dout => grp_fu_997_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp_U8 : component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1001_p0,
        din1 => grp_fu_1001_p1,
        ce => grp_fu_1001_ce,
        dout => grp_fu_1001_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp_U9 : component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1005_p0,
        din1 => grp_fu_1005_p1,
        ce => grp_fu_1005_ce,
        dout => grp_fu_1005_p2);

    correlation_accel_v3_fdiv_32ns_32ns_32_16_U10 : component correlation_accel_v3_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1009_p0,
        din1 => grp_fu_1009_p1,
        ce => grp_fu_1009_ce,
        dout => grp_fu_1009_p2);

    correlation_accel_v3_flog_32ns_32ns_32_13_full_dsp_U11 : component correlation_accel_v3_flog_32ns_32ns_32_13_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1013_p0,
        din1 => grp_fu_1013_p1,
        ce => grp_fu_1013_ce,
        dout => grp_fu_1013_p2);

    correlation_accel_v3_urem_32ns_4ns_32_36_U12 : component correlation_accel_v3_urem_32ns_4ns_32_36
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1225_p0,
        din1 => grp_fu_1225_p1,
        ce => grp_fu_1225_ce,
        dout => grp_fu_1225_p2);

    correlation_accel_v3_urem_32ns_4ns_32_36_U13 : component correlation_accel_v3_urem_32ns_4ns_32_36
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1324_p0,
        din1 => grp_fu_1324_p1,
        ce => grp_fu_1324_ce,
        dout => grp_fu_1324_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and (ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (tmp_6_i_fu_1193_p2 = ap_const_lv1_0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it26 assign process. --
    ap_reg_ppiten_pp0_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it27 assign process. --
    ap_reg_ppiten_pp0_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it28 assign process. --
    ap_reg_ppiten_pp0_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it29 assign process. --
    ap_reg_ppiten_pp0_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it30 assign process. --
    ap_reg_ppiten_pp0_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it31 assign process. --
    ap_reg_ppiten_pp0_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it32 assign process. --
    ap_reg_ppiten_pp0_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it33 assign process. --
    ap_reg_ppiten_pp0_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it34 assign process. --
    ap_reg_ppiten_pp0_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it35 assign process. --
    ap_reg_ppiten_pp0_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it35 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it35 <= ap_reg_ppiten_pp0_it34;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it36 assign process. --
    ap_reg_ppiten_pp0_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it36 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it36 <= ap_reg_ppiten_pp0_it35;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it37 assign process. --
    ap_reg_ppiten_pp0_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it37 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it37 <= ap_reg_ppiten_pp0_it36;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it38 assign process. --
    ap_reg_ppiten_pp0_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it38 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it38 <= ap_reg_ppiten_pp0_it37;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it39 assign process. --
    ap_reg_ppiten_pp0_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it39 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it39 <= ap_reg_ppiten_pp0_it38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it40 assign process. --
    ap_reg_ppiten_pp0_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it40 <= ap_reg_ppiten_pp0_it39;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it41 assign process. --
    ap_reg_ppiten_pp0_it41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it41 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it41 <= ap_reg_ppiten_pp0_it40;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it42 assign process. --
    ap_reg_ppiten_pp0_it42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it42 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it42 <= ap_reg_ppiten_pp0_it41;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it42 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17) and not((ap_const_lv1_0 = exitcond2_i_fu_1254_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond2_i_reg_1594) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_21))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_21) and not((ap_const_lv1_0 = exitcond2_i_reg_1594))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_lv1_0 = tmp_31_i_fu_1289_p2) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it10 assign process. --
    ap_reg_ppiten_pp2_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it10 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it10 <= ap_reg_ppiten_pp2_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it11 assign process. --
    ap_reg_ppiten_pp2_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it11 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it11 <= ap_reg_ppiten_pp2_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it12 assign process. --
    ap_reg_ppiten_pp2_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it12 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it12 <= ap_reg_ppiten_pp2_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it13 assign process. --
    ap_reg_ppiten_pp2_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it13 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it13 <= ap_reg_ppiten_pp2_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it14 assign process. --
    ap_reg_ppiten_pp2_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it14 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it14 <= ap_reg_ppiten_pp2_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it15 assign process. --
    ap_reg_ppiten_pp2_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it15 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it15 <= ap_reg_ppiten_pp2_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it16 assign process. --
    ap_reg_ppiten_pp2_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it16 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it16 <= ap_reg_ppiten_pp2_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it17 assign process. --
    ap_reg_ppiten_pp2_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it17 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it17 <= ap_reg_ppiten_pp2_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it18 assign process. --
    ap_reg_ppiten_pp2_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it18 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it18 <= ap_reg_ppiten_pp2_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it19 assign process. --
    ap_reg_ppiten_pp2_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it19 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it19 <= ap_reg_ppiten_pp2_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it20 assign process. --
    ap_reg_ppiten_pp2_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it20 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it20 <= ap_reg_ppiten_pp2_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it21 assign process. --
    ap_reg_ppiten_pp2_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it21 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it21 <= ap_reg_ppiten_pp2_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it22 assign process. --
    ap_reg_ppiten_pp2_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it22 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it22 <= ap_reg_ppiten_pp2_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it23 assign process. --
    ap_reg_ppiten_pp2_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it23 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it23 <= ap_reg_ppiten_pp2_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it24 assign process. --
    ap_reg_ppiten_pp2_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it24 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it24 <= ap_reg_ppiten_pp2_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it25 assign process. --
    ap_reg_ppiten_pp2_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it25 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it25 <= ap_reg_ppiten_pp2_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it26 assign process. --
    ap_reg_ppiten_pp2_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it26 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it26 <= ap_reg_ppiten_pp2_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it27 assign process. --
    ap_reg_ppiten_pp2_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it27 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it27 <= ap_reg_ppiten_pp2_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it28 assign process. --
    ap_reg_ppiten_pp2_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it28 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it28 <= ap_reg_ppiten_pp2_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it29 assign process. --
    ap_reg_ppiten_pp2_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it29 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it29 <= ap_reg_ppiten_pp2_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it30 assign process. --
    ap_reg_ppiten_pp2_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it30 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it30 <= ap_reg_ppiten_pp2_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it31 assign process. --
    ap_reg_ppiten_pp2_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it31 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it31 <= ap_reg_ppiten_pp2_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it32 assign process. --
    ap_reg_ppiten_pp2_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it32 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it32 <= ap_reg_ppiten_pp2_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it33 assign process. --
    ap_reg_ppiten_pp2_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it33 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it33 <= ap_reg_ppiten_pp2_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it34 assign process. --
    ap_reg_ppiten_pp2_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it34 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it34 <= ap_reg_ppiten_pp2_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it35 assign process. --
    ap_reg_ppiten_pp2_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it35 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it35 <= ap_reg_ppiten_pp2_it34;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it36 assign process. --
    ap_reg_ppiten_pp2_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it36 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it36 <= ap_reg_ppiten_pp2_it35;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it37 assign process. --
    ap_reg_ppiten_pp2_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it37 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it37 <= ap_reg_ppiten_pp2_it36;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it38 assign process. --
    ap_reg_ppiten_pp2_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it38 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it38 <= ap_reg_ppiten_pp2_it37;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it39 assign process. --
    ap_reg_ppiten_pp2_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it39 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it39 <= ap_reg_ppiten_pp2_it38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it4 assign process. --
    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it40 assign process. --
    ap_reg_ppiten_pp2_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it40 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it40 <= ap_reg_ppiten_pp2_it39;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it41 assign process. --
    ap_reg_ppiten_pp2_it41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it41 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it41 <= ap_reg_ppiten_pp2_it40;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it42 assign process. --
    ap_reg_ppiten_pp2_it42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it42 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it42 <= ap_reg_ppiten_pp2_it41;
                elsif ((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25))) then 
                    ap_reg_ppiten_pp2_it42 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it5 assign process. --
    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it6 assign process. --
    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it7 assign process. --
    ap_reg_ppiten_pp2_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it7 <= ap_reg_ppiten_pp2_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it8 assign process. --
    ap_reg_ppiten_pp2_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it8 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it8 <= ap_reg_ppiten_pp2_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it9 assign process. --
    ap_reg_ppiten_pp2_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it9 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
                    ap_reg_ppiten_pp2_it9 <= ap_reg_ppiten_pp2_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27) and not((ap_const_lv1_0 = exitcond_i_fu_1359_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_i_reg_1743) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31) and not((ap_const_lv1_0 = exitcond_i_reg_1743))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- column_index_i_reg_853 assign process. --
    column_index_i_reg_853_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_22)) then 
                column_index_i_reg_853 <= ap_const_lv31_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
                column_index_i_reg_853 <= column_index_fu_1376_p2;
            end if; 
        end if;
    end process;

    -- i1_i_i_reg_759 assign process. --
    i1_i_i_reg_759_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_i_i_fu_1147_p2)))) then 
                i1_i_i_reg_759 <= ap_const_lv31_2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                i1_i_i_reg_759 <= i_1_reg_1439;
            end if; 
        end if;
    end process;

    -- i1_i_reg_791 assign process. --
    i1_i_reg_791_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = tmp_6_i_reg_1545))) then 
                i1_i_reg_791 <= i_3_reg_1571;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                i1_i_reg_791 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- i2_i_reg_842 assign process. --
    i2_i_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0)))) then 
                i2_i_reg_842 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond2_i_reg_1594) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17))) then 
                i2_i_reg_842 <= i_2_reg_1598;
            end if; 
        end if;
    end process;

    -- i4_i_reg_874 assign process. --
    i4_i_reg_874_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = tmp_31_i_reg_1669))) then 
                i4_i_reg_874 <= i_5_reg_1694;
            elsif ((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25))) then 
                i4_i_reg_874 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- i8_i_reg_938 assign process. --
    i8_i_reg_938_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)))) then 
                i8_i_reg_938 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_i_reg_1743) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27))) then 
                i8_i_reg_938 <= i_4_reg_1747;
            end if; 
        end if;
    end process;

    -- i_i_i_reg_747 assign process. --
    i_i_i_reg_747_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                i_i_i_reg_747 <= i_fu_1158_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_805))) then 
                i_i_i_reg_747 <= ap_const_lv8_2;
            end if; 
        end if;
    end process;

    -- reg_1056 assign process. --
    reg_1056_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                reg_1056 <= weight_rom_q0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                reg_1056 <= weight_rom_q1;
            end if; 
        end if;
    end process;

    -- reg_1063 assign process. --
    reg_1063_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = tmp_6_i_reg_1545))) then 
                reg_1063 <= weight_rom_q1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = tmp_31_i_reg_1669)))) then 
                reg_1063 <= weight_rom_q0;
            end if; 
        end if;
    end process;

    -- reg_1102 assign process. --
    reg_1102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_28) and (ap_const_lv1_0 = exitcond_i_reg_1743)))) then 
                reg_1102 <= acc_return_q1;
            elsif (((not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_18) and (ap_const_lv1_0 = exitcond2_i_reg_1594)))) then 
                reg_1102 <= acc_return_q0;
            end if; 
        end if;
    end process;

    -- reg_1109 assign process. --
    reg_1109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35)) or ((ap_const_lv1_0 = exitcond_i_reg_1743) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_30)))) then 
                reg_1109 <= acc_weight_return_q1;
            elsif (((not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35)) or ((ap_const_lv1_0 = exitcond2_i_reg_1594) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_19)))) then 
                reg_1109 <= acc_weight_return_q0;
            end if; 
        end if;
    end process;

    -- reg_1122 assign process. --
    reg_1122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37)) or ((ap_const_lv1_0 = exitcond_i_reg_1743) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29)))) then 
                reg_1122 <= acc_weight_returnSquare_q1;
            elsif ((((ap_const_lv1_0 = exitcond2_i_reg_1594) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_19)) or (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37)))) then 
                reg_1122 <= acc_weight_returnSquare_q0;
            end if; 
        end if;
    end process;

    -- shift_reg_load1_i_fu_224 assign process. --
    shift_reg_load1_i_fu_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_lv1_0 = tmp_31_i_fu_1289_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))))) then 
                shift_reg_load1_i_fu_224 <= tmp_54_i_fu_1315_p1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_22)) then 
                shift_reg_load1_i_fu_224 <= tmp_4_i_reg_770;
            end if; 
        end if;
    end process;

    -- tmp_1_reg_816 assign process. --
    tmp_1_reg_816_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0)))) then 
                tmp_1_reg_816 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_20))) then 
                tmp_1_reg_816 <= reg_1129;
            end if; 
        end if;
    end process;

    -- tmp_2_reg_829 assign process. --
    tmp_2_reg_829_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0)))) then 
                tmp_2_reg_829 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_19))) then 
                tmp_2_reg_829 <= reg_1073;
            end if; 
        end if;
    end process;

    -- tmp_30_i_reg_865 assign process. --
    tmp_30_i_reg_865_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = tmp_31_i_reg_1669))) then 
                tmp_30_i_reg_865 <= tmp_30_i_shift_reg_load_i_reg_1678;
            elsif ((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25))) then 
                tmp_30_i_reg_865 <= tmp_28_i_fu_1285_p1;
            end if; 
        end if;
    end process;

    -- tmp_3_reg_925 assign process. --
    tmp_3_reg_925_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)))) then 
                tmp_3_reg_925 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29))) then 
                tmp_3_reg_925 <= reg_1073;
            end if; 
        end if;
    end process;

    -- tmp_5_i_reg_782 assign process. --
    tmp_5_i_reg_782_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = tmp_6_i_reg_1545))) then 
                tmp_5_i_reg_782 <= tmp_5_i_tmp_4_i_reg_1554;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                tmp_5_i_reg_782 <= tmp_i_fu_1184_p1;
            end if; 
        end if;
    end process;

    -- tmp_5_reg_912 assign process. --
    tmp_5_reg_912_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)))) then 
                tmp_5_reg_912 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_30))) then 
                tmp_5_reg_912 <= reg_1129;
            end if; 
        end if;
    end process;

    -- tmp_7_reg_899 assign process. --
    tmp_7_reg_899_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)))) then 
                tmp_7_reg_899 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31))) then 
                tmp_7_reg_899 <= reg_1135;
            end if; 
        end if;
    end process;

    -- tmp_8_reg_886 assign process. --
    tmp_8_reg_886_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)))) then 
                tmp_8_reg_886 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31))) then 
                tmp_8_reg_886 <= grp_fu_950_p2;
            end if; 
        end if;
    end process;

    -- tmp_9_reg_803 assign process. --
    tmp_9_reg_803_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0)))) then 
                tmp_9_reg_803 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_20))) then 
                tmp_9_reg_803 <= grp_fu_950_p2;
            end if; 
        end if;
    end process;

    -- tmp_i_i_reg_735 assign process. --
    tmp_i_i_reg_735_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                tmp_i_i_reg_735 <= reg_1048;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_805))) then 
                tmp_i_i_reg_735 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34))) then
                acc_return_addr_7_reg_1576 <= tmp_17_i_fu_1247_p1(3 - 1 downto 0);
                acc_weight_returnSquare_addr_7_reg_1582 <= tmp_17_i_fu_1247_p1(3 - 1 downto 0);
                acc_weight_return_addr_7_reg_1588 <= tmp_17_i_fu_1247_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34))) then
                acc_return_addr_9_reg_1709 <= tmp_57_i_fu_1351_p1(3 - 1 downto 0);
                acc_weight_returnA_returnB_add_6_reg_1727 <= tmp_57_i_fu_1351_p1(3 - 1 downto 0);
                acc_weight_returnSquare_addr_9_reg_1715 <= tmp_57_i_fu_1351_p1(3 - 1 downto 0);
                acc_weight_return_addr_9_reg_1721 <= tmp_57_i_fu_1351_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then
                ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it36 <= acc_return_addr_7_reg_1576;
                ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it37 <= ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it36;
                ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it38 <= ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it37;
                ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it39 <= ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it38;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it36 <= acc_weight_returnSquare_addr_7_reg_1582;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it37 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it36;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it38 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it37;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it39 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it38;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it40 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it39;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it41 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it40;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it36 <= acc_weight_return_addr_7_reg_1588;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it37 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it36;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it38 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it37;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it39 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it38;
                ap_reg_ppstg_reg_1063_pp0_it10 <= ap_reg_ppstg_reg_1063_pp0_it9;
                ap_reg_ppstg_reg_1063_pp0_it11 <= ap_reg_ppstg_reg_1063_pp0_it10;
                ap_reg_ppstg_reg_1063_pp0_it12 <= ap_reg_ppstg_reg_1063_pp0_it11;
                ap_reg_ppstg_reg_1063_pp0_it13 <= ap_reg_ppstg_reg_1063_pp0_it12;
                ap_reg_ppstg_reg_1063_pp0_it14 <= ap_reg_ppstg_reg_1063_pp0_it13;
                ap_reg_ppstg_reg_1063_pp0_it15 <= ap_reg_ppstg_reg_1063_pp0_it14;
                ap_reg_ppstg_reg_1063_pp0_it16 <= ap_reg_ppstg_reg_1063_pp0_it15;
                ap_reg_ppstg_reg_1063_pp0_it17 <= ap_reg_ppstg_reg_1063_pp0_it16;
                ap_reg_ppstg_reg_1063_pp0_it18 <= ap_reg_ppstg_reg_1063_pp0_it17;
                ap_reg_ppstg_reg_1063_pp0_it19 <= ap_reg_ppstg_reg_1063_pp0_it18;
                ap_reg_ppstg_reg_1063_pp0_it2 <= reg_1063;
                ap_reg_ppstg_reg_1063_pp0_it20 <= ap_reg_ppstg_reg_1063_pp0_it19;
                ap_reg_ppstg_reg_1063_pp0_it21 <= ap_reg_ppstg_reg_1063_pp0_it20;
                ap_reg_ppstg_reg_1063_pp0_it22 <= ap_reg_ppstg_reg_1063_pp0_it21;
                ap_reg_ppstg_reg_1063_pp0_it23 <= ap_reg_ppstg_reg_1063_pp0_it22;
                ap_reg_ppstg_reg_1063_pp0_it24 <= ap_reg_ppstg_reg_1063_pp0_it23;
                ap_reg_ppstg_reg_1063_pp0_it25 <= ap_reg_ppstg_reg_1063_pp0_it24;
                ap_reg_ppstg_reg_1063_pp0_it26 <= ap_reg_ppstg_reg_1063_pp0_it25;
                ap_reg_ppstg_reg_1063_pp0_it27 <= ap_reg_ppstg_reg_1063_pp0_it26;
                ap_reg_ppstg_reg_1063_pp0_it28 <= ap_reg_ppstg_reg_1063_pp0_it27;
                ap_reg_ppstg_reg_1063_pp0_it29 <= ap_reg_ppstg_reg_1063_pp0_it28;
                ap_reg_ppstg_reg_1063_pp0_it3 <= ap_reg_ppstg_reg_1063_pp0_it2;
                ap_reg_ppstg_reg_1063_pp0_it30 <= ap_reg_ppstg_reg_1063_pp0_it29;
                ap_reg_ppstg_reg_1063_pp0_it31 <= ap_reg_ppstg_reg_1063_pp0_it30;
                ap_reg_ppstg_reg_1063_pp0_it32 <= ap_reg_ppstg_reg_1063_pp0_it31;
                ap_reg_ppstg_reg_1063_pp0_it33 <= ap_reg_ppstg_reg_1063_pp0_it32;
                ap_reg_ppstg_reg_1063_pp0_it4 <= ap_reg_ppstg_reg_1063_pp0_it3;
                ap_reg_ppstg_reg_1063_pp0_it5 <= ap_reg_ppstg_reg_1063_pp0_it4;
                ap_reg_ppstg_reg_1063_pp0_it6 <= ap_reg_ppstg_reg_1063_pp0_it5;
                ap_reg_ppstg_reg_1063_pp0_it7 <= ap_reg_ppstg_reg_1063_pp0_it6;
                ap_reg_ppstg_reg_1063_pp0_it8 <= ap_reg_ppstg_reg_1063_pp0_it7;
                ap_reg_ppstg_reg_1063_pp0_it9 <= ap_reg_ppstg_reg_1063_pp0_it8;
                ap_reg_ppstg_reg_1085_pp0_it30 <= reg_1085;
                ap_reg_ppstg_reg_1085_pp0_it31 <= ap_reg_ppstg_reg_1085_pp0_it30;
                ap_reg_ppstg_reg_1085_pp0_it32 <= ap_reg_ppstg_reg_1085_pp0_it31;
                ap_reg_ppstg_reg_1085_pp0_it33 <= ap_reg_ppstg_reg_1085_pp0_it32;
                ap_reg_ppstg_reg_1085_pp0_it34 <= ap_reg_ppstg_reg_1085_pp0_it33;
                ap_reg_ppstg_reg_1085_pp0_it35 <= ap_reg_ppstg_reg_1085_pp0_it34;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it10 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it9;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it11 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it10;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it12 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it11;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it13 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it12;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it14 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it13;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it15 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it14;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it16 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it15;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it17 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it16;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it18 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it17;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it19 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it18;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it2 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it1;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it20 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it19;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it21 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it20;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it22 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it21;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it23 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it22;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it24 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it23;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it25 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it24;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it26 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it25;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it27 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it26;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it28 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it27;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it28;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it3 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it2;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it30 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it30;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it4 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it3;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it40 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it41 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it40;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it5 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it4;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it6 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it5;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it7 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it6;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it8 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it7;
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it9 <= ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it8;
                ap_reg_ppstg_tmp_reg_1549_pp0_it10 <= ap_reg_ppstg_tmp_reg_1549_pp0_it9;
                ap_reg_ppstg_tmp_reg_1549_pp0_it11 <= ap_reg_ppstg_tmp_reg_1549_pp0_it10;
                ap_reg_ppstg_tmp_reg_1549_pp0_it12 <= ap_reg_ppstg_tmp_reg_1549_pp0_it11;
                ap_reg_ppstg_tmp_reg_1549_pp0_it13 <= ap_reg_ppstg_tmp_reg_1549_pp0_it12;
                ap_reg_ppstg_tmp_reg_1549_pp0_it14 <= ap_reg_ppstg_tmp_reg_1549_pp0_it13;
                ap_reg_ppstg_tmp_reg_1549_pp0_it15 <= ap_reg_ppstg_tmp_reg_1549_pp0_it14;
                ap_reg_ppstg_tmp_reg_1549_pp0_it16 <= ap_reg_ppstg_tmp_reg_1549_pp0_it15;
                ap_reg_ppstg_tmp_reg_1549_pp0_it17 <= ap_reg_ppstg_tmp_reg_1549_pp0_it16;
                ap_reg_ppstg_tmp_reg_1549_pp0_it18 <= ap_reg_ppstg_tmp_reg_1549_pp0_it17;
                ap_reg_ppstg_tmp_reg_1549_pp0_it19 <= ap_reg_ppstg_tmp_reg_1549_pp0_it18;
                ap_reg_ppstg_tmp_reg_1549_pp0_it2 <= ap_reg_ppstg_tmp_reg_1549_pp0_it1;
                ap_reg_ppstg_tmp_reg_1549_pp0_it20 <= ap_reg_ppstg_tmp_reg_1549_pp0_it19;
                ap_reg_ppstg_tmp_reg_1549_pp0_it21 <= ap_reg_ppstg_tmp_reg_1549_pp0_it20;
                ap_reg_ppstg_tmp_reg_1549_pp0_it22 <= ap_reg_ppstg_tmp_reg_1549_pp0_it21;
                ap_reg_ppstg_tmp_reg_1549_pp0_it23 <= ap_reg_ppstg_tmp_reg_1549_pp0_it22;
                ap_reg_ppstg_tmp_reg_1549_pp0_it24 <= ap_reg_ppstg_tmp_reg_1549_pp0_it23;
                ap_reg_ppstg_tmp_reg_1549_pp0_it25 <= ap_reg_ppstg_tmp_reg_1549_pp0_it24;
                ap_reg_ppstg_tmp_reg_1549_pp0_it26 <= ap_reg_ppstg_tmp_reg_1549_pp0_it25;
                ap_reg_ppstg_tmp_reg_1549_pp0_it27 <= ap_reg_ppstg_tmp_reg_1549_pp0_it26;
                ap_reg_ppstg_tmp_reg_1549_pp0_it28 <= ap_reg_ppstg_tmp_reg_1549_pp0_it27;
                ap_reg_ppstg_tmp_reg_1549_pp0_it29 <= ap_reg_ppstg_tmp_reg_1549_pp0_it28;
                ap_reg_ppstg_tmp_reg_1549_pp0_it3 <= ap_reg_ppstg_tmp_reg_1549_pp0_it2;
                ap_reg_ppstg_tmp_reg_1549_pp0_it4 <= ap_reg_ppstg_tmp_reg_1549_pp0_it3;
                ap_reg_ppstg_tmp_reg_1549_pp0_it5 <= ap_reg_ppstg_tmp_reg_1549_pp0_it4;
                ap_reg_ppstg_tmp_reg_1549_pp0_it6 <= ap_reg_ppstg_tmp_reg_1549_pp0_it5;
                ap_reg_ppstg_tmp_reg_1549_pp0_it7 <= ap_reg_ppstg_tmp_reg_1549_pp0_it6;
                ap_reg_ppstg_tmp_reg_1549_pp0_it8 <= ap_reg_ppstg_tmp_reg_1549_pp0_it7;
                ap_reg_ppstg_tmp_reg_1549_pp0_it9 <= ap_reg_ppstg_tmp_reg_1549_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then
                ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it36 <= acc_return_addr_9_reg_1709;
                ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it37 <= ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it36;
                ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it38 <= ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it37;
                ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it39 <= ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it38;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it36 <= acc_weight_returnA_returnB_add_6_reg_1727;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it37 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it36;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it38 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it37;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it39 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it38;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it40 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it39;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it41 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it40;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it36 <= acc_weight_returnSquare_addr_9_reg_1715;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it37 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it36;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it38 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it37;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it39 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it38;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it40 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it39;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it41 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it40;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it36 <= acc_weight_return_addr_9_reg_1721;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it37 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it36;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it38 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it37;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it39 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it38;
                ap_reg_ppstg_reg_1063_pp2_it10 <= ap_reg_ppstg_reg_1063_pp2_it9;
                ap_reg_ppstg_reg_1063_pp2_it11 <= ap_reg_ppstg_reg_1063_pp2_it10;
                ap_reg_ppstg_reg_1063_pp2_it12 <= ap_reg_ppstg_reg_1063_pp2_it11;
                ap_reg_ppstg_reg_1063_pp2_it13 <= ap_reg_ppstg_reg_1063_pp2_it12;
                ap_reg_ppstg_reg_1063_pp2_it14 <= ap_reg_ppstg_reg_1063_pp2_it13;
                ap_reg_ppstg_reg_1063_pp2_it15 <= ap_reg_ppstg_reg_1063_pp2_it14;
                ap_reg_ppstg_reg_1063_pp2_it16 <= ap_reg_ppstg_reg_1063_pp2_it15;
                ap_reg_ppstg_reg_1063_pp2_it17 <= ap_reg_ppstg_reg_1063_pp2_it16;
                ap_reg_ppstg_reg_1063_pp2_it18 <= ap_reg_ppstg_reg_1063_pp2_it17;
                ap_reg_ppstg_reg_1063_pp2_it19 <= ap_reg_ppstg_reg_1063_pp2_it18;
                ap_reg_ppstg_reg_1063_pp2_it2 <= reg_1063;
                ap_reg_ppstg_reg_1063_pp2_it20 <= ap_reg_ppstg_reg_1063_pp2_it19;
                ap_reg_ppstg_reg_1063_pp2_it21 <= ap_reg_ppstg_reg_1063_pp2_it20;
                ap_reg_ppstg_reg_1063_pp2_it22 <= ap_reg_ppstg_reg_1063_pp2_it21;
                ap_reg_ppstg_reg_1063_pp2_it23 <= ap_reg_ppstg_reg_1063_pp2_it22;
                ap_reg_ppstg_reg_1063_pp2_it24 <= ap_reg_ppstg_reg_1063_pp2_it23;
                ap_reg_ppstg_reg_1063_pp2_it25 <= ap_reg_ppstg_reg_1063_pp2_it24;
                ap_reg_ppstg_reg_1063_pp2_it26 <= ap_reg_ppstg_reg_1063_pp2_it25;
                ap_reg_ppstg_reg_1063_pp2_it27 <= ap_reg_ppstg_reg_1063_pp2_it26;
                ap_reg_ppstg_reg_1063_pp2_it28 <= ap_reg_ppstg_reg_1063_pp2_it27;
                ap_reg_ppstg_reg_1063_pp2_it29 <= ap_reg_ppstg_reg_1063_pp2_it28;
                ap_reg_ppstg_reg_1063_pp2_it3 <= ap_reg_ppstg_reg_1063_pp2_it2;
                ap_reg_ppstg_reg_1063_pp2_it30 <= ap_reg_ppstg_reg_1063_pp2_it29;
                ap_reg_ppstg_reg_1063_pp2_it31 <= ap_reg_ppstg_reg_1063_pp2_it30;
                ap_reg_ppstg_reg_1063_pp2_it32 <= ap_reg_ppstg_reg_1063_pp2_it31;
                ap_reg_ppstg_reg_1063_pp2_it33 <= ap_reg_ppstg_reg_1063_pp2_it32;
                ap_reg_ppstg_reg_1063_pp2_it4 <= ap_reg_ppstg_reg_1063_pp2_it3;
                ap_reg_ppstg_reg_1063_pp2_it5 <= ap_reg_ppstg_reg_1063_pp2_it4;
                ap_reg_ppstg_reg_1063_pp2_it6 <= ap_reg_ppstg_reg_1063_pp2_it5;
                ap_reg_ppstg_reg_1063_pp2_it7 <= ap_reg_ppstg_reg_1063_pp2_it6;
                ap_reg_ppstg_reg_1063_pp2_it8 <= ap_reg_ppstg_reg_1063_pp2_it7;
                ap_reg_ppstg_reg_1063_pp2_it9 <= ap_reg_ppstg_reg_1063_pp2_it8;
                ap_reg_ppstg_reg_1085_pp2_it30 <= reg_1085;
                ap_reg_ppstg_reg_1085_pp2_it31 <= ap_reg_ppstg_reg_1085_pp2_it30;
                ap_reg_ppstg_reg_1085_pp2_it32 <= ap_reg_ppstg_reg_1085_pp2_it31;
                ap_reg_ppstg_reg_1085_pp2_it33 <= ap_reg_ppstg_reg_1085_pp2_it32;
                ap_reg_ppstg_reg_1085_pp2_it34 <= ap_reg_ppstg_reg_1085_pp2_it33;
                ap_reg_ppstg_reg_1085_pp2_it35 <= ap_reg_ppstg_reg_1085_pp2_it34;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it10 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it9;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it11 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it10;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it12 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it11;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it13 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it12;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it14 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it13;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it15 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it14;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it16 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it15;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it17 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it16;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it18 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it17;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it19 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it18;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it2 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it1;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it20 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it19;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it21 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it20;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it22 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it21;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it23 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it22;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it24 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it23;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it25 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it24;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it26 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it25;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it27 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it26;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it27;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it3 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it2;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it4 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it3;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it40 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it40;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it5 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it4;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it6 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it5;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it7 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it6;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it8 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it7;
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it9 <= ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it8;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it10 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it9;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it11 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it10;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it12 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it11;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it13 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it12;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it14 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it13;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it15 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it14;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it16 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it15;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it17 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it16;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it18 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it17;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it19 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it18;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it2 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it1;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it20 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it19;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it21 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it20;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it22 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it21;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it23 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it22;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it24 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it23;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it25 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it24;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it26 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it25;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it27 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it26;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it3 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it2;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it4 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it3;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it5 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it4;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it6 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it5;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it7 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it6;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it8 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it7;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it9 <= ap_reg_ppstg_tmp_4_reg_1673_pp2_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17)) then
                ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1 <= exitcond2_i_reg_1594;
                exitcond2_i_reg_1594 <= exitcond2_i_fu_1254_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27)) then
                ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1 <= exitcond_i_reg_1743;
                exitcond_i_reg_1743 <= exitcond_i_fu_1359_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))))) then
                ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it1 <= tmp_31_i_reg_1669;
                ap_reg_ppstg_tmp_4_reg_1673_pp2_it1 <= tmp_4_reg_1673;
                tmp_31_i_reg_1669 <= tmp_31_i_fu_1289_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it1 <= tmp_6_i_reg_1545;
                ap_reg_ppstg_tmp_reg_1549_pp0_it1 <= tmp_reg_1549;
                tmp_6_i_reg_1545 <= tmp_6_i_fu_1193_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_69_i_i_fu_1168_p2)))) then
                i_1_reg_1439 <= i_1_fu_1178_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17))) then
                i_2_reg_1598 <= i_2_fu_1260_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (tmp_6_i_fu_1193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                i_3_reg_1571 <= i_3_fu_1231_p2;
                tmp_14_i_reg_1560 <= tmp_14_i_fu_1216_p1;
                tmp_5_i_tmp_4_i_reg_1554 <= tmp_5_i_tmp_4_i_fu_1208_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27))) then
                i_4_reg_1747 <= i_4_fu_1365_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_lv1_0 = tmp_31_i_fu_1289_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))))) then
                i_5_reg_1694 <= i_5_fu_1330_p2;
                tmp_30_i_shift_reg_load_i_reg_1678 <= tmp_30_i_shift_reg_load_i_fu_1307_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28))) then
                lnReturnA_load_reg_1704 <= lnReturnA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32)) or (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32)))) then
                reg_1048 <= grp_fu_987_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_28) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1)))) then
                reg_1073 <= grp_fu_950_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it15)) or (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it15)))) then
                reg_1080 <= grp_fu_1009_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it28)) or (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28)))) then
                reg_1085 <= grp_fu_1013_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32)) or (not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34)))) then
                reg_1096 <= grp_fu_993_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36)) or (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34)))) then
                reg_1116 <= grp_fu_997_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29)))) then
                reg_1129 <= grp_fu_950_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_30)))) then
                reg_1135 <= grp_fu_950_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = exitcond_i_reg_1743) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_30)) or (not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37)))) then
                reg_1141 <= acc_weight_returnA_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17) and (ap_const_lv1_0 = exitcond2_i_fu_1254_p2))) then
                tmp_11_i_reg_1603(0) <= tmp_11_i_fu_1266_p1(0);
    tmp_11_i_reg_1603(1) <= tmp_11_i_fu_1266_p1(1);
    tmp_11_i_reg_1603(2) <= tmp_11_i_fu_1266_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0)))) then
                tmp_1_i_reg_1539 <= tmp_1_i_fu_1188_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = tmp_6_i_reg_1545))) then
                tmp_4_i_reg_770 <= tmp_14_i_reg_1560;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_lv1_0 = tmp_31_i_fu_1289_p2) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))))) then
                tmp_4_reg_1673 <= tmp_4_fu_1297_p1;
                tmp_54_i_reg_1684 <= tmp_54_i_fu_1315_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36))) then
                tmp_60_i_reg_1733 <= grp_fu_1001_p2;
                tmp_67_i_reg_1738 <= grp_fu_1005_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27) and (ap_const_lv1_0 = exitcond_i_fu_1359_p2))) then
                tmp_i_22_reg_1752(0) <= tmp_i_22_fu_1371_p1(0);
    tmp_i_22_reg_1752(1) <= tmp_i_22_fu_1371_p1(1);
    tmp_i_22_reg_1752(2) <= tmp_i_22_fu_1371_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (tmp_6_i_fu_1193_p2 = ap_const_lv1_0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                tmp_reg_1549 <= tmp_fu_1198_p1;
            end if;
        end if;
    end process;
    acc_return_addr_reg_1444(2 downto 0) <= "000";
    acc_weight_returnSquare_addr_reg_1449(2 downto 0) <= "000";
    acc_weight_return_addr_reg_1454(2 downto 0) <= "000";
    acc_return_addr_1_reg_1459(2 downto 0) <= "001";
    acc_weight_returnSquare_addr_1_reg_1464(2 downto 0) <= "001";
    acc_weight_return_addr_1_reg_1469(2 downto 0) <= "001";
    acc_return_addr_2_reg_1474(2 downto 0) <= "010";
    acc_weight_returnSquare_addr_2_reg_1479(2 downto 0) <= "010";
    acc_weight_return_addr_2_reg_1484(2 downto 0) <= "010";
    acc_return_addr_3_reg_1489(2 downto 0) <= "011";
    acc_weight_returnSquare_addr_3_reg_1494(2 downto 0) <= "011";
    acc_weight_return_addr_3_reg_1499(2 downto 0) <= "011";
    acc_return_addr_4_reg_1504(2 downto 0) <= "100";
    acc_weight_returnSquare_addr_4_reg_1509(2 downto 0) <= "100";
    acc_weight_return_addr_4_reg_1514(2 downto 0) <= "100";
    acc_return_addr_5_reg_1519(2 downto 0) <= "101";
    acc_weight_returnSquare_addr_5_reg_1524(2 downto 0) <= "101";
    acc_weight_return_addr_5_reg_1529(2 downto 0) <= "101";
    tmp_11_i_reg_1603(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    acc_weight_returnA_returnB_add_reg_1631(2 downto 0) <= "000";
    acc_weight_returnA_returnB_add_1_reg_1636(2 downto 0) <= "001";
    acc_weight_returnA_returnB_add_2_reg_1641(2 downto 0) <= "010";
    acc_weight_returnA_returnB_add_3_reg_1646(2 downto 0) <= "011";
    acc_weight_returnA_returnB_add_4_reg_1651(2 downto 0) <= "100";
    acc_weight_returnA_returnB_add_5_reg_1656(2 downto 0) <= "101";
    tmp_i_22_reg_1752(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, in_indices_TVALID, tmp_6_i_fu_1193_p2, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it41, ap_reg_ppiten_pp0_it42, tmp_31_i_fu_1289_p2, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it41, ap_reg_ppiten_pp2_it42, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp1_stg3_fsm_20, ap_sig_bdd_805, tmp_69_i_i_fu_1168_p2, exitcond2_i_fu_1254_p2, exitcond_i_fu_1359_p2, ap_sig_cseq_ST_pp3_stg4_fsm_31, ap_sig_bdd_1292, exitcond_i_i_fu_1147_p2, tmp_26_i_fu_1280_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_805)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond_i_i_fu_1147_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = tmp_69_i_i_fu_1168_p2)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (not((in_indices_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_pp0_stg0_fsm_16 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it42) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it41)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_16;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it42) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it41))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((tmp_6_i_fu_1193_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_16;
                end if;
            when ap_ST_pp1_stg0_fsm_17 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond2_i_fu_1254_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st69_fsm_22;
                end if;
            when ap_ST_pp1_stg1_fsm_18 => 
                ap_NS_fsm <= ap_ST_pp1_stg2_fsm_19;
            when ap_ST_pp1_stg2_fsm_19 => 
                ap_NS_fsm <= ap_ST_pp1_stg3_fsm_20;
            when ap_ST_pp1_stg3_fsm_20 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_20) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg4_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st69_fsm_22;
                end if;
            when ap_ST_pp1_stg4_fsm_21 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_17;
            when ap_ST_st69_fsm_22 => 
                ap_NS_fsm <= ap_ST_st70_fsm_23;
            when ap_ST_st70_fsm_23 => 
                if ((ap_const_lv1_0 = tmp_26_i_fu_1280_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st71_fsm_24;
                end if;
            when ap_ST_st71_fsm_24 => 
                ap_NS_fsm <= ap_ST_st72_fsm_25;
            when ap_ST_st72_fsm_25 => 
                if (not((in_indices_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st72_fsm_25;
                end if;
            when ap_ST_pp2_stg0_fsm_26 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it42) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it41)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_26;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it42) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it41))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and not((ap_const_lv1_0 = tmp_31_i_fu_1289_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_26;
                end if;
            when ap_ST_pp3_stg0_fsm_27 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond_i_fu_1359_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg1_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st126_fsm_32;
                end if;
            when ap_ST_pp3_stg1_fsm_28 => 
                ap_NS_fsm <= ap_ST_pp3_stg2_fsm_29;
            when ap_ST_pp3_stg2_fsm_29 => 
                ap_NS_fsm <= ap_ST_pp3_stg3_fsm_30;
            when ap_ST_pp3_stg3_fsm_30 => 
                ap_NS_fsm <= ap_ST_pp3_stg4_fsm_31;
            when ap_ST_pp3_stg4_fsm_31 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it0))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st126_fsm_32;
                end if;
            when ap_ST_st126_fsm_32 => 
                if (not(ap_sig_bdd_1292)) then
                    ap_NS_fsm <= ap_ST_st70_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st126_fsm_32;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    NUMBER_OF_DAYS_out_din <= NUMBER_OF_DAYS;

    -- NUMBER_OF_DAYS_out_write assign process. --
    NUMBER_OF_DAYS_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_805)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_805))) then 
            NUMBER_OF_DAYS_out_write <= ap_const_logic_1;
        else 
            NUMBER_OF_DAYS_out_write <= ap_const_logic_0;
        end if; 
    end process;

    NUMBER_OF_INDICES_out_din <= NUMBER_OF_INDICES;

    -- NUMBER_OF_INDICES_out_write assign process. --
    NUMBER_OF_INDICES_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_805)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_805))) then 
            NUMBER_OF_INDICES_out_write <= ap_const_logic_1;
        else 
            NUMBER_OF_INDICES_out_write <= ap_const_logic_0;
        end if; 
    end process;

    acc_return_addr_1_gep_fu_420_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_return_addr_2_gep_fu_457_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_return_addr_3_gep_fu_481_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_return_addr_4_gep_fu_505_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_return_addr_5_gep_fu_529_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_return_addr_gep_fu_381_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_return_address0 assign process. --
    acc_return_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp2_it40, ap_sig_cseq_ST_st16_fsm_15, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st7_fsm_6, acc_return_addr_1_reg_1459, ap_sig_cseq_ST_st15_fsm_14, acc_return_addr_3_reg_1489, acc_return_addr_5_reg_1519, ap_sig_cseq_ST_pp1_stg0_fsm_17, tmp_11_i_fu_1266_p1, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it39, tmp_17_i_fu_1247_p1, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it40)) then 
            acc_return_address0 <= ap_reg_ppstg_acc_return_addr_9_reg_1709_pp2_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) then 
            acc_return_address0 <= acc_return_addr_5_reg_1519;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24)) then 
            acc_return_address0 <= acc_return_addr_3_reg_1489;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23)) then 
            acc_return_address0 <= acc_return_addr_1_reg_1459;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            acc_return_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            acc_return_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            acc_return_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17))) then 
            acc_return_address0 <= tmp_11_i_fu_1266_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_return_address0 <= tmp_17_i_fu_1247_p1(3 - 1 downto 0);
        else 
            acc_return_address0 <= "XXX";
        end if; 
    end process;


    -- acc_return_address1 assign process. --
    acc_return_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_reg_ppiten_pp2_it35, ap_sig_cseq_ST_st16_fsm_15, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st7_fsm_6, acc_return_addr_reg_1444, acc_return_addr_2_reg_1474, ap_sig_cseq_ST_st15_fsm_14, acc_return_addr_4_reg_1504, ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it39, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_pp3_stg0_fsm_27, tmp_i_22_fu_1371_p1, tmp_57_i_fu_1351_p1, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) then 
            acc_return_address1 <= acc_return_addr_4_reg_1504;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24)) then 
            acc_return_address1 <= acc_return_addr_2_reg_1474;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23)) then 
            acc_return_address1 <= acc_return_addr_reg_1444;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_return_address1 <= ap_reg_ppstg_acc_return_addr_7_reg_1576_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            acc_return_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            acc_return_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            acc_return_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27))) then 
            acc_return_address1 <= tmp_i_22_fu_1371_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35)) then 
            acc_return_address1 <= tmp_57_i_fu_1351_p1(3 - 1 downto 0);
        else 
            acc_return_address1 <= "XXX";
        end if; 
    end process;


    -- acc_return_ce0 assign process. --
    acc_return_ce0_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it35, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it40, ap_sig_cseq_ST_st16_fsm_15, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_pp1_stg0_fsm_17, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17)) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it40) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            acc_return_ce0 <= ap_const_logic_1;
        else 
            acc_return_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_return_ce1 assign process. --
    acc_return_ce1_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it40, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it35, ap_sig_cseq_ST_st16_fsm_15, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_pp3_stg0_fsm_27, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27)) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            acc_return_ce1 <= ap_const_logic_1;
        else 
            acc_return_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_return_d0 assign process. --
    acc_return_d0_assign_proc : process(ap_reg_ppiten_pp2_it40, ap_sig_cseq_ST_st16_fsm_15, grp_fu_950_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it40)) then 
            acc_return_d0 <= grp_fu_950_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24))) then 
            acc_return_d0 <= ap_const_lv32_0;
        else 
            acc_return_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_return_d1 assign process. --
    acc_return_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st16_fsm_15, grp_fu_950_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_return_d1 <= grp_fu_950_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24))) then 
            acc_return_d1 <= ap_const_lv32_0;
        else 
            acc_return_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_return_we0 assign process. --
    acc_return_we0_assign_proc : process(in_indices_TVALID, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it40, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, tmp_69_i_i_fu_1168_p2, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_69_i_i_fu_1168_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and not((ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it40) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39)))) then 
            acc_return_we0 <= ap_const_logic_1;
        else 
            acc_return_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_return_we1 assign process. --
    acc_return_we1_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, tmp_69_i_i_fu_1168_p2, ap_sig_cseq_ST_st15_fsm_14, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_69_i_i_fu_1168_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and not((ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39)))) then 
            acc_return_we1 <= ap_const_logic_1;
        else 
            acc_return_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_returnB_add_1_gep_fu_621_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_2_gep_fu_628_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_3_gep_fu_635_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_4_gep_fu_642_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_5_gep_fu_649_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_gep_fu_614_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_returnB_address0 assign process. --
    acc_weight_returnA_returnB_address0_assign_proc : process(ap_reg_ppiten_pp2_it37, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_29, acc_weight_returnA_returnB_add_reg_1631, acc_weight_returnA_returnB_add_2_reg_1641, acc_weight_returnA_returnB_add_4_reg_1651, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it36, tmp_i_22_reg_1752, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_4_reg_1651;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_2_reg_1641;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_reg_1631;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29))) then 
            acc_weight_returnA_returnB_address0 <= tmp_i_22_reg_1752(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it37)) then 
            acc_weight_returnA_returnB_address0 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it36;
        else 
            acc_weight_returnA_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_address1 assign process. --
    acc_weight_returnA_returnB_address1_assign_proc : process(ap_reg_ppiten_pp2_it42, acc_weight_returnA_returnB_add_1_reg_1636, acc_weight_returnA_returnB_add_3_reg_1646, acc_weight_returnA_returnB_add_5_reg_1656, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it41, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it42)) then 
            acc_weight_returnA_returnB_address1 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1727_pp2_it41;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_5_reg_1656;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_3_reg_1646;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_1_reg_1636;
        else 
            acc_weight_returnA_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce0 assign process. --
    acc_weight_returnA_returnB_ce0_assign_proc : process(in_indices_TVALID, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it37, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_29, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29)) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it37) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce1 assign process. --
    acc_weight_returnA_returnB_ce1_assign_proc : process(in_indices_TVALID, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it42, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it42) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnA_returnB_d1 assign process. --
    acc_weight_returnA_returnB_d1_assign_proc : process(ap_reg_ppiten_pp2_it42, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24, grp_fu_977_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it42)) then 
            acc_weight_returnA_returnB_d1 <= grp_fu_977_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24))) then 
            acc_weight_returnA_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we0 assign process. --
    acc_weight_returnA_returnB_we0_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and not((ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24))) then 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we1 assign process. --
    acc_weight_returnA_returnB_we1_assign_proc : process(in_indices_TVALID, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it42, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and not((ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it42) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41)))) then 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquare_addr_1_gep_fu_432_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquare_addr_2_gep_fu_465_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquare_addr_3_gep_fu_489_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquare_addr_4_gep_fu_513_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquare_addr_5_gep_fu_537_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquare_addr_gep_fu_394_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquare_address0 assign process. --
    acc_weight_returnSquare_address0_assign_proc : process(ap_reg_ppiten_pp0_it37, ap_reg_ppiten_pp2_it42, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_pp1_stg1_fsm_18, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st7_fsm_6, acc_weight_returnSquare_addr_1_reg_1464, ap_sig_cseq_ST_st15_fsm_14, acc_weight_returnSquare_addr_3_reg_1494, acc_weight_returnSquare_addr_5_reg_1524, ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it36, tmp_11_i_reg_1603, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it41, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it42)) then 
            acc_weight_returnSquare_address0 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it41;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) then 
            acc_weight_returnSquare_address0 <= acc_weight_returnSquare_addr_5_reg_1524;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24)) then 
            acc_weight_returnSquare_address0 <= acc_weight_returnSquare_addr_3_reg_1494;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23)) then 
            acc_weight_returnSquare_address0 <= acc_weight_returnSquare_addr_1_reg_1464;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            acc_weight_returnSquare_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            acc_weight_returnSquare_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            acc_weight_returnSquare_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            acc_weight_returnSquare_address0 <= tmp_11_i_reg_1603(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it37)) then 
            acc_weight_returnSquare_address0 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it36;
        else 
            acc_weight_returnSquare_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquare_address1 assign process. --
    acc_weight_returnSquare_address1_assign_proc : process(ap_reg_ppiten_pp0_it42, ap_reg_ppiten_pp2_it37, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_pp3_stg1_fsm_28, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st7_fsm_6, acc_weight_returnSquare_addr_reg_1449, ap_sig_cseq_ST_st15_fsm_14, acc_weight_returnSquare_addr_2_reg_1479, acc_weight_returnSquare_addr_4_reg_1509, ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it41, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it36, tmp_i_22_reg_1752, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) then 
            acc_weight_returnSquare_address1 <= acc_weight_returnSquare_addr_4_reg_1509;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24)) then 
            acc_weight_returnSquare_address1 <= acc_weight_returnSquare_addr_2_reg_1479;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23)) then 
            acc_weight_returnSquare_address1 <= acc_weight_returnSquare_addr_reg_1449;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it42)) then 
            acc_weight_returnSquare_address1 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1582_pp0_it41;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            acc_weight_returnSquare_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            acc_weight_returnSquare_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            acc_weight_returnSquare_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_28) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then 
            acc_weight_returnSquare_address1 <= tmp_i_22_reg_1752(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it37)) then 
            acc_weight_returnSquare_address1 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1715_pp2_it36;
        else 
            acc_weight_returnSquare_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquare_ce0 assign process. --
    acc_weight_returnSquare_ce0_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it37, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it42, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_pp1_stg1_fsm_18, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it37) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it42) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            acc_weight_returnSquare_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquare_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquare_ce1 assign process. --
    acc_weight_returnSquare_ce1_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it42, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it37, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_pp3_stg1_fsm_28, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_28) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it42) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it37) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            acc_weight_returnSquare_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquare_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquare_d0 assign process. --
    acc_weight_returnSquare_d0_assign_proc : process(ap_reg_ppiten_pp2_it42, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24, grp_fu_962_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it42)) then 
            acc_weight_returnSquare_d0 <= grp_fu_962_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24))) then 
            acc_weight_returnSquare_d0 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquare_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquare_d1 assign process. --
    acc_weight_returnSquare_d1_assign_proc : process(ap_reg_ppiten_pp0_it42, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24, grp_fu_962_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it42)) then 
            acc_weight_returnSquare_d1 <= grp_fu_962_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24))) then 
            acc_weight_returnSquare_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquare_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquare_we0 assign process. --
    acc_weight_returnSquare_we0_assign_proc : process(in_indices_TVALID, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it42, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, tmp_69_i_i_fu_1168_p2, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_69_i_i_fu_1168_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and not((ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it42) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41)))) then 
            acc_weight_returnSquare_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquare_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquare_we1 assign process. --
    acc_weight_returnSquare_we1_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it42, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, tmp_69_i_i_fu_1168_p2, ap_sig_cseq_ST_st15_fsm_14, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it41, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_69_i_i_fu_1168_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and not((ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it42) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it41)))) then 
            acc_weight_returnSquare_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquare_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_return_addr_1_gep_fu_444_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_return_addr_2_gep_fu_473_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_return_addr_3_gep_fu_497_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_return_addr_4_gep_fu_521_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_return_addr_5_gep_fu_545_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_return_addr_gep_fu_407_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_return_address0 assign process. --
    acc_weight_return_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp2_it40, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_pp1_stg1_fsm_18, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st7_fsm_6, acc_weight_return_addr_1_reg_1469, ap_sig_cseq_ST_st15_fsm_14, acc_weight_return_addr_3_reg_1499, acc_weight_return_addr_5_reg_1529, tmp_11_i_reg_1603, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it39, tmp_17_i_fu_1247_p1, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it40)) then 
            acc_weight_return_address0 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1721_pp2_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) then 
            acc_weight_return_address0 <= acc_weight_return_addr_5_reg_1529;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24)) then 
            acc_weight_return_address0 <= acc_weight_return_addr_3_reg_1499;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23)) then 
            acc_weight_return_address0 <= acc_weight_return_addr_1_reg_1469;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            acc_weight_return_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            acc_weight_return_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            acc_weight_return_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            acc_weight_return_address0 <= tmp_11_i_reg_1603(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_return_address0 <= tmp_17_i_fu_1247_p1(3 - 1 downto 0);
        else 
            acc_weight_return_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_return_address1 assign process. --
    acc_weight_return_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_reg_ppiten_pp2_it35, ap_sig_cseq_ST_st16_fsm_15, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_29, ap_sig_cseq_ST_st7_fsm_6, acc_weight_return_addr_reg_1454, ap_sig_cseq_ST_st15_fsm_14, acc_weight_return_addr_2_reg_1484, acc_weight_return_addr_4_reg_1514, ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it39, ap_sig_cseq_ST_st72_fsm_25, tmp_i_22_reg_1752, tmp_57_i_fu_1351_p1, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) then 
            acc_weight_return_address1 <= acc_weight_return_addr_4_reg_1514;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24)) then 
            acc_weight_return_address1 <= acc_weight_return_addr_2_reg_1484;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23)) then 
            acc_weight_return_address1 <= acc_weight_return_addr_reg_1454;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_return_address1 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1588_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            acc_weight_return_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            acc_weight_return_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            acc_weight_return_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29))) then 
            acc_weight_return_address1 <= tmp_i_22_reg_1752(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35)) then 
            acc_weight_return_address1 <= tmp_57_i_fu_1351_p1(3 - 1 downto 0);
        else 
            acc_weight_return_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_return_ce0 assign process. --
    acc_weight_return_ce0_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it35, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it40, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_pp1_stg1_fsm_18, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it40) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            acc_weight_return_ce0 <= ap_const_logic_1;
        else 
            acc_weight_return_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_return_ce1 assign process. --
    acc_weight_return_ce1_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it40, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it35, ap_sig_cseq_ST_st16_fsm_15, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_29, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29)) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            acc_weight_return_ce1 <= ap_const_logic_1;
        else 
            acc_weight_return_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_return_d0 assign process. --
    acc_weight_return_d0_assign_proc : process(ap_reg_ppiten_pp2_it40, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24, grp_fu_956_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it40)) then 
            acc_weight_return_d0 <= grp_fu_956_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24))) then 
            acc_weight_return_d0 <= ap_const_lv32_0;
        else 
            acc_weight_return_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_return_d1 assign process. --
    acc_weight_return_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, ap_sig_cseq_ST_st71_fsm_24, grp_fu_956_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_return_d1 <= grp_fu_956_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24))) then 
            acc_weight_return_d1 <= ap_const_lv32_0;
        else 
            acc_weight_return_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_return_we0 assign process. --
    acc_weight_return_we0_assign_proc : process(in_indices_TVALID, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it40, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, tmp_69_i_i_fu_1168_p2, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st72_fsm_25, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_69_i_i_fu_1168_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and not((ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it40) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39)))) then 
            acc_weight_return_we0 <= ap_const_logic_1;
        else 
            acc_weight_return_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_return_we1 assign process. --
    acc_weight_return_we1_assign_proc : process(in_indices_TVALID, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, tmp_69_i_i_fu_1168_p2, ap_sig_cseq_ST_st15_fsm_14, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39, ap_sig_cseq_ST_st72_fsm_25, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2, ap_sig_cseq_ST_st71_fsm_24)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_69_i_i_fu_1168_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and not((ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39)))) then 
            acc_weight_return_we1 <= ap_const_logic_1;
        else 
            acc_weight_return_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and (ap_const_lv1_0 = tmp_26_i_fu_1280_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st70_fsm_23, tmp_26_i_fu_1280_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_23) and (ap_const_lv1_0 = tmp_26_i_fu_1280_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1022 assign process. --
    ap_sig_bdd_1022_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1022 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_1045 assign process. --
    ap_sig_bdd_1045_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1045 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_1064 assign process. --
    ap_sig_bdd_1064_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1064 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_1240 assign process. --
    ap_sig_bdd_1240_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1240 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_1264 assign process. --
    ap_sig_bdd_1264_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1264 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_1275 assign process. --
    ap_sig_bdd_1275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1275 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_1292 assign process. --
    ap_sig_bdd_1292_assign_proc : process(sum_weight_out_V_full_n, sum_return_out_V_full_n, sum_weight_returnSquare_out_V_full_n, sum_weight_return_out_V_full_n, sum_weight_returnA_returnB_out_full_n, sum_returnA_out_V_full_n, sum_weight_returnSquareA_out_V_full_n, sum_weight_returnA_out_V_full_n)
    begin
                ap_sig_bdd_1292 <= ((sum_weight_out_V_full_n = ap_const_logic_0) or (sum_return_out_V_full_n = ap_const_logic_0) or (sum_weight_returnSquare_out_V_full_n = ap_const_logic_0) or (sum_weight_return_out_V_full_n = ap_const_logic_0) or (sum_weight_returnA_returnB_out_full_n = ap_const_logic_0) or (sum_returnA_out_V_full_n = ap_const_logic_0) or (sum_weight_returnSquareA_out_V_full_n = ap_const_logic_0) or (sum_weight_returnA_out_V_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_1306 assign process. --
    ap_sig_bdd_1306_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1306 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_1385 assign process. --
    ap_sig_bdd_1385_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1385 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_1393 assign process. --
    ap_sig_bdd_1393_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1393 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_147 assign process. --
    ap_sig_bdd_147_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_147 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_1511 assign process. --
    ap_sig_bdd_1511_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1511 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_1524 assign process. --
    ap_sig_bdd_1524_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1524 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(in_indices_TVALID, tmp_6_i_fu_1193_p2)
    begin
                ap_sig_bdd_154 <= ((in_indices_TVALID = ap_const_logic_0) and (tmp_6_i_fu_1193_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_1635 assign process. --
    ap_sig_bdd_1635_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1635 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_1770 assign process. --
    ap_sig_bdd_1770_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1770 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_1778 assign process. --
    ap_sig_bdd_1778_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1778 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_1786 assign process. --
    ap_sig_bdd_1786_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1786 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_1854 assign process. --
    ap_sig_bdd_1854_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1854 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_1862 assign process. --
    ap_sig_bdd_1862_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1862 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_295 assign process. --
    ap_sig_bdd_295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_295 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_300 assign process. --
    ap_sig_bdd_300_assign_proc : process(in_indices_TVALID, tmp_31_i_fu_1289_p2)
    begin
                ap_sig_bdd_300 <= ((in_indices_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = tmp_31_i_fu_1289_p2));
    end process;


    -- ap_sig_bdd_440 assign process. --
    ap_sig_bdd_440_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_440 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_465 assign process. --
    ap_sig_bdd_465_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_465 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_472 assign process. --
    ap_sig_bdd_472_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_472 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_52 assign process. --
    ap_sig_bdd_52_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_52 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_560 assign process. --
    ap_sig_bdd_560_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_560 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_567 assign process. --
    ap_sig_bdd_567_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_567 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_584 assign process. --
    ap_sig_bdd_584_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_584 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_708 assign process. --
    ap_sig_bdd_708_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_708 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_721 assign process. --
    ap_sig_bdd_721_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_721 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_765 assign process. --
    ap_sig_bdd_765_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_765 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_781 assign process. --
    ap_sig_bdd_781_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_781 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_805 assign process. --
    ap_sig_bdd_805_assign_proc : process(ap_start, ap_done_reg, NUMBER_OF_DAYS_out_full_n, NUMBER_OF_INDICES_out_full_n)
    begin
                ap_sig_bdd_805 <= ((NUMBER_OF_INDICES_out_full_n = ap_const_logic_0) or (NUMBER_OF_DAYS_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_817 assign process. --
    ap_sig_bdd_817_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_817 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_826 assign process. --
    ap_sig_bdd_826_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_826 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_854 assign process. --
    ap_sig_bdd_854_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_854 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_16 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_16_assign_proc : process(ap_sig_bdd_147)
    begin
        if (ap_sig_bdd_147) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_17 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_17_assign_proc : process(ap_sig_bdd_1022)
    begin
        if (ap_sig_bdd_1022) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg1_fsm_18 assign process. --
    ap_sig_cseq_ST_pp1_stg1_fsm_18_assign_proc : process(ap_sig_bdd_567)
    begin
        if (ap_sig_bdd_567) then 
            ap_sig_cseq_ST_pp1_stg1_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg1_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg2_fsm_19 assign process. --
    ap_sig_cseq_ST_pp1_stg2_fsm_19_assign_proc : process(ap_sig_bdd_708)
    begin
        if (ap_sig_bdd_708) then 
            ap_sig_cseq_ST_pp1_stg2_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg2_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg3_fsm_20 assign process. --
    ap_sig_cseq_ST_pp1_stg3_fsm_20_assign_proc : process(ap_sig_bdd_781)
    begin
        if (ap_sig_bdd_781) then 
            ap_sig_cseq_ST_pp1_stg3_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg3_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg4_fsm_21 assign process. --
    ap_sig_cseq_ST_pp1_stg4_fsm_21_assign_proc : process(ap_sig_bdd_1306)
    begin
        if (ap_sig_bdd_1306) then 
            ap_sig_cseq_ST_pp1_stg4_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg4_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_26 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_26_assign_proc : process(ap_sig_bdd_295)
    begin
        if (ap_sig_bdd_295) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_27 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_27_assign_proc : process(ap_sig_bdd_1240)
    begin
        if (ap_sig_bdd_1240) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg1_fsm_28 assign process. --
    ap_sig_cseq_ST_pp3_stg1_fsm_28_assign_proc : process(ap_sig_bdd_584)
    begin
        if (ap_sig_bdd_584) then 
            ap_sig_cseq_ST_pp3_stg1_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg1_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg2_fsm_29 assign process. --
    ap_sig_cseq_ST_pp3_stg2_fsm_29_assign_proc : process(ap_sig_bdd_765)
    begin
        if (ap_sig_bdd_765) then 
            ap_sig_cseq_ST_pp3_stg2_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg2_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg3_fsm_30 assign process. --
    ap_sig_cseq_ST_pp3_stg3_fsm_30_assign_proc : process(ap_sig_bdd_721)
    begin
        if (ap_sig_bdd_721) then 
            ap_sig_cseq_ST_pp3_stg3_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg3_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg4_fsm_31 assign process. --
    ap_sig_cseq_ST_pp3_stg4_fsm_31_assign_proc : process(ap_sig_bdd_1264)
    begin
        if (ap_sig_bdd_1264) then 
            ap_sig_cseq_ST_pp3_stg4_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg4_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_1770)
    begin
        if (ap_sig_bdd_1770) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_1778)
    begin
        if (ap_sig_bdd_1778) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st126_fsm_32 assign process. --
    ap_sig_cseq_ST_st126_fsm_32_assign_proc : process(ap_sig_bdd_1275)
    begin
        if (ap_sig_bdd_1275) then 
            ap_sig_cseq_ST_st126_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st126_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_1786)
    begin
        if (ap_sig_bdd_1786) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_560)
    begin
        if (ap_sig_bdd_560) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_1385)
    begin
        if (ap_sig_bdd_1385) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_854)
    begin
        if (ap_sig_bdd_854) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_472)
    begin
        if (ap_sig_bdd_472) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_52)
    begin
        if (ap_sig_bdd_52) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_1393)
    begin
        if (ap_sig_bdd_1393) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_1854)
    begin
        if (ap_sig_bdd_1854) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_1862)
    begin
        if (ap_sig_bdd_1862) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_440)
    begin
        if (ap_sig_bdd_440) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_22 assign process. --
    ap_sig_cseq_ST_st69_fsm_22_assign_proc : process(ap_sig_bdd_1045)
    begin
        if (ap_sig_bdd_1045) then 
            ap_sig_cseq_ST_st69_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_817)
    begin
        if (ap_sig_bdd_817) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st70_fsm_23 assign process. --
    ap_sig_cseq_ST_st70_fsm_23_assign_proc : process(ap_sig_bdd_1511)
    begin
        if (ap_sig_bdd_1511) then 
            ap_sig_cseq_ST_st70_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st71_fsm_24 assign process. --
    ap_sig_cseq_ST_st71_fsm_24_assign_proc : process(ap_sig_bdd_1524)
    begin
        if (ap_sig_bdd_1524) then 
            ap_sig_cseq_ST_st71_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st72_fsm_25 assign process. --
    ap_sig_cseq_ST_st72_fsm_25_assign_proc : process(ap_sig_bdd_1064)
    begin
        if (ap_sig_bdd_1064) then 
            ap_sig_cseq_ST_st72_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_826)
    begin
        if (ap_sig_bdd_826) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_465)
    begin
        if (ap_sig_bdd_465) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_1635)
    begin
        if (ap_sig_bdd_1635) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    column_index_cast_i_fu_1276_p1 <= std_logic_vector(resize(unsigned(column_index_i_reg_853),32));
    column_index_fu_1376_p2 <= std_logic_vector(unsigned(column_index_i_reg_853) + unsigned(ap_const_lv31_1));
    exitcond2_i_fu_1254_p2 <= "1" when (i2_i_phi_fu_846_p4 = ap_const_lv3_6) else "0";
    exitcond_i_fu_1359_p2 <= "1" when (i8_i_phi_fu_942_p4 = ap_const_lv3_6) else "0";
    exitcond_i_i_fu_1147_p2 <= "1" when (i_i_i_reg_747 = ap_const_lv8_FC) else "0";

    -- grp_fu_1001_ce assign process. --
    grp_fu_1001_ce_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33)))) then 
            grp_fu_1001_ce <= ap_const_logic_1;
        else 
            grp_fu_1001_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1001_p0 <= reg_1048;
    grp_fu_1001_p1 <= ap_reg_ppstg_reg_1063_pp2_it33;

    -- grp_fu_1005_ce assign process. --
    grp_fu_1005_ce_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33)))) then 
            grp_fu_1005_ce <= ap_const_logic_1;
        else 
            grp_fu_1005_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1005_p0 <= reg_1096;
    grp_fu_1005_p1 <= ap_reg_ppstg_reg_1063_pp2_it33;

    -- grp_fu_1009_ce assign process. --
    grp_fu_1009_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, tmp_6_i_reg_1545, tmp_31_i_reg_1669, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it15, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it15, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it1, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it2, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it3, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it4, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it5, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it6, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it7, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it8, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it9, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it10, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it11, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it12, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it13, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it14, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it1, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it2, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it3, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it4, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it5, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it6, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it7, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it8, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it9, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it10, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it11, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it12, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it13, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it14)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((ap_const_lv1_0 = tmp_6_i_reg_1545) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it14))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = tmp_31_i_reg_1669) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it14))))) then 
            grp_fu_1009_ce <= ap_const_logic_1;
        else 
            grp_fu_1009_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_1009_p0 assign process. --
    grp_fu_1009_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_reg_ppiten_pp2_it1, tmp_5_i_tmp_4_i_reg_1554, tmp_30_i_shift_reg_load_i_reg_1678)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            grp_fu_1009_p0 <= tmp_30_i_shift_reg_load_i_reg_1678;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_1009_p0 <= tmp_5_i_tmp_4_i_reg_1554;
        else 
            grp_fu_1009_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1009_p1 assign process. --
    grp_fu_1009_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_reg_ppiten_pp2_it1, tmp_14_i_reg_1560, tmp_54_i_reg_1684)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            grp_fu_1009_p1 <= tmp_54_i_reg_1684;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_1009_p1 <= tmp_14_i_reg_1560;
        else 
            grp_fu_1009_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1013_ce assign process. --
    grp_fu_1013_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it28, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it16, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it17, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it18, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it19, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it20, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it21, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it22, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it23, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it24, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it25, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it26, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it27, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it16, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it17, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it18, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it19, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it20, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it21, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it22, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it23, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it24, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it25, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it26, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it27)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it21) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it27) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it21) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it26))))) then 
            grp_fu_1013_ce <= ap_const_logic_1;
        else 
            grp_fu_1013_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1013_p0 <= ap_const_lv32_0;
    grp_fu_1013_p1 <= reg_1080;

    -- grp_fu_1225_ce assign process. --
    grp_fu_1225_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, tmp_6_i_fu_1193_p2, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, tmp_6_i_reg_1545, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it15, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it28, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it1, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it2, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it3, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it4, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it5, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it6, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it7, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it8, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it9, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it10, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it11, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it12, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it13, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it14, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it16, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it17, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it18, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it19, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it20, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it21, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it22, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it23, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it24, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it25, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it26, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it27, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it30, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((tmp_6_i_fu_1193_p2 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32) or (ap_const_lv1_0 = tmp_6_i_reg_1545) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it21) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it27)))) then 
            grp_fu_1225_ce <= ap_const_logic_1;
        else 
            grp_fu_1225_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1225_p0 <= i1_i_phi_fu_795_p4;
    grp_fu_1225_p1 <= ap_const_lv32_6(4 - 1 downto 0);

    -- grp_fu_1324_ce assign process. --
    grp_fu_1324_ce_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_26, tmp_31_i_fu_1289_p2, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, tmp_31_i_reg_1669, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it15, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it1, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it2, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it3, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it4, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it5, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it6, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it7, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it8, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it9, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it10, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it11, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it12, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it13, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it14, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it16, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it17, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it18, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it19, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it20, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it21, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it22, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it23, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it24, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it25, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it26, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it27, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = tmp_31_i_fu_1289_p2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32) or (ap_const_lv1_0 = tmp_31_i_reg_1669) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it27) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it21) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it26)))) then 
            grp_fu_1324_ce <= ap_const_logic_1;
        else 
            grp_fu_1324_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1324_p0 <= i4_i_phi_fu_878_p4;
    grp_fu_1324_p1 <= ap_const_lv32_6(4 - 1 downto 0);

    -- grp_fu_950_ce assign process. --
    grp_fu_950_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_pp1_stg1_fsm_18, exitcond2_i_reg_1594, ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1, ap_sig_cseq_ST_pp3_stg1_fsm_28, exitcond_i_reg_1743, ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35, ap_sig_cseq_ST_pp1_stg2_fsm_19, ap_sig_cseq_ST_pp3_stg3_fsm_30, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37, ap_sig_cseq_ST_pp3_stg2_fsm_29, ap_sig_cseq_ST_pp1_stg3_fsm_20, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39, ap_sig_cseq_ST_pp1_stg0_fsm_17, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39, ap_sig_cseq_ST_pp3_stg0_fsm_27, ap_sig_cseq_ST_pp3_stg4_fsm_31, ap_sig_cseq_ST_pp1_stg4_fsm_21, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_19) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) or (ap_const_lv1_0 = exitcond2_i_reg_1594))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_20) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) or (ap_const_lv1_0 = exitcond2_i_reg_1594))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_21) and ((ap_const_lv1_0 = exitcond2_i_reg_1594))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17) and ((ap_const_lv1_0 = exitcond2_i_reg_1594))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_18) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) or (ap_const_lv1_0 = exitcond_i_reg_1743))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_30) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) or (ap_const_lv1_0 = exitcond_i_reg_1743))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) or (ap_const_lv1_0 = exitcond_i_reg_1743))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27) and ((ap_const_lv1_0 = exitcond_i_reg_1743))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_28) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1))))) then 
            grp_fu_950_ce <= ap_const_logic_1;
        else 
            grp_fu_950_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_950_p0 assign process. --
    grp_fu_950_p0_assign_proc : process(ap_reg_ppiten_pp0_it36, tmp_9_reg_803, ap_reg_ppiten_pp2_it36, tmp_8_reg_886, reg_1063, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it0, acc_return_q0, acc_return_q1, ap_sig_cseq_ST_pp1_stg2_fsm_19, ap_sig_cseq_ST_pp3_stg3_fsm_30, ap_sig_cseq_ST_pp3_stg2_fsm_29, ap_sig_cseq_ST_pp1_stg3_fsm_20, ap_sig_cseq_ST_pp3_stg0_fsm_27, ap_sig_cseq_ST_pp3_stg4_fsm_31, ap_sig_cseq_ST_pp1_stg4_fsm_21, tmp_1_phi_fu_821_p4, tmp_2_phi_fu_834_p4, tmp_7_phi_fu_904_p4, tmp_5_phi_fu_917_p4, tmp_3_phi_fu_930_p4, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27))) then 
            grp_fu_950_p0 <= tmp_8_reg_886;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31))) then 
            grp_fu_950_p0 <= tmp_7_phi_fu_904_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_30))) then 
            grp_fu_950_p0 <= tmp_5_phi_fu_917_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29))) then 
            grp_fu_950_p0 <= tmp_3_phi_fu_930_p4;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it36)) then 
            grp_fu_950_p0 <= acc_return_q1;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_21))) then 
            grp_fu_950_p0 <= tmp_9_reg_803;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_20))) then 
            grp_fu_950_p0 <= tmp_1_phi_fu_821_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_19))) then 
            grp_fu_950_p0 <= tmp_2_phi_fu_834_p4;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_950_p0 <= acc_return_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_950_p0 <= reg_1063;
        else 
            grp_fu_950_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_950_p1 assign process. --
    grp_fu_950_p1_assign_proc : process(ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp2_it36, reg_1056, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it0, ap_reg_ppstg_reg_1085_pp0_it35, ap_reg_ppstg_reg_1085_pp2_it35, reg_1102, reg_1109, ap_sig_cseq_ST_pp1_stg2_fsm_19, ap_sig_cseq_ST_pp3_stg3_fsm_30, reg_1122, ap_sig_cseq_ST_pp3_stg2_fsm_29, ap_sig_cseq_ST_pp1_stg3_fsm_20, reg_1141, ap_sig_cseq_ST_pp3_stg0_fsm_27, ap_sig_cseq_ST_pp3_stg4_fsm_31, ap_sig_cseq_ST_pp1_stg4_fsm_21, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27))) then 
            grp_fu_950_p1 <= reg_1141;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it36)) then 
            grp_fu_950_p1 <= ap_reg_ppstg_reg_1085_pp2_it35;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31)))) then 
            grp_fu_950_p1 <= reg_1109;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_30)))) then 
            grp_fu_950_p1 <= reg_1122;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_19)))) then 
            grp_fu_950_p1 <= reg_1102;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_950_p1 <= ap_reg_ppstg_reg_1085_pp0_it35;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_950_p1 <= reg_1056;
        else 
            grp_fu_950_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_956_ce assign process. --
    grp_fu_956_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38))))) then 
            grp_fu_956_ce <= ap_const_logic_1;
        else 
            grp_fu_956_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_956_p0 assign process. --
    grp_fu_956_p0_assign_proc : process(ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp2_it36, acc_weight_return_q0, acc_weight_return_q1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it36)) then 
            grp_fu_956_p0 <= acc_weight_return_q1;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_956_p0 <= acc_weight_return_q0;
        else 
            grp_fu_956_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_956_p1 assign process. --
    grp_fu_956_p1_assign_proc : process(ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp2_it36, reg_1096, reg_1116)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it36)) then 
            grp_fu_956_p1 <= reg_1116;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_956_p1 <= reg_1096;
        else 
            grp_fu_956_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_962_ce assign process. --
    grp_fu_962_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it40, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it41, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it40, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it41) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it38) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it40))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it40))))) then 
            grp_fu_962_ce <= ap_const_logic_1;
        else 
            grp_fu_962_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_962_p0 assign process. --
    grp_fu_962_p0_assign_proc : process(ap_reg_ppiten_pp0_it38, ap_reg_ppiten_pp2_it38, acc_weight_returnSquare_q0, acc_weight_returnSquare_q1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it38)) then 
            grp_fu_962_p0 <= acc_weight_returnSquare_q1;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it38)) then 
            grp_fu_962_p0 <= acc_weight_returnSquare_q0;
        else 
            grp_fu_962_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_962_p1 assign process. --
    grp_fu_962_p1_assign_proc : process(ap_reg_ppiten_pp0_it38, ap_reg_ppiten_pp2_it38, reg_1116, tmp_60_i_reg_1733)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it38)) then 
            grp_fu_962_p1 <= tmp_60_i_reg_1733;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it38)) then 
            grp_fu_962_p1 <= reg_1116;
        else 
            grp_fu_962_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_977_ce assign process. --
    grp_fu_977_ce_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it40, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it41) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it38) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it40)))) then 
            grp_fu_977_ce <= ap_const_logic_1;
        else 
            grp_fu_977_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_977_p0 <= acc_weight_returnA_returnB_q0;
    grp_fu_977_p1 <= tmp_67_i_reg_1738;

    -- grp_fu_987_ce assign process. --
    grp_fu_987_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st5_fsm_4, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it30, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31, ap_sig_cseq_ST_st2_fsm_1, exitcond_i_i_fu_1147_p2, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_i_i_fu_1147_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31))))) then 
            grp_fu_987_ce <= ap_const_logic_1;
        else 
            grp_fu_987_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_987_p0 assign process. --
    grp_fu_987_p0_assign_proc : process(ap_reg_ppiten_pp0_it30, ap_reg_ppiten_pp2_it30, reg_1085, tmp_i_i_reg_735, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it30) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it30))) then 
            grp_fu_987_p0 <= reg_1085;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_987_p0 <= tmp_i_i_reg_735;
        else 
            grp_fu_987_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_987_p1 assign process. --
    grp_fu_987_p1_assign_proc : process(ap_reg_ppiten_pp0_it30, ap_reg_ppiten_pp2_it30, reg_1085, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it30) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it30))) then 
            grp_fu_987_p1 <= reg_1085;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_987_p1 <= ap_const_lv32_3F70A3D7;
        else 
            grp_fu_987_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_993_ce assign process. --
    grp_fu_993_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it32) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33))))) then 
            grp_fu_993_ce <= ap_const_logic_1;
        else 
            grp_fu_993_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_993_p0 assign process. --
    grp_fu_993_p0_assign_proc : process(ap_reg_ppiten_pp0_it32, ap_reg_ppiten_pp2_it30, ap_reg_ppstg_reg_1085_pp0_it31, lnReturnA_load_reg_1704)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it30)) then 
            grp_fu_993_p0 <= lnReturnA_load_reg_1704;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it32)) then 
            grp_fu_993_p0 <= ap_reg_ppstg_reg_1085_pp0_it31;
        else 
            grp_fu_993_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_993_p1 assign process. --
    grp_fu_993_p1_assign_proc : process(ap_reg_ppiten_pp0_it32, ap_reg_ppiten_pp2_it30, ap_reg_ppstg_reg_1063_pp0_it31, reg_1085)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it30)) then 
            grp_fu_993_p1 <= reg_1085;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it32)) then 
            grp_fu_993_p1 <= ap_reg_ppstg_reg_1063_pp0_it31;
        else 
            grp_fu_993_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_997_ce assign process. --
    grp_fu_997_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31, ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it34) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it33))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it32) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it34) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1669_pp2_it33))))) then 
            grp_fu_997_ce <= ap_const_logic_1;
        else 
            grp_fu_997_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_997_p0 assign process. --
    grp_fu_997_p0_assign_proc : process(ap_reg_ppiten_pp0_it34, ap_reg_ppiten_pp2_it32, reg_1048, ap_reg_ppstg_reg_1085_pp2_it31)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it32)) then 
            grp_fu_997_p0 <= ap_reg_ppstg_reg_1085_pp2_it31;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it34)) then 
            grp_fu_997_p0 <= reg_1048;
        else 
            grp_fu_997_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_997_p1 assign process. --
    grp_fu_997_p1_assign_proc : process(ap_reg_ppiten_pp0_it34, ap_reg_ppiten_pp2_it32, ap_reg_ppstg_reg_1063_pp0_it33, ap_reg_ppstg_reg_1063_pp2_it31)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it32)) then 
            grp_fu_997_p1 <= ap_reg_ppstg_reg_1063_pp2_it31;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it34)) then 
            grp_fu_997_p1 <= ap_reg_ppstg_reg_1063_pp0_it33;
        else 
            grp_fu_997_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i1_i_cast_i_fu_1164_p1 <= std_logic_vector(resize(unsigned(i1_i_i_reg_759),32));

    -- i1_i_phi_fu_795_p4 assign process. --
    i1_i_phi_fu_795_p4_assign_proc : process(i1_i_reg_791, ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_reg_ppiten_pp0_it1, tmp_6_i_reg_1545, i_3_reg_1571)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = tmp_6_i_reg_1545))) then 
            i1_i_phi_fu_795_p4 <= i_3_reg_1571;
        else 
            i1_i_phi_fu_795_p4 <= i1_i_reg_791;
        end if; 
    end process;


    -- i2_i_phi_fu_846_p4 assign process. --
    i2_i_phi_fu_846_p4_assign_proc : process(i2_i_reg_842, ap_reg_ppiten_pp1_it1, exitcond2_i_reg_1594, ap_sig_cseq_ST_pp1_stg0_fsm_17, i_2_reg_1598)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond2_i_reg_1594) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_17))) then 
            i2_i_phi_fu_846_p4 <= i_2_reg_1598;
        else 
            i2_i_phi_fu_846_p4 <= i2_i_reg_842;
        end if; 
    end process;


    -- i4_i_phi_fu_878_p4 assign process. --
    i4_i_phi_fu_878_p4_assign_proc : process(i4_i_reg_874, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_reg_ppiten_pp2_it1, tmp_31_i_reg_1669, i_5_reg_1694)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_31_i_reg_1669))) then 
            i4_i_phi_fu_878_p4 <= i_5_reg_1694;
        else 
            i4_i_phi_fu_878_p4 <= i4_i_reg_874;
        end if; 
    end process;


    -- i8_i_phi_fu_942_p4 assign process. --
    i8_i_phi_fu_942_p4_assign_proc : process(i8_i_reg_938, ap_reg_ppiten_pp3_it1, exitcond_i_reg_1743, ap_sig_cseq_ST_pp3_stg0_fsm_27, i_4_reg_1747)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_i_reg_1743) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_27))) then 
            i8_i_phi_fu_942_p4 <= i_4_reg_1747;
        else 
            i8_i_phi_fu_942_p4 <= i8_i_reg_938;
        end if; 
    end process;

    i_1_fu_1178_p2 <= std_logic_vector(unsigned(i1_i_i_reg_759) + unsigned(ap_const_lv31_1));
    i_2_fu_1260_p2 <= std_logic_vector(unsigned(i2_i_phi_fu_846_p4) + unsigned(ap_const_lv3_1));
    i_3_fu_1231_p2 <= std_logic_vector(unsigned(i1_i_phi_fu_795_p4) + unsigned(ap_const_lv32_1));
    i_4_fu_1365_p2 <= std_logic_vector(unsigned(i8_i_phi_fu_942_p4) + unsigned(ap_const_lv3_1));
    i_5_fu_1330_p2 <= std_logic_vector(unsigned(i4_i_phi_fu_878_p4) + unsigned(ap_const_lv32_1));
    i_fu_1158_p2 <= std_logic_vector(unsigned(i_i_i_reg_747) + unsigned(ap_const_lv8_1));

    -- in_indices_TREADY assign process. --
    in_indices_TREADY_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp0_stg0_fsm_16, tmp_6_i_fu_1193_p2, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_26, tmp_31_i_fu_1289_p2, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st72_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (tmp_6_i_fu_1193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_lv1_0 = tmp_31_i_fu_1289_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            in_indices_TREADY <= ap_const_logic_1;
        else 
            in_indices_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- lnReturnA_address0 assign process. --
    lnReturnA_address0_assign_proc : process(ap_reg_ppiten_pp0_it30, ap_reg_ppiten_pp2_it28, tmp_25_i_fu_1242_p1, tmp_65_i_fu_1346_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it30)) then 
            lnReturnA_address0 <= tmp_25_i_fu_1242_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it28)) then 
            lnReturnA_address0 <= tmp_65_i_fu_1346_p1(8 - 1 downto 0);
        else 
            lnReturnA_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- lnReturnA_ce0 assign process. --
    lnReturnA_ce0_assign_proc : process(ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it30, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it28)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it30) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it28) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            lnReturnA_ce0 <= ap_const_logic_1;
        else 
            lnReturnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lnReturnA_d0 <= reg_1085;

    -- lnReturnA_we0 assign process. --
    lnReturnA_we0_assign_proc : process(ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it30, ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it30) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1545_pp0_it29)))) then 
            lnReturnA_we0 <= ap_const_logic_1;
        else 
            lnReturnA_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_returnA_out_V_din <= tmp_2_reg_829;

    -- sum_returnA_out_V_write assign process. --
    sum_returnA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st126_fsm_32, ap_sig_bdd_1292)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
            sum_returnA_out_V_write <= ap_const_logic_1;
        else 
            sum_returnA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_return_out_V_din <= tmp_3_reg_925;

    -- sum_return_out_V_write assign process. --
    sum_return_out_V_write_assign_proc : process(ap_sig_cseq_ST_st126_fsm_32, ap_sig_bdd_1292)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
            sum_return_out_V_write <= ap_const_logic_1;
        else 
            sum_return_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_out_V_din <= reg_1056;

    -- sum_weight_out_V_write assign process. --
    sum_weight_out_V_write_assign_proc : process(ap_sig_cseq_ST_st126_fsm_32, ap_sig_bdd_1292)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
            sum_weight_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnA_out_V_din <= tmp_9_reg_803;

    -- sum_weight_returnA_out_V_write assign process. --
    sum_weight_returnA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st126_fsm_32, ap_sig_bdd_1292)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
            sum_weight_returnA_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnA_returnB_out_din <= tmp_8_reg_886;

    -- sum_weight_returnA_returnB_out_write assign process. --
    sum_weight_returnA_returnB_out_write_assign_proc : process(ap_sig_cseq_ST_st126_fsm_32, ap_sig_bdd_1292)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
            sum_weight_returnA_returnB_out_write <= ap_const_logic_1;
        else 
            sum_weight_returnA_returnB_out_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnSquareA_out_V_din <= tmp_1_reg_816;

    -- sum_weight_returnSquareA_out_V_write assign process. --
    sum_weight_returnSquareA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st126_fsm_32, ap_sig_bdd_1292)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
            sum_weight_returnSquareA_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnSquareA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnSquare_out_V_din <= tmp_5_reg_912;

    -- sum_weight_returnSquare_out_V_write assign process. --
    sum_weight_returnSquare_out_V_write_assign_proc : process(ap_sig_cseq_ST_st126_fsm_32, ap_sig_bdd_1292)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
            sum_weight_returnSquare_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnSquare_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_return_out_V_din <= tmp_7_reg_899;

    -- sum_weight_return_out_V_write assign process. --
    sum_weight_return_out_V_write_assign_proc : process(ap_sig_cseq_ST_st126_fsm_32, ap_sig_bdd_1292)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st126_fsm_32) and not(ap_sig_bdd_1292))) then 
            sum_weight_return_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_return_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_i_fu_1266_p1 <= std_logic_vector(resize(unsigned(i2_i_phi_fu_846_p4),64));
    tmp_14_i_fu_1216_p1 <= in_indices_TDATA;
    tmp_16_i_fu_1220_p1 <= std_logic_vector(resize(unsigned(i1_i_phi_fu_795_p4),64));
    tmp_17_i_fu_1247_p1 <= std_logic_vector(resize(unsigned(grp_fu_1225_p2),64));
    tmp_1_i_fu_1188_p2 <= std_logic_vector(unsigned(NUMBER_OF_DAYS) + unsigned(ap_const_lv32_FFFFFFFF));

    -- tmp_1_phi_fu_821_p4 assign process. --
    tmp_1_phi_fu_821_p4_assign_proc : process(tmp_1_reg_816, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1, reg_1129, ap_sig_cseq_ST_pp1_stg3_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_20))) then 
            tmp_1_phi_fu_821_p4 <= reg_1129;
        else 
            tmp_1_phi_fu_821_p4 <= tmp_1_reg_816;
        end if; 
    end process;

    tmp_24_i_fu_1237_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_reg_1549_pp0_it29) + unsigned(ap_const_lv31_7FFFFFFF));
    tmp_25_i_fu_1242_p1 <= std_logic_vector(resize(unsigned(tmp_24_i_fu_1237_p2),64));
    tmp_26_i_fu_1280_p2 <= "1" when (signed(column_index_cast_i_fu_1276_p1) < signed(NUMBER_OF_INDICES)) else "0";
    tmp_28_i_fu_1285_p1 <= in_indices_TDATA;

    -- tmp_2_phi_fu_834_p4 assign process. --
    tmp_2_phi_fu_834_p4_assign_proc : process(tmp_2_reg_829, reg_1073, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1, ap_sig_cseq_ST_pp1_stg2_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1594_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_19))) then 
            tmp_2_phi_fu_834_p4 <= reg_1073;
        else 
            tmp_2_phi_fu_834_p4 <= tmp_2_reg_829;
        end if; 
    end process;


    -- tmp_30_i_phi_fu_868_p4 assign process. --
    tmp_30_i_phi_fu_868_p4_assign_proc : process(tmp_30_i_reg_865, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_reg_ppiten_pp2_it1, tmp_31_i_reg_1669, tmp_30_i_shift_reg_load_i_reg_1678)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_31_i_reg_1669))) then 
            tmp_30_i_phi_fu_868_p4 <= tmp_30_i_shift_reg_load_i_reg_1678;
        else 
            tmp_30_i_phi_fu_868_p4 <= tmp_30_i_reg_865;
        end if; 
    end process;

    tmp_30_i_shift_reg_load_i_fu_1307_p3 <= 
        tmp_30_i_phi_fu_868_p4 when (tmp_32_i_fu_1301_p2(0) = '1') else 
        shift_reg_load1_i_fu_224;
    tmp_31_i_fu_1289_p2 <= "1" when (signed(i4_i_phi_fu_878_p4) > signed(tmp_1_i_reg_1539)) else "0";
    tmp_32_i_fu_1301_p2 <= "1" when (i4_i_phi_fu_878_p4 = ap_const_lv32_1) else "0";

    -- tmp_3_phi_fu_930_p4 assign process. --
    tmp_3_phi_fu_930_p4_assign_proc : process(tmp_3_reg_925, reg_1073, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1, ap_sig_cseq_ST_pp3_stg2_fsm_29)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_29))) then 
            tmp_3_phi_fu_930_p4 <= reg_1073;
        else 
            tmp_3_phi_fu_930_p4 <= tmp_3_reg_925;
        end if; 
    end process;

    tmp_4_fu_1297_p1 <= i4_i_phi_fu_878_p4(31 - 1 downto 0);

    -- tmp_4_i_phi_fu_774_p4 assign process. --
    tmp_4_i_phi_fu_774_p4_assign_proc : process(tmp_4_i_reg_770, ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_reg_ppiten_pp0_it1, tmp_6_i_reg_1545, tmp_14_i_reg_1560)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = tmp_6_i_reg_1545))) then 
            tmp_4_i_phi_fu_774_p4 <= tmp_14_i_reg_1560;
        else 
            tmp_4_i_phi_fu_774_p4 <= tmp_4_i_reg_770;
        end if; 
    end process;

    tmp_54_i_fu_1315_p1 <= in_indices_TDATA;
    tmp_56_i_fu_1319_p1 <= std_logic_vector(resize(unsigned(i4_i_phi_fu_878_p4),64));
    tmp_57_i_fu_1351_p1 <= std_logic_vector(resize(unsigned(grp_fu_1324_p2),64));

    -- tmp_5_i_phi_fu_785_p4 assign process. --
    tmp_5_i_phi_fu_785_p4_assign_proc : process(tmp_5_i_reg_782, ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_reg_ppiten_pp0_it1, tmp_6_i_reg_1545, tmp_5_i_tmp_4_i_reg_1554)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = tmp_6_i_reg_1545))) then 
            tmp_5_i_phi_fu_785_p4 <= tmp_5_i_tmp_4_i_reg_1554;
        else 
            tmp_5_i_phi_fu_785_p4 <= tmp_5_i_reg_782;
        end if; 
    end process;

    tmp_5_i_tmp_4_i_fu_1208_p3 <= 
        tmp_5_i_phi_fu_785_p4 when (tmp_7_i_fu_1202_p2(0) = '1') else 
        tmp_4_i_phi_fu_774_p4;

    -- tmp_5_phi_fu_917_p4 assign process. --
    tmp_5_phi_fu_917_p4_assign_proc : process(tmp_5_reg_912, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1, ap_sig_cseq_ST_pp3_stg3_fsm_30, reg_1129)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_30))) then 
            tmp_5_phi_fu_917_p4 <= reg_1129;
        else 
            tmp_5_phi_fu_917_p4 <= tmp_5_reg_912;
        end if; 
    end process;

    tmp_64_i_fu_1341_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_4_reg_1673_pp2_it27) + unsigned(ap_const_lv31_7FFFFFFF));
    tmp_65_i_fu_1346_p1 <= std_logic_vector(resize(unsigned(tmp_64_i_fu_1341_p2),64));
    tmp_69_i_i_fu_1168_p2 <= "1" when (signed(i1_i_cast_i_fu_1164_p1) < signed(NUMBER_OF_DAYS)) else "0";
    tmp_6_i_fu_1193_p2 <= "1" when (signed(i1_i_phi_fu_795_p4) > signed(tmp_1_i_reg_1539)) else "0";
    tmp_70_i_i_fu_1153_p1 <= std_logic_vector(resize(unsigned(i_i_i_reg_747),64));
    tmp_71_i_i_fu_1173_p1 <= std_logic_vector(resize(unsigned(i1_i_i_reg_759),64));
    tmp_7_i_fu_1202_p2 <= "1" when (i1_i_phi_fu_795_p4 = ap_const_lv32_1) else "0";

    -- tmp_7_phi_fu_904_p4 assign process. --
    tmp_7_phi_fu_904_p4_assign_proc : process(tmp_7_reg_899, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1, reg_1135, ap_sig_cseq_ST_pp3_stg4_fsm_31)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1743_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_31))) then 
            tmp_7_phi_fu_904_p4 <= reg_1135;
        else 
            tmp_7_phi_fu_904_p4 <= tmp_7_reg_899;
        end if; 
    end process;

    tmp_fu_1198_p1 <= i1_i_phi_fu_795_p4(31 - 1 downto 0);
    tmp_i_22_fu_1371_p1 <= std_logic_vector(resize(unsigned(i8_i_phi_fu_942_p4),64));
    tmp_i_fu_1184_p1 <= in_indices_TDATA;

    -- weight_rom_address0 assign process. --
    weight_rom_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, tmp_70_i_i_fu_1153_p1, tmp_56_i_fu_1319_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            weight_rom_address0 <= tmp_70_i_i_fu_1153_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            weight_rom_address0 <= tmp_56_i_fu_1319_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            weight_rom_address0 <= ap_const_lv8_0;
        else 
            weight_rom_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- weight_rom_address1 assign process. --
    weight_rom_address1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13, tmp_71_i_i_fu_1173_p1, tmp_16_i_fu_1220_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            weight_rom_address1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_address1 <= ap_const_lv8_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            weight_rom_address1 <= tmp_16_i_fu_1220_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            weight_rom_address1 <= tmp_71_i_i_fu_1173_p1(8 - 1 downto 0);
        else 
            weight_rom_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- weight_rom_ce0 assign process. --
    weight_rom_ce0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp2_stg0_fsm_26, ap_sig_bdd_300, ap_reg_ppiten_pp2_it0, ap_sig_bdd_805, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_805)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_300 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))))) then 
            weight_rom_ce0 <= ap_const_logic_1;
        else 
            weight_rom_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_ce1 assign process. --
    weight_rom_ce1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp0_stg0_fsm_16, ap_sig_bdd_154, ap_reg_ppiten_pp0_it0, ap_sig_bdd_805, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_805)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_16) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_154 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            weight_rom_ce1 <= ap_const_logic_1;
        else 
            weight_rom_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_d0 assign process. --
    weight_rom_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, reg_1048, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            weight_rom_d0 <= reg_1048;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_d0 <= ap_const_lv32_3F800000;
        else 
            weight_rom_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_rom_d1 assign process. --
    weight_rom_d1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, reg_1073, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            weight_rom_d1 <= reg_1073;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_d1 <= ap_const_lv32_3F800000;
        else 
            weight_rom_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_rom_we0 assign process. --
    weight_rom_we0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_805, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_805)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            weight_rom_we0 <= ap_const_logic_1;
        else 
            weight_rom_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_we1 assign process. --
    weight_rom_we1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_805, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_805)) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            weight_rom_we1 <= ap_const_logic_1;
        else 
            weight_rom_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
