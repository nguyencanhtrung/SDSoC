// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="arraycopy,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.437500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module arraycopy (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        m_axi_gmem32_AWVALID,
        m_axi_gmem32_AWREADY,
        m_axi_gmem32_AWADDR,
        m_axi_gmem32_AWID,
        m_axi_gmem32_AWLEN,
        m_axi_gmem32_AWSIZE,
        m_axi_gmem32_AWBURST,
        m_axi_gmem32_AWLOCK,
        m_axi_gmem32_AWCACHE,
        m_axi_gmem32_AWPROT,
        m_axi_gmem32_AWQOS,
        m_axi_gmem32_AWREGION,
        m_axi_gmem32_AWUSER,
        m_axi_gmem32_WVALID,
        m_axi_gmem32_WREADY,
        m_axi_gmem32_WDATA,
        m_axi_gmem32_WSTRB,
        m_axi_gmem32_WLAST,
        m_axi_gmem32_WID,
        m_axi_gmem32_WUSER,
        m_axi_gmem32_ARVALID,
        m_axi_gmem32_ARREADY,
        m_axi_gmem32_ARADDR,
        m_axi_gmem32_ARID,
        m_axi_gmem32_ARLEN,
        m_axi_gmem32_ARSIZE,
        m_axi_gmem32_ARBURST,
        m_axi_gmem32_ARLOCK,
        m_axi_gmem32_ARCACHE,
        m_axi_gmem32_ARPROT,
        m_axi_gmem32_ARQOS,
        m_axi_gmem32_ARREGION,
        m_axi_gmem32_ARUSER,
        m_axi_gmem32_RVALID,
        m_axi_gmem32_RREADY,
        m_axi_gmem32_RDATA,
        m_axi_gmem32_RLAST,
        m_axi_gmem32_RID,
        m_axi_gmem32_RUSER,
        m_axi_gmem32_RRESP,
        m_axi_gmem32_BVALID,
        m_axi_gmem32_BREADY,
        m_axi_gmem32_BRESP,
        m_axi_gmem32_BID,
        m_axi_gmem32_BUSER,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b00000;
parameter    ap_ST_st2_fsm_1 = 5'b1;
parameter    ap_ST_st3_fsm_2 = 5'b10;
parameter    ap_ST_st4_fsm_3 = 5'b11;
parameter    ap_ST_st5_fsm_4 = 5'b100;
parameter    ap_ST_st6_fsm_5 = 5'b101;
parameter    ap_ST_st7_fsm_6 = 5'b110;
parameter    ap_ST_st8_fsm_7 = 5'b111;
parameter    ap_ST_st9_fsm_8 = 5'b1000;
parameter    ap_ST_st10_fsm_9 = 5'b1001;
parameter    ap_ST_st11_fsm_10 = 5'b1010;
parameter    ap_ST_st12_fsm_11 = 5'b1011;
parameter    ap_ST_st13_fsm_12 = 5'b1100;
parameter    ap_ST_st14_fsm_13 = 5'b1101;
parameter    ap_ST_st15_fsm_14 = 5'b1110;
parameter    ap_ST_st16_fsm_15 = 5'b1111;
parameter    ap_ST_st17_fsm_16 = 5'b10000;
parameter    ap_ST_st18_fsm_17 = 5'b10001;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM32_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM32_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM32_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM32_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM32_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM32_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM32_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM32_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM32_USER_VALUE = 0;
parameter    C_M_AXI_GMEM32_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM32_CACHE_VALUE = 3;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv6_10 = 6'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_GMEM32_WSTRB_WIDTH = (C_M_AXI_GMEM32_DATA_WIDTH / ap_const_int64_8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem32_AWVALID;
input   m_axi_gmem32_AWREADY;
output  [C_M_AXI_GMEM32_ADDR_WIDTH - 1 : 0] m_axi_gmem32_AWADDR;
output  [C_M_AXI_GMEM32_ID_WIDTH - 1 : 0] m_axi_gmem32_AWID;
output  [7:0] m_axi_gmem32_AWLEN;
output  [2:0] m_axi_gmem32_AWSIZE;
output  [1:0] m_axi_gmem32_AWBURST;
output  [1:0] m_axi_gmem32_AWLOCK;
output  [3:0] m_axi_gmem32_AWCACHE;
output  [2:0] m_axi_gmem32_AWPROT;
output  [3:0] m_axi_gmem32_AWQOS;
output  [3:0] m_axi_gmem32_AWREGION;
output  [C_M_AXI_GMEM32_AWUSER_WIDTH - 1 : 0] m_axi_gmem32_AWUSER;
output   m_axi_gmem32_WVALID;
input   m_axi_gmem32_WREADY;
output  [C_M_AXI_GMEM32_DATA_WIDTH - 1 : 0] m_axi_gmem32_WDATA;
output  [C_M_AXI_GMEM32_WSTRB_WIDTH - 1 : 0] m_axi_gmem32_WSTRB;
output   m_axi_gmem32_WLAST;
output  [C_M_AXI_GMEM32_ID_WIDTH - 1 : 0] m_axi_gmem32_WID;
output  [C_M_AXI_GMEM32_WUSER_WIDTH - 1 : 0] m_axi_gmem32_WUSER;
output   m_axi_gmem32_ARVALID;
input   m_axi_gmem32_ARREADY;
output  [C_M_AXI_GMEM32_ADDR_WIDTH - 1 : 0] m_axi_gmem32_ARADDR;
output  [C_M_AXI_GMEM32_ID_WIDTH - 1 : 0] m_axi_gmem32_ARID;
output  [7:0] m_axi_gmem32_ARLEN;
output  [2:0] m_axi_gmem32_ARSIZE;
output  [1:0] m_axi_gmem32_ARBURST;
output  [1:0] m_axi_gmem32_ARLOCK;
output  [3:0] m_axi_gmem32_ARCACHE;
output  [2:0] m_axi_gmem32_ARPROT;
output  [3:0] m_axi_gmem32_ARQOS;
output  [3:0] m_axi_gmem32_ARREGION;
output  [C_M_AXI_GMEM32_ARUSER_WIDTH - 1 : 0] m_axi_gmem32_ARUSER;
input   m_axi_gmem32_RVALID;
output   m_axi_gmem32_RREADY;
input  [C_M_AXI_GMEM32_DATA_WIDTH - 1 : 0] m_axi_gmem32_RDATA;
input   m_axi_gmem32_RLAST;
input  [C_M_AXI_GMEM32_ID_WIDTH - 1 : 0] m_axi_gmem32_RID;
input  [C_M_AXI_GMEM32_RUSER_WIDTH - 1 : 0] m_axi_gmem32_RUSER;
input  [1:0] m_axi_gmem32_RRESP;
input   m_axi_gmem32_BVALID;
output   m_axi_gmem32_BREADY;
input  [1:0] m_axi_gmem32_BRESP;
input  [C_M_AXI_GMEM32_ID_WIDTH - 1 : 0] m_axi_gmem32_BID;
input  [C_M_AXI_GMEM32_BUSER_WIDTH - 1 : 0] m_axi_gmem32_BUSER;
output   interrupt;

wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [4:0] ap_CS_fsm = 5'b00000;
reg    ap_ready;
wire   [31:0] a;
wire   [31:0] b;
wire   [31:0] n;
wire   [31:0] ap_return;
wire    arraycopy_AXILiteS_s_axi_U_ap_dummy_ce;
reg    gmem32_AWVALID;
wire    gmem32_AWREADY;
wire   [31:0] gmem32_AWADDR;
wire   [0:0] gmem32_AWID;
wire   [31:0] gmem32_AWLEN;
wire   [2:0] gmem32_AWSIZE;
wire   [1:0] gmem32_AWBURST;
wire   [1:0] gmem32_AWLOCK;
wire   [3:0] gmem32_AWCACHE;
wire   [2:0] gmem32_AWPROT;
wire   [3:0] gmem32_AWQOS;
wire   [3:0] gmem32_AWREGION;
wire   [0:0] gmem32_AWUSER;
reg    gmem32_WVALID;
wire    gmem32_WREADY;
wire   [31:0] gmem32_WDATA;
wire   [3:0] gmem32_WSTRB;
wire    gmem32_WLAST;
wire   [0:0] gmem32_WID;
wire   [0:0] gmem32_WUSER;
reg    gmem32_ARVALID;
wire    gmem32_ARREADY;
reg   [31:0] gmem32_ARADDR;
wire   [0:0] gmem32_ARID;
wire   [31:0] gmem32_ARLEN;
wire   [2:0] gmem32_ARSIZE;
wire   [1:0] gmem32_ARBURST;
wire   [1:0] gmem32_ARLOCK;
wire   [3:0] gmem32_ARCACHE;
wire   [2:0] gmem32_ARPROT;
wire   [3:0] gmem32_ARQOS;
wire   [3:0] gmem32_ARREGION;
wire   [0:0] gmem32_ARUSER;
wire    gmem32_RVALID;
reg    gmem32_RREADY;
wire   [31:0] gmem32_RDATA;
wire    gmem32_RLAST;
wire   [0:0] gmem32_RID;
wire   [0:0] gmem32_RUSER;
wire   [1:0] gmem32_RRESP;
wire    gmem32_BVALID;
reg    gmem32_BREADY;
wire   [1:0] gmem32_BRESP;
wire   [0:0] gmem32_BID;
wire   [0:0] gmem32_BUSER;
wire    arraycopy_gmem32_m_axi_U_ap_dummy_ce;
wire   [29:0] a1_fu_129_p4;
reg   [29:0] a1_reg_260;
reg    ap_sig_ioackin_gmem32_ARREADY;
reg   [31:0] val_reg_271;
wire   [30:0] tmp_4_cast_fu_160_p1;
reg   [30:0] tmp_4_cast_reg_276;
wire   [30:0] tmp_6_cast_fu_164_p1;
reg   [30:0] tmp_6_cast_reg_281;
wire   [5:0] n_assign_fu_191_p3;
reg   [5:0] n_assign_reg_286;
wire   [4:0] i_1_fu_208_p2;
reg   [4:0] i_1_reg_294;
wire   [30:0] a2_sum_fu_218_p2;
reg   [30:0] a2_sum_reg_299;
wire   [0:0] tmp_2_fu_203_p2;
wire   [30:0] b4_sum_fu_223_p2;
reg   [30:0] b4_sum_reg_304;
reg   [31:0] val_2_reg_315;
reg    ap_sig_ioackin_gmem32_AWREADY;
reg    ap_sig_ioackin_gmem32_WREADY;
wire   [31:0] tmp_0_val_fu_253_p3;
reg   [31:0] tmp_0_val_reg_327;
reg   [31:0] val1_reg_107;
reg   [4:0] i_reg_117;
wire   [63:0] tmp_6_fu_139_p1;
wire   [63:0] a2_sum_cast_fu_228_p1;
wire   [63:0] b4_sum_cast_fu_238_p1;
reg    ap_reg_ioackin_gmem32_ARREADY = 1'b0;
reg    ap_reg_ioackin_gmem32_AWREADY = 1'b0;
reg    ap_reg_ioackin_gmem32_WREADY = 1'b0;
wire   [29:0] tmp_fu_150_p4;
wire   [0:0] tmp_3_fu_167_p3;
wire   [0:0] tmp_1_fu_175_p2;
wire   [0:0] or_cond_fu_181_p2;
wire   [5:0] tmp_4_fu_187_p1;
wire   [5:0] i_cast_cast_fu_199_p1;
wire   [30:0] tmp_3_cast_fu_214_p1;
wire   [0:0] tmp_5_fu_248_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_sig_bdd_269;


arraycopy_AXILiteS_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
arraycopy_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ACLK_EN( arraycopy_AXILiteS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .a( a ),
    .b( b ),
    .n( n )
);

arraycopy_gmem32_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_ID_WIDTH( C_M_AXI_GMEM32_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_GMEM32_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_GMEM32_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_GMEM32_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_GMEM32_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_GMEM32_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_GMEM32_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_GMEM32_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM32_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM32_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM32_CACHE_VALUE ))
arraycopy_gmem32_m_axi_U(
    .AWVALID( m_axi_gmem32_AWVALID ),
    .AWREADY( m_axi_gmem32_AWREADY ),
    .AWADDR( m_axi_gmem32_AWADDR ),
    .AWID( m_axi_gmem32_AWID ),
    .AWLEN( m_axi_gmem32_AWLEN ),
    .AWSIZE( m_axi_gmem32_AWSIZE ),
    .AWBURST( m_axi_gmem32_AWBURST ),
    .AWLOCK( m_axi_gmem32_AWLOCK ),
    .AWCACHE( m_axi_gmem32_AWCACHE ),
    .AWPROT( m_axi_gmem32_AWPROT ),
    .AWQOS( m_axi_gmem32_AWQOS ),
    .AWREGION( m_axi_gmem32_AWREGION ),
    .AWUSER( m_axi_gmem32_AWUSER ),
    .WVALID( m_axi_gmem32_WVALID ),
    .WREADY( m_axi_gmem32_WREADY ),
    .WDATA( m_axi_gmem32_WDATA ),
    .WSTRB( m_axi_gmem32_WSTRB ),
    .WLAST( m_axi_gmem32_WLAST ),
    .WID( m_axi_gmem32_WID ),
    .WUSER( m_axi_gmem32_WUSER ),
    .ARVALID( m_axi_gmem32_ARVALID ),
    .ARREADY( m_axi_gmem32_ARREADY ),
    .ARADDR( m_axi_gmem32_ARADDR ),
    .ARID( m_axi_gmem32_ARID ),
    .ARLEN( m_axi_gmem32_ARLEN ),
    .ARSIZE( m_axi_gmem32_ARSIZE ),
    .ARBURST( m_axi_gmem32_ARBURST ),
    .ARLOCK( m_axi_gmem32_ARLOCK ),
    .ARCACHE( m_axi_gmem32_ARCACHE ),
    .ARPROT( m_axi_gmem32_ARPROT ),
    .ARQOS( m_axi_gmem32_ARQOS ),
    .ARREGION( m_axi_gmem32_ARREGION ),
    .ARUSER( m_axi_gmem32_ARUSER ),
    .RVALID( m_axi_gmem32_RVALID ),
    .RREADY( m_axi_gmem32_RREADY ),
    .RDATA( m_axi_gmem32_RDATA ),
    .RLAST( m_axi_gmem32_RLAST ),
    .RID( m_axi_gmem32_RID ),
    .RUSER( m_axi_gmem32_RUSER ),
    .RRESP( m_axi_gmem32_RRESP ),
    .BVALID( m_axi_gmem32_BVALID ),
    .BREADY( m_axi_gmem32_BREADY ),
    .BRESP( m_axi_gmem32_BRESP ),
    .BID( m_axi_gmem32_BID ),
    .BUSER( m_axi_gmem32_BUSER ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ACLK_EN( arraycopy_gmem32_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( gmem32_ARVALID ),
    .I_ARREADY( gmem32_ARREADY ),
    .I_ARADDR( gmem32_ARADDR ),
    .I_ARID( gmem32_ARID ),
    .I_ARLEN( gmem32_ARLEN ),
    .I_ARSIZE( gmem32_ARSIZE ),
    .I_ARLOCK( gmem32_ARLOCK ),
    .I_ARCACHE( gmem32_ARCACHE ),
    .I_ARQOS( gmem32_ARQOS ),
    .I_ARPROT( gmem32_ARPROT ),
    .I_ARUSER( gmem32_ARUSER ),
    .I_ARBURST( gmem32_ARBURST ),
    .I_ARREGION( gmem32_ARREGION ),
    .I_RVALID( gmem32_RVALID ),
    .I_RREADY( gmem32_RREADY ),
    .I_RDATA( gmem32_RDATA ),
    .I_RID( gmem32_RID ),
    .I_RUSER( gmem32_RUSER ),
    .I_RRESP( gmem32_RRESP ),
    .I_RLAST( gmem32_RLAST ),
    .I_AWVALID( gmem32_AWVALID ),
    .I_AWREADY( gmem32_AWREADY ),
    .I_AWADDR( gmem32_AWADDR ),
    .I_AWID( gmem32_AWID ),
    .I_AWLEN( gmem32_AWLEN ),
    .I_AWSIZE( gmem32_AWSIZE ),
    .I_AWLOCK( gmem32_AWLOCK ),
    .I_AWCACHE( gmem32_AWCACHE ),
    .I_AWQOS( gmem32_AWQOS ),
    .I_AWPROT( gmem32_AWPROT ),
    .I_AWUSER( gmem32_AWUSER ),
    .I_AWBURST( gmem32_AWBURST ),
    .I_AWREGION( gmem32_AWREGION ),
    .I_WVALID( gmem32_WVALID ),
    .I_WREADY( gmem32_WREADY ),
    .I_WDATA( gmem32_WDATA ),
    .I_WID( gmem32_WID ),
    .I_WUSER( gmem32_WUSER ),
    .I_WLAST( gmem32_WLAST ),
    .I_WSTRB( gmem32_WSTRB ),
    .I_BVALID( gmem32_BVALID ),
    .I_BREADY( gmem32_BREADY ),
    .I_BRESP( gmem32_BRESP ),
    .I_BID( gmem32_BID ),
    .I_BUSER( gmem32_BUSER )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_gmem32_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_gmem32_ARREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_gmem32_ARREADY))) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_gmem32_ARREADY)))) begin
            ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == gmem32_ARREADY) & ~(ap_start == ap_const_logic_0)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & (ap_const_logic_1 == gmem32_ARREADY)))) begin
            ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_gmem32_AWREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_gmem32_AWREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
            if (~((ap_const_logic_0 == ap_sig_ioackin_gmem32_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_gmem32_WREADY))) begin
                ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == gmem32_AWREADY)) begin
                ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ioackin_gmem32_WREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_gmem32_WREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
            if (~((ap_const_logic_0 == ap_sig_ioackin_gmem32_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_gmem32_WREADY))) begin
                ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == gmem32_WREADY)) begin
                ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_1;
            end
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~(gmem32_BVALID == ap_const_logic_0))) begin
        i_reg_117 <= i_1_reg_294;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        i_reg_117 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~(gmem32_BVALID == ap_const_logic_0))) begin
        val1_reg_107 <= tmp_0_val_reg_327;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        val1_reg_107 <= val_reg_271;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_gmem32_ARREADY)))) begin
        a1_reg_260 <= {{a[ap_const_lv32_1F : ap_const_lv32_2]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(tmp_2_fu_203_p2 == ap_const_lv1_0))) begin
        a2_sum_reg_299 <= a2_sum_fu_218_p2;
        b4_sum_reg_304 <= b4_sum_fu_223_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        i_1_reg_294 <= i_1_fu_208_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        n_assign_reg_286 <= n_assign_fu_191_p3;
        tmp_4_cast_reg_276[0] <= tmp_4_cast_fu_160_p1[0];
tmp_4_cast_reg_276[1] <= tmp_4_cast_fu_160_p1[1];
tmp_4_cast_reg_276[2] <= tmp_4_cast_fu_160_p1[2];
tmp_4_cast_reg_276[3] <= tmp_4_cast_fu_160_p1[3];
tmp_4_cast_reg_276[4] <= tmp_4_cast_fu_160_p1[4];
tmp_4_cast_reg_276[5] <= tmp_4_cast_fu_160_p1[5];
tmp_4_cast_reg_276[6] <= tmp_4_cast_fu_160_p1[6];
tmp_4_cast_reg_276[7] <= tmp_4_cast_fu_160_p1[7];
tmp_4_cast_reg_276[8] <= tmp_4_cast_fu_160_p1[8];
tmp_4_cast_reg_276[9] <= tmp_4_cast_fu_160_p1[9];
tmp_4_cast_reg_276[10] <= tmp_4_cast_fu_160_p1[10];
tmp_4_cast_reg_276[11] <= tmp_4_cast_fu_160_p1[11];
tmp_4_cast_reg_276[12] <= tmp_4_cast_fu_160_p1[12];
tmp_4_cast_reg_276[13] <= tmp_4_cast_fu_160_p1[13];
tmp_4_cast_reg_276[14] <= tmp_4_cast_fu_160_p1[14];
tmp_4_cast_reg_276[15] <= tmp_4_cast_fu_160_p1[15];
tmp_4_cast_reg_276[16] <= tmp_4_cast_fu_160_p1[16];
tmp_4_cast_reg_276[17] <= tmp_4_cast_fu_160_p1[17];
tmp_4_cast_reg_276[18] <= tmp_4_cast_fu_160_p1[18];
tmp_4_cast_reg_276[19] <= tmp_4_cast_fu_160_p1[19];
tmp_4_cast_reg_276[20] <= tmp_4_cast_fu_160_p1[20];
tmp_4_cast_reg_276[21] <= tmp_4_cast_fu_160_p1[21];
tmp_4_cast_reg_276[22] <= tmp_4_cast_fu_160_p1[22];
tmp_4_cast_reg_276[23] <= tmp_4_cast_fu_160_p1[23];
tmp_4_cast_reg_276[24] <= tmp_4_cast_fu_160_p1[24];
tmp_4_cast_reg_276[25] <= tmp_4_cast_fu_160_p1[25];
tmp_4_cast_reg_276[26] <= tmp_4_cast_fu_160_p1[26];
tmp_4_cast_reg_276[27] <= tmp_4_cast_fu_160_p1[27];
tmp_4_cast_reg_276[28] <= tmp_4_cast_fu_160_p1[28];
tmp_4_cast_reg_276[29] <= tmp_4_cast_fu_160_p1[29];
        tmp_6_cast_reg_281[0] <= tmp_6_cast_fu_164_p1[0];
tmp_6_cast_reg_281[1] <= tmp_6_cast_fu_164_p1[1];
tmp_6_cast_reg_281[2] <= tmp_6_cast_fu_164_p1[2];
tmp_6_cast_reg_281[3] <= tmp_6_cast_fu_164_p1[3];
tmp_6_cast_reg_281[4] <= tmp_6_cast_fu_164_p1[4];
tmp_6_cast_reg_281[5] <= tmp_6_cast_fu_164_p1[5];
tmp_6_cast_reg_281[6] <= tmp_6_cast_fu_164_p1[6];
tmp_6_cast_reg_281[7] <= tmp_6_cast_fu_164_p1[7];
tmp_6_cast_reg_281[8] <= tmp_6_cast_fu_164_p1[8];
tmp_6_cast_reg_281[9] <= tmp_6_cast_fu_164_p1[9];
tmp_6_cast_reg_281[10] <= tmp_6_cast_fu_164_p1[10];
tmp_6_cast_reg_281[11] <= tmp_6_cast_fu_164_p1[11];
tmp_6_cast_reg_281[12] <= tmp_6_cast_fu_164_p1[12];
tmp_6_cast_reg_281[13] <= tmp_6_cast_fu_164_p1[13];
tmp_6_cast_reg_281[14] <= tmp_6_cast_fu_164_p1[14];
tmp_6_cast_reg_281[15] <= tmp_6_cast_fu_164_p1[15];
tmp_6_cast_reg_281[16] <= tmp_6_cast_fu_164_p1[16];
tmp_6_cast_reg_281[17] <= tmp_6_cast_fu_164_p1[17];
tmp_6_cast_reg_281[18] <= tmp_6_cast_fu_164_p1[18];
tmp_6_cast_reg_281[19] <= tmp_6_cast_fu_164_p1[19];
tmp_6_cast_reg_281[20] <= tmp_6_cast_fu_164_p1[20];
tmp_6_cast_reg_281[21] <= tmp_6_cast_fu_164_p1[21];
tmp_6_cast_reg_281[22] <= tmp_6_cast_fu_164_p1[22];
tmp_6_cast_reg_281[23] <= tmp_6_cast_fu_164_p1[23];
tmp_6_cast_reg_281[24] <= tmp_6_cast_fu_164_p1[24];
tmp_6_cast_reg_281[25] <= tmp_6_cast_fu_164_p1[25];
tmp_6_cast_reg_281[26] <= tmp_6_cast_fu_164_p1[26];
tmp_6_cast_reg_281[27] <= tmp_6_cast_fu_164_p1[27];
tmp_6_cast_reg_281[28] <= tmp_6_cast_fu_164_p1[28];
tmp_6_cast_reg_281[29] <= tmp_6_cast_fu_164_p1[29];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st15_fsm_14 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_gmem32_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_gmem32_WREADY)))) begin
        tmp_0_val_reg_327 <= tmp_0_val_fu_253_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(gmem32_RVALID == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm))) begin
        val_2_reg_315 <= gmem32_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st6_fsm_5 == ap_CS_fsm) & ~(gmem32_RVALID == ap_const_logic_0))) begin
        val_reg_271 <= gmem32_RDATA;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_203_p2)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (tmp_2_fu_203_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_203_p2)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (tmp_2_fu_203_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_gmem32_ARREADY assign process. ///
always @ (gmem32_ARREADY or ap_reg_ioackin_gmem32_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_gmem32_ARREADY)) begin
        ap_sig_ioackin_gmem32_ARREADY = gmem32_ARREADY;
    end else begin
        ap_sig_ioackin_gmem32_ARREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_gmem32_AWREADY assign process. ///
always @ (gmem32_AWREADY or ap_reg_ioackin_gmem32_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_gmem32_AWREADY)) begin
        ap_sig_ioackin_gmem32_AWREADY = gmem32_AWREADY;
    end else begin
        ap_sig_ioackin_gmem32_AWREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_gmem32_WREADY assign process. ///
always @ (gmem32_WREADY or ap_reg_ioackin_gmem32_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_gmem32_WREADY)) begin
        ap_sig_ioackin_gmem32_WREADY = gmem32_WREADY;
    end else begin
        ap_sig_ioackin_gmem32_WREADY = ap_const_logic_1;
    end
end

/// gmem32_ARADDR assign process. ///
always @ (ap_CS_fsm or tmp_6_fu_139_p1 or a2_sum_cast_fu_228_p1 or ap_reg_ioackin_gmem32_ARREADY or ap_sig_bdd_269)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_gmem32_ARREADY)) begin
        if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
            gmem32_ARADDR = a2_sum_cast_fu_228_p1;
        end else if (ap_sig_bdd_269) begin
            gmem32_ARADDR = tmp_6_fu_139_p1;
        end else begin
            gmem32_ARADDR = 'bx;
        end
    end else begin
        gmem32_ARADDR = 'bx;
    end
end

/// gmem32_ARVALID assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ioackin_gmem32_ARREADY)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_gmem32_ARREADY)) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_gmem32_ARREADY)))) begin
        gmem32_ARVALID = ap_const_logic_1;
    end else begin
        gmem32_ARVALID = ap_const_logic_0;
    end
end

/// gmem32_AWVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_gmem32_AWREADY)
begin
    if (((ap_ST_st15_fsm_14 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_gmem32_AWREADY))) begin
        gmem32_AWVALID = ap_const_logic_1;
    end else begin
        gmem32_AWVALID = ap_const_logic_0;
    end
end

/// gmem32_BREADY assign process. ///
always @ (ap_CS_fsm or gmem32_BVALID)
begin
    if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~(gmem32_BVALID == ap_const_logic_0))) begin
        gmem32_BREADY = ap_const_logic_1;
    end else begin
        gmem32_BREADY = ap_const_logic_0;
    end
end

/// gmem32_RREADY assign process. ///
always @ (ap_CS_fsm or gmem32_RVALID)
begin
    if ((((ap_ST_st6_fsm_5 == ap_CS_fsm) & ~(gmem32_RVALID == ap_const_logic_0)) | (~(gmem32_RVALID == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm)))) begin
        gmem32_RREADY = ap_const_logic_1;
    end else begin
        gmem32_RREADY = ap_const_logic_0;
    end
end

/// gmem32_WVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_gmem32_WREADY)
begin
    if (((ap_ST_st15_fsm_14 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_gmem32_WREADY))) begin
        gmem32_WVALID = ap_const_logic_1;
    end else begin
        gmem32_WVALID = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or gmem32_RVALID or gmem32_BVALID or ap_sig_ioackin_gmem32_ARREADY or tmp_2_fu_203_p2 or ap_sig_ioackin_gmem32_AWREADY or ap_sig_ioackin_gmem32_WREADY)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~((ap_start == ap_const_logic_0) | (ap_const_logic_0 == ap_sig_ioackin_gmem32_ARREADY))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (~(gmem32_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            if ((tmp_2_fu_203_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_gmem32_ARREADY)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            if (~(gmem32_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        ap_ST_st15_fsm_14 : 
        begin
            if (~((ap_const_logic_0 == ap_sig_ioackin_gmem32_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_gmem32_WREADY))) begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            if (~(gmem32_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a1_fu_129_p4 = {{a[ap_const_lv32_1F : ap_const_lv32_2]}};
assign a2_sum_cast_fu_228_p1 = $unsigned(a2_sum_reg_299);
assign a2_sum_fu_218_p2 = (tmp_6_cast_reg_281 + tmp_3_cast_fu_214_p1);
assign ap_return = val1_reg_107;

/// ap_sig_bdd_269 assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    ap_sig_bdd_269 = ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0));
end
assign arraycopy_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign arraycopy_gmem32_m_axi_U_ap_dummy_ce = ap_const_logic_1;
assign b4_sum_cast_fu_238_p1 = $unsigned(b4_sum_reg_304);
assign b4_sum_fu_223_p2 = (tmp_4_cast_reg_276 + tmp_3_cast_fu_214_p1);
assign gmem32_ARBURST = ap_const_lv2_0;
assign gmem32_ARCACHE = ap_const_lv4_0;
assign gmem32_ARID = ap_const_lv1_0;
assign gmem32_ARLEN = ap_const_lv32_1;
assign gmem32_ARLOCK = ap_const_lv2_0;
assign gmem32_ARPROT = ap_const_lv3_0;
assign gmem32_ARQOS = ap_const_lv4_0;
assign gmem32_ARREGION = ap_const_lv4_0;
assign gmem32_ARSIZE = ap_const_lv3_0;
assign gmem32_ARUSER = ap_const_lv1_0;
assign gmem32_AWADDR = b4_sum_cast_fu_238_p1;
assign gmem32_AWBURST = ap_const_lv2_0;
assign gmem32_AWCACHE = ap_const_lv4_0;
assign gmem32_AWID = ap_const_lv1_0;
assign gmem32_AWLEN = ap_const_lv32_1;
assign gmem32_AWLOCK = ap_const_lv2_0;
assign gmem32_AWPROT = ap_const_lv3_0;
assign gmem32_AWQOS = ap_const_lv4_0;
assign gmem32_AWREGION = ap_const_lv4_0;
assign gmem32_AWSIZE = ap_const_lv3_0;
assign gmem32_AWUSER = ap_const_lv1_0;
assign gmem32_WDATA = val_2_reg_315;
assign gmem32_WID = ap_const_lv1_0;
assign gmem32_WLAST = ap_const_logic_0;
assign gmem32_WSTRB = ap_const_lv4_F;
assign gmem32_WUSER = ap_const_lv1_0;
assign i_1_fu_208_p2 = (i_reg_117 + ap_const_lv5_1);
assign i_cast_cast_fu_199_p1 = $unsigned(i_reg_117);
assign n_assign_fu_191_p3 = ((or_cond_fu_181_p2)? ap_const_lv6_10: tmp_4_fu_187_p1);
assign or_cond_fu_181_p2 = (tmp_3_fu_167_p3 | tmp_1_fu_175_p2);
assign tmp_0_val_fu_253_p3 = ((tmp_5_fu_248_p2)? val_2_reg_315: val1_reg_107);
assign tmp_1_fu_175_p2 = ($signed(n) > $signed(32'b10000)? 1'b1: 1'b0);
assign tmp_2_fu_203_p2 = (i_cast_cast_fu_199_p1 < n_assign_reg_286? 1'b1: 1'b0);
assign tmp_3_cast_fu_214_p1 = $unsigned(i_reg_117);
assign tmp_3_fu_167_p3 = n[ap_const_lv32_1F];
assign tmp_4_cast_fu_160_p1 = $unsigned(tmp_fu_150_p4);
assign tmp_4_fu_187_p1 = n[5:0];
assign tmp_5_fu_248_p2 = ($signed(val1_reg_107) < $signed(val_2_reg_315)? 1'b1: 1'b0);
assign tmp_6_cast_fu_164_p1 = $unsigned(a1_reg_260);
assign tmp_6_fu_139_p1 = $unsigned(a1_fu_129_p4);
assign tmp_fu_150_p4 = {{b[ap_const_lv32_1F : ap_const_lv32_2]}};
always @ (posedge ap_clk)
begin
    tmp_4_cast_reg_276[30] <= 1'b0;
    tmp_6_cast_reg_281[30] <= 1'b0;
end



endmodule //arraycopy

