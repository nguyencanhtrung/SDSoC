

================================================================
== Vivado HLS Report for 'correlation_accel_v4_frontEnd'
================================================================
* Date:           Thu Feb  9 13:42:53 2017

* Version:        2014.4 (Build 1071461 on Tue Nov 18 16:42:57 PM 2014)
* Project:        correlation_accel_v4
* Solution:       solution
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |   8.50|      7.26|        1.06|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+
        |                                     |       Latency      | Iteration|  Initiation Interval  |      Trip      |          |
        |              Loop Name              |  min |     max     |  Latency |  achieved |   target  |      Count     | Pipelined|
        +-------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+
        |- INIT_WEIGHT_ROM                    |  1250|         1250|         5|          -|          -|             250|    no    |
        |- COMP_SUM_OF_WEIGHT                 |     0|  17179869160|         8|          -|          -| 0 ~ 2147483645 |    no    |
        |- LOOP_FIRST_INDEX                   |     ?|            ?|        31|          1|          1|               ?|    yes   |
        |- Loop 4                             |     ?|            ?|         ?|          -|          -| 0 ~ 2147483646 |    no    |
        | + ACCUMULATION_LOOP_FLOATING_INDEX  |     ?|            ?|        39|          1|          1|               ?|    yes   |
        +-------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 31
  * Pipeline-1: initiation interval (II) = 1, depth = 39


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 88
* Pipeline: 2
  Pipeline-0: II = 1, D = 31, States = { 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 }
  Pipeline-1: II = 1, D = 39, States = { 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond_i_i)
	7  / (exitcond_i_i)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	2  / true
7 --> 
	8  / (tmp_85_i_i)
	15  / (!tmp_85_i_i)
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	7  / true
15 --> 
	16  / true
16 --> 
	47  / (tmp_4_i)
	17  / (!tmp_4_i)
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	16  / true
47 --> 
	48  / true
48 --> 
	49  / (tmp_6_i)
49 --> 
	88  / (tmp_18_i)
	50  / (!tmp_18_i)
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	49  / true
88 --> 
	48  / true
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: stg_89 [1/1] 0.00ns
entry:0  call void (...)* @_ssdm_op_SpecInterface(i1* %in_indices_dest_V, i1* %in_indices_id_V, i1* %in_indices_last_V, i1* %in_indices_user_V, i4* %in_indices_strb_V, i4* %in_indices_keep_V, i32* %in_indices_data_V, [5 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str)

ST_1: stg_90 [1/1] 0.00ns
entry:1  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_INDICES_out2, [8 x i8]* @str189, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str189, [8 x i8]* @str189, [8 x i8]* @str189)

ST_1: stg_91 [1/1] 0.00ns
entry:2  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_INDICES_out, [8 x i8]* @str188, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str188, [8 x i8]* @str188, [8 x i8]* @str188)

ST_1: stg_92 [1/1] 0.00ns
entry:3  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_DAYS_out1, [8 x i8]* @str187, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str187, [8 x i8]* @str187, [8 x i8]* @str187)

ST_1: stg_93 [1/1] 0.00ns
entry:4  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_DAYS_out, [8 x i8]* @str186, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str186, [8 x i8]* @str186, [8 x i8]* @str186)

ST_1: NUMBER_OF_INDICES_read [1/1] 0.00ns
entry:5  %NUMBER_OF_INDICES_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %NUMBER_OF_INDICES)

ST_1: NUMBER_OF_DAYS_read [1/1] 0.00ns
entry:6  %NUMBER_OF_DAYS_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %NUMBER_OF_DAYS)

ST_1: tmp1_keep_V_i [1/1] 0.00ns
entry:7  %tmp1_keep_V_i = alloca i4, align 1

ST_1: tmp1_strb_V_i [1/1] 0.00ns
entry:8  %tmp1_strb_V_i = alloca i4, align 1

ST_1: tmp1_user_V_i [1/1] 0.00ns
entry:9  %tmp1_user_V_i = alloca i1, align 1

ST_1: tmp1_last_V_i [1/1] 0.00ns
entry:10  %tmp1_last_V_i = alloca i1, align 1

ST_1: tmp1_id_V_i [1/1] 0.00ns
entry:11  %tmp1_id_V_i = alloca i1, align 1

ST_1: tmp1_dest_V_i [1/1] 0.00ns
entry:12  %tmp1_dest_V_i = alloca i1, align 1

ST_1: stg_102 [1/1] 0.00ns
entry:13  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_INDICES_out2, [8 x i8]* @str158, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str158, [8 x i8]* @str158, [8 x i8]* @str158)

ST_1: stg_103 [1/1] 1.86ns
entry:14  call void @_ssdm_op_Write.ap_fifo.i32P(i32* %NUMBER_OF_INDICES_out2, i32 %NUMBER_OF_INDICES_read)

ST_1: stg_104 [1/1] 0.00ns
entry:15  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_INDICES_out, [8 x i8]* @str156, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str156, [8 x i8]* @str156, [8 x i8]* @str156)

ST_1: stg_105 [1/1] 1.86ns
entry:16  call void @_ssdm_op_Write.ap_fifo.i32P(i32* %NUMBER_OF_INDICES_out, i32 %NUMBER_OF_INDICES_read)

ST_1: stg_106 [1/1] 0.00ns
entry:17  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_DAYS_out1, [8 x i8]* @str154, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str154, [8 x i8]* @str154, [8 x i8]* @str154)

ST_1: stg_107 [1/1] 1.86ns
entry:18  call void @_ssdm_op_Write.ap_fifo.i32P(i32* %NUMBER_OF_DAYS_out1, i32 %NUMBER_OF_DAYS_read)

ST_1: stg_108 [1/1] 0.00ns
entry:19  call void (...)* @_ssdm_op_SpecInterface(i32* %NUMBER_OF_DAYS_out, [8 x i8]* @str152, i32 0, i32 0, i32 0, i32 0, [8 x i8]* @str152, [8 x i8]* @str152, [8 x i8]* @str152)

ST_1: stg_109 [1/1] 1.86ns
entry:20  call void @_ssdm_op_Write.ap_fifo.i32P(i32* %NUMBER_OF_DAYS_out, i32 %NUMBER_OF_DAYS_read)

ST_1: stg_110 [1/1] 0.00ns
entry:21  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnA_returnB_out_c2_s, [8 x i8]* @str79, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str80, [1 x i8]* @str80, [8 x i8]* @str79)

ST_1: stg_111 [1/1] 0.00ns
entry:22  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnB_out_c2_V, [8 x i8]* @str75, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str76, [1 x i8]* @str76, [8 x i8]* @str75)

ST_1: stg_112 [1/1] 0.00ns
entry:23  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnSquareB_out_c2_V, [8 x i8]* @str71, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str72, [1 x i8]* @str72, [8 x i8]* @str71)

ST_1: stg_113 [1/1] 0.00ns
entry:24  call void (...)* @_ssdm_op_SpecInterface(float* %ln_returnB_out_c2_V, [8 x i8]* @str67, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str68, [1 x i8]* @str68, [8 x i8]* @str67)

ST_1: stg_114 [1/1] 0.00ns
entry:25  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_out_c2_V, [8 x i8]* @str63, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str64, [1 x i8]* @str64, [8 x i8]* @str63)

ST_1: stg_115 [1/1] 0.00ns
entry:26  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnA_returnB_out_c1_s, [8 x i8]* @str59, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str60, [1 x i8]* @str60, [8 x i8]* @str59)

ST_1: stg_116 [1/1] 0.00ns
entry:27  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnB_out_c1_V, [8 x i8]* @str55, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str56, [1 x i8]* @str56, [8 x i8]* @str55)

ST_1: stg_117 [1/1] 0.00ns
entry:28  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnSquareB_out_c1_V, [8 x i8]* @str51, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str52, [1 x i8]* @str52, [8 x i8]* @str51)

ST_1: stg_118 [1/1] 0.00ns
entry:29  call void (...)* @_ssdm_op_SpecInterface(float* %ln_returnB_out_c1_V, [8 x i8]* @str47, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str48, [1 x i8]* @str48, [8 x i8]* @str47)

ST_1: stg_119 [1/1] 0.00ns
entry:30  call void (...)* @_ssdm_op_SpecInterface(float* %sum_weight_out_c1_V, [8 x i8]* @str43, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str44, [1 x i8]* @str44, [8 x i8]* @str43)

ST_1: stg_120 [1/1] 0.00ns
entry:31  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnA_out_c2_V, [8 x i8]* @str39, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str40, [1 x i8]* @str40, [8 x i8]* @str39)

ST_1: stg_121 [1/1] 0.00ns
entry:32  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnSquareA_out_c2_V, [8 x i8]* @str35, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str36, [1 x i8]* @str36, [8 x i8]* @str35)

ST_1: stg_122 [1/1] 0.00ns
entry:33  call void (...)* @_ssdm_op_SpecInterface(float* %ln_returnA_out_c2_V, [8 x i8]* @str31, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str32, [1 x i8]* @str32, [8 x i8]* @str31)

ST_1: stg_123 [1/1] 0.00ns
entry:34  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnA_out_c1_V, [8 x i8]* @str27, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str28, [1 x i8]* @str28, [8 x i8]* @str27)

ST_1: stg_124 [1/1] 0.00ns
entry:35  call void (...)* @_ssdm_op_SpecInterface(float* %weight_returnSquareA_out_c1_V, [8 x i8]* @str23, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str24, [1 x i8]* @str24, [8 x i8]* @str23)

ST_1: stg_125 [1/1] 0.00ns
entry:36  call void (...)* @_ssdm_op_SpecInterface(float* %ln_returnA_out_c1_V, [8 x i8]* @str19, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str20, [1 x i8]* @str20, [8 x i8]* @str19)

ST_1: stg_126 [1/1] 2.39ns
entry:37  store float 1.000000e+00, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_1: stg_127 [1/1] 2.39ns
entry:38  store float 1.000000e+00, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 1), align 4

ST_1: stg_128 [1/1] 1.57ns
entry:39  br label %0


 <State 2>: 5.70ns
ST_2: tmp_i_i [1/1] 0.00ns
:0  %tmp_i_i = phi float [ 1.000000e+00, %entry ], [ %tmp_i_i_49, %1 ]

ST_2: i_i_i [1/1] 0.00ns
:1  %i_i_i = phi i8 [ 2, %entry ], [ %i, %1 ]

ST_2: exitcond_i_i [1/1] 2.00ns
:2  %exitcond_i_i = icmp eq i8 %i_i_i, -4

ST_2: empty [1/1] 0.00ns
:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 250, i64 250, i64 250)

ST_2: stg_133 [1/1] 1.57ns
:4  br i1 %exitcond_i_i, label %.preheader.i.i, label %1

ST_2: tmp_i_i_49 [4/4] 5.70ns
:1  %tmp_i_i_49 = fmul float %tmp_i_i, 0x3FEE147AE0000000


 <State 3>: 5.70ns
ST_3: tmp_i_i_49 [3/4] 5.70ns
:1  %tmp_i_i_49 = fmul float %tmp_i_i, 0x3FEE147AE0000000


 <State 4>: 5.70ns
ST_4: tmp_i_i_49 [2/4] 5.70ns
:1  %tmp_i_i_49 = fmul float %tmp_i_i, 0x3FEE147AE0000000


 <State 5>: 5.70ns
ST_5: tmp_i_i_49 [1/4] 5.70ns
:1  %tmp_i_i_49 = fmul float %tmp_i_i, 0x3FEE147AE0000000


 <State 6>: 2.39ns
ST_6: stg_138 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([16 x i8]* @p_str9) nounwind

ST_6: tmp_86_i_i [1/1] 0.00ns
:2  %tmp_86_i_i = zext i8 %i_i_i to i64

ST_6: weight_rom_addr [1/1] 0.00ns
:3  %weight_rom_addr = getelementptr [252 x float]* @weight_rom, i64 0, i64 %tmp_86_i_i

ST_6: stg_141 [1/1] 2.39ns
:4  store float %tmp_i_i_49, float* %weight_rom_addr, align 4

ST_6: i [1/1] 1.72ns
:5  %i = add i8 %i_i_i, 1

ST_6: stg_143 [1/1] 0.00ns
:6  br label %0


 <State 7>: 2.52ns
ST_7: i1_i_i [1/1] 0.00ns
.preheader.i.i:0  %i1_i_i = phi i31 [ %i_3, %2 ], [ 2, %0 ]

ST_7: i1_i_cast_i [1/1] 0.00ns
.preheader.i.i:1  %i1_i_cast_i = zext i31 %i1_i_i to i32

ST_7: tmp_85_i_i [1/1] 2.52ns
.preheader.i.i:2  %tmp_85_i_i = icmp slt i32 %i1_i_cast_i, %NUMBER_OF_DAYS_read

ST_7: empty_50 [1/1] 0.00ns
.preheader.i.i:3  %empty_50 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 2147483645, i64 0)

ST_7: stg_148 [1/1] 0.00ns
.preheader.i.i:4  br i1 %tmp_85_i_i, label %2, label %weight_rom_init.exit.i

ST_7: tmp_87_i_i [1/1] 0.00ns
:1  %tmp_87_i_i = zext i31 %i1_i_i to i64

ST_7: weight_rom_addr_1 [1/1] 0.00ns
:2  %weight_rom_addr_1 = getelementptr [252 x float]* @weight_rom, i64 0, i64 %tmp_87_i_i

ST_7: weight_rom_load [2/2] 2.39ns
:3  %weight_rom_load = load float* %weight_rom_addr_1, align 4

ST_7: weight_rom_load_1 [2/2] 2.39ns
:4  %weight_rom_load_1 = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_7: i_3 [1/1] 2.44ns
:7  %i_3 = add i31 %i1_i_i, 1

ST_7: tmp_2_i [1/1] 0.00ns
weight_rom_init.exit.i:0  %tmp_2_i = alloca float, align 4

ST_7: sum_weight [2/2] 2.39ns
weight_rom_init.exit.i:1  %sum_weight = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16


 <State 8>: 2.39ns
ST_8: weight_rom_load [1/2] 2.39ns
:3  %weight_rom_load = load float* %weight_rom_addr_1, align 4

ST_8: weight_rom_load_1 [1/2] 2.39ns
:4  %weight_rom_load_1 = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16


 <State 9>: 7.26ns
ST_9: tmp_88_i_i [5/5] 7.26ns
:5  %tmp_88_i_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 10>: 7.26ns
ST_10: tmp_88_i_i [4/5] 7.26ns
:5  %tmp_88_i_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 11>: 7.26ns
ST_11: tmp_88_i_i [3/5] 7.26ns
:5  %tmp_88_i_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 12>: 7.26ns
ST_12: tmp_88_i_i [2/5] 7.26ns
:5  %tmp_88_i_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 13>: 7.26ns
ST_13: tmp_88_i_i [1/5] 7.26ns
:5  %tmp_88_i_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 14>: 2.39ns
ST_14: stg_163 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([19 x i8]* @p_str10) nounwind

ST_14: stg_164 [1/1] 2.39ns
:6  store float %tmp_88_i_i, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_14: stg_165 [1/1] 0.00ns
:8  br label %.preheader.i.i


 <State 15>: 2.44ns
ST_15: sum_weight [1/2] 2.39ns
weight_rom_init.exit.i:1  %sum_weight = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_15: in_indices_data_V_read [1/1] 0.00ns
weight_rom_init.exit.i:2  %in_indices_data_V_read = call i32 @_ssdm_op_Read.axis.volatile.i32P(i32* %in_indices_data_V)

ST_15: tmp_i [1/1] 0.00ns
weight_rom_init.exit.i:3  %tmp_i = bitcast i32 %in_indices_data_V_read to float

ST_15: tmp1_keep_V [1/1] 0.00ns
weight_rom_init.exit.i:4  %tmp1_keep_V = call i4 @_ssdm_op_Read.axis.volatile.i4P(i4* %in_indices_keep_V)

ST_15: stg_170 [1/1] 1.57ns
weight_rom_init.exit.i:5  store volatile i4 %tmp1_keep_V, i4* %tmp1_keep_V_i, align 4

ST_15: tmp1_strb_V [1/1] 0.00ns
weight_rom_init.exit.i:6  %tmp1_strb_V = call i4 @_ssdm_op_Read.axis.volatile.i4P(i4* %in_indices_strb_V)

ST_15: stg_172 [1/1] 1.57ns
weight_rom_init.exit.i:7  store volatile i4 %tmp1_strb_V, i4* %tmp1_strb_V_i, align 1

ST_15: tmp1_user_V [1/1] 0.00ns
weight_rom_init.exit.i:8  %tmp1_user_V = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_user_V)

ST_15: stg_174 [1/1] 1.57ns
weight_rom_init.exit.i:9  store volatile i1 %tmp1_user_V, i1* %tmp1_user_V_i, align 2

ST_15: tmp1_last_V [1/1] 0.00ns
weight_rom_init.exit.i:10  %tmp1_last_V = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_last_V)

ST_15: stg_176 [1/1] 1.57ns
weight_rom_init.exit.i:11  store volatile i1 %tmp1_last_V, i1* %tmp1_last_V_i, align 1

ST_15: tmp1_id_V [1/1] 0.00ns
weight_rom_init.exit.i:12  %tmp1_id_V = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_id_V)

ST_15: stg_178 [1/1] 1.57ns
weight_rom_init.exit.i:13  store volatile i1 %tmp1_id_V, i1* %tmp1_id_V_i, align 4

ST_15: tmp1_dest_V [1/1] 0.00ns
weight_rom_init.exit.i:14  %tmp1_dest_V = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_dest_V)

ST_15: stg_180 [1/1] 1.57ns
weight_rom_init.exit.i:15  store volatile i1 %tmp1_dest_V, i1* %tmp1_dest_V_i, align 1

ST_15: tmp_1_i [1/1] 2.44ns
weight_rom_init.exit.i:16  %tmp_1_i = add nsw i32 %NUMBER_OF_DAYS_read, -1

ST_15: stg_182 [1/1] 1.57ns
weight_rom_init.exit.i:17  br label %3


 <State 16>: 3.89ns
ST_16: tmp_3_i [1/1] 0.00ns
:0  %tmp_3_i = phi float [ %tmp_i, %weight_rom_init.exit.i ], [ %tmp_3_i_tmp_2_i, %4 ]

ST_16: i_i [1/1] 0.00ns
:1  %i_i = phi i32 [ 1, %weight_rom_init.exit.i ], [ %i_4, %4 ]

ST_16: tmp_4_i [1/1] 2.52ns
:2  %tmp_4_i = icmp sgt i32 %i_i, %tmp_1_i

ST_16: stg_186 [1/1] 0.00ns
:3  br i1 %tmp_4_i, label %.preheader.i.preheader, label %4

ST_16: tmp_2_i_load_1 [1/1] 0.00ns
:0  %tmp_2_i_load_1 = load float* %tmp_2_i, align 4

ST_16: tmp [1/1] 0.00ns
:1  %tmp = trunc i32 %i_i to i31

ST_16: tmp_5_i [1/1] 2.52ns
:5  %tmp_5_i = icmp eq i32 %i_i, 1

ST_16: in_indices_data_V_read_1 [1/1] 0.00ns
:6  %in_indices_data_V_read_1 = call i32 @_ssdm_op_Read.axis.volatile.i32P(i32* %in_indices_data_V)

ST_16: in_indices_keep_V_read [1/1] 0.00ns
:7  %in_indices_keep_V_read = call i4 @_ssdm_op_Read.axis.volatile.i4P(i4* %in_indices_keep_V)

ST_16: stg_192 [1/1] 1.57ns
:8  store volatile i4 %in_indices_keep_V_read, i4* %tmp1_keep_V_i, align 4

ST_16: in_indices_strb_V_read [1/1] 0.00ns
:9  %in_indices_strb_V_read = call i4 @_ssdm_op_Read.axis.volatile.i4P(i4* %in_indices_strb_V)

ST_16: stg_194 [1/1] 1.57ns
:10  store volatile i4 %in_indices_strb_V_read, i4* %tmp1_strb_V_i, align 1

ST_16: in_indices_user_V_read [1/1] 0.00ns
:11  %in_indices_user_V_read = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_user_V)

ST_16: stg_196 [1/1] 1.57ns
:12  store volatile i1 %in_indices_user_V_read, i1* %tmp1_user_V_i, align 2

ST_16: in_indices_last_V_read [1/1] 0.00ns
:13  %in_indices_last_V_read = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_last_V)

ST_16: stg_198 [1/1] 1.57ns
:14  store volatile i1 %in_indices_last_V_read, i1* %tmp1_last_V_i, align 1

ST_16: in_indices_id_V_read [1/1] 0.00ns
:15  %in_indices_id_V_read = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_id_V)

ST_16: stg_200 [1/1] 1.57ns
:16  store volatile i1 %in_indices_id_V_read, i1* %tmp1_id_V_i, align 4

ST_16: in_indices_dest_V_read [1/1] 0.00ns
:17  %in_indices_dest_V_read = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_dest_V)

ST_16: stg_202 [1/1] 1.57ns
:18  store volatile i1 %in_indices_dest_V_read, i1* %tmp1_dest_V_i, align 1

ST_16: tmp_3_i_tmp_2_i [1/1] 1.37ns
:19  %tmp_3_i_tmp_2_i = select i1 %tmp_5_i, float %tmp_3_i, float %tmp_2_i_load_1

ST_16: tmp_14_i [1/1] 0.00ns
:20  %tmp_14_i = bitcast i32 %in_indices_data_V_read_1 to float

ST_16: i_4 [1/1] 2.44ns
:28  %i_4 = add nsw i32 %i_i, 1

ST_16: stg_206 [1/1] 0.00ns
:29  store float %tmp_14_i, float* %tmp_2_i, align 4


 <State 17>: 6.08ns
ST_17: tmp_15_i [16/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 18>: 6.08ns
ST_18: tmp_15_i [15/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 19>: 6.08ns
ST_19: tmp_15_i [14/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 20>: 6.08ns
ST_20: tmp_15_i [13/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 21>: 6.08ns
ST_21: tmp_15_i [12/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 22>: 6.08ns
ST_22: tmp_15_i [11/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 23>: 6.08ns
ST_23: tmp_15_i [10/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 24>: 6.08ns
ST_24: tmp_15_i [9/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 25>: 6.08ns
ST_25: tmp_15_i [8/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 26>: 6.08ns
ST_26: tmp_15_i [7/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 27>: 6.08ns
ST_27: tmp_15_i [6/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 28>: 6.08ns
ST_28: tmp_15_i [5/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 29>: 6.08ns
ST_29: tmp_15_i [4/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 30>: 6.08ns
ST_30: tmp_15_i [3/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 31>: 6.08ns
ST_31: tmp_15_i [2/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 32>: 6.08ns
ST_32: tmp_15_i [1/16] 6.08ns
:21  %tmp_15_i = fdiv float %tmp_3_i_tmp_2_i, %tmp_14_i


 <State 33>: 7.09ns
ST_33: lnReturn [13/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 34>: 7.09ns
ST_34: lnReturn [12/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 35>: 7.09ns
ST_35: lnReturn [11/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 36>: 7.09ns
ST_36: lnReturn [10/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 37>: 7.09ns
ST_37: lnReturn [9/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 38>: 7.09ns
ST_38: lnReturn [8/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 39>: 7.09ns
ST_39: lnReturn [7/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 40>: 7.09ns
ST_40: lnReturn [6/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 41>: 7.09ns
ST_41: lnReturn [5/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 42>: 7.09ns
ST_42: lnReturn [4/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 43>: 7.09ns
ST_43: lnReturn [3/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 44>: 7.09ns
ST_44: lnReturn [2/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 45>: 7.09ns
ST_45: lnReturn [1/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_15_i)


 <State 46>: 4.83ns
ST_46: stg_236 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecLoopName([17 x i8]* @p_str4) nounwind

ST_46: tmp_80_i [1/1] 0.00ns
:3  %tmp_80_i = call i32 (...)* @_ssdm_op_SpecRegionBegin([17 x i8]* @p_str4)

ST_46: stg_238 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_46: tmp_16_i [1/1] 2.44ns
:23  %tmp_16_i = add i31 %tmp, -1

ST_46: tmp_17_i [1/1] 0.00ns
:24  %tmp_17_i = zext i31 %tmp_16_i to i64

ST_46: lnReturnA_addr [1/1] 0.00ns
:25  %lnReturnA_addr = getelementptr inbounds [252 x float]* @lnReturnA, i64 0, i64 %tmp_17_i

ST_46: stg_242 [1/1] 2.39ns
:26  store float %lnReturn, float* %lnReturnA_addr, align 4

ST_46: empty_51 [1/1] 0.00ns
:27  %empty_51 = call i32 (...)* @_ssdm_op_SpecRegionEnd([17 x i8]* @p_str4, i32 %tmp_80_i)

ST_46: stg_244 [1/1] 0.00ns
:30  br label %3


 <State 47>: 1.57ns
ST_47: tmp_2_i_load [1/1] 0.00ns
.preheader.i.preheader:0  %tmp_2_i_load = load float* %tmp_2_i, align 4

ST_47: shift_reg_load1_i [1/1] 0.00ns
.preheader.i.preheader:1  %shift_reg_load1_i = alloca float, align 4

ST_47: stg_247 [1/1] 1.57ns
.preheader.i.preheader:2  store float %tmp_2_i_load, float* %shift_reg_load1_i, align 4

ST_47: stg_248 [1/1] 1.57ns
.preheader.i.preheader:3  br label %.preheader.i


 <State 48>: 2.52ns
ST_48: column_index_i [1/1] 0.00ns
.preheader.i:0  %column_index_i = phi i31 [ %column_index, %11 ], [ 1, %.preheader.i.preheader ]

ST_48: column_index_cast_i [1/1] 0.00ns
.preheader.i:1  %column_index_cast_i = zext i31 %column_index_i to i32

ST_48: tmp_6_i [1/1] 2.52ns
.preheader.i:2  %tmp_6_i = icmp slt i32 %column_index_cast_i, %NUMBER_OF_INDICES_read

ST_48: stg_252 [1/1] 0.00ns
.preheader.i:3  br i1 %tmp_6_i, label %5, label %frontEnd.1.exit

ST_48: tmp_42 [1/1] 0.00ns
:0  %tmp_42 = trunc i31 %column_index_i to i1

ST_48: empty_52 [1/1] 0.00ns
:1  %empty_52 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 2147483646, i64 0)

ST_48: in_indices_data_V_read_2 [1/1] 0.00ns
:2  %in_indices_data_V_read_2 = call i32 @_ssdm_op_Read.axis.volatile.i32P(i32* %in_indices_data_V)

ST_48: tmp_10_i [1/1] 0.00ns
:3  %tmp_10_i = bitcast i32 %in_indices_data_V_read_2 to float

ST_48: tmp1_keep_V_1 [1/1] 0.00ns
:4  %tmp1_keep_V_1 = call i4 @_ssdm_op_Read.axis.volatile.i4P(i4* %in_indices_keep_V)

ST_48: stg_258 [1/1] 1.57ns
:5  store volatile i4 %tmp1_keep_V_1, i4* %tmp1_keep_V_i, align 4

ST_48: tmp1_strb_V_1 [1/1] 0.00ns
:6  %tmp1_strb_V_1 = call i4 @_ssdm_op_Read.axis.volatile.i4P(i4* %in_indices_strb_V)

ST_48: stg_260 [1/1] 1.57ns
:7  store volatile i4 %tmp1_strb_V_1, i4* %tmp1_strb_V_i, align 1

ST_48: tmp1_user_V_1 [1/1] 0.00ns
:8  %tmp1_user_V_1 = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_user_V)

ST_48: stg_262 [1/1] 1.57ns
:9  store volatile i1 %tmp1_user_V_1, i1* %tmp1_user_V_i, align 2

ST_48: tmp1_last_V_1 [1/1] 0.00ns
:10  %tmp1_last_V_1 = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_last_V)

ST_48: stg_264 [1/1] 1.57ns
:11  store volatile i1 %tmp1_last_V_1, i1* %tmp1_last_V_i, align 1

ST_48: tmp1_id_V_1 [1/1] 0.00ns
:12  %tmp1_id_V_1 = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_id_V)

ST_48: stg_266 [1/1] 1.57ns
:13  store volatile i1 %tmp1_id_V_1, i1* %tmp1_id_V_i, align 4

ST_48: tmp1_dest_V_1 [1/1] 0.00ns
:14  %tmp1_dest_V_1 = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_dest_V)

ST_48: stg_268 [1/1] 1.57ns
:15  store volatile i1 %tmp1_dest_V_1, i1* %tmp1_dest_V_i, align 1

ST_48: stg_269 [1/1] 1.57ns
:16  br label %6

ST_48: stg_270 [1/1] 0.00ns
frontEnd.1.exit:0  ret void


 <State 49>: 3.89ns
ST_49: shift_reg_load_i [1/1] 0.00ns
:0  %shift_reg_load_i = phi float [ %tmp_10_i, %5 ], [ %shift_reg_load_i_shift_reg_lo, %10 ]

ST_49: i1_i [1/1] 0.00ns
:1  %i1_i = phi i32 [ 1, %5 ], [ %i_5, %10 ]

ST_49: tmp_18_i [1/1] 2.52ns
:2  %tmp_18_i = icmp sgt i32 %i1_i, %tmp_1_i

ST_49: stg_274 [1/1] 0.00ns
:3  br i1 %tmp_18_i, label %11, label %7

ST_49: shift_reg_load [1/1] 0.00ns
:0  %shift_reg_load = load float* %shift_reg_load1_i, align 4

ST_49: tmp_43 [1/1] 0.00ns
:1  %tmp_43 = trunc i32 %i1_i to i31

ST_49: tmp_81_i [1/1] 0.00ns
:3  %tmp_81_i = call i32 (...)* @_ssdm_op_SpecRegionBegin([33 x i8]* @p_str5)

ST_49: tmp_19_i [1/1] 2.52ns
:5  %tmp_19_i = icmp eq i32 %i1_i, 1

ST_49: in_indices_data_V_read_3 [1/1] 0.00ns
:6  %in_indices_data_V_read_3 = call i32 @_ssdm_op_Read.axis.volatile.i32P(i32* %in_indices_data_V)

ST_49: in_indices_keep_V_read_2 [1/1] 0.00ns
:7  %in_indices_keep_V_read_2 = call i4 @_ssdm_op_Read.axis.volatile.i4P(i4* %in_indices_keep_V)

ST_49: stg_281 [1/1] 1.57ns
:8  store volatile i4 %in_indices_keep_V_read_2, i4* %tmp1_keep_V_i, align 4

ST_49: in_indices_strb_V_read_2 [1/1] 0.00ns
:9  %in_indices_strb_V_read_2 = call i4 @_ssdm_op_Read.axis.volatile.i4P(i4* %in_indices_strb_V)

ST_49: stg_283 [1/1] 1.57ns
:10  store volatile i4 %in_indices_strb_V_read_2, i4* %tmp1_strb_V_i, align 1

ST_49: in_indices_user_V_read_2 [1/1] 0.00ns
:11  %in_indices_user_V_read_2 = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_user_V)

ST_49: stg_285 [1/1] 1.57ns
:12  store volatile i1 %in_indices_user_V_read_2, i1* %tmp1_user_V_i, align 2

ST_49: in_indices_last_V_read_2 [1/1] 0.00ns
:13  %in_indices_last_V_read_2 = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_last_V)

ST_49: stg_287 [1/1] 1.57ns
:14  store volatile i1 %in_indices_last_V_read_2, i1* %tmp1_last_V_i, align 1

ST_49: in_indices_id_V_read_2 [1/1] 0.00ns
:15  %in_indices_id_V_read_2 = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_id_V)

ST_49: stg_289 [1/1] 1.57ns
:16  store volatile i1 %in_indices_id_V_read_2, i1* %tmp1_id_V_i, align 4

ST_49: in_indices_dest_V_read_2 [1/1] 0.00ns
:17  %in_indices_dest_V_read_2 = call i1 @_ssdm_op_Read.axis.volatile.i1P(i1* %in_indices_dest_V)

ST_49: stg_291 [1/1] 1.57ns
:18  store volatile i1 %in_indices_dest_V_read_2, i1* %tmp1_dest_V_i, align 1

ST_49: shift_reg_load_i_shift_reg_lo [1/1] 1.37ns
:19  %shift_reg_load_i_shift_reg_lo = select i1 %tmp_19_i, float %shift_reg_load_i, float %shift_reg_load

ST_49: tmp_26_i [1/1] 0.00ns
:20  %tmp_26_i = bitcast i32 %in_indices_data_V_read_3 to float

ST_49: tmp_28_i [1/1] 0.00ns
:23  %tmp_28_i = zext i32 %i1_i to i64

ST_49: weight_rom_addr_2 [1/1] 0.00ns
:24  %weight_rom_addr_2 = getelementptr inbounds [252 x float]* @weight_rom, i64 0, i64 %tmp_28_i

ST_49: weight [2/2] 2.39ns
:25  %weight = load float* %weight_rom_addr_2, align 4

ST_49: stg_297 [1/1] 0.00ns
:38  br i1 %tmp_42, label %8, label %9

ST_49: empty_53 [1/1] 0.00ns
:0  %empty_53 = call i32 (...)* @_ssdm_op_SpecRegionEnd([33 x i8]* @p_str5, i32 %tmp_81_i)

ST_49: i_5 [1/1] 2.44ns
:1  %i_5 = add nsw i32 %i1_i, 1

ST_49: stg_300 [1/1] 1.57ns
:2  store float %tmp_26_i, float* %shift_reg_load1_i, align 4

ST_49: stg_301 [1/1] 0.00ns
:3  br label %6


 <State 50>: 6.08ns
ST_50: tmp_27_i [16/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i

ST_50: weight [1/2] 2.39ns
:25  %weight = load float* %weight_rom_addr_2, align 4


 <State 51>: 6.08ns
ST_51: tmp_27_i [15/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 52>: 6.08ns
ST_52: tmp_27_i [14/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 53>: 6.08ns
ST_53: tmp_27_i [13/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 54>: 6.08ns
ST_54: tmp_27_i [12/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 55>: 6.08ns
ST_55: tmp_27_i [11/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 56>: 6.08ns
ST_56: tmp_27_i [10/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 57>: 6.08ns
ST_57: tmp_27_i [9/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 58>: 6.08ns
ST_58: tmp_27_i [8/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 59>: 6.08ns
ST_59: tmp_27_i [7/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 60>: 6.08ns
ST_60: tmp_27_i [6/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 61>: 6.08ns
ST_61: tmp_27_i [5/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 62>: 6.08ns
ST_62: tmp_27_i [4/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 63>: 6.08ns
ST_63: tmp_27_i [3/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 64>: 6.08ns
ST_64: tmp_27_i [2/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 65>: 6.08ns
ST_65: tmp_27_i [1/16] 6.08ns
:21  %tmp_27_i = fdiv float %shift_reg_load_i_shift_reg_lo, %tmp_26_i


 <State 66>: 7.09ns
ST_66: lnReturn_2 [13/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 67>: 7.09ns
ST_67: lnReturn_2 [12/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 68>: 7.09ns
ST_68: lnReturn_2 [11/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 69>: 7.09ns
ST_69: lnReturn_2 [10/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 70>: 7.09ns
ST_70: lnReturn_2 [9/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 71>: 7.09ns
ST_71: lnReturn_2 [8/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 72>: 7.09ns
ST_72: lnReturn_2 [7/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 73>: 7.09ns
ST_73: lnReturn_2 [6/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 74>: 7.09ns
ST_74: lnReturn_2 [5/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 75>: 7.09ns
ST_75: lnReturn_2 [4/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 76>: 7.09ns
ST_76: lnReturn_2 [3/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)


 <State 77>: 7.09ns
ST_77: lnReturn_2 [2/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)

ST_77: tmp_29_i [1/1] 2.44ns
:26  %tmp_29_i = add i31 %tmp_43, -1

ST_77: tmp_30_i [1/1] 0.00ns
:27  %tmp_30_i = zext i31 %tmp_29_i to i64

ST_77: lnReturnA_addr_1 [1/1] 0.00ns
:28  %lnReturnA_addr_1 = getelementptr inbounds [252 x float]* @lnReturnA, i64 0, i64 %tmp_30_i

ST_77: lnReturnA_temp [2/2] 2.39ns
:29  %lnReturnA_temp = load float* %lnReturnA_addr_1, align 4


 <State 78>: 7.09ns
ST_78: lnReturn_2 [1/13] 7.09ns
:22  %lnReturn_2 = call float @llvm.log.f32(float %tmp_27_i)

ST_78: lnReturnA_temp [1/2] 2.39ns
:29  %lnReturnA_temp = load float* %lnReturnA_addr_1, align 4


 <State 79>: 5.70ns
ST_79: tmp_31_i [4/4] 5.70ns
:31  %tmp_31_i = fmul float %lnReturnA_temp, %lnReturnA_temp

ST_79: tmp_32_i [4/4] 5.70ns
:34  %tmp_32_i = fmul float %lnReturn_2, %lnReturn_2

ST_79: tmp_33_i [4/4] 5.70ns
:36  %tmp_33_i = fmul float %lnReturnA_temp, %lnReturn_2


 <State 80>: 5.70ns
ST_80: tmp_31_i [3/4] 5.70ns
:31  %tmp_31_i = fmul float %lnReturnA_temp, %lnReturnA_temp

ST_80: tmp_32_i [3/4] 5.70ns
:34  %tmp_32_i = fmul float %lnReturn_2, %lnReturn_2

ST_80: tmp_33_i [3/4] 5.70ns
:36  %tmp_33_i = fmul float %lnReturnA_temp, %lnReturn_2


 <State 81>: 5.70ns
ST_81: tmp_31_i [2/4] 5.70ns
:31  %tmp_31_i = fmul float %lnReturnA_temp, %lnReturnA_temp

ST_81: tmp_32_i [2/4] 5.70ns
:34  %tmp_32_i = fmul float %lnReturn_2, %lnReturn_2

ST_81: tmp_33_i [2/4] 5.70ns
:36  %tmp_33_i = fmul float %lnReturnA_temp, %lnReturn_2


 <State 82>: 5.70ns
ST_82: tmp_31_i [1/4] 5.70ns
:31  %tmp_31_i = fmul float %lnReturnA_temp, %lnReturnA_temp

ST_82: tmp_32_i [1/4] 5.70ns
:34  %tmp_32_i = fmul float %lnReturn_2, %lnReturn_2

ST_82: tmp_33_i [1/4] 5.70ns
:36  %tmp_33_i = fmul float %lnReturnA_temp, %lnReturn_2


 <State 83>: 5.70ns
ST_83: weight_returnA_temp [4/4] 5.70ns
:30  %weight_returnA_temp = fmul float %lnReturnA_temp, %weight

ST_83: weight_returnSquareA_temp [4/4] 5.70ns
:32  %weight_returnSquareA_temp = fmul float %tmp_31_i, %weight

ST_83: weight_returnB_temp [4/4] 5.70ns
:33  %weight_returnB_temp = fmul float %lnReturn_2, %weight

ST_83: weight_returnSquareB_temp [4/4] 5.70ns
:35  %weight_returnSquareB_temp = fmul float %tmp_32_i, %weight

ST_83: weight_returnA_returnB_temp [4/4] 5.70ns
:37  %weight_returnA_returnB_temp = fmul float %tmp_33_i, %weight


 <State 84>: 5.70ns
ST_84: weight_returnA_temp [3/4] 5.70ns
:30  %weight_returnA_temp = fmul float %lnReturnA_temp, %weight

ST_84: weight_returnSquareA_temp [3/4] 5.70ns
:32  %weight_returnSquareA_temp = fmul float %tmp_31_i, %weight

ST_84: weight_returnB_temp [3/4] 5.70ns
:33  %weight_returnB_temp = fmul float %lnReturn_2, %weight

ST_84: weight_returnSquareB_temp [3/4] 5.70ns
:35  %weight_returnSquareB_temp = fmul float %tmp_32_i, %weight

ST_84: weight_returnA_returnB_temp [3/4] 5.70ns
:37  %weight_returnA_returnB_temp = fmul float %tmp_33_i, %weight


 <State 85>: 5.70ns
ST_85: weight_returnA_temp [2/4] 5.70ns
:30  %weight_returnA_temp = fmul float %lnReturnA_temp, %weight

ST_85: weight_returnSquareA_temp [2/4] 5.70ns
:32  %weight_returnSquareA_temp = fmul float %tmp_31_i, %weight

ST_85: weight_returnB_temp [2/4] 5.70ns
:33  %weight_returnB_temp = fmul float %lnReturn_2, %weight

ST_85: weight_returnSquareB_temp [2/4] 5.70ns
:35  %weight_returnSquareB_temp = fmul float %tmp_32_i, %weight

ST_85: weight_returnA_returnB_temp [2/4] 5.70ns
:37  %weight_returnA_returnB_temp = fmul float %tmp_33_i, %weight


 <State 86>: 5.70ns
ST_86: stg_364 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecLoopName([33 x i8]* @p_str5) nounwind

ST_86: stg_365 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_86: weight_returnA_temp [1/4] 5.70ns
:30  %weight_returnA_temp = fmul float %lnReturnA_temp, %weight

ST_86: weight_returnSquareA_temp [1/4] 5.70ns
:32  %weight_returnSquareA_temp = fmul float %tmp_31_i, %weight

ST_86: weight_returnB_temp [1/4] 5.70ns
:33  %weight_returnB_temp = fmul float %lnReturn_2, %weight

ST_86: weight_returnSquareB_temp [1/4] 5.70ns
:35  %weight_returnSquareB_temp = fmul float %tmp_32_i, %weight

ST_86: weight_returnA_returnB_temp [1/4] 5.70ns
:37  %weight_returnA_returnB_temp = fmul float %tmp_33_i, %weight


 <State 87>: 1.86ns
ST_87: stg_371 [1/1] 1.86ns
:0  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %ln_returnA_out_c2_V, float %lnReturnA_temp)

ST_87: stg_372 [1/1] 1.86ns
:1  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnSquareA_out_c2_V, float %weight_returnSquareA_temp)

ST_87: stg_373 [1/1] 1.86ns
:2  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnA_out_c2_V, float %weight_returnA_temp)

ST_87: stg_374 [1/1] 1.86ns
:3  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_weight_out_c2_V, float %sum_weight)

ST_87: stg_375 [1/1] 1.86ns
:4  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %ln_returnB_out_c2_V, float %lnReturn_2)

ST_87: stg_376 [1/1] 1.86ns
:5  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnSquareB_out_c2_V, float %weight_returnSquareB_temp)

ST_87: stg_377 [1/1] 1.86ns
:6  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnB_out_c2_V, float %weight_returnB_temp)

ST_87: stg_378 [1/1] 1.86ns
:7  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnA_returnB_out_c2_s, float %weight_returnA_returnB_temp)

ST_87: stg_379 [1/1] 0.00ns
:8  br label %10

ST_87: stg_380 [1/1] 1.86ns
:0  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %ln_returnA_out_c1_V, float %lnReturnA_temp)

ST_87: stg_381 [1/1] 1.86ns
:1  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnSquareA_out_c1_V, float %weight_returnSquareA_temp)

ST_87: stg_382 [1/1] 1.86ns
:2  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnA_out_c1_V, float %weight_returnA_temp)

ST_87: stg_383 [1/1] 1.86ns
:3  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %sum_weight_out_c1_V, float %sum_weight)

ST_87: stg_384 [1/1] 1.86ns
:4  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %ln_returnB_out_c1_V, float %lnReturn_2)

ST_87: stg_385 [1/1] 1.86ns
:5  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnSquareB_out_c1_V, float %weight_returnSquareB_temp)

ST_87: stg_386 [1/1] 1.86ns
:6  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnB_out_c1_V, float %weight_returnB_temp)

ST_87: stg_387 [1/1] 1.86ns
:7  call void @_ssdm_op_Write.ap_fifo.volatile.floatP(float* %weight_returnA_returnB_out_c1_s, float %weight_returnA_returnB_temp)

ST_87: stg_388 [1/1] 0.00ns
:8  br label %10


 <State 88>: 2.44ns
ST_88: column_index [1/1] 2.44ns
:0  %column_index = add i31 %column_index_i, 1

ST_88: stg_390 [1/1] 0.00ns
:1  br label %.preheader.i



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
