-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlation_accel_v4_midEnd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NUMBER_OF_DAYS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_DAYS_empty_n : IN STD_LOGIC;
    NUMBER_OF_DAYS_read : OUT STD_LOGIC;
    NUMBER_OF_INDICES_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES_empty_n : IN STD_LOGIC;
    NUMBER_OF_INDICES_read : OUT STD_LOGIC;
    ln_returnA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ln_returnA_in_V_empty_n : IN STD_LOGIC;
    ln_returnA_in_V_read : OUT STD_LOGIC;
    weight_returnSquareA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnSquareA_in_V_empty_n : IN STD_LOGIC;
    weight_returnSquareA_in_V_read : OUT STD_LOGIC;
    weight_returnA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnA_in_V_empty_n : IN STD_LOGIC;
    weight_returnA_in_V_read : OUT STD_LOGIC;
    sum_weight_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_in_V_empty_n : IN STD_LOGIC;
    sum_weight_in_V_read : OUT STD_LOGIC;
    ln_returnB_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ln_returnB_in_V_empty_n : IN STD_LOGIC;
    ln_returnB_in_V_read : OUT STD_LOGIC;
    weight_returnSquareB_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnSquareB_in_V_empty_n : IN STD_LOGIC;
    weight_returnSquareB_in_V_read : OUT STD_LOGIC;
    weight_returnB_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnB_in_V_empty_n : IN STD_LOGIC;
    weight_returnB_in_V_read : OUT STD_LOGIC;
    weight_returnA_returnB_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnA_returnB_in_V_empty_n : IN STD_LOGIC;
    weight_returnA_returnB_in_V_read : OUT STD_LOGIC;
    sum_weight_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_out_V_full_n : IN STD_LOGIC;
    sum_weight_out_V_write : OUT STD_LOGIC;
    sum_return_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_return_out_V_full_n : IN STD_LOGIC;
    sum_return_out_V_write : OUT STD_LOGIC;
    sum_weight_returnSquare_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquare_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnSquare_out_V_write : OUT STD_LOGIC;
    sum_weight_return_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_return_out_V_full_n : IN STD_LOGIC;
    sum_weight_return_out_V_write : OUT STD_LOGIC;
    sum_weight_returnA_returnB_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_returnB_out_full_n : IN STD_LOGIC;
    sum_weight_returnA_returnB_out_write : OUT STD_LOGIC;
    sum_returnA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_returnA_out_V_full_n : IN STD_LOGIC;
    sum_returnA_out_V_write : OUT STD_LOGIC;
    sum_weight_returnSquareA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquareA_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnSquareA_out_V_write : OUT STD_LOGIC;
    sum_weight_returnA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnA_out_V_write : OUT STD_LOGIC;
    NUMBER_OF_DAYS_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_DAYS_out_full_n : IN STD_LOGIC;
    NUMBER_OF_DAYS_out_write : OUT STD_LOGIC;
    NUMBER_OF_INDICES_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES_out_full_n : IN STD_LOGIC;
    NUMBER_OF_INDICES_out_write : OUT STD_LOGIC );
end;


architecture behav of correlation_accel_v4_midEnd is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_pp0_stg0_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_pp1_stg0_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_pp1_stg1_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_pp1_stg2_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_pp1_stg3_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_pp1_stg4_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st57_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_31 : BOOLEAN;
    signal tmp_9_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it34 : STD_LOGIC := '0';
    signal tmp_9_i_reg_1384 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_227 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it40 : STD_LOGIC := '0';
    signal tmp_2_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_reg_923 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_984 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg1_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_306 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal exitcond_i_reg_1475 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_weight_returnSquareA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_990 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg2_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_333 : BOOLEAN;
    signal acc_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg3_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_354 : BOOLEAN;
    signal acc_weight_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal NUMBER_OF_DAYS_read_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_384 : BOOLEAN;
    signal tmp_reg_1146 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_i_reg_1151 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_f_i_reg_1156 : STD_LOGIC_VECTOR (30 downto 0);
    signal upper_bound_fu_1072_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_bound_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_400 : BOOLEAN;
    signal tmp_i_fu_1079_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_addr_gep_fu_340_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_reg_1171 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_gep_fu_347_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_reg_1176 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_gep_fu_354_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_reg_1181 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_gep_fu_361_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_reg_1186 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_gep_fu_368_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_reg_1191 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_gep_fu_375_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_reg_1196 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_gep_fu_382_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_reg_1201 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_1_gep_fu_389_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_1_reg_1206 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_1_gep_fu_396_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_1_reg_1211 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_1_gep_fu_403_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_1_reg_1216 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_1_gep_fu_410_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_1_reg_1221 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_1_gep_fu_417_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_1_reg_1226 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_1_gep_fu_424_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_1_reg_1231 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_1_gep_fu_431_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_1_reg_1236 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_2_gep_fu_438_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_2_reg_1241 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_2_gep_fu_445_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_2_reg_1246 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_2_gep_fu_452_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_2_reg_1251 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_gep_fu_459_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_reg_1256 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_2_gep_fu_466_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_2_reg_1261 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_2_gep_fu_473_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_2_reg_1266 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_2_gep_fu_480_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_2_reg_1271 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_3_gep_fu_487_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_3_reg_1276 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_3_gep_fu_494_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_3_reg_1281 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_3_gep_fu_501_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_3_reg_1286 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_gep_fu_508_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_reg_1291 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_3_gep_fu_515_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_3_reg_1296 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_3_gep_fu_522_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_3_reg_1301 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_3_gep_fu_529_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_3_reg_1306 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_4_gep_fu_536_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_4_reg_1311 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_4_gep_fu_543_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_4_reg_1316 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_4_gep_fu_550_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_4_reg_1321 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_gep_fu_557_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_reg_1326 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_4_gep_fu_564_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_4_reg_1331 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_4_gep_fu_571_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_4_reg_1336 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_4_gep_fu_578_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_4_reg_1341 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_5_gep_fu_585_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_5_reg_1346 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_5_gep_fu_592_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_5_reg_1351 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_5_gep_fu_599_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_5_reg_1356 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_gep_fu_606_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_reg_1361 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_5_gep_fu_613_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_5_reg_1366 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_5_gep_fu_620_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_5_reg_1371 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_5_gep_fu_627_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_5_reg_1376 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_i_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1393 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_1393_pp0_it36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_1393_pp0_it37 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_1393_pp0_it38 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_1393_pp0_it39 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1408 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_addr_6_reg_1433 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_6_reg_1439 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_6_reg_1445 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_6_reg_1451 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_6_reg_1457 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_6_reg_1463 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_6_reg_1469 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_i_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_647 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_1123_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1479 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_43_i_fu_1129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_i_reg_1484 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnA_reg_1528 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA_reg_1533 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_reg_1538 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnB_reg_1543 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareB_reg_1548 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnB_reg_1553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg4_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_693 : BOOLEAN;
    signal column_index_fu_1135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st57_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_704 : BOOLEAN;
    signal ap_sig_bdd_721 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_729 : BOOLEAN;
    signal acc_returnA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_ce0 : STD_LOGIC;
    signal acc_returnA_we0 : STD_LOGIC;
    signal acc_returnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_ce1 : STD_LOGIC;
    signal acc_returnA_we1 : STD_LOGIC;
    signal acc_returnA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_ce0 : STD_LOGIC;
    signal acc_weight_returnSquareA_we0 : STD_LOGIC;
    signal acc_weight_returnSquareA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_ce1 : STD_LOGIC;
    signal acc_weight_returnSquareA_we1 : STD_LOGIC;
    signal acc_weight_returnSquareA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_ce0 : STD_LOGIC;
    signal acc_weight_returnA_we0 : STD_LOGIC;
    signal acc_weight_returnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_ce1 : STD_LOGIC;
    signal acc_weight_returnA_we1 : STD_LOGIC;
    signal acc_weight_returnA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_ce0 : STD_LOGIC;
    signal acc_returnB_we0 : STD_LOGIC;
    signal acc_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_ce1 : STD_LOGIC;
    signal acc_returnB_we1 : STD_LOGIC;
    signal acc_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_ce0 : STD_LOGIC;
    signal acc_weight_returnSquareB_we0 : STD_LOGIC;
    signal acc_weight_returnSquareB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_ce1 : STD_LOGIC;
    signal acc_weight_returnSquareB_we1 : STD_LOGIC;
    signal acc_weight_returnSquareB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_i_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_phi_fu_824_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_phi_fu_850_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_phi_fu_863_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_phi_fu_876_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_phi_fu_889_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_phi_fu_902_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_phi_fu_915_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_phi_fu_927_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_i_fu_1106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_889 : BOOLEAN;
    signal tmp_1_i_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_899 : BOOLEAN;
    signal grp_fu_953_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_959_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_947_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_935_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_941_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_941_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_947_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_947_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_953_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_953_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_959_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_959_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_965_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_965_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_971_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_971_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_i_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1060_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t_i_fu_1063_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1069_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1094_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1094_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_935_ce : STD_LOGIC;
    signal grp_fu_941_ce : STD_LOGIC;
    signal grp_fu_947_ce : STD_LOGIC;
    signal grp_fu_953_ce : STD_LOGIC;
    signal grp_fu_959_ce : STD_LOGIC;
    signal grp_fu_965_ce : STD_LOGIC;
    signal grp_fu_971_ce : STD_LOGIC;
    signal grp_fu_1094_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v4_srem_32ns_4ns_32_36 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v4_midEnd_acc_returnA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    acc_returnA_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_returnA_address0,
        ce0 => acc_returnA_ce0,
        we0 => acc_returnA_we0,
        d0 => acc_returnA_d0,
        q0 => acc_returnA_q0,
        address1 => acc_returnA_address1,
        ce1 => acc_returnA_ce1,
        we1 => acc_returnA_we1,
        d1 => acc_returnA_d1);

    acc_weight_returnSquareA_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnSquareA_address0,
        ce0 => acc_weight_returnSquareA_ce0,
        we0 => acc_weight_returnSquareA_we0,
        d0 => acc_weight_returnSquareA_d0,
        q0 => acc_weight_returnSquareA_q0,
        address1 => acc_weight_returnSquareA_address1,
        ce1 => acc_weight_returnSquareA_ce1,
        we1 => acc_weight_returnSquareA_we1,
        d1 => acc_weight_returnSquareA_d1);

    acc_weight_returnA_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnA_address0,
        ce0 => acc_weight_returnA_ce0,
        we0 => acc_weight_returnA_we0,
        d0 => acc_weight_returnA_d0,
        q0 => acc_weight_returnA_q0,
        address1 => acc_weight_returnA_address1,
        ce1 => acc_weight_returnA_ce1,
        we1 => acc_weight_returnA_we1,
        d1 => acc_weight_returnA_d1);

    acc_returnB_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_returnB_address0,
        ce0 => acc_returnB_ce0,
        we0 => acc_returnB_we0,
        d0 => acc_returnB_d0,
        q0 => acc_returnB_q0,
        address1 => acc_returnB_address1,
        ce1 => acc_returnB_ce1,
        we1 => acc_returnB_we1,
        d1 => acc_returnB_d1);

    acc_weight_returnSquareB_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnSquareB_address0,
        ce0 => acc_weight_returnSquareB_ce0,
        we0 => acc_weight_returnSquareB_we0,
        d0 => acc_weight_returnSquareB_d0,
        q0 => acc_weight_returnSquareB_q0,
        address1 => acc_weight_returnSquareB_address1,
        ce1 => acc_weight_returnSquareB_ce1,
        we1 => acc_weight_returnSquareB_we1,
        d1 => acc_weight_returnSquareB_d1);

    acc_weight_returnB_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnB_address0,
        ce0 => acc_weight_returnB_ce0,
        we0 => acc_weight_returnB_we0,
        d0 => acc_weight_returnB_d0,
        q0 => acc_weight_returnB_q0,
        address1 => acc_weight_returnB_address1,
        ce1 => acc_weight_returnB_ce1,
        we1 => acc_weight_returnB_we1,
        d1 => acc_weight_returnB_d1);

    acc_weight_returnA_returnB_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnA_returnB_address0,
        ce0 => acc_weight_returnA_returnB_ce0,
        we0 => acc_weight_returnA_returnB_we0,
        d0 => acc_weight_returnA_returnB_d0,
        q0 => acc_weight_returnA_returnB_q0,
        address1 => acc_weight_returnA_returnB_address1,
        ce1 => acc_weight_returnA_returnB_ce1,
        we1 => acc_weight_returnA_returnB_we1,
        d1 => acc_weight_returnA_returnB_d1);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U43 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_935_p0,
        din1 => grp_fu_935_p1,
        ce => grp_fu_935_ce,
        dout => grp_fu_935_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U44 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_941_p0,
        din1 => grp_fu_941_p1,
        ce => grp_fu_941_ce,
        dout => grp_fu_941_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U45 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_947_p0,
        din1 => grp_fu_947_p1,
        ce => grp_fu_947_ce,
        dout => grp_fu_947_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U46 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_953_p0,
        din1 => grp_fu_953_p1,
        ce => grp_fu_953_ce,
        dout => grp_fu_953_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U47 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_959_p0,
        din1 => grp_fu_959_p1,
        ce => grp_fu_959_ce,
        dout => grp_fu_959_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U48 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_965_p0,
        din1 => grp_fu_965_p1,
        ce => grp_fu_965_ce,
        dout => grp_fu_965_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U49 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_971_p0,
        din1 => grp_fu_971_p1,
        ce => grp_fu_971_ce,
        dout => grp_fu_971_p2);

    correlation_accel_v4_srem_32ns_4ns_32_36_U50 : component correlation_accel_v4_srem_32ns_4ns_32_36
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1094_p0,
        din1 => grp_fu_1094_p1,
        ce => grp_fu_1094_ce,
        dout => grp_fu_1094_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_i_fu_1084_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = tmp_9_i_fu_1089_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it26 assign process. --
    ap_reg_ppiten_pp0_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it27 assign process. --
    ap_reg_ppiten_pp0_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it28 assign process. --
    ap_reg_ppiten_pp0_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it29 assign process. --
    ap_reg_ppiten_pp0_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it30 assign process. --
    ap_reg_ppiten_pp0_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it31 assign process. --
    ap_reg_ppiten_pp0_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it32 assign process. --
    ap_reg_ppiten_pp0_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it33 assign process. --
    ap_reg_ppiten_pp0_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it34 assign process. --
    ap_reg_ppiten_pp0_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it35 assign process. --
    ap_reg_ppiten_pp0_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it35 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it35 <= ap_reg_ppiten_pp0_it34;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it36 assign process. --
    ap_reg_ppiten_pp0_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it36 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it36 <= ap_reg_ppiten_pp0_it35;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it37 assign process. --
    ap_reg_ppiten_pp0_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it37 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it37 <= ap_reg_ppiten_pp0_it36;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it38 assign process. --
    ap_reg_ppiten_pp0_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it38 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it38 <= ap_reg_ppiten_pp0_it37;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it39 assign process. --
    ap_reg_ppiten_pp0_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it39 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it39 <= ap_reg_ppiten_pp0_it38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it40 assign process. --
    ap_reg_ppiten_pp0_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it40 <= ap_reg_ppiten_pp0_it39;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond_i_fu_1117_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_i_reg_1475) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10) and not((ap_const_lv1_0 = exitcond_i_reg_1475))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- column_index_i_reg_795 assign process. --
    column_index_i_reg_795_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
                column_index_i_reg_795 <= column_index_fu_1135_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                column_index_i_reg_795 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- i1_i_reg_820 assign process. --
    i1_i_reg_820_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                i1_i_reg_820 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (tmp_9_i_reg_1384 = ap_const_lv1_0))) then 
                i1_i_reg_820 <= i_reg_1388;
            end if; 
        end if;
    end process;

    -- i2_i_reg_923 assign process. --
    i2_i_reg_923_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                i2_i_reg_923 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_i_reg_1475) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
                i2_i_reg_923 <= i_1_reg_1479;
            end if; 
        end if;
    end process;

    -- tmp_2_reg_832 assign process. --
    tmp_2_reg_832_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                tmp_2_reg_832 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
                tmp_2_reg_832 <= grp_fu_935_p2;
            end if; 
        end if;
    end process;

    -- tmp_3_reg_845 assign process. --
    tmp_3_reg_845_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                tmp_3_reg_845 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
                tmp_3_reg_845 <= sum_weight_returnB_reg_1553;
            end if; 
        end if;
    end process;

    -- tmp_4_reg_858 assign process. --
    tmp_4_reg_858_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                tmp_4_reg_858 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
                tmp_4_reg_858 <= sum_weight_returnSquareB_reg_1548;
            end if; 
        end if;
    end process;

    -- tmp_5_reg_871 assign process. --
    tmp_5_reg_871_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                tmp_5_reg_871 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then 
                tmp_5_reg_871 <= sum_returnB_reg_1543;
            end if; 
        end if;
    end process;

    -- tmp_6_reg_884 assign process. --
    tmp_6_reg_884_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                tmp_6_reg_884 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then 
                tmp_6_reg_884 <= sum_weight_returnA_reg_1538;
            end if; 
        end if;
    end process;

    -- tmp_7_reg_897 assign process. --
    tmp_7_reg_897_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                tmp_7_reg_897 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then 
                tmp_7_reg_897 <= sum_weight_returnSquareA_reg_1533;
            end if; 
        end if;
    end process;

    -- tmp_8_reg_910 assign process. --
    tmp_8_reg_910_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)))) then 
                tmp_8_reg_910 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then 
                tmp_8_reg_910 <= sum_returnA_reg_1528;
            end if; 
        end if;
    end process;

    -- tmp_9_reg_807 assign process. --
    tmp_9_reg_807_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                tmp_9_reg_807 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39))) then 
                tmp_9_reg_807 <= ap_reg_ppstg_tmp_18_reg_1393_pp0_it39;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_384))) then
                NUMBER_OF_DAYS_read_reg_1141 <= NUMBER_OF_DAYS_dout;
                p_lshr_f_i_reg_1156 <= NUMBER_OF_INDICES_dout(31 downto 1);
                p_lshr_i_reg_1151 <= p_neg_i_fu_1034_p2(31 downto 1);
                tmp_reg_1146 <= NUMBER_OF_INDICES_dout(31 downto 31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then
                acc_returnA_addr_6_reg_1433 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
                acc_returnB_addr_6_reg_1451 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
                acc_weight_returnA_addr_6_reg_1445 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
                acc_weight_returnA_returnB_add_6_reg_1469 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
                acc_weight_returnB_addr_6_reg_1463 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
                acc_weight_returnSquareA_addr_6_reg_1439 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
                acc_weight_returnSquareB_addr_6_reg_1457 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
                tmp_19_reg_1398 <= ln_returnA_in_V_dout;
                tmp_20_reg_1403 <= weight_returnA_in_V_dout;
                tmp_21_reg_1408 <= weight_returnSquareA_in_V_dout;
                tmp_22_reg_1413 <= ln_returnB_in_V_dout;
                tmp_23_reg_1418 <= weight_returnB_in_V_dout;
                tmp_24_reg_1423 <= weight_returnSquareB_in_V_dout;
                tmp_25_reg_1428 <= weight_returnA_returnB_in_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then
                ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it36 <= acc_returnA_addr_6_reg_1433;
                ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it37 <= ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it36;
                ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it38 <= ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it37;
                ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it39 <= ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it38;
                ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it36 <= acc_returnB_addr_6_reg_1451;
                ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it37 <= ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it36;
                ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it38 <= ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it37;
                ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it39 <= ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it38;
                ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it36 <= acc_weight_returnA_addr_6_reg_1445;
                ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it37 <= ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it36;
                ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it38 <= ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it37;
                ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it39 <= ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it38;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it36 <= acc_weight_returnA_returnB_add_6_reg_1469;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it37 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it36;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it38 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it37;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it39 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it38;
                ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it36 <= acc_weight_returnB_addr_6_reg_1463;
                ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it37 <= ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it36;
                ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it38 <= ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it37;
                ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it39 <= ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it38;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it36 <= acc_weight_returnSquareA_addr_6_reg_1439;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it37 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it36;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it38 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it37;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it39 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it38;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it36 <= acc_weight_returnSquareB_addr_6_reg_1457;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it37 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it36;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it38 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it37;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it39 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it38;
                ap_reg_ppstg_tmp_18_reg_1393_pp0_it36 <= tmp_18_reg_1393;
                ap_reg_ppstg_tmp_18_reg_1393_pp0_it37 <= ap_reg_ppstg_tmp_18_reg_1393_pp0_it36;
                ap_reg_ppstg_tmp_18_reg_1393_pp0_it38 <= ap_reg_ppstg_tmp_18_reg_1393_pp0_it37;
                ap_reg_ppstg_tmp_18_reg_1393_pp0_it39 <= ap_reg_ppstg_tmp_18_reg_1393_pp0_it38;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it10 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it9;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it11 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it10;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it12 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it11;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it13 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it12;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it14 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it13;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it15 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it14;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it16 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it15;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it17 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it16;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it18 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it17;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it19 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it18;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it2 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it1;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it20 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it19;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it21 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it20;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it22 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it21;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it23 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it22;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it24 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it23;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it25 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it24;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it26 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it25;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it27 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it26;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it28 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it27;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it29 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it28;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it3 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it2;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it30 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it29;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it31 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it30;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it32 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it31;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it33 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it32;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it33;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it4 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it3;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it5 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it4;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it6 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it5;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it7 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it6;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it8 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it7;
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it9 <= ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6)) then
                ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1 <= exitcond_i_reg_1475;
                exitcond_i_reg_1475 <= exitcond_i_fu_1117_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then
                ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it1 <= tmp_9_i_reg_1384;
                tmp_9_i_reg_1384 <= tmp_9_i_fu_1089_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then
                i_1_reg_1479 <= i_1_fu_1123_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = tmp_9_i_fu_1089_p2))) then
                i_reg_1388 <= i_fu_1100_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35)) or ((ap_const_lv1_0 = exitcond_i_reg_1475) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8)))) then
                reg_1002 <= acc_returnB_q0;
                reg_996 <= acc_weight_returnA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35)) or ((ap_const_lv1_0 = exitcond_i_reg_1475) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9)))) then
                reg_1008 <= acc_weight_returnSquareB_q0;
                reg_1014 <= acc_weight_returnB_q0;
                reg_1020 <= acc_weight_returnA_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_lv1_0 = exitcond_i_reg_1475)))) then
                reg_984 <= acc_returnA_q0;
                reg_990 <= acc_weight_returnSquareA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then
                sum_returnA_reg_1528 <= grp_fu_935_p2;
                sum_weight_returnSquareA_reg_1533 <= grp_fu_941_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then
                sum_returnB_reg_1543 <= grp_fu_941_p2;
                sum_weight_returnA_reg_1538 <= grp_fu_935_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then
                sum_weight_returnB_reg_1553 <= grp_fu_941_p2;
                sum_weight_returnSquareB_reg_1548 <= grp_fu_935_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then
                tmp_18_reg_1393 <= sum_weight_in_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_i_fu_1117_p2))) then
                tmp_43_i_reg_1484(0) <= tmp_43_i_fu_1129_p1(0);
    tmp_43_i_reg_1484(1) <= tmp_43_i_fu_1129_p1(1);
    tmp_43_i_reg_1484(2) <= tmp_43_i_fu_1129_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                tmp_i_reg_1166 <= tmp_i_fu_1079_p2;
                upper_bound_reg_1161 <= upper_bound_fu_1072_p3;
            end if;
        end if;
    end process;
    acc_returnB_addr_reg_1171(2 downto 0) <= "000";
    acc_weight_returnSquareB_addr_reg_1176(2 downto 0) <= "000";
    acc_weight_returnB_addr_reg_1181(2 downto 0) <= "000";
    acc_weight_returnA_returnB_add_reg_1186(2 downto 0) <= "000";
    acc_returnA_addr_reg_1191(2 downto 0) <= "000";
    acc_weight_returnSquareA_addr_reg_1196(2 downto 0) <= "000";
    acc_weight_returnA_addr_reg_1201(2 downto 0) <= "000";
    acc_returnB_addr_1_reg_1206(2 downto 0) <= "001";
    acc_weight_returnSquareB_addr_1_reg_1211(2 downto 0) <= "001";
    acc_weight_returnB_addr_1_reg_1216(2 downto 0) <= "001";
    acc_weight_returnA_returnB_add_1_reg_1221(2 downto 0) <= "001";
    acc_returnA_addr_1_reg_1226(2 downto 0) <= "001";
    acc_weight_returnSquareA_addr_1_reg_1231(2 downto 0) <= "001";
    acc_weight_returnA_addr_1_reg_1236(2 downto 0) <= "001";
    acc_returnB_addr_2_reg_1241(2 downto 0) <= "010";
    acc_weight_returnSquareB_addr_2_reg_1246(2 downto 0) <= "010";
    acc_weight_returnB_addr_2_reg_1251(2 downto 0) <= "010";
    acc_weight_returnA_returnB_add_2_reg_1256(2 downto 0) <= "010";
    acc_returnA_addr_2_reg_1261(2 downto 0) <= "010";
    acc_weight_returnSquareA_addr_2_reg_1266(2 downto 0) <= "010";
    acc_weight_returnA_addr_2_reg_1271(2 downto 0) <= "010";
    acc_returnB_addr_3_reg_1276(2 downto 0) <= "011";
    acc_weight_returnSquareB_addr_3_reg_1281(2 downto 0) <= "011";
    acc_weight_returnB_addr_3_reg_1286(2 downto 0) <= "011";
    acc_weight_returnA_returnB_add_3_reg_1291(2 downto 0) <= "011";
    acc_returnA_addr_3_reg_1296(2 downto 0) <= "011";
    acc_weight_returnSquareA_addr_3_reg_1301(2 downto 0) <= "011";
    acc_weight_returnA_addr_3_reg_1306(2 downto 0) <= "011";
    acc_returnB_addr_4_reg_1311(2 downto 0) <= "100";
    acc_weight_returnSquareB_addr_4_reg_1316(2 downto 0) <= "100";
    acc_weight_returnB_addr_4_reg_1321(2 downto 0) <= "100";
    acc_weight_returnA_returnB_add_4_reg_1326(2 downto 0) <= "100";
    acc_returnA_addr_4_reg_1331(2 downto 0) <= "100";
    acc_weight_returnSquareA_addr_4_reg_1336(2 downto 0) <= "100";
    acc_weight_returnA_addr_4_reg_1341(2 downto 0) <= "100";
    acc_returnB_addr_5_reg_1346(2 downto 0) <= "101";
    acc_weight_returnSquareB_addr_5_reg_1351(2 downto 0) <= "101";
    acc_weight_returnB_addr_5_reg_1356(2 downto 0) <= "101";
    acc_weight_returnA_returnB_add_5_reg_1361(2 downto 0) <= "101";
    acc_returnA_addr_5_reg_1366(2 downto 0) <= "101";
    acc_weight_returnSquareA_addr_5_reg_1371(2 downto 0) <= "101";
    acc_weight_returnA_addr_5_reg_1376(2 downto 0) <= "101";
    tmp_43_i_reg_1484(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it39, ap_reg_ppiten_pp0_it40, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_bdd_384, tmp_9_i_fu_1089_p2, exitcond_i_fu_1117_p2, ap_sig_cseq_ST_pp1_stg4_fsm_10, ap_sig_bdd_721, tmp_1_i_fu_1084_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_384)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_1_i_fu_1084_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
            when ap_ST_pp0_stg0_fsm_5 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it39)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it39))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1089_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                end if;
            when ap_ST_pp1_stg0_fsm_6 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_i_fu_1117_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st57_fsm_11;
                end if;
            when ap_ST_pp1_stg1_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp1_stg2_fsm_8;
            when ap_ST_pp1_stg2_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp1_stg3_fsm_9;
            when ap_ST_pp1_stg3_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp1_stg4_fsm_10;
            when ap_ST_pp1_stg4_fsm_10 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st57_fsm_11;
                end if;
            when ap_ST_st57_fsm_11 => 
                if (not(ap_sig_bdd_721)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st57_fsm_11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    NUMBER_OF_DAYS_out_din <= NUMBER_OF_DAYS_dout;

    -- NUMBER_OF_DAYS_out_write assign process. --
    NUMBER_OF_DAYS_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_384)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_384))) then 
            NUMBER_OF_DAYS_out_write <= ap_const_logic_1;
        else 
            NUMBER_OF_DAYS_out_write <= ap_const_logic_0;
        end if; 
    end process;


    -- NUMBER_OF_DAYS_read assign process. --
    NUMBER_OF_DAYS_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_384)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_384))) then 
            NUMBER_OF_DAYS_read <= ap_const_logic_1;
        else 
            NUMBER_OF_DAYS_read <= ap_const_logic_0;
        end if; 
    end process;

    NUMBER_OF_INDICES_out_din <= NUMBER_OF_INDICES_dout;

    -- NUMBER_OF_INDICES_out_write assign process. --
    NUMBER_OF_INDICES_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_384)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_384))) then 
            NUMBER_OF_INDICES_out_write <= ap_const_logic_1;
        else 
            NUMBER_OF_INDICES_out_write <= ap_const_logic_0;
        end if; 
    end process;


    -- NUMBER_OF_INDICES_read assign process. --
    NUMBER_OF_INDICES_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_384)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_384))) then 
            NUMBER_OF_INDICES_read <= ap_const_logic_1;
        else 
            NUMBER_OF_INDICES_read <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnA_addr_1_gep_fu_417_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_returnA_addr_2_gep_fu_466_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_returnA_addr_3_gep_fu_515_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_returnA_addr_4_gep_fu_564_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_returnA_addr_5_gep_fu_613_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_returnA_addr_gep_fu_368_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_returnA_address0 assign process. --
    acc_returnA_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, acc_returnA_addr_reg_1191, acc_returnA_addr_2_reg_1261, acc_returnA_addr_4_reg_1331, ap_sig_cseq_ST_pp1_stg0_fsm_6, tmp_43_i_fu_1129_p1, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1106_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_returnA_address0 <= acc_returnA_addr_4_reg_1331;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_returnA_address0 <= acc_returnA_addr_2_reg_1261;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_returnA_address0 <= acc_returnA_addr_reg_1191;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            acc_returnA_address0 <= tmp_43_i_fu_1129_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_returnA_address0 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
        else 
            acc_returnA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_returnA_address1 assign process. --
    acc_returnA_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_returnA_addr_1_reg_1226, acc_returnA_addr_3_reg_1296, acc_returnA_addr_5_reg_1366, ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_returnA_address1 <= ap_reg_ppstg_acc_returnA_addr_6_reg_1433_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_returnA_address1 <= acc_returnA_addr_5_reg_1366;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_returnA_address1 <= acc_returnA_addr_3_reg_1296;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_returnA_address1 <= acc_returnA_addr_1_reg_1226;
        else 
            acc_returnA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_returnA_ce0 assign process. --
    acc_returnA_ce0_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_ce0 <= ap_const_logic_1;
        else 
            acc_returnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnA_ce1 assign process. --
    acc_returnA_ce1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_ce1 <= ap_const_logic_1;
        else 
            acc_returnA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnA_d0 <= ap_const_lv32_0;

    -- acc_returnA_d1 assign process. --
    acc_returnA_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, grp_fu_935_p2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_returnA_d1 <= grp_fu_935_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_d1 <= ap_const_lv32_0;
        else 
            acc_returnA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_returnA_we0 assign process. --
    acc_returnA_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_we0 <= ap_const_logic_1;
        else 
            acc_returnA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnA_we1 assign process. --
    acc_returnA_we1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_we1 <= ap_const_logic_1;
        else 
            acc_returnA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnB_addr_1_gep_fu_389_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_returnB_addr_2_gep_fu_438_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_returnB_addr_3_gep_fu_487_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_returnB_addr_4_gep_fu_536_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_returnB_addr_5_gep_fu_585_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_returnB_addr_gep_fu_340_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_returnB_address0 assign process. --
    acc_returnB_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, ap_reg_ppiten_pp1_it0, acc_returnB_addr_reg_1171, acc_returnB_addr_2_reg_1241, acc_returnB_addr_4_reg_1311, tmp_43_i_reg_1484, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1106_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_returnB_address0 <= acc_returnB_addr_4_reg_1311;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_returnB_address0 <= acc_returnB_addr_2_reg_1241;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_returnB_address0 <= acc_returnB_addr_reg_1171;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            acc_returnB_address0 <= tmp_43_i_reg_1484(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_returnB_address0 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
        else 
            acc_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_returnB_address1 assign process. --
    acc_returnB_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_returnB_addr_1_reg_1206, acc_returnB_addr_3_reg_1276, acc_returnB_addr_5_reg_1346, ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_returnB_address1 <= ap_reg_ppstg_acc_returnB_addr_6_reg_1451_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_returnB_address1 <= acc_returnB_addr_5_reg_1346;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_returnB_address1 <= acc_returnB_addr_3_reg_1276;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_returnB_address1 <= acc_returnB_addr_1_reg_1206;
        else 
            acc_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_returnB_ce0 assign process. --
    acc_returnB_ce0_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_ce1 assign process. --
    acc_returnB_ce1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnB_d0 <= ap_const_lv32_0;

    -- acc_returnB_d1 assign process. --
    acc_returnB_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_953_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_returnB_d1 <= grp_fu_953_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_returnB_we0 assign process. --
    acc_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_we0 <= ap_const_logic_1;
        else 
            acc_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_we1 assign process. --
    acc_returnB_we1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_we1 <= ap_const_logic_1;
        else 
            acc_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_addr_1_gep_fu_431_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_addr_2_gep_fu_480_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_addr_3_gep_fu_529_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_addr_4_gep_fu_578_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_addr_5_gep_fu_627_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_addr_gep_fu_382_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_address0 assign process. --
    acc_weight_returnA_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, ap_reg_ppiten_pp1_it0, acc_weight_returnA_addr_reg_1201, acc_weight_returnA_addr_2_reg_1271, acc_weight_returnA_addr_4_reg_1341, tmp_43_i_reg_1484, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1106_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_4_reg_1341;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_2_reg_1271;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_reg_1201;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            acc_weight_returnA_address0 <= tmp_43_i_reg_1484(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnA_address0 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
        else 
            acc_weight_returnA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_address1 assign process. --
    acc_weight_returnA_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnA_addr_1_reg_1236, acc_weight_returnA_addr_3_reg_1306, acc_weight_returnA_addr_5_reg_1376, ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnA_address1 <= ap_reg_ppstg_acc_weight_returnA_addr_6_reg_1445_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_5_reg_1376;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_3_reg_1306;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_1_reg_1236;
        else 
            acc_weight_returnA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_ce0 assign process. --
    acc_weight_returnA_ce0_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_ce1 assign process. --
    acc_weight_returnA_ce1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_d0 <= ap_const_lv32_0;

    -- acc_weight_returnA_d1 assign process. --
    acc_weight_returnA_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_947_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnA_d1 <= grp_fu_947_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    acc_weight_returnA_returnB_add_1_gep_fu_410_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_2_gep_fu_459_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_3_gep_fu_508_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_4_gep_fu_557_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_5_gep_fu_606_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_gep_fu_361_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_returnB_address0 assign process. --
    acc_weight_returnA_returnB_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, acc_weight_returnA_returnB_add_reg_1186, acc_weight_returnA_returnB_add_2_reg_1256, acc_weight_returnA_returnB_add_4_reg_1326, tmp_43_i_reg_1484, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1106_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_4_reg_1326;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_2_reg_1256;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_reg_1186;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            acc_weight_returnA_returnB_address0 <= tmp_43_i_reg_1484(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnA_returnB_address0 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
        else 
            acc_weight_returnA_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_address1 assign process. --
    acc_weight_returnA_returnB_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnA_returnB_add_1_reg_1221, acc_weight_returnA_returnB_add_3_reg_1291, acc_weight_returnA_returnB_add_5_reg_1361, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnA_returnB_address1 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1469_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_5_reg_1361;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_3_reg_1291;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_1_reg_1221;
        else 
            acc_weight_returnA_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce0 assign process. --
    acc_weight_returnA_returnB_ce0_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce1 assign process. --
    acc_weight_returnA_returnB_ce1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnA_returnB_d1 assign process. --
    acc_weight_returnA_returnB_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_971_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnA_returnB_d1 <= grp_fu_971_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we0 assign process. --
    acc_weight_returnA_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we1 assign process. --
    acc_weight_returnA_returnB_we1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_we0 assign process. --
    acc_weight_returnA_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_we1 assign process. --
    acc_weight_returnA_we1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnB_addr_1_gep_fu_403_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnB_addr_2_gep_fu_452_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnB_addr_3_gep_fu_501_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnB_addr_4_gep_fu_550_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnB_addr_5_gep_fu_599_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnB_addr_gep_fu_354_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnB_address0 assign process. --
    acc_weight_returnB_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, acc_weight_returnB_addr_reg_1181, acc_weight_returnB_addr_2_reg_1251, acc_weight_returnB_addr_4_reg_1321, tmp_43_i_reg_1484, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1106_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_4_reg_1321;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_2_reg_1251;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_reg_1181;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            acc_weight_returnB_address0 <= tmp_43_i_reg_1484(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnB_address0 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
        else 
            acc_weight_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnB_address1 assign process. --
    acc_weight_returnB_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnB_addr_1_reg_1216, acc_weight_returnB_addr_3_reg_1286, acc_weight_returnB_addr_5_reg_1356, ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnB_address1 <= ap_reg_ppstg_acc_weight_returnB_addr_6_reg_1463_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_5_reg_1356;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_3_reg_1286;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_1_reg_1216;
        else 
            acc_weight_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnB_ce0 assign process. --
    acc_weight_returnB_ce0_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnB_ce1 assign process. --
    acc_weight_returnB_ce1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnB_d1 assign process. --
    acc_weight_returnB_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_965_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnB_d1 <= grp_fu_965_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnB_we0 assign process. --
    acc_weight_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnB_we1 assign process. --
    acc_weight_returnB_we1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareA_addr_1_gep_fu_424_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_2_gep_fu_473_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_3_gep_fu_522_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_4_gep_fu_571_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_5_gep_fu_620_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_gep_fu_375_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquareA_address0 assign process. --
    acc_weight_returnSquareA_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, acc_weight_returnSquareA_addr_reg_1196, acc_weight_returnSquareA_addr_2_reg_1266, acc_weight_returnSquareA_addr_4_reg_1336, ap_sig_cseq_ST_pp1_stg0_fsm_6, tmp_43_i_fu_1129_p1, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1106_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_4_reg_1336;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_2_reg_1266;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_reg_1196;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            acc_weight_returnSquareA_address0 <= tmp_43_i_fu_1129_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnSquareA_address0 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
        else 
            acc_weight_returnSquareA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_address1 assign process. --
    acc_weight_returnSquareA_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnSquareA_addr_1_reg_1231, acc_weight_returnSquareA_addr_3_reg_1301, acc_weight_returnSquareA_addr_5_reg_1371, ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnSquareA_address1 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_6_reg_1439_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_5_reg_1371;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_3_reg_1301;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_1_reg_1231;
        else 
            acc_weight_returnSquareA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_ce0 assign process. --
    acc_weight_returnSquareA_ce0_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareA_ce1 assign process. --
    acc_weight_returnSquareA_ce1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareA_d0 <= ap_const_lv32_0;

    -- acc_weight_returnSquareA_d1 assign process. --
    acc_weight_returnSquareA_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, grp_fu_941_p2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnSquareA_d1 <= grp_fu_941_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquareA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_we0 assign process. --
    acc_weight_returnSquareA_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareA_we1 assign process. --
    acc_weight_returnSquareA_we1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareB_addr_1_gep_fu_396_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_2_gep_fu_445_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_3_gep_fu_494_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_4_gep_fu_543_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_5_gep_fu_592_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_gep_fu_347_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquareB_address0 assign process. --
    acc_weight_returnSquareB_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, acc_weight_returnSquareB_addr_reg_1176, acc_weight_returnSquareB_addr_2_reg_1246, acc_weight_returnSquareB_addr_4_reg_1316, tmp_43_i_reg_1484, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1106_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_4_reg_1316;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_2_reg_1246;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_reg_1176;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            acc_weight_returnSquareB_address0 <= tmp_43_i_reg_1484(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnSquareB_address0 <= tmp_26_i_fu_1106_p1(3 - 1 downto 0);
        else 
            acc_weight_returnSquareB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_address1 assign process. --
    acc_weight_returnSquareB_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnSquareB_addr_1_reg_1211, acc_weight_returnSquareB_addr_3_reg_1281, acc_weight_returnSquareB_addr_5_reg_1351, ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnSquareB_address1 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_6_reg_1457_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_5_reg_1351;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_3_reg_1281;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_1_reg_1211;
        else 
            acc_weight_returnSquareB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_ce0 assign process. --
    acc_weight_returnSquareB_ce0_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_ce1 assign process. --
    acc_weight_returnSquareB_ce1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnSquareB_d1 assign process. --
    acc_weight_returnSquareB_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_959_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnSquareB_d1 <= grp_fu_959_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquareB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_we0 assign process. --
    acc_weight_returnSquareB_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_we1 assign process. --
    acc_weight_returnSquareB_we1_assign_proc : process(ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1084_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_i_fu_1084_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1084_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_i_fu_1084_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_227 assign process. --
    ap_sig_bdd_227_assign_proc : process(ln_returnA_in_V_empty_n, weight_returnSquareA_in_V_empty_n, weight_returnA_in_V_empty_n, sum_weight_in_V_empty_n, ln_returnB_in_V_empty_n, weight_returnSquareB_in_V_empty_n, weight_returnB_in_V_empty_n, weight_returnA_returnB_in_V_empty_n, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34)
    begin
                ap_sig_bdd_227 <= (((sum_weight_in_V_empty_n = ap_const_logic_0) and (ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ln_returnA_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (weight_returnA_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (weight_returnSquareA_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ln_returnB_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (weight_returnB_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (weight_returnSquareB_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (weight_returnA_returnB_in_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_306 assign process. --
    ap_sig_bdd_306_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_306 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_31 assign process. --
    ap_sig_bdd_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_333 assign process. --
    ap_sig_bdd_333_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_333 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_354 assign process. --
    ap_sig_bdd_354_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_354 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_384 assign process. --
    ap_sig_bdd_384_assign_proc : process(ap_start, ap_done_reg, NUMBER_OF_DAYS_empty_n, NUMBER_OF_INDICES_empty_n, NUMBER_OF_DAYS_out_full_n, NUMBER_OF_INDICES_out_full_n)
    begin
                ap_sig_bdd_384 <= ((NUMBER_OF_INDICES_empty_n = ap_const_logic_0) or (NUMBER_OF_INDICES_out_full_n = ap_const_logic_0) or (NUMBER_OF_DAYS_empty_n = ap_const_logic_0) or (NUMBER_OF_DAYS_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_400 assign process. --
    ap_sig_bdd_400_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_400 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_647 assign process. --
    ap_sig_bdd_647_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_647 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_693 assign process. --
    ap_sig_bdd_693_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_693 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_704 assign process. --
    ap_sig_bdd_704_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_704 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_721 assign process. --
    ap_sig_bdd_721_assign_proc : process(sum_weight_out_V_full_n, sum_return_out_V_full_n, sum_weight_returnSquare_out_V_full_n, sum_weight_return_out_V_full_n, sum_weight_returnA_returnB_out_full_n, sum_returnA_out_V_full_n, sum_weight_returnSquareA_out_V_full_n, sum_weight_returnA_out_V_full_n)
    begin
                ap_sig_bdd_721 <= ((sum_weight_out_V_full_n = ap_const_logic_0) or (sum_return_out_V_full_n = ap_const_logic_0) or (sum_weight_returnSquare_out_V_full_n = ap_const_logic_0) or (sum_weight_return_out_V_full_n = ap_const_logic_0) or (sum_weight_returnA_returnB_out_full_n = ap_const_logic_0) or (sum_returnA_out_V_full_n = ap_const_logic_0) or (sum_weight_returnSquareA_out_V_full_n = ap_const_logic_0) or (sum_weight_returnA_out_V_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_729 assign process. --
    ap_sig_bdd_729_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_729 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_889 assign process. --
    ap_sig_bdd_889_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_889 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_899 assign process. --
    ap_sig_bdd_899_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_899 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_5_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_6_assign_proc : process(ap_sig_bdd_647)
    begin
        if (ap_sig_bdd_647) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg1_fsm_7 assign process. --
    ap_sig_cseq_ST_pp1_stg1_fsm_7_assign_proc : process(ap_sig_bdd_306)
    begin
        if (ap_sig_bdd_306) then 
            ap_sig_cseq_ST_pp1_stg1_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg1_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg2_fsm_8 assign process. --
    ap_sig_cseq_ST_pp1_stg2_fsm_8_assign_proc : process(ap_sig_bdd_333)
    begin
        if (ap_sig_bdd_333) then 
            ap_sig_cseq_ST_pp1_stg2_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg2_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg3_fsm_9 assign process. --
    ap_sig_cseq_ST_pp1_stg3_fsm_9_assign_proc : process(ap_sig_bdd_354)
    begin
        if (ap_sig_bdd_354) then 
            ap_sig_cseq_ST_pp1_stg3_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg3_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg4_fsm_10 assign process. --
    ap_sig_cseq_ST_pp1_stg4_fsm_10_assign_proc : process(ap_sig_bdd_693)
    begin
        if (ap_sig_bdd_693) then 
            ap_sig_cseq_ST_pp1_stg4_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg4_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_31)
    begin
        if (ap_sig_bdd_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_400)
    begin
        if (ap_sig_bdd_400) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_889)
    begin
        if (ap_sig_bdd_889) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_899)
    begin
        if (ap_sig_bdd_899) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_11 assign process. --
    ap_sig_cseq_ST_st57_fsm_11_assign_proc : process(ap_sig_bdd_704)
    begin
        if (ap_sig_bdd_704) then 
            ap_sig_cseq_ST_st57_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_729)
    begin
        if (ap_sig_bdd_729) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    column_index_fu_1135_p2 <= std_logic_vector(unsigned(column_index_i_reg_795) + unsigned(ap_const_lv32_1));
    exitcond_i_fu_1117_p2 <= "1" when (i2_i_phi_fu_927_p4 = ap_const_lv3_6) else "0";

    -- grp_fu_1094_ce assign process. --
    grp_fu_1094_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, tmp_9_i_reg_1384, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, tmp_9_i_fu_1089_p2, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it1, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it2, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it3, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it4, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it5, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it6, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it7, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it8, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it9, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it10, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it11, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it12, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it13, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it14, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it15, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it16, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it17, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it18, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it19, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it20, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it21, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it22, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it23, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it24, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it25, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it26, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it27, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it28, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it29, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it30, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it31, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it32, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_9_i_fu_1089_p2) or (tmp_9_i_reg_1384 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it21) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it27) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it32) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it33)))) then 
            grp_fu_1094_ce <= ap_const_logic_1;
        else 
            grp_fu_1094_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1094_p0 <= i1_i_phi_fu_824_p4;
    grp_fu_1094_p1 <= ap_const_lv32_6(4 - 1 downto 0);

    -- grp_fu_935_ce assign process. --
    grp_fu_935_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, exitcond_i_reg_1475, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and ((ap_const_lv1_0 = exitcond_i_reg_1475) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and ((ap_const_lv1_0 = exitcond_i_reg_1475) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10) and ((ap_const_lv1_0 = exitcond_i_reg_1475) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and ((ap_const_lv1_0 = exitcond_i_reg_1475))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))))) then 
            grp_fu_935_ce <= ap_const_logic_1;
        else 
            grp_fu_935_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_935_p0 assign process. --
    grp_fu_935_p0_assign_proc : process(ap_reg_ppiten_pp0_it36, tmp_2_reg_832, acc_returnA_q0, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_sig_cseq_ST_pp1_stg4_fsm_10, tmp_4_phi_fu_863_p4, tmp_6_phi_fu_889_p4, tmp_8_phi_fu_915_p4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            grp_fu_935_p0 <= tmp_2_reg_832;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            grp_fu_935_p0 <= tmp_4_phi_fu_863_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9))) then 
            grp_fu_935_p0 <= tmp_6_phi_fu_889_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            grp_fu_935_p0 <= tmp_8_phi_fu_915_p4;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_935_p0 <= acc_returnA_q0;
        else 
            grp_fu_935_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_935_p1 assign process. --
    grp_fu_935_p1_assign_proc : process(ap_reg_ppiten_pp0_it36, reg_984, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, reg_996, ap_sig_cseq_ST_pp1_stg2_fsm_8, reg_1008, ap_sig_cseq_ST_pp1_stg3_fsm_9, reg_1020, tmp_19_reg_1398, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            grp_fu_935_p1 <= reg_1020;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            grp_fu_935_p1 <= reg_1008;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9))) then 
            grp_fu_935_p1 <= reg_996;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            grp_fu_935_p1 <= reg_984;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_935_p1 <= tmp_19_reg_1398;
        else 
            grp_fu_935_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_941_ce assign process. --
    grp_fu_941_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, exitcond_i_reg_1475, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and ((ap_const_lv1_0 = exitcond_i_reg_1475) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and ((ap_const_lv1_0 = exitcond_i_reg_1475) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and ((ap_const_lv1_0 = exitcond_i_reg_1475))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10) and ((ap_const_lv1_0 = exitcond_i_reg_1475))))) then 
            grp_fu_941_ce <= ap_const_logic_1;
        else 
            grp_fu_941_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_941_p0 assign process. --
    grp_fu_941_p0_assign_proc : process(ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp1_it0, acc_weight_returnSquareA_q0, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_sig_cseq_ST_pp1_stg4_fsm_10, tmp_3_phi_fu_850_p4, tmp_5_phi_fu_876_p4, tmp_7_phi_fu_902_p4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            grp_fu_941_p0 <= tmp_3_phi_fu_850_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9))) then 
            grp_fu_941_p0 <= tmp_5_phi_fu_876_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            grp_fu_941_p0 <= tmp_7_phi_fu_902_p4;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_941_p0 <= acc_weight_returnSquareA_q0;
        else 
            grp_fu_941_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_941_p1 assign process. --
    grp_fu_941_p1_assign_proc : process(ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp1_it0, reg_990, ap_sig_cseq_ST_pp1_stg2_fsm_8, reg_1002, ap_sig_cseq_ST_pp1_stg3_fsm_9, reg_1014, tmp_21_reg_1408, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            grp_fu_941_p1 <= reg_1014;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9))) then 
            grp_fu_941_p1 <= reg_1002;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            grp_fu_941_p1 <= reg_990;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_941_p1 <= tmp_21_reg_1408;
        else 
            grp_fu_941_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_947_ce assign process. --
    grp_fu_947_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38)))) then 
            grp_fu_947_ce <= ap_const_logic_1;
        else 
            grp_fu_947_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_947_p0 <= acc_weight_returnA_q0;
    grp_fu_947_p1 <= tmp_20_reg_1403;

    -- grp_fu_953_ce assign process. --
    grp_fu_953_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38)))) then 
            grp_fu_953_ce <= ap_const_logic_1;
        else 
            grp_fu_953_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_953_p0 <= acc_returnB_q0;
    grp_fu_953_p1 <= tmp_22_reg_1413;

    -- grp_fu_959_ce assign process. --
    grp_fu_959_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38)))) then 
            grp_fu_959_ce <= ap_const_logic_1;
        else 
            grp_fu_959_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_959_p0 <= acc_weight_returnSquareB_q0;
    grp_fu_959_p1 <= tmp_24_reg_1423;

    -- grp_fu_965_ce assign process. --
    grp_fu_965_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38)))) then 
            grp_fu_965_ce <= ap_const_logic_1;
        else 
            grp_fu_965_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_965_p0 <= acc_weight_returnB_q0;
    grp_fu_965_p1 <= tmp_23_reg_1418;

    -- grp_fu_971_ce assign process. --
    grp_fu_971_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it38)))) then 
            grp_fu_971_ce <= ap_const_logic_1;
        else 
            grp_fu_971_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_971_p0 <= acc_weight_returnA_returnB_q0;
    grp_fu_971_p1 <= tmp_25_reg_1428;

    -- i1_i_phi_fu_824_p4 assign process. --
    i1_i_phi_fu_824_p4_assign_proc : process(i1_i_reg_820, ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_reg_ppiten_pp0_it1, tmp_9_i_reg_1384, i_reg_1388)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_9_i_reg_1384 = ap_const_lv1_0))) then 
            i1_i_phi_fu_824_p4 <= i_reg_1388;
        else 
            i1_i_phi_fu_824_p4 <= i1_i_reg_820;
        end if; 
    end process;


    -- i2_i_phi_fu_927_p4 assign process. --
    i2_i_phi_fu_927_p4_assign_proc : process(i2_i_reg_923, ap_reg_ppiten_pp1_it1, exitcond_i_reg_1475, ap_sig_cseq_ST_pp1_stg0_fsm_6, i_1_reg_1479)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_i_reg_1475) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            i2_i_phi_fu_927_p4 <= i_1_reg_1479;
        else 
            i2_i_phi_fu_927_p4 <= i2_i_reg_923;
        end if; 
    end process;

    i_1_fu_1123_p2 <= std_logic_vector(unsigned(i2_i_phi_fu_927_p4) + unsigned(ap_const_lv3_1));
    i_fu_1100_p2 <= std_logic_vector(unsigned(i1_i_phi_fu_824_p4) + unsigned(ap_const_lv32_1));

    -- ln_returnA_in_V_read assign process. --
    ln_returnA_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            ln_returnA_in_V_read <= ap_const_logic_1;
        else 
            ln_returnA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ln_returnB_in_V_read assign process. --
    ln_returnB_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            ln_returnB_in_V_read <= ap_const_logic_1;
        else 
            ln_returnB_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_neg_i_fu_1034_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(NUMBER_OF_INDICES_dout));
    p_neg_t_i_fu_1063_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_s_fu_1060_p1));
    sum_returnA_out_V_din <= tmp_8_reg_910;

    -- sum_returnA_out_V_write assign process. --
    sum_returnA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_721)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
            sum_returnA_out_V_write <= ap_const_logic_1;
        else 
            sum_returnA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_return_out_V_din <= tmp_5_reg_871;

    -- sum_return_out_V_write assign process. --
    sum_return_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_721)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
            sum_return_out_V_write <= ap_const_logic_1;
        else 
            sum_return_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_in_V_read assign process. --
    sum_weight_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            sum_weight_in_V_read <= ap_const_logic_1;
        else 
            sum_weight_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_out_V_din <= tmp_9_reg_807;

    -- sum_weight_out_V_write assign process. --
    sum_weight_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_721)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
            sum_weight_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnA_out_V_din <= tmp_6_reg_884;

    -- sum_weight_returnA_out_V_write assign process. --
    sum_weight_returnA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_721)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
            sum_weight_returnA_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnA_returnB_out_din <= tmp_2_reg_832;

    -- sum_weight_returnA_returnB_out_write assign process. --
    sum_weight_returnA_returnB_out_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_721)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
            sum_weight_returnA_returnB_out_write <= ap_const_logic_1;
        else 
            sum_weight_returnA_returnB_out_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnSquareA_out_V_din <= tmp_7_reg_897;

    -- sum_weight_returnSquareA_out_V_write assign process. --
    sum_weight_returnSquareA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_721)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
            sum_weight_returnSquareA_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnSquareA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnSquare_out_V_din <= tmp_4_reg_858;

    -- sum_weight_returnSquare_out_V_write assign process. --
    sum_weight_returnSquare_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_721)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
            sum_weight_returnSquare_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnSquare_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_return_out_V_din <= tmp_3_reg_845;

    -- sum_weight_return_out_V_write assign process. --
    sum_weight_return_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_721)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_721))) then 
            sum_weight_return_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_return_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_1069_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_i_reg_1156),32));
    tmp_1_i_fu_1084_p2 <= "1" when (signed(column_index_i_reg_795) > signed(upper_bound_reg_1161)) else "0";
    tmp_26_i_fu_1106_p1 <= std_logic_vector(resize(unsigned(grp_fu_1094_p2),64));

    -- tmp_3_phi_fu_850_p4 assign process. --
    tmp_3_phi_fu_850_p4_assign_proc : process(tmp_3_reg_845, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1, sum_weight_returnB_reg_1553, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            tmp_3_phi_fu_850_p4 <= sum_weight_returnB_reg_1553;
        else 
            tmp_3_phi_fu_850_p4 <= tmp_3_reg_845;
        end if; 
    end process;

    tmp_43_i_fu_1129_p1 <= std_logic_vector(resize(unsigned(i2_i_phi_fu_927_p4),64));

    -- tmp_4_phi_fu_863_p4 assign process. --
    tmp_4_phi_fu_863_p4_assign_proc : process(tmp_4_reg_858, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1, sum_weight_returnSquareB_reg_1548, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            tmp_4_phi_fu_863_p4 <= sum_weight_returnSquareB_reg_1548;
        else 
            tmp_4_phi_fu_863_p4 <= tmp_4_reg_858;
        end if; 
    end process;


    -- tmp_5_phi_fu_876_p4 assign process. --
    tmp_5_phi_fu_876_p4_assign_proc : process(tmp_5_reg_871, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1, sum_returnB_reg_1543)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then 
            tmp_5_phi_fu_876_p4 <= sum_returnB_reg_1543;
        else 
            tmp_5_phi_fu_876_p4 <= tmp_5_reg_871;
        end if; 
    end process;


    -- tmp_6_phi_fu_889_p4 assign process. --
    tmp_6_phi_fu_889_p4_assign_proc : process(tmp_6_reg_884, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1, sum_weight_returnA_reg_1538)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then 
            tmp_6_phi_fu_889_p4 <= sum_weight_returnA_reg_1538;
        else 
            tmp_6_phi_fu_889_p4 <= tmp_6_reg_884;
        end if; 
    end process;


    -- tmp_7_phi_fu_902_p4 assign process. --
    tmp_7_phi_fu_902_p4_assign_proc : process(tmp_7_reg_897, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1, sum_weight_returnSquareA_reg_1533)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then 
            tmp_7_phi_fu_902_p4 <= sum_weight_returnSquareA_reg_1533;
        else 
            tmp_7_phi_fu_902_p4 <= tmp_7_reg_897;
        end if; 
    end process;


    -- tmp_8_phi_fu_915_p4 assign process. --
    tmp_8_phi_fu_915_p4_assign_proc : process(tmp_8_reg_910, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1, sum_returnA_reg_1528)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1475_pp1_it1))) then 
            tmp_8_phi_fu_915_p4 <= sum_returnA_reg_1528;
        else 
            tmp_8_phi_fu_915_p4 <= tmp_8_reg_910;
        end if; 
    end process;

    tmp_9_i_fu_1089_p2 <= "1" when (signed(i1_i_phi_fu_824_p4) > signed(tmp_i_reg_1166)) else "0";
    tmp_i_fu_1079_p2 <= std_logic_vector(unsigned(NUMBER_OF_DAYS_read_reg_1141) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_s_fu_1060_p1 <= std_logic_vector(resize(unsigned(p_lshr_i_reg_1151),32));
    upper_bound_fu_1072_p3 <= 
        p_neg_t_i_fu_1063_p2 when (tmp_reg_1146(0) = '1') else 
        tmp_1_fu_1069_p1;

    -- weight_returnA_in_V_read assign process. --
    weight_returnA_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnA_in_V_read <= ap_const_logic_1;
        else 
            weight_returnA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_returnA_returnB_in_V_read assign process. --
    weight_returnA_returnB_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnA_returnB_in_V_read <= ap_const_logic_1;
        else 
            weight_returnA_returnB_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_returnB_in_V_read assign process. --
    weight_returnB_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnB_in_V_read <= ap_const_logic_1;
        else 
            weight_returnB_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_returnSquareA_in_V_read assign process. --
    weight_returnSquareA_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnSquareA_in_V_read <= ap_const_logic_1;
        else 
            weight_returnSquareA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_returnSquareB_in_V_read assign process. --
    weight_returnSquareB_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34, ap_sig_bdd_227, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1384_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_227 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnSquareB_in_V_read <= ap_const_logic_1;
        else 
            weight_returnSquareB_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
