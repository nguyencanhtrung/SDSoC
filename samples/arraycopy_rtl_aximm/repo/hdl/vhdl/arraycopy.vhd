-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arraycopy is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM32_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM32_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM32_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM32_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM32_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem32_AWVALID : OUT STD_LOGIC;
    m_axi_gmem32_AWREADY : IN STD_LOGIC;
    m_axi_gmem32_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ADDR_WIDTH-1 downto 0);
    m_axi_gmem32_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem32_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem32_WVALID : OUT STD_LOGIC;
    m_axi_gmem32_WREADY : IN STD_LOGIC;
    m_axi_gmem32_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH-1 downto 0);
    m_axi_gmem32_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem32_WLAST : OUT STD_LOGIC;
    m_axi_gmem32_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_WUSER_WIDTH-1 downto 0);
    m_axi_gmem32_ARVALID : OUT STD_LOGIC;
    m_axi_gmem32_ARREADY : IN STD_LOGIC;
    m_axi_gmem32_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ADDR_WIDTH-1 downto 0);
    m_axi_gmem32_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem32_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem32_RVALID : IN STD_LOGIC;
    m_axi_gmem32_RREADY : OUT STD_LOGIC;
    m_axi_gmem32_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH-1 downto 0);
    m_axi_gmem32_RLAST : IN STD_LOGIC;
    m_axi_gmem32_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_RUSER_WIDTH-1 downto 0);
    m_axi_gmem32_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_BVALID : IN STD_LOGIC;
    m_axi_gmem32_BREADY : OUT STD_LOGIC;
    m_axi_gmem32_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_BUSER_WIDTH-1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of arraycopy is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "arraycopy,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.437500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal n : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal arraycopy_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal gmem32_AWVALID : STD_LOGIC;
    signal gmem32_AWREADY : STD_LOGIC;
    signal gmem32_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_WVALID : STD_LOGIC;
    signal gmem32_WREADY : STD_LOGIC;
    signal gmem32_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_WLAST : STD_LOGIC;
    signal gmem32_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_ARVALID : STD_LOGIC;
    signal gmem32_ARREADY : STD_LOGIC;
    signal gmem32_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RVALID : STD_LOGIC;
    signal gmem32_RREADY : STD_LOGIC;
    signal gmem32_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_RLAST : STD_LOGIC;
    signal gmem32_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_BVALID : STD_LOGIC;
    signal gmem32_BREADY : STD_LOGIC;
    signal gmem32_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal arraycopy_gmem32_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal a1_fu_129_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal a1_reg_260 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_gmem32_ARREADY : STD_LOGIC;
    signal val_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_160_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_cast_reg_276 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_cast_fu_164_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_cast_reg_281 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_assign_fu_191_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_assign_reg_286 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_fu_208_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_294 : STD_LOGIC_VECTOR (4 downto 0);
    signal a2_sum_fu_218_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal a2_sum_reg_299 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b4_sum_fu_223_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal b4_sum_reg_304 : STD_LOGIC_VECTOR (30 downto 0);
    signal val_2_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem32_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_gmem32_WREADY : STD_LOGIC;
    signal tmp_0_val_fu_253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_val_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal val1_reg_107 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_117 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a2_sum_cast_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b4_sum_cast_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem32_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem32_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem32_WREADY : STD_LOGIC := '0';
    signal tmp_fu_150_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_187_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast_cast_fu_199_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_fu_214_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_bdd_269 : BOOLEAN;

    component arraycopy_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        n : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component arraycopy_gmem32_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    arraycopy_AXILiteS_s_axi_U : component arraycopy_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => arraycopy_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        a => a,
        b => b,
        n => n);

    arraycopy_gmem32_m_axi_U : component arraycopy_gmem32_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_GMEM32_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_GMEM32_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_GMEM32_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_GMEM32_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_GMEM32_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_GMEM32_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_GMEM32_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_GMEM32_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM32_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM32_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM32_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem32_AWVALID,
        AWREADY => m_axi_gmem32_AWREADY,
        AWADDR => m_axi_gmem32_AWADDR,
        AWID => m_axi_gmem32_AWID,
        AWLEN => m_axi_gmem32_AWLEN,
        AWSIZE => m_axi_gmem32_AWSIZE,
        AWBURST => m_axi_gmem32_AWBURST,
        AWLOCK => m_axi_gmem32_AWLOCK,
        AWCACHE => m_axi_gmem32_AWCACHE,
        AWPROT => m_axi_gmem32_AWPROT,
        AWQOS => m_axi_gmem32_AWQOS,
        AWREGION => m_axi_gmem32_AWREGION,
        AWUSER => m_axi_gmem32_AWUSER,
        WVALID => m_axi_gmem32_WVALID,
        WREADY => m_axi_gmem32_WREADY,
        WDATA => m_axi_gmem32_WDATA,
        WSTRB => m_axi_gmem32_WSTRB,
        WLAST => m_axi_gmem32_WLAST,
        WID => m_axi_gmem32_WID,
        WUSER => m_axi_gmem32_WUSER,
        ARVALID => m_axi_gmem32_ARVALID,
        ARREADY => m_axi_gmem32_ARREADY,
        ARADDR => m_axi_gmem32_ARADDR,
        ARID => m_axi_gmem32_ARID,
        ARLEN => m_axi_gmem32_ARLEN,
        ARSIZE => m_axi_gmem32_ARSIZE,
        ARBURST => m_axi_gmem32_ARBURST,
        ARLOCK => m_axi_gmem32_ARLOCK,
        ARCACHE => m_axi_gmem32_ARCACHE,
        ARPROT => m_axi_gmem32_ARPROT,
        ARQOS => m_axi_gmem32_ARQOS,
        ARREGION => m_axi_gmem32_ARREGION,
        ARUSER => m_axi_gmem32_ARUSER,
        RVALID => m_axi_gmem32_RVALID,
        RREADY => m_axi_gmem32_RREADY,
        RDATA => m_axi_gmem32_RDATA,
        RLAST => m_axi_gmem32_RLAST,
        RID => m_axi_gmem32_RID,
        RUSER => m_axi_gmem32_RUSER,
        RRESP => m_axi_gmem32_RRESP,
        BVALID => m_axi_gmem32_BVALID,
        BREADY => m_axi_gmem32_BREADY,
        BRESP => m_axi_gmem32_BRESP,
        BID => m_axi_gmem32_BID,
        BUSER => m_axi_gmem32_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => arraycopy_gmem32_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem32_ARVALID,
        I_ARREADY => gmem32_ARREADY,
        I_ARADDR => gmem32_ARADDR,
        I_ARID => gmem32_ARID,
        I_ARLEN => gmem32_ARLEN,
        I_ARSIZE => gmem32_ARSIZE,
        I_ARLOCK => gmem32_ARLOCK,
        I_ARCACHE => gmem32_ARCACHE,
        I_ARQOS => gmem32_ARQOS,
        I_ARPROT => gmem32_ARPROT,
        I_ARUSER => gmem32_ARUSER,
        I_ARBURST => gmem32_ARBURST,
        I_ARREGION => gmem32_ARREGION,
        I_RVALID => gmem32_RVALID,
        I_RREADY => gmem32_RREADY,
        I_RDATA => gmem32_RDATA,
        I_RID => gmem32_RID,
        I_RUSER => gmem32_RUSER,
        I_RRESP => gmem32_RRESP,
        I_RLAST => gmem32_RLAST,
        I_AWVALID => gmem32_AWVALID,
        I_AWREADY => gmem32_AWREADY,
        I_AWADDR => gmem32_AWADDR,
        I_AWID => gmem32_AWID,
        I_AWLEN => gmem32_AWLEN,
        I_AWSIZE => gmem32_AWSIZE,
        I_AWLOCK => gmem32_AWLOCK,
        I_AWCACHE => gmem32_AWCACHE,
        I_AWQOS => gmem32_AWQOS,
        I_AWPROT => gmem32_AWPROT,
        I_AWUSER => gmem32_AWUSER,
        I_AWBURST => gmem32_AWBURST,
        I_AWREGION => gmem32_AWREGION,
        I_WVALID => gmem32_WVALID,
        I_WREADY => gmem32_WREADY,
        I_WDATA => gmem32_WDATA,
        I_WID => gmem32_WID,
        I_WUSER => gmem32_WUSER,
        I_WLAST => gmem32_WLAST,
        I_WSTRB => gmem32_WSTRB,
        I_BVALID => gmem32_BVALID,
        I_BREADY => gmem32_BREADY,
        I_BRESP => gmem32_BRESP,
        I_BID => gmem32_BID,
        I_BUSER => gmem32_BUSER);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_ARREADY assign process. --
    ap_reg_ioackin_gmem32_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY)))) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))))) then 
                    ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = gmem32_ARREADY) and not((ap_start = ap_const_logic_0))) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = gmem32_ARREADY)))) then 
                    ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_AWREADY assign process. --
    ap_reg_ioackin_gmem32_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_0;
            else
                if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmem32_WREADY)))) then 
                        ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem32_AWREADY)) then 
                        ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_WREADY assign process. --
    ap_reg_ioackin_gmem32_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_0;
            else
                if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmem32_WREADY)))) then 
                        ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem32_WREADY)) then 
                        ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_117 assign process. --
    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((gmem32_BVALID = ap_const_logic_0)))) then 
                i_reg_117 <= i_1_reg_294;
            elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                i_reg_117 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- val1_reg_107 assign process. --
    val1_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((gmem32_BVALID = ap_const_logic_0)))) then 
                val1_reg_107 <= tmp_0_val_reg_327;
            elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                val1_reg_107 <= val_reg_271;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))))) then
                a1_reg_260 <= a(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((tmp_2_fu_203_p2 = ap_const_lv1_0)))) then
                a2_sum_reg_299 <= a2_sum_fu_218_p2;
                b4_sum_reg_304 <= b4_sum_fu_223_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                i_1_reg_294 <= i_1_fu_208_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                n_assign_reg_286 <= n_assign_fu_191_p3;
                tmp_4_cast_reg_276(0) <= tmp_4_cast_fu_160_p1(0);
    tmp_4_cast_reg_276(1) <= tmp_4_cast_fu_160_p1(1);
    tmp_4_cast_reg_276(2) <= tmp_4_cast_fu_160_p1(2);
    tmp_4_cast_reg_276(3) <= tmp_4_cast_fu_160_p1(3);
    tmp_4_cast_reg_276(4) <= tmp_4_cast_fu_160_p1(4);
    tmp_4_cast_reg_276(5) <= tmp_4_cast_fu_160_p1(5);
    tmp_4_cast_reg_276(6) <= tmp_4_cast_fu_160_p1(6);
    tmp_4_cast_reg_276(7) <= tmp_4_cast_fu_160_p1(7);
    tmp_4_cast_reg_276(8) <= tmp_4_cast_fu_160_p1(8);
    tmp_4_cast_reg_276(9) <= tmp_4_cast_fu_160_p1(9);
    tmp_4_cast_reg_276(10) <= tmp_4_cast_fu_160_p1(10);
    tmp_4_cast_reg_276(11) <= tmp_4_cast_fu_160_p1(11);
    tmp_4_cast_reg_276(12) <= tmp_4_cast_fu_160_p1(12);
    tmp_4_cast_reg_276(13) <= tmp_4_cast_fu_160_p1(13);
    tmp_4_cast_reg_276(14) <= tmp_4_cast_fu_160_p1(14);
    tmp_4_cast_reg_276(15) <= tmp_4_cast_fu_160_p1(15);
    tmp_4_cast_reg_276(16) <= tmp_4_cast_fu_160_p1(16);
    tmp_4_cast_reg_276(17) <= tmp_4_cast_fu_160_p1(17);
    tmp_4_cast_reg_276(18) <= tmp_4_cast_fu_160_p1(18);
    tmp_4_cast_reg_276(19) <= tmp_4_cast_fu_160_p1(19);
    tmp_4_cast_reg_276(20) <= tmp_4_cast_fu_160_p1(20);
    tmp_4_cast_reg_276(21) <= tmp_4_cast_fu_160_p1(21);
    tmp_4_cast_reg_276(22) <= tmp_4_cast_fu_160_p1(22);
    tmp_4_cast_reg_276(23) <= tmp_4_cast_fu_160_p1(23);
    tmp_4_cast_reg_276(24) <= tmp_4_cast_fu_160_p1(24);
    tmp_4_cast_reg_276(25) <= tmp_4_cast_fu_160_p1(25);
    tmp_4_cast_reg_276(26) <= tmp_4_cast_fu_160_p1(26);
    tmp_4_cast_reg_276(27) <= tmp_4_cast_fu_160_p1(27);
    tmp_4_cast_reg_276(28) <= tmp_4_cast_fu_160_p1(28);
    tmp_4_cast_reg_276(29) <= tmp_4_cast_fu_160_p1(29);
                tmp_6_cast_reg_281(0) <= tmp_6_cast_fu_164_p1(0);
    tmp_6_cast_reg_281(1) <= tmp_6_cast_fu_164_p1(1);
    tmp_6_cast_reg_281(2) <= tmp_6_cast_fu_164_p1(2);
    tmp_6_cast_reg_281(3) <= tmp_6_cast_fu_164_p1(3);
    tmp_6_cast_reg_281(4) <= tmp_6_cast_fu_164_p1(4);
    tmp_6_cast_reg_281(5) <= tmp_6_cast_fu_164_p1(5);
    tmp_6_cast_reg_281(6) <= tmp_6_cast_fu_164_p1(6);
    tmp_6_cast_reg_281(7) <= tmp_6_cast_fu_164_p1(7);
    tmp_6_cast_reg_281(8) <= tmp_6_cast_fu_164_p1(8);
    tmp_6_cast_reg_281(9) <= tmp_6_cast_fu_164_p1(9);
    tmp_6_cast_reg_281(10) <= tmp_6_cast_fu_164_p1(10);
    tmp_6_cast_reg_281(11) <= tmp_6_cast_fu_164_p1(11);
    tmp_6_cast_reg_281(12) <= tmp_6_cast_fu_164_p1(12);
    tmp_6_cast_reg_281(13) <= tmp_6_cast_fu_164_p1(13);
    tmp_6_cast_reg_281(14) <= tmp_6_cast_fu_164_p1(14);
    tmp_6_cast_reg_281(15) <= tmp_6_cast_fu_164_p1(15);
    tmp_6_cast_reg_281(16) <= tmp_6_cast_fu_164_p1(16);
    tmp_6_cast_reg_281(17) <= tmp_6_cast_fu_164_p1(17);
    tmp_6_cast_reg_281(18) <= tmp_6_cast_fu_164_p1(18);
    tmp_6_cast_reg_281(19) <= tmp_6_cast_fu_164_p1(19);
    tmp_6_cast_reg_281(20) <= tmp_6_cast_fu_164_p1(20);
    tmp_6_cast_reg_281(21) <= tmp_6_cast_fu_164_p1(21);
    tmp_6_cast_reg_281(22) <= tmp_6_cast_fu_164_p1(22);
    tmp_6_cast_reg_281(23) <= tmp_6_cast_fu_164_p1(23);
    tmp_6_cast_reg_281(24) <= tmp_6_cast_fu_164_p1(24);
    tmp_6_cast_reg_281(25) <= tmp_6_cast_fu_164_p1(25);
    tmp_6_cast_reg_281(26) <= tmp_6_cast_fu_164_p1(26);
    tmp_6_cast_reg_281(27) <= tmp_6_cast_fu_164_p1(27);
    tmp_6_cast_reg_281(28) <= tmp_6_cast_fu_164_p1(28);
    tmp_6_cast_reg_281(29) <= tmp_6_cast_fu_164_p1(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st15_fsm_14 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmem32_WREADY))))) then
                tmp_0_val_reg_327 <= tmp_0_val_fu_253_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((gmem32_RVALID = ap_const_logic_0)) and (ap_ST_st14_fsm_13 = ap_CS_fsm))) then
                val_2_reg_315 <= gmem32_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((gmem32_RVALID = ap_const_logic_0)))) then
                val_reg_271 <= gmem32_RDATA;
            end if;
        end if;
    end process;
    tmp_4_cast_reg_276(30) <= '0';
    tmp_6_cast_reg_281(30) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, gmem32_RVALID, gmem32_BVALID, ap_sig_ioackin_gmem32_ARREADY, tmp_2_fu_203_p2, ap_sig_ioackin_gmem32_AWREADY, ap_sig_ioackin_gmem32_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((gmem32_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if ((tmp_2_fu_203_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if (not((gmem32_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_gmem32_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                if (not((gmem32_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a1_fu_129_p4 <= a(31 downto 2);
    a2_sum_cast_fu_228_p1 <= std_logic_vector(resize(unsigned(a2_sum_reg_299),64));
    a2_sum_fu_218_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_281) + unsigned(tmp_3_cast_fu_214_p1));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, tmp_2_fu_203_p2)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and (tmp_2_fu_203_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_2_fu_203_p2)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and (tmp_2_fu_203_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= val1_reg_107;

    -- ap_sig_bdd_269 assign process. --
    ap_sig_bdd_269_assign_proc : process(ap_start, ap_CS_fsm)
    begin
                ap_sig_bdd_269 <= ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)));
    end process;


    -- ap_sig_ioackin_gmem32_ARREADY assign process. --
    ap_sig_ioackin_gmem32_ARREADY_assign_proc : process(gmem32_ARREADY, ap_reg_ioackin_gmem32_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) then 
            ap_sig_ioackin_gmem32_ARREADY <= gmem32_ARREADY;
        else 
            ap_sig_ioackin_gmem32_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem32_AWREADY assign process. --
    ap_sig_ioackin_gmem32_AWREADY_assign_proc : process(gmem32_AWREADY, ap_reg_ioackin_gmem32_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_AWREADY)) then 
            ap_sig_ioackin_gmem32_AWREADY <= gmem32_AWREADY;
        else 
            ap_sig_ioackin_gmem32_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem32_WREADY assign process. --
    ap_sig_ioackin_gmem32_WREADY_assign_proc : process(gmem32_WREADY, ap_reg_ioackin_gmem32_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_WREADY)) then 
            ap_sig_ioackin_gmem32_WREADY <= gmem32_WREADY;
        else 
            ap_sig_ioackin_gmem32_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    arraycopy_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    arraycopy_gmem32_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    b4_sum_cast_fu_238_p1 <= std_logic_vector(resize(unsigned(b4_sum_reg_304),64));
    b4_sum_fu_223_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_276) + unsigned(tmp_3_cast_fu_214_p1));

    -- gmem32_ARADDR assign process. --
    gmem32_ARADDR_assign_proc : process(ap_CS_fsm, tmp_6_fu_139_p1, a2_sum_cast_fu_228_p1, ap_reg_ioackin_gmem32_ARREADY, ap_sig_bdd_269)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                gmem32_ARADDR <= a2_sum_cast_fu_228_p1(32 - 1 downto 0);
            elsif (ap_sig_bdd_269) then 
                gmem32_ARADDR <= tmp_6_fu_139_p1(32 - 1 downto 0);
            else 
                gmem32_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem32_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gmem32_ARBURST <= ap_const_lv2_0;
    gmem32_ARCACHE <= ap_const_lv4_0;
    gmem32_ARID <= ap_const_lv1_0;
    gmem32_ARLEN <= ap_const_lv32_1;
    gmem32_ARLOCK <= ap_const_lv2_0;
    gmem32_ARPROT <= ap_const_lv3_0;
    gmem32_ARQOS <= ap_const_lv4_0;
    gmem32_ARREGION <= ap_const_lv4_0;
    gmem32_ARSIZE <= ap_const_lv3_0;
    gmem32_ARUSER <= ap_const_lv1_0;

    -- gmem32_ARVALID assign process. --
    gmem32_ARVALID_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ioackin_gmem32_ARREADY)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)))) then 
            gmem32_ARVALID <= ap_const_logic_1;
        else 
            gmem32_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem32_AWADDR <= b4_sum_cast_fu_238_p1(32 - 1 downto 0);
    gmem32_AWBURST <= ap_const_lv2_0;
    gmem32_AWCACHE <= ap_const_lv4_0;
    gmem32_AWID <= ap_const_lv1_0;
    gmem32_AWLEN <= ap_const_lv32_1;
    gmem32_AWLOCK <= ap_const_lv2_0;
    gmem32_AWPROT <= ap_const_lv3_0;
    gmem32_AWQOS <= ap_const_lv4_0;
    gmem32_AWREGION <= ap_const_lv4_0;
    gmem32_AWSIZE <= ap_const_lv3_0;
    gmem32_AWUSER <= ap_const_lv1_0;

    -- gmem32_AWVALID assign process. --
    gmem32_AWVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_gmem32_AWREADY)
    begin
        if (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_AWREADY))) then 
            gmem32_AWVALID <= ap_const_logic_1;
        else 
            gmem32_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem32_BREADY assign process. --
    gmem32_BREADY_assign_proc : process(ap_CS_fsm, gmem32_BVALID)
    begin
        if (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((gmem32_BVALID = ap_const_logic_0)))) then 
            gmem32_BREADY <= ap_const_logic_1;
        else 
            gmem32_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem32_RREADY assign process. --
    gmem32_RREADY_assign_proc : process(ap_CS_fsm, gmem32_RVALID)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((gmem32_RVALID = ap_const_logic_0))) or (not((gmem32_RVALID = ap_const_logic_0)) and (ap_ST_st14_fsm_13 = ap_CS_fsm)))) then 
            gmem32_RREADY <= ap_const_logic_1;
        else 
            gmem32_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem32_WDATA <= val_2_reg_315;
    gmem32_WID <= ap_const_lv1_0;
    gmem32_WLAST <= ap_const_logic_0;
    gmem32_WSTRB <= ap_const_lv4_F;
    gmem32_WUSER <= ap_const_lv1_0;

    -- gmem32_WVALID assign process. --
    gmem32_WVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_gmem32_WREADY)
    begin
        if (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_WREADY))) then 
            gmem32_WVALID <= ap_const_logic_1;
        else 
            gmem32_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_208_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv5_1));
    i_cast_cast_fu_199_p1 <= std_logic_vector(resize(unsigned(i_reg_117),6));
    n_assign_fu_191_p3 <= 
        ap_const_lv6_10 when (or_cond_fu_181_p2(0) = '1') else 
        tmp_4_fu_187_p1;
    or_cond_fu_181_p2 <= (tmp_3_fu_167_p3 or tmp_1_fu_175_p2);
    tmp_0_val_fu_253_p3 <= 
        val_2_reg_315 when (tmp_5_fu_248_p2(0) = '1') else 
        val1_reg_107;
    tmp_1_fu_175_p2 <= "1" when (signed(n) > signed(ap_const_lv32_10)) else "0";
    tmp_2_fu_203_p2 <= "1" when (unsigned(i_cast_cast_fu_199_p1) < unsigned(n_assign_reg_286)) else "0";
    tmp_3_cast_fu_214_p1 <= std_logic_vector(resize(unsigned(i_reg_117),31));
    tmp_3_fu_167_p3 <= n(31 downto 31);
    tmp_4_cast_fu_160_p1 <= std_logic_vector(resize(unsigned(tmp_fu_150_p4),31));
    tmp_4_fu_187_p1 <= n(6 - 1 downto 0);
    tmp_5_fu_248_p2 <= "1" when (signed(val1_reg_107) < signed(val_2_reg_315)) else "0";
    tmp_6_cast_fu_164_p1 <= std_logic_vector(resize(unsigned(a1_reg_260),31));
    tmp_6_fu_139_p1 <= std_logic_vector(resize(unsigned(a1_fu_129_p4),64));
    tmp_fu_150_p4 <= b(31 downto 2);
end behav;
