-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity madd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_EN_A : OUT STD_LOGIC;
    A_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    A_Clk_A : OUT STD_LOGIC;
    A_Rst_A : OUT STD_LOGIC;
    B_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_EN_A : OUT STD_LOGIC;
    B_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    B_Clk_A : OUT STD_LOGIC;
    B_Rst_A : OUT STD_LOGIC;
    C_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_EN_A : OUT STD_LOGIC;
    C_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    C_Clk_A : OUT STD_LOGIC;
    C_Rst_A : OUT STD_LOGIC );
end;


architecture behav of madd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "madd,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.950000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.147500,HLS_SYN_LAT=1037,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=486,HLS_SYN_LUT=536}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st15_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal indvar_flatten_reg_102 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_113 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_124 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_68 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_146_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_mid2_fu_172_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_mid2_reg_222 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_196_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_227 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_fu_202_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_237_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_load_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_load_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_phi_fu_117_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal C_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_166_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_180_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_fu_158_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast1_fu_192_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_184_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_136_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st15_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_245 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component madd_fadd_32ns_32ns_32_9_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    madd_fadd_32ns_32ns_32_9_full_dsp_U1 : component madd_fadd_32ns_32ns_32_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_136_p0,
        din1 => grp_fu_136_p1,
        ce => grp_fu_136_ce,
        dout => grp_fu_136_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_140_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_140_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_140_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
            end if;
        end if;
    end process;


    -- i_reg_113 assign process. --
    i_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_213 = ap_const_lv1_0))) then 
                i_reg_113 <= i_mid2_reg_222;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_113 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_102 assign process. --
    indvar_flatten_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_140_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_102 <= indvar_flatten_next_fu_146_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_102 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- j_reg_124 assign process. --
    j_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_140_p2 = ap_const_lv1_0))) then 
                j_reg_124 <= j_1_fu_202_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_124 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it1 = ap_const_lv1_0)) then
                A_load_reg_252 <= A_Dout_A;
                B_load_reg_257 <= B_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it1 <= exitcond_flatten_reg_213;
                exitcond_flatten_reg_213 <= exitcond_flatten_fu_140_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it10 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it9;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it11 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it10;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it3;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it5 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it4;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it6 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it5;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it7 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it6;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it8 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it7;
                ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it9 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it8;
                ap_reg_ppstg_tmp_3_reg_237_pp0_it10(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it11(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it2(0) <= tmp_3_reg_237(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(1) <= tmp_3_reg_237(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(2) <= tmp_3_reg_237(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(3) <= tmp_3_reg_237(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(4) <= tmp_3_reg_237(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(5) <= tmp_3_reg_237(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(6) <= tmp_3_reg_237(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(7) <= tmp_3_reg_237(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(8) <= tmp_3_reg_237(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(9) <= tmp_3_reg_237(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it3(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it4(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it5(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it6(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it7(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it8(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7(9);
                ap_reg_ppstg_tmp_3_reg_237_pp0_it9(0) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(0);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(1) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(1);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(2) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(2);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(3) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(3);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(4) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(4);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(5) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(5);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(6) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(6);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(7) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(7);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(8) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(8);
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(9) <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8(9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_140_p2 = ap_const_lv1_0))) then
                i_mid2_reg_222 <= i_mid2_fu_172_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_140_p2 = ap_const_lv1_0))) then
                tmp_2_reg_227 <= tmp_2_fu_196_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_213 = ap_const_lv1_0))) then
                tmp_3_reg_237(0) <= tmp_3_fu_208_p1(0);
    tmp_3_reg_237(1) <= tmp_3_fu_208_p1(1);
    tmp_3_reg_237(2) <= tmp_3_fu_208_p1(2);
    tmp_3_reg_237(3) <= tmp_3_fu_208_p1(3);
    tmp_3_reg_237(4) <= tmp_3_fu_208_p1(4);
    tmp_3_reg_237(5) <= tmp_3_fu_208_p1(5);
    tmp_3_reg_237(6) <= tmp_3_fu_208_p1(6);
    tmp_3_reg_237(7) <= tmp_3_fu_208_p1(7);
    tmp_3_reg_237(8) <= tmp_3_fu_208_p1(8);
    tmp_3_reg_237(9) <= tmp_3_fu_208_p1(9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it10 = ap_const_lv1_0)) then
                tmp_4_reg_262 <= grp_fu_136_p2;
            end if;
        end if;
    end process;
    tmp_3_reg_237(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_140_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it11, ap_reg_ppiten_pp0_it12)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_140_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_140_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_2;
                end if;
            when ap_ST_st15_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_Addr_A <= std_logic_vector(shift_left(unsigned(A_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    A_Addr_A_orig <= tmp_3_fu_208_p1(32 - 1 downto 0);
    A_Clk_A <= ap_clk;
    A_Din_A <= ap_const_lv32_0;

    -- A_EN_A assign process. --
    A_EN_A_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            A_EN_A <= ap_const_logic_1;
        else 
            A_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    A_Rst_A <= ap_rst_n_inv;
    A_WEN_A <= ap_const_lv4_0;
    B_Addr_A <= std_logic_vector(shift_left(unsigned(B_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    B_Addr_A_orig <= tmp_3_fu_208_p1(32 - 1 downto 0);
    B_Clk_A <= ap_clk;
    B_Din_A <= ap_const_lv32_0;

    -- B_EN_A assign process. --
    B_EN_A_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            B_EN_A <= ap_const_logic_1;
        else 
            B_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_Rst_A <= ap_rst_n_inv;
    B_WEN_A <= ap_const_lv4_0;
    C_Addr_A <= std_logic_vector(shift_left(unsigned(C_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    C_Addr_A_orig <= ap_reg_ppstg_tmp_3_reg_237_pp0_it11(32 - 1 downto 0);
    C_Clk_A <= ap_clk;
    C_Din_A <= tmp_4_reg_262;

    -- C_EN_A assign process. --
    C_EN_A_assign_proc : process(ap_reg_ppiten_pp0_it12)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it12)) then 
            C_EN_A <= ap_const_logic_1;
        else 
            C_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    C_Rst_A <= ap_rst_n_inv;

    -- C_WEN_A assign process. --
    C_WEN_A_assign_proc : process(ap_reg_ppiten_pp0_it12, ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it11)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and (ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it11 = ap_const_lv1_0)))) then 
            C_WEN_A <= ap_const_lv4_F;
        else 
            C_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st15_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st15_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_245 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_68 assign process. --
    ap_sig_bdd_68_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_68 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_68)
    begin
        if (ap_sig_bdd_68) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_2 assign process. --
    ap_sig_cseq_ST_st15_fsm_2_assign_proc : process(ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then 
            ap_sig_cseq_ST_st15_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_152_p2 <= "1" when (j_reg_124 = ap_const_lv6_20) else "0";
    exitcond_flatten_fu_140_p2 <= "1" when (indvar_flatten_reg_102 = ap_const_lv11_400) else "0";
    grp_fu_136_ce <= ap_const_logic_1;
    grp_fu_136_p0 <= A_load_reg_252;
    grp_fu_136_p1 <= B_load_reg_257;
    i_mid2_fu_172_p3 <= 
        i_s_fu_166_p2 when (exitcond4_fu_152_p2(0) = '1') else 
        i_phi_fu_117_p4;

    -- i_phi_fu_117_p4 assign process. --
    i_phi_fu_117_p4_assign_proc : process(i_reg_113, exitcond_flatten_reg_213, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_mid2_reg_222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_213 = ap_const_lv1_0))) then 
            i_phi_fu_117_p4 <= i_mid2_reg_222;
        else 
            i_phi_fu_117_p4 <= i_reg_113;
        end if; 
    end process;

    i_s_fu_166_p2 <= std_logic_vector(unsigned(i_phi_fu_117_p4) + unsigned(ap_const_lv6_1));
    indvar_flatten_next_fu_146_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_102) + unsigned(ap_const_lv11_1));
    j_1_fu_202_p2 <= std_logic_vector(unsigned(j_mid2_fu_158_p3) + unsigned(ap_const_lv6_1));
    j_cast1_fu_192_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_158_p3),10));
    j_mid2_fu_158_p3 <= 
        ap_const_lv6_0 when (exitcond4_fu_152_p2(0) = '1') else 
        j_reg_124;
    tmp_2_fu_196_p2 <= std_logic_vector(unsigned(j_cast1_fu_192_p1) + unsigned(tmp_fu_184_p3));
    tmp_3_fu_208_p1 <= std_logic_vector(resize(unsigned(tmp_2_reg_227),64));
    tmp_5_fu_180_p1 <= i_mid2_fu_172_p3(5 - 1 downto 0);
    tmp_fu_184_p3 <= (tmp_5_fu_180_p1 & ap_const_lv5_0);
end behav;
