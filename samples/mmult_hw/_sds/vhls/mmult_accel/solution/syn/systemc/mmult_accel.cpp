// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "mmult_accel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mmult_accel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mmult_accel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> mmult_accel::ap_ST_st1_fsm_0 = "1";
const sc_lv<19> mmult_accel::ap_ST_st2_fsm_1 = "10";
const sc_lv<19> mmult_accel::ap_ST_st3_fsm_2 = "100";
const sc_lv<19> mmult_accel::ap_ST_st4_fsm_3 = "1000";
const sc_lv<19> mmult_accel::ap_ST_st5_fsm_4 = "10000";
const sc_lv<19> mmult_accel::ap_ST_st6_fsm_5 = "100000";
const sc_lv<19> mmult_accel::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<19> mmult_accel::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<19> mmult_accel::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<19> mmult_accel::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<19> mmult_accel::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<19> mmult_accel::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<19> mmult_accel::ap_ST_st13_fsm_12 = "1000000000000";
const sc_lv<19> mmult_accel::ap_ST_st14_fsm_13 = "10000000000000";
const sc_lv<19> mmult_accel::ap_ST_st15_fsm_14 = "100000000000000";
const sc_lv<19> mmult_accel::ap_ST_st16_fsm_15 = "1000000000000000";
const sc_lv<19> mmult_accel::ap_ST_st17_fsm_16 = "10000000000000000";
const sc_lv<19> mmult_accel::ap_ST_st18_fsm_17 = "100000000000000000";
const sc_lv<19> mmult_accel::ap_ST_st19_fsm_18 = "1000000000000000000";
const sc_lv<32> mmult_accel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> mmult_accel::ap_const_lv1_1 = "1";
const sc_lv<32> mmult_accel::ap_const_lv32_1 = "1";
const sc_lv<1> mmult_accel::ap_const_lv1_0 = "0";
const sc_lv<32> mmult_accel::ap_const_lv32_2 = "10";
const sc_lv<32> mmult_accel::ap_const_lv32_3 = "11";
const sc_lv<32> mmult_accel::ap_const_lv32_4 = "100";
const sc_lv<32> mmult_accel::ap_const_lv32_9 = "1001";
const sc_lv<32> mmult_accel::ap_const_lv32_12 = "10010";
const sc_lv<6> mmult_accel::ap_const_lv6_0 = "000000";
const sc_lv<4> mmult_accel::ap_const_lv4_0 = "0000";
const sc_lv<4> mmult_accel::ap_const_lv4_F = "1111";
const sc_lv<32> mmult_accel::ap_const_lv32_A = "1010";
const sc_lv<32> mmult_accel::ap_const_lv32_5 = "101";
const sc_lv<6> mmult_accel::ap_const_lv6_20 = "100000";
const sc_lv<6> mmult_accel::ap_const_lv6_1 = "1";
const sc_lv<5> mmult_accel::ap_const_lv5_0 = "00000";

mmult_accel::mmult_accel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1 = new mmult_accel_fadd_32ns_32ns_32_9_full_dsp<1,9,32,32,32>("mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1");
    mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1->clk(ap_clk);
    mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1->reset(ap_rst_n_inv);
    mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1->din0(grp_fu_133_p0);
    mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1->din1(grp_fu_133_p1);
    mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1->ce(grp_fu_133_ce);
    mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1->dout(grp_fu_133_p2);
    mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2 = new mmult_accel_fmul_32ns_32ns_32_5_max_dsp<1,5,32,32,32>("mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2");
    mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2->clk(ap_clk);
    mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2->reset(ap_rst_n_inv);
    mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2->din0(grp_fu_138_p0);
    mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2->din1(grp_fu_138_p1);
    mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2->ce(grp_fu_138_ce);
    mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2->dout(grp_fu_138_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_142_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_142_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_104);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_119);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_129);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_138);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_179);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_188);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_78);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_93);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_9);
    sensitive << ( ap_sig_bdd_129 );

    SC_METHOD(thread_ap_sig_cseq_ST_st11_fsm_10);
    sensitive << ( ap_sig_bdd_179 );

    SC_METHOD(thread_ap_sig_cseq_ST_st19_fsm_18);
    sensitive << ( ap_sig_bdd_138 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_37 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_78 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_93 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_104 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_119 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_188 );

    SC_METHOD(thread_col_1_fu_176_p2);
    sensitive << ( col_reg_97 );

    SC_METHOD(thread_col_cast2_fu_166_p1);
    sensitive << ( col_reg_97 );

    SC_METHOD(thread_exitcond1_fu_170_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( col_reg_97 );

    SC_METHOD(thread_exitcond2_fu_142_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( row_reg_86 );

    SC_METHOD(thread_exitcond_fu_186_p2);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_grp_fu_133_ce);

    SC_METHOD(thread_grp_fu_133_p0);
    sensitive << ( result_reg_108 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_10 );

    SC_METHOD(thread_grp_fu_133_p1);
    sensitive << ( tmp_s_reg_295 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_10 );

    SC_METHOD(thread_grp_fu_138_ce);

    SC_METHOD(thread_grp_fu_138_p0);
    sensitive << ( in_A_load_reg_285 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_grp_fu_138_p1);
    sensitive << ( in_B_load_reg_290 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_in_A_Addr_A);
    sensitive << ( in_A_Addr_A_orig );

    SC_METHOD(thread_in_A_Addr_A_orig);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_6_fu_203_p1 );

    SC_METHOD(thread_in_A_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_in_A_Din_A);

    SC_METHOD(thread_in_A_EN_A);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_in_A_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_in_A_WEN_A);

    SC_METHOD(thread_in_B_Addr_A);
    sensitive << ( in_B_Addr_A_orig );

    SC_METHOD(thread_in_B_Addr_A_orig);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_9_fu_225_p1 );

    SC_METHOD(thread_in_B_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_in_B_Din_A);

    SC_METHOD(thread_in_B_EN_A);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_in_B_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_in_B_WEN_A);

    SC_METHOD(thread_k_1_fu_192_p2);
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_k_cast1_fu_182_p1);
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_out_C_Addr_A);
    sensitive << ( out_C_Addr_A_orig );

    SC_METHOD(thread_out_C_Addr_A_orig);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_3_fu_234_p1 );

    SC_METHOD(thread_out_C_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_out_C_Din_A);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( result_reg_108 );

    SC_METHOD(thread_out_C_EN_A);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_out_C_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_out_C_WEN_A);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond_fu_186_p2 );

    SC_METHOD(thread_row_1_fu_148_p2);
    sensitive << ( row_reg_86 );

    SC_METHOD(thread_tmp_1_fu_154_p1);
    sensitive << ( row_reg_86 );

    SC_METHOD(thread_tmp_2_fu_230_p2);
    sensitive << ( tmp_reg_247 );
    sensitive << ( col_cast2_reg_253 );

    SC_METHOD(thread_tmp_3_fu_234_p1);
    sensitive << ( tmp_2_fu_230_p2 );

    SC_METHOD(thread_tmp_4_fu_208_p1);
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_tmp_5_fu_198_p2);
    sensitive << ( tmp_reg_247 );
    sensitive << ( k_cast1_fu_182_p1 );

    SC_METHOD(thread_tmp_6_fu_203_p1);
    sensitive << ( tmp_5_fu_198_p2 );

    SC_METHOD(thread_tmp_7_fu_212_p3);
    sensitive << ( tmp_4_fu_208_p1 );

    SC_METHOD(thread_tmp_8_fu_220_p2);
    sensitive << ( col_cast2_reg_253 );
    sensitive << ( tmp_7_fu_212_p3 );

    SC_METHOD(thread_tmp_9_fu_225_p1);
    sensitive << ( tmp_8_fu_220_p2 );

    SC_METHOD(thread_tmp_fu_158_p3);
    sensitive << ( tmp_1_fu_154_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond2_fu_142_p2 );
    sensitive << ( exitcond_fu_186_p2 );
    sensitive << ( exitcond1_fu_170_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mmult_accel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_A_Addr_A, "(port)in_A_Addr_A");
    sc_trace(mVcdFile, in_A_EN_A, "(port)in_A_EN_A");
    sc_trace(mVcdFile, in_A_WEN_A, "(port)in_A_WEN_A");
    sc_trace(mVcdFile, in_A_Din_A, "(port)in_A_Din_A");
    sc_trace(mVcdFile, in_A_Dout_A, "(port)in_A_Dout_A");
    sc_trace(mVcdFile, in_A_Clk_A, "(port)in_A_Clk_A");
    sc_trace(mVcdFile, in_A_Rst_A, "(port)in_A_Rst_A");
    sc_trace(mVcdFile, in_B_Addr_A, "(port)in_B_Addr_A");
    sc_trace(mVcdFile, in_B_EN_A, "(port)in_B_EN_A");
    sc_trace(mVcdFile, in_B_WEN_A, "(port)in_B_WEN_A");
    sc_trace(mVcdFile, in_B_Din_A, "(port)in_B_Din_A");
    sc_trace(mVcdFile, in_B_Dout_A, "(port)in_B_Dout_A");
    sc_trace(mVcdFile, in_B_Clk_A, "(port)in_B_Clk_A");
    sc_trace(mVcdFile, in_B_Rst_A, "(port)in_B_Rst_A");
    sc_trace(mVcdFile, out_C_Addr_A, "(port)out_C_Addr_A");
    sc_trace(mVcdFile, out_C_EN_A, "(port)out_C_EN_A");
    sc_trace(mVcdFile, out_C_WEN_A, "(port)out_C_WEN_A");
    sc_trace(mVcdFile, out_C_Din_A, "(port)out_C_Din_A");
    sc_trace(mVcdFile, out_C_Dout_A, "(port)out_C_Dout_A");
    sc_trace(mVcdFile, out_C_Clk_A, "(port)out_C_Clk_A");
    sc_trace(mVcdFile, out_C_Rst_A, "(port)out_C_Rst_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_37, "ap_sig_bdd_37");
    sc_trace(mVcdFile, row_1_fu_148_p2, "row_1_fu_148_p2");
    sc_trace(mVcdFile, row_1_reg_242, "row_1_reg_242");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_78, "ap_sig_bdd_78");
    sc_trace(mVcdFile, tmp_fu_158_p3, "tmp_fu_158_p3");
    sc_trace(mVcdFile, tmp_reg_247, "tmp_reg_247");
    sc_trace(mVcdFile, exitcond2_fu_142_p2, "exitcond2_fu_142_p2");
    sc_trace(mVcdFile, col_cast2_fu_166_p1, "col_cast2_fu_166_p1");
    sc_trace(mVcdFile, col_cast2_reg_253, "col_cast2_reg_253");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_93, "ap_sig_bdd_93");
    sc_trace(mVcdFile, col_1_fu_176_p2, "col_1_fu_176_p2");
    sc_trace(mVcdFile, col_1_reg_262, "col_1_reg_262");
    sc_trace(mVcdFile, k_1_fu_192_p2, "k_1_fu_192_p2");
    sc_trace(mVcdFile, k_1_reg_270, "k_1_reg_270");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_104, "ap_sig_bdd_104");
    sc_trace(mVcdFile, exitcond_fu_186_p2, "exitcond_fu_186_p2");
    sc_trace(mVcdFile, in_A_load_reg_285, "in_A_load_reg_285");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_119, "ap_sig_bdd_119");
    sc_trace(mVcdFile, in_B_load_reg_290, "in_B_load_reg_290");
    sc_trace(mVcdFile, grp_fu_138_p2, "grp_fu_138_p2");
    sc_trace(mVcdFile, tmp_s_reg_295, "tmp_s_reg_295");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_9, "ap_sig_cseq_ST_st10_fsm_9");
    sc_trace(mVcdFile, ap_sig_bdd_129, "ap_sig_bdd_129");
    sc_trace(mVcdFile, grp_fu_133_p2, "grp_fu_133_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st19_fsm_18, "ap_sig_cseq_ST_st19_fsm_18");
    sc_trace(mVcdFile, ap_sig_bdd_138, "ap_sig_bdd_138");
    sc_trace(mVcdFile, row_reg_86, "row_reg_86");
    sc_trace(mVcdFile, exitcond1_fu_170_p2, "exitcond1_fu_170_p2");
    sc_trace(mVcdFile, col_reg_97, "col_reg_97");
    sc_trace(mVcdFile, result_reg_108, "result_reg_108");
    sc_trace(mVcdFile, k_reg_121, "k_reg_121");
    sc_trace(mVcdFile, tmp_6_fu_203_p1, "tmp_6_fu_203_p1");
    sc_trace(mVcdFile, tmp_9_fu_225_p1, "tmp_9_fu_225_p1");
    sc_trace(mVcdFile, tmp_3_fu_234_p1, "tmp_3_fu_234_p1");
    sc_trace(mVcdFile, in_A_Addr_A_orig, "in_A_Addr_A_orig");
    sc_trace(mVcdFile, in_B_Addr_A_orig, "in_B_Addr_A_orig");
    sc_trace(mVcdFile, out_C_Addr_A_orig, "out_C_Addr_A_orig");
    sc_trace(mVcdFile, grp_fu_133_p0, "grp_fu_133_p0");
    sc_trace(mVcdFile, grp_fu_133_p1, "grp_fu_133_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st11_fsm_10, "ap_sig_cseq_ST_st11_fsm_10");
    sc_trace(mVcdFile, ap_sig_bdd_179, "ap_sig_bdd_179");
    sc_trace(mVcdFile, grp_fu_138_p0, "grp_fu_138_p0");
    sc_trace(mVcdFile, grp_fu_138_p1, "grp_fu_138_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_188, "ap_sig_bdd_188");
    sc_trace(mVcdFile, tmp_1_fu_154_p1, "tmp_1_fu_154_p1");
    sc_trace(mVcdFile, k_cast1_fu_182_p1, "k_cast1_fu_182_p1");
    sc_trace(mVcdFile, tmp_5_fu_198_p2, "tmp_5_fu_198_p2");
    sc_trace(mVcdFile, tmp_4_fu_208_p1, "tmp_4_fu_208_p1");
    sc_trace(mVcdFile, tmp_7_fu_212_p3, "tmp_7_fu_212_p3");
    sc_trace(mVcdFile, tmp_8_fu_220_p2, "tmp_8_fu_220_p2");
    sc_trace(mVcdFile, tmp_2_fu_230_p2, "tmp_2_fu_230_p2");
    sc_trace(mVcdFile, grp_fu_133_ce, "grp_fu_133_ce");
    sc_trace(mVcdFile, grp_fu_138_ce, "grp_fu_138_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mmult_accel.hdltvin.dat");
    mHdltvoutHandle.open("mmult_accel.hdltvout.dat");
}

mmult_accel::~mmult_accel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1;
    delete mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2;
}

void mmult_accel::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_142_p2.read(), ap_const_lv1_0))) {
        col_reg_97 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_186_p2.read()))) {
        col_reg_97 = col_1_reg_262.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_170_p2.read()))) {
        k_reg_121 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st19_fsm_18.read())) {
        k_reg_121 = k_1_reg_270.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_170_p2.read()))) {
        result_reg_108 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st19_fsm_18.read())) {
        result_reg_108 = grp_fu_133_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_170_p2.read()))) {
        row_reg_86 = row_1_reg_242.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        row_reg_86 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        col_1_reg_262 = col_1_fu_176_p2.read();
        col_cast2_reg_253 = col_cast2_fu_166_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        in_A_load_reg_285 = in_A_Dout_A.read();
        in_B_load_reg_290 = in_B_Dout_A.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        k_1_reg_270 = k_1_fu_192_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        row_1_reg_242 = row_1_fu_148_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond2_fu_142_p2.read(), ap_const_lv1_0))) {
        tmp_reg_247 = tmp_fu_158_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())) {
        tmp_s_reg_295 = grp_fu_138_p2.read();
    }
}

void mmult_accel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond2_fu_142_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond2_fu_142_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mmult_accel::thread_ap_sig_bdd_104() {
    ap_sig_bdd_104 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void mmult_accel::thread_ap_sig_bdd_119() {
    ap_sig_bdd_119 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void mmult_accel::thread_ap_sig_bdd_129() {
    ap_sig_bdd_129 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void mmult_accel::thread_ap_sig_bdd_138() {
    ap_sig_bdd_138 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(18, 18));
}

void mmult_accel::thread_ap_sig_bdd_179() {
    ap_sig_bdd_179 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(10, 10));
}

void mmult_accel::thread_ap_sig_bdd_188() {
    ap_sig_bdd_188 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void mmult_accel::thread_ap_sig_bdd_37() {
    ap_sig_bdd_37 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void mmult_accel::thread_ap_sig_bdd_78() {
    ap_sig_bdd_78 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void mmult_accel::thread_ap_sig_bdd_93() {
    ap_sig_bdd_93 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void mmult_accel::thread_ap_sig_cseq_ST_st10_fsm_9() {
    if (ap_sig_bdd_129.read()) {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_sig_cseq_ST_st11_fsm_10() {
    if (ap_sig_bdd_179.read()) {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_sig_cseq_ST_st19_fsm_18() {
    if (ap_sig_bdd_138.read()) {
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_37.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_78.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_93.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_104.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_119.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void mmult_accel::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_188.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void mmult_accel::thread_col_1_fu_176_p2() {
    col_1_fu_176_p2 = (!col_reg_97.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(col_reg_97.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void mmult_accel::thread_col_cast2_fu_166_p1() {
    col_cast2_fu_166_p1 = esl_zext<10,6>(col_reg_97.read());
}

void mmult_accel::thread_exitcond1_fu_170_p2() {
    exitcond1_fu_170_p2 = (!col_reg_97.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(col_reg_97.read() == ap_const_lv6_20);
}

void mmult_accel::thread_exitcond2_fu_142_p2() {
    exitcond2_fu_142_p2 = (!row_reg_86.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(row_reg_86.read() == ap_const_lv6_20);
}

void mmult_accel::thread_exitcond_fu_186_p2() {
    exitcond_fu_186_p2 = (!k_reg_121.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_121.read() == ap_const_lv6_20);
}

void mmult_accel::thread_grp_fu_133_ce() {
    grp_fu_133_ce = ap_const_logic_1;
}

void mmult_accel::thread_grp_fu_133_p0() {
    grp_fu_133_p0 = result_reg_108.read();
}

void mmult_accel::thread_grp_fu_133_p1() {
    grp_fu_133_p1 = tmp_s_reg_295.read();
}

void mmult_accel::thread_grp_fu_138_ce() {
    grp_fu_138_ce = ap_const_logic_1;
}

void mmult_accel::thread_grp_fu_138_p0() {
    grp_fu_138_p0 = in_A_load_reg_285.read();
}

void mmult_accel::thread_grp_fu_138_p1() {
    grp_fu_138_p1 = in_B_load_reg_290.read();
}

void mmult_accel::thread_in_A_Addr_A() {
    in_A_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): in_A_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void mmult_accel::thread_in_A_Addr_A_orig() {
    in_A_Addr_A_orig =  (sc_lv<32>) (tmp_6_fu_203_p1.read());
}

void mmult_accel::thread_in_A_Clk_A() {
    in_A_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void mmult_accel::thread_in_A_Din_A() {
    in_A_Din_A = ap_const_lv32_0;
}

void mmult_accel::thread_in_A_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        in_A_EN_A = ap_const_logic_1;
    } else {
        in_A_EN_A = ap_const_logic_0;
    }
}

void mmult_accel::thread_in_A_Rst_A() {
    in_A_Rst_A = ap_rst_n_inv.read();
}

void mmult_accel::thread_in_A_WEN_A() {
    in_A_WEN_A = ap_const_lv4_0;
}

void mmult_accel::thread_in_B_Addr_A() {
    in_B_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): in_B_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void mmult_accel::thread_in_B_Addr_A_orig() {
    in_B_Addr_A_orig =  (sc_lv<32>) (tmp_9_fu_225_p1.read());
}

void mmult_accel::thread_in_B_Clk_A() {
    in_B_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void mmult_accel::thread_in_B_Din_A() {
    in_B_Din_A = ap_const_lv32_0;
}

void mmult_accel::thread_in_B_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        in_B_EN_A = ap_const_logic_1;
    } else {
        in_B_EN_A = ap_const_logic_0;
    }
}

void mmult_accel::thread_in_B_Rst_A() {
    in_B_Rst_A = ap_rst_n_inv.read();
}

void mmult_accel::thread_in_B_WEN_A() {
    in_B_WEN_A = ap_const_lv4_0;
}

void mmult_accel::thread_k_1_fu_192_p2() {
    k_1_fu_192_p2 = (!k_reg_121.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(k_reg_121.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void mmult_accel::thread_k_cast1_fu_182_p1() {
    k_cast1_fu_182_p1 = esl_zext<10,6>(k_reg_121.read());
}

void mmult_accel::thread_out_C_Addr_A() {
    out_C_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): out_C_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void mmult_accel::thread_out_C_Addr_A_orig() {
    out_C_Addr_A_orig =  (sc_lv<32>) (tmp_3_fu_234_p1.read());
}

void mmult_accel::thread_out_C_Clk_A() {
    out_C_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void mmult_accel::thread_out_C_Din_A() {
    out_C_Din_A = result_reg_108.read();
}

void mmult_accel::thread_out_C_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        out_C_EN_A = ap_const_logic_1;
    } else {
        out_C_EN_A = ap_const_logic_0;
    }
}

void mmult_accel::thread_out_C_Rst_A() {
    out_C_Rst_A = ap_rst_n_inv.read();
}

void mmult_accel::thread_out_C_WEN_A() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_186_p2.read())))) {
        out_C_WEN_A = ap_const_lv4_F;
    } else {
        out_C_WEN_A = ap_const_lv4_0;
    }
}

void mmult_accel::thread_row_1_fu_148_p2() {
    row_1_fu_148_p2 = (!row_reg_86.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(row_reg_86.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void mmult_accel::thread_tmp_1_fu_154_p1() {
    tmp_1_fu_154_p1 = row_reg_86.read().range(5-1, 0);
}

void mmult_accel::thread_tmp_2_fu_230_p2() {
    tmp_2_fu_230_p2 = (!col_cast2_reg_253.read().is_01() || !tmp_reg_247.read().is_01())? sc_lv<10>(): (sc_biguint<10>(col_cast2_reg_253.read()) + sc_biguint<10>(tmp_reg_247.read()));
}

void mmult_accel::thread_tmp_3_fu_234_p1() {
    tmp_3_fu_234_p1 = esl_zext<64,10>(tmp_2_fu_230_p2.read());
}

void mmult_accel::thread_tmp_4_fu_208_p1() {
    tmp_4_fu_208_p1 = k_reg_121.read().range(5-1, 0);
}

void mmult_accel::thread_tmp_5_fu_198_p2() {
    tmp_5_fu_198_p2 = (!k_cast1_fu_182_p1.read().is_01() || !tmp_reg_247.read().is_01())? sc_lv<10>(): (sc_biguint<10>(k_cast1_fu_182_p1.read()) + sc_biguint<10>(tmp_reg_247.read()));
}

void mmult_accel::thread_tmp_6_fu_203_p1() {
    tmp_6_fu_203_p1 = esl_zext<64,10>(tmp_5_fu_198_p2.read());
}

void mmult_accel::thread_tmp_7_fu_212_p3() {
    tmp_7_fu_212_p3 = esl_concat<5,5>(tmp_4_fu_208_p1.read(), ap_const_lv5_0);
}

void mmult_accel::thread_tmp_8_fu_220_p2() {
    tmp_8_fu_220_p2 = (!tmp_7_fu_212_p3.read().is_01() || !col_cast2_reg_253.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_7_fu_212_p3.read()) + sc_biguint<10>(col_cast2_reg_253.read()));
}

void mmult_accel::thread_tmp_9_fu_225_p1() {
    tmp_9_fu_225_p1 = esl_zext<64,10>(tmp_8_fu_220_p2.read());
}

void mmult_accel::thread_tmp_fu_158_p3() {
    tmp_fu_158_p3 = esl_concat<5,5>(tmp_1_fu_154_p1.read(), ap_const_lv5_0);
}

void mmult_accel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond2_fu_142_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_170_p2.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_186_p2.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXX";
            break;
    }
}

void mmult_accel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_A_Addr_A\" :  \"" << in_A_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_A_EN_A\" :  \"" << in_A_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_A_WEN_A\" :  \"" << in_A_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_A_Din_A\" :  \"" << in_A_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_A_Dout_A\" :  \"" << in_A_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_A_Clk_A\" :  \"" << in_A_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_A_Rst_A\" :  \"" << in_A_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_B_Addr_A\" :  \"" << in_B_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_B_EN_A\" :  \"" << in_B_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_B_WEN_A\" :  \"" << in_B_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_B_Din_A\" :  \"" << in_B_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_B_Dout_A\" :  \"" << in_B_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_B_Clk_A\" :  \"" << in_B_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_B_Rst_A\" :  \"" << in_B_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_C_Addr_A\" :  \"" << out_C_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_C_EN_A\" :  \"" << out_C_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_C_WEN_A\" :  \"" << out_C_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_C_Din_A\" :  \"" << out_C_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_C_Dout_A\" :  \"" << out_C_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_C_Clk_A\" :  \"" << out_C_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_C_Rst_A\" :  \"" << out_C_Rst_A.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

