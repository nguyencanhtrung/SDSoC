// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "madd.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic madd::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic madd::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> madd::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> madd::ap_ST_pp0_stg0_fsm_1 = "10";
const sc_lv<3> madd::ap_ST_st14_fsm_2 = "100";
const sc_lv<32> madd::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> madd::ap_const_lv1_1 = "1";
const sc_lv<32> madd::ap_const_lv32_1 = "1";
const sc_lv<1> madd::ap_const_lv1_0 = "0";
const sc_lv<11> madd::ap_const_lv11_0 = "00000000000";
const sc_lv<11> madd::ap_const_lv11_400 = "10000000000";
const sc_lv<11> madd::ap_const_lv11_1 = "1";
const sc_lv<32> madd::ap_const_lv32_2 = "10";

madd::madd(sc_module_name name) : sc_module(name), mVcdFile(0) {
    madd_fadd_32ns_32ns_32_9_full_dsp_U0 = new madd_fadd_32ns_32ns_32_9_full_dsp<1,9,32,32,32>("madd_fadd_32ns_32ns_32_9_full_dsp_U0");
    madd_fadd_32ns_32ns_32_9_full_dsp_U0->clk(ap_clk);
    madd_fadd_32ns_32ns_32_9_full_dsp_U0->reset(ap_rst_n_inv);
    madd_fadd_32ns_32ns_32_9_full_dsp_U0->din0(A_read_reg_103);
    madd_fadd_32ns_32ns_32_9_full_dsp_U0->din1(B_read_reg_108);
    madd_fadd_32ns_32ns_32_9_full_dsp_U0->ce(grp_fu_78_ce);
    madd_fadd_32ns_32ns_32_9_full_dsp_U0->dout(grp_fu_78_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_read);
    sensitive << ( exitcond_flatten_reg_94 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_sig_bdd_60 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_86 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );

    SC_METHOD(thread_B_read);
    sensitive << ( exitcond_flatten_reg_94 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_sig_bdd_60 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_86 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );

    SC_METHOD(thread_C_din);
    sensitive << ( ap_sig_bdd_60 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10 );
    sensitive << ( ap_sig_bdd_86 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );
    sensitive << ( tmp_4_reg_113 );

    SC_METHOD(thread_C_write);
    sensitive << ( ap_sig_bdd_60 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10 );
    sensitive << ( ap_sig_bdd_86 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st14_fsm_2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st14_fsm_2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_187);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_60);
    sensitive << ( A_empty_n );
    sensitive << ( B_empty_n );
    sensitive << ( exitcond_flatten_reg_94 );

    SC_METHOD(thread_ap_sig_bdd_86);
    sensitive << ( C_full_n );
    sensitive << ( ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_1);
    sensitive << ( ap_sig_bdd_49 );

    SC_METHOD(thread_ap_sig_cseq_ST_st14_fsm_2);
    sensitive << ( ap_sig_bdd_187 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_21 );

    SC_METHOD(thread_exitcond_flatten_fu_82_p2);
    sensitive << ( indvar_flatten_reg_67 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_60 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_86 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );

    SC_METHOD(thread_grp_fu_78_ce);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_sig_bdd_60 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_bdd_86 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );

    SC_METHOD(thread_indvar_flatten_next_fu_88_p2);
    sensitive << ( indvar_flatten_reg_67 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_flatten_fu_82_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_60 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it10 );
    sensitive << ( ap_sig_bdd_86 );
    sensitive << ( ap_reg_ppiten_pp0_it11 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it3 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it4 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it5 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it6 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it7 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it8 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it9 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it10 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it11 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "madd_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_dout, "(port)A_dout");
    sc_trace(mVcdFile, A_empty_n, "(port)A_empty_n");
    sc_trace(mVcdFile, A_read, "(port)A_read");
    sc_trace(mVcdFile, B_dout, "(port)B_dout");
    sc_trace(mVcdFile, B_empty_n, "(port)B_empty_n");
    sc_trace(mVcdFile, B_read, "(port)B_read");
    sc_trace(mVcdFile, C_din, "(port)C_din");
    sc_trace(mVcdFile, C_full_n, "(port)C_full_n");
    sc_trace(mVcdFile, C_write, "(port)C_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_21, "ap_sig_bdd_21");
    sc_trace(mVcdFile, indvar_flatten_reg_67, "indvar_flatten_reg_67");
    sc_trace(mVcdFile, exitcond_flatten_fu_82_p2, "exitcond_flatten_fu_82_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_94, "exitcond_flatten_reg_94");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_1, "ap_sig_cseq_ST_pp0_stg0_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_49, "ap_sig_bdd_49");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_sig_bdd_60, "ap_sig_bdd_60");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it3, "ap_reg_ppiten_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it4, "ap_reg_ppiten_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it5, "ap_reg_ppiten_pp0_it5");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it6, "ap_reg_ppiten_pp0_it6");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it7, "ap_reg_ppiten_pp0_it7");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it8, "ap_reg_ppiten_pp0_it8");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it9, "ap_reg_ppiten_pp0_it9");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it10, "ap_reg_ppiten_pp0_it10");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10");
    sc_trace(mVcdFile, ap_sig_bdd_86, "ap_sig_bdd_86");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it11, "ap_reg_ppiten_pp0_it11");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it1, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it2, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it3, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it4, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it5, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it5");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it6, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it6");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it7, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it7");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it8, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it8");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it9, "ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it9");
    sc_trace(mVcdFile, indvar_flatten_next_fu_88_p2, "indvar_flatten_next_fu_88_p2");
    sc_trace(mVcdFile, A_read_reg_103, "A_read_reg_103");
    sc_trace(mVcdFile, B_read_reg_108, "B_read_reg_108");
    sc_trace(mVcdFile, grp_fu_78_p2, "grp_fu_78_p2");
    sc_trace(mVcdFile, tmp_4_reg_113, "tmp_4_reg_113");
    sc_trace(mVcdFile, grp_fu_78_ce, "grp_fu_78_ce");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st14_fsm_2, "ap_sig_cseq_ST_st14_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_187, "ap_sig_bdd_187");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("madd.hdltvin.dat");
    mHdltvoutHandle.open("madd.hdltvout.dat");
}

madd::~madd() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete madd_fadd_32ns_32ns_32_9_full_dsp_U0;
}

void madd::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && 
             !esl_seteq<1,1,1>(exitcond_flatten_fu_82_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && 
             esl_seteq<1,1,1>(exitcond_flatten_fu_82_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                     !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
                     !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && 
                     !esl_seteq<1,1,1>(exitcond_flatten_fu_82_p2.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it10 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it10 = ap_reg_ppiten_pp0_it9.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it11 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it11 = ap_reg_ppiten_pp0_it10.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it11 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it3 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it3 = ap_reg_ppiten_pp0_it2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it4 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it4 = ap_reg_ppiten_pp0_it3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it5 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it5 = ap_reg_ppiten_pp0_it4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it6 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it6 = ap_reg_ppiten_pp0_it5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it7 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it7 = ap_reg_ppiten_pp0_it6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it8 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it8 = ap_reg_ppiten_pp0_it7.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it9 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
            ap_reg_ppiten_pp0_it9 = ap_reg_ppiten_pp0_it8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_82_p2.read(), ap_const_lv1_0))) {
        indvar_flatten_reg_67 = indvar_flatten_next_fu_88_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        indvar_flatten_reg_67 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_94.read(), ap_const_lv1_0) && !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))))) {
        A_read_reg_103 = A_dout.read();
        B_read_reg_108 = B_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))))) {
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it1 = exitcond_flatten_reg_94.read();
        exitcond_flatten_reg_94 = exitcond_flatten_fu_82_p2.read();
    }
    if (!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read())))) {
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it9.read();
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it2 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it1.read();
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it3 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it2.read();
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it4 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it3.read();
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it5 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it4.read();
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it6 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it5.read();
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it7 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it6.read();
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it8 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it7.read();
        ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it9 = ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it8.read();
    }
    if ((!((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it9.read()))) {
        tmp_4_reg_113 = grp_fu_78_p2.read();
    }
}

void madd::thread_A_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_94.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))))) {
        A_read = ap_const_logic_1;
    } else {
        A_read = ap_const_logic_0;
    }
}

void madd::thread_B_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_94.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))))) {
        B_read = ap_const_logic_1;
    } else {
        B_read = ap_const_logic_0;
    }
}

void madd::thread_C_din() {
    C_din = tmp_4_reg_113.read();
}

void madd::thread_C_write() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()) && 
         !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))))) {
        C_write = ap_const_logic_1;
    } else {
        C_write = ap_const_logic_0;
    }
}

void madd::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void madd::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void madd::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void madd::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void madd::thread_ap_sig_bdd_187() {
    ap_sig_bdd_187 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void madd::thread_ap_sig_bdd_21() {
    ap_sig_bdd_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void madd::thread_ap_sig_bdd_49() {
    ap_sig_bdd_49 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void madd::thread_ap_sig_bdd_60() {
    ap_sig_bdd_60 = ((esl_seteq<1,1,1>(A_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(exitcond_flatten_reg_94.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(exitcond_flatten_reg_94.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(B_empty_n.read(), ap_const_logic_0)));
}

void madd::thread_ap_sig_bdd_86() {
    ap_sig_bdd_86 = (esl_seteq<1,1,1>(C_full_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10.read()));
}

void madd::thread_ap_sig_cseq_ST_pp0_stg0_fsm_1() {
    if (ap_sig_bdd_49.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    }
}

void madd::thread_ap_sig_cseq_ST_st14_fsm_2() {
    if (ap_sig_bdd_187.read()) {
        ap_sig_cseq_ST_st14_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st14_fsm_2 = ap_const_logic_0;
    }
}

void madd::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void madd::thread_exitcond_flatten_fu_82_p2() {
    exitcond_flatten_fu_82_p2 = (!indvar_flatten_reg_67.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_67.read() == ap_const_lv11_400);
}

void madd::thread_grp_fu_78_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))))) {
        grp_fu_78_ce = ap_const_logic_1;
    } else {
        grp_fu_78_ce = ap_const_logic_0;
    }
}

void madd::thread_indvar_flatten_next_fu_88_p2() {
    indvar_flatten_next_fu_88_p2 = (!indvar_flatten_reg_67.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(indvar_flatten_reg_67.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void madd::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()) && !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it10.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && !esl_seteq<1,1,1>(exitcond_flatten_fu_82_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()) && 
  !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it10.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  !((ap_sig_bdd_60.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (ap_sig_bdd_86.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it11.read()))) && 
  !esl_seteq<1,1,1>(exitcond_flatten_fu_82_p2.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_st14_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void madd::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_dout\" :  \"" << A_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_empty_n\" :  \"" << A_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_read\" :  \"" << A_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_dout\" :  \"" << B_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_empty_n\" :  \"" << B_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_read\" :  \"" << B_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_din\" :  \"" << C_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_full_n\" :  \"" << C_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_write\" :  \"" << C_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

