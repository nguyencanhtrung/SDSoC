-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlation_accel_v3_frontEnd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NUMBER_OF_DAYS : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES : IN STD_LOGIC_VECTOR (31 downto 0);
    in_indices_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_indices_TVALID : IN STD_LOGIC;
    in_indices_TREADY : OUT STD_LOGIC;
    in_indices_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_indices_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_indices_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_indices_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_indices_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_indices_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    sum_weight_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_out_V_full_n : IN STD_LOGIC;
    sum_weight_out_V_write : OUT STD_LOGIC;
    sum_return_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_return_out_V_full_n : IN STD_LOGIC;
    sum_return_out_V_write : OUT STD_LOGIC;
    sum_weight_returnSquare_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquare_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnSquare_out_V_write : OUT STD_LOGIC;
    sum_weight_return_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_return_out_V_full_n : IN STD_LOGIC;
    sum_weight_return_out_V_write : OUT STD_LOGIC;
    sum_weight_returnA_returnB_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_returnB_out_full_n : IN STD_LOGIC;
    sum_weight_returnA_returnB_out_write : OUT STD_LOGIC;
    sum_returnA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_returnA_out_V_full_n : IN STD_LOGIC;
    sum_returnA_out_V_write : OUT STD_LOGIC;
    sum_weight_returnSquareA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquareA_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnSquareA_out_V_write : OUT STD_LOGIC;
    sum_weight_returnA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnA_out_V_write : OUT STD_LOGIC;
    NUMBER_OF_DAYS_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_DAYS_out_full_n : IN STD_LOGIC;
    NUMBER_OF_DAYS_out_write : OUT STD_LOGIC;
    NUMBER_OF_INDICES_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES_out_full_n : IN STD_LOGIC;
    NUMBER_OF_INDICES_out_write : OUT STD_LOGIC );
end;


architecture behav of correlation_accel_v3_frontEnd is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_pp0_stg0_fsm_21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_pp0_stg1_fsm_22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_pp1_stg0_fsm_23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_pp1_stg1_fsm_24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_pp1_stg2_fsm_25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_pp1_stg3_fsm_26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_pp1_stg4_fsm_27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_pp1_stg5_fsm_28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_pp1_stg6_fsm_29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_pp1_stg7_fsm_30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_pp1_stg8_fsm_31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_st104_fsm_32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_st105_fsm_33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_st106_fsm_34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_st107_fsm_35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_pp2_stg0_fsm_36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_pp2_stg1_fsm_37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_pp3_stg1_fsm_39 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg2_fsm_40 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg3_fsm_41 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg4_fsm_42 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg5_fsm_43 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg6_fsm_44 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg7_fsm_45 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg8_fsm_46 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_st192_fsm_47 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3F70A3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011100001010001111010111";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_67 : BOOLEAN;
    signal weight_rom_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_rom_ce0 : STD_LOGIC;
    signal weight_rom_we0 : STD_LOGIC;
    signal weight_rom_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_rom_ce1 : STD_LOGIC;
    signal weight_rom_we1 : STD_LOGIC;
    signal weight_rom_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnA_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lnReturnA_ce0 : STD_LOGIC;
    signal lnReturnA_we0 : STD_LOGIC;
    signal lnReturnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i1_i_reg_787_pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it34 : STD_LOGIC := '0';
    signal ap_reg_ppstg_i1_i_reg_787_pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i1_i_reg_787_pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i1_i_reg_787_pp0_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i1_i_reg_787_pp0_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_reg_838 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_i_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_i_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i4_i_reg_870_pp2_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_273 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it34 : STD_LOGIC := '0';
    signal ap_reg_ppstg_i4_i_reg_870_pp2_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i4_i_reg_870_pp2_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i4_i_reg_870_pp2_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_i4_i_reg_870_pp2_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal i8_i_reg_934 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_961_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_383 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg1_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_392 : BOOLEAN;
    signal tmp_6_i_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_399 : BOOLEAN;
    signal ap_sig_cseq_ST_pp2_stg1_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_410 : BOOLEAN;
    signal tmp_31_i_reg_1646 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_415 : BOOLEAN;
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_434 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_441 : BOOLEAN;
    signal reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it21 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it22 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it23 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it24 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it25 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp0_it26 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it21 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it22 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it23 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it24 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it25 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1028_pp2_it26 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_505 : BOOLEAN;
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_return_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1060 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_return_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg1_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_584 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal exitcond2_i_reg_1571 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg1_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_599 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal exitcond_i_reg_1720 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_967_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_return_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg2_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_634 : BOOLEAN;
    signal acc_weight_return_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg3_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_648 : BOOLEAN;
    signal reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquare_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquare_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg2_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_683 : BOOLEAN;
    signal grp_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1098 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg3_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_720 : BOOLEAN;
    signal acc_weight_returnA_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_748 : BOOLEAN;
    signal i_fu_1133_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_760 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_769 : BOOLEAN;
    signal tmp_69_i_i_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_1153_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_1416 : STD_LOGIC_VECTOR (30 downto 0);
    signal acc_return_addr_gep_fu_381_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_reg_1421 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_gep_fu_394_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_reg_1426 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_gep_fu_407_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_reg_1431 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_1_gep_fu_420_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_1_reg_1436 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_1_gep_fu_432_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_1_reg_1441 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_1_gep_fu_444_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_1_reg_1446 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_2_gep_fu_457_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_2_reg_1451 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_797 : BOOLEAN;
    signal acc_weight_returnSquare_addr_2_gep_fu_465_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_2_reg_1456 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_2_gep_fu_473_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_2_reg_1461 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_3_gep_fu_481_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_3_reg_1466 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_3_gep_fu_489_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_3_reg_1471 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_3_gep_fu_497_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_3_reg_1476 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_4_gep_fu_505_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_4_reg_1481 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_4_gep_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_4_reg_1486 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_4_gep_fu_521_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_4_reg_1491 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_5_gep_fu_529_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_addr_5_reg_1496 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_5_gep_fu_537_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_5_reg_1501 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_5_gep_fu_545_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_5_reg_1506 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_fu_1159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_1163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_tmp_4_i_fu_1179_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_tmp_4_i_reg_1526 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_fu_1187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_reg_1532 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_1192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_1538 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1198_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_reg_1543 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it6 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it7 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it8 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it9 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it11 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it12 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it13 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it14 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it15 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it16 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it17 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it18 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it19 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it21 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it22 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_reg_1543_pp0_it23 : STD_LOGIC_VECTOR (30 downto 0);
    signal acc_return_addr_7_reg_1553 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_7_reg_1559 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it32 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it33 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_7_reg_1565 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_i_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_959 : BOOLEAN;
    signal i_2_fu_1236_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1575 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_i_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_i_reg_1580 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_weight_returnA_returnB_add_gep_fu_612_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_reg_1608 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st104_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_982 : BOOLEAN;
    signal acc_weight_returnA_returnB_add_1_gep_fu_619_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_1_reg_1613 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_gep_fu_626_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_reg_1618 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_gep_fu_633_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_reg_1623 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_gep_fu_640_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_reg_1628 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_gep_fu_647_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_reg_1633 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_28_i_fu_1261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st107_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_1001 : BOOLEAN;
    signal tmp_31_i_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_shift_reg_load_i_fu_1279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_shift_reg_load_i_reg_1650 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_fu_1287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_1292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_1661 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1303_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_reg_1666 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it6 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it7 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it8 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it9 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it11 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it12 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it13 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it14 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it15 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it16 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it17 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it18 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it19 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it21 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_1666_pp2_it22 : STD_LOGIC_VECTOR (30 downto 0);
    signal acc_return_addr_9_reg_1676 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_addr_9_reg_1682 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it32 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it33 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_addr_9_reg_1688 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_6_reg_1694 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it32 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it33 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it34 : STD_LOGIC_VECTOR (2 downto 0);
    signal lnReturnA_load_reg_1705 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_i_reg_1710 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_i_reg_1715 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_1170 : BOOLEAN;
    signal i_4_fu_1342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_1724 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_22_fu_1348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_22_reg_1729 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp3_stg4_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_1194 : BOOLEAN;
    signal column_index_fu_1353_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st192_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_1205 : BOOLEAN;
    signal ap_sig_bdd_1222 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg8_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_1239 : BOOLEAN;
    signal ap_sig_cseq_ST_pp3_stg8_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_1258 : BOOLEAN;
    signal acc_return_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_ce0 : STD_LOGIC;
    signal acc_return_we0 : STD_LOGIC;
    signal acc_return_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_return_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_return_ce1 : STD_LOGIC;
    signal acc_return_we1 : STD_LOGIC;
    signal acc_return_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquare_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_ce0 : STD_LOGIC;
    signal acc_weight_returnSquare_we0 : STD_LOGIC;
    signal acc_weight_returnSquare_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquare_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquare_ce1 : STD_LOGIC;
    signal acc_weight_returnSquare_we1 : STD_LOGIC;
    signal acc_weight_returnSquare_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_return_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_ce0 : STD_LOGIC;
    signal acc_weight_return_we0 : STD_LOGIC;
    signal acc_weight_return_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_return_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_return_ce1 : STD_LOGIC;
    signal acc_weight_return_we1 : STD_LOGIC;
    signal acc_weight_return_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_i_reg_743 : STD_LOGIC_VECTOR (7 downto 0);
    signal i1_i_i_reg_755 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_1327 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_1335 : BOOLEAN;
    signal exitcond_i_i_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_phi_fu_770_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_phi_fu_781_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_phi_fu_791_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_phi_fu_817_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_phi_fu_830_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_phi_fu_842_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal column_index_i_reg_849 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_i_phi_fu_864_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_i_phi_fu_874_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_phi_fu_900_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_phi_fu_913_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_phi_fu_926_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i8_i_phi_fu_938_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_i_i_fu_1128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_i_i_fu_1148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_i_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_i_fu_1213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_i_fu_1225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_i_fu_1307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_i_fu_1318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_i_fu_1331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shift_reg_load1_i_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st105_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_1458 : BOOLEAN;
    signal tmp_26_i_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st106_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_1471 : BOOLEAN;
    signal grp_fu_946_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_1595 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg4_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_1605 : BOOLEAN;
    signal ap_sig_cseq_ST_pp3_stg5_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_1619 : BOOLEAN;
    signal grp_fu_950_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_961_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_961_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_967_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_967_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_971_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_971_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_975_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_975_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_979_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_cast_i_fu_1139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1207_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1207_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_i_fu_1220_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal column_index_cast_i_fu_1252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1312_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1312_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_i_fu_1326_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_946_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_1755 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_1763 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_1771 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_1779 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_1787 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_1795 : BOOLEAN;
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_1803 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg5_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_1822 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg6_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_1831 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg7_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_1840 : BOOLEAN;
    signal ap_sig_cseq_ST_pp3_stg6_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_1867 : BOOLEAN;
    signal ap_sig_cseq_ST_pp3_stg7_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_1876 : BOOLEAN;
    signal grp_fu_950_ce : STD_LOGIC;
    signal grp_fu_961_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_1914 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_1922 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_1930 : BOOLEAN;
    signal grp_fu_967_ce : STD_LOGIC;
    signal grp_fu_971_ce : STD_LOGIC;
    signal grp_fu_975_ce : STD_LOGIC;
    signal grp_fu_979_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_979_ce : STD_LOGIC;
    signal grp_fu_1207_ce : STD_LOGIC;
    signal grp_fu_1312_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);

    component correlation_accel_v3_fadd_32ns_32ns_32_9_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_fmul_32ns_32ns_32_5_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_fdiv_32ns_32ns_32_30 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_flog_32ns_32ns_32_18_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_urem_32ns_4ns_32_36 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_frontEnd_weight_rom IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_frontEnd_lnReturnA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_frontEnd_acc_return IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_frontEnd_acc_weight_returnA_returnB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    weight_rom_U : component correlation_accel_v3_frontEnd_weight_rom
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_rom_address0,
        ce0 => weight_rom_ce0,
        we0 => weight_rom_we0,
        d0 => weight_rom_d0,
        q0 => weight_rom_q0,
        address1 => weight_rom_address1,
        ce1 => weight_rom_ce1,
        we1 => weight_rom_we1,
        d1 => weight_rom_d1,
        q1 => weight_rom_q1);

    lnReturnA_U : component correlation_accel_v3_frontEnd_lnReturnA
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lnReturnA_address0,
        ce0 => lnReturnA_ce0,
        we0 => lnReturnA_we0,
        d0 => lnReturnA_d0,
        q0 => lnReturnA_q0);

    acc_return_U : component correlation_accel_v3_frontEnd_acc_return
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_return_address0,
        ce0 => acc_return_ce0,
        we0 => acc_return_we0,
        d0 => acc_return_d0,
        q0 => acc_return_q0,
        address1 => acc_return_address1,
        ce1 => acc_return_ce1,
        we1 => acc_return_we1,
        d1 => acc_return_d1,
        q1 => acc_return_q1);

    acc_weight_returnSquare_U : component correlation_accel_v3_frontEnd_acc_return
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnSquare_address0,
        ce0 => acc_weight_returnSquare_ce0,
        we0 => acc_weight_returnSquare_we0,
        d0 => acc_weight_returnSquare_d0,
        q0 => acc_weight_returnSquare_q0,
        address1 => acc_weight_returnSquare_address1,
        ce1 => acc_weight_returnSquare_ce1,
        we1 => acc_weight_returnSquare_we1,
        d1 => acc_weight_returnSquare_d1,
        q1 => acc_weight_returnSquare_q1);

    acc_weight_return_U : component correlation_accel_v3_frontEnd_acc_return
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_return_address0,
        ce0 => acc_weight_return_ce0,
        we0 => acc_weight_return_we0,
        d0 => acc_weight_return_d0,
        q0 => acc_weight_return_q0,
        address1 => acc_weight_return_address1,
        ce1 => acc_weight_return_ce1,
        we1 => acc_weight_return_we1,
        d1 => acc_weight_return_d1,
        q1 => acc_weight_return_q1);

    acc_weight_returnA_returnB_U : component correlation_accel_v3_frontEnd_acc_weight_returnA_returnB
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnA_returnB_address0,
        ce0 => acc_weight_returnA_returnB_ce0,
        we0 => acc_weight_returnA_returnB_we0,
        d0 => acc_weight_returnA_returnB_d0,
        q0 => acc_weight_returnA_returnB_q0,
        address1 => acc_weight_returnA_returnB_address1,
        ce1 => acc_weight_returnA_returnB_ce1,
        we1 => acc_weight_returnA_returnB_we1,
        d1 => acc_weight_returnA_returnB_d1);

    correlation_accel_v3_fadd_32ns_32ns_32_9_full_dsp_U1 : component correlation_accel_v3_fadd_32ns_32ns_32_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_946_p0,
        din1 => grp_fu_946_p1,
        ce => grp_fu_946_ce,
        dout => grp_fu_946_p2);

    correlation_accel_v3_fadd_32ns_32ns_32_9_full_dsp_U2 : component correlation_accel_v3_fadd_32ns_32ns_32_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_950_p0,
        din1 => grp_fu_950_p1,
        ce => grp_fu_950_ce,
        dout => grp_fu_950_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_5_max_dsp_U3 : component correlation_accel_v3_fmul_32ns_32ns_32_5_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_961_p0,
        din1 => grp_fu_961_p1,
        ce => grp_fu_961_ce,
        dout => grp_fu_961_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_5_max_dsp_U4 : component correlation_accel_v3_fmul_32ns_32ns_32_5_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_967_p0,
        din1 => grp_fu_967_p1,
        ce => grp_fu_967_ce,
        dout => grp_fu_967_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_5_max_dsp_U5 : component correlation_accel_v3_fmul_32ns_32ns_32_5_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_971_p0,
        din1 => grp_fu_971_p1,
        ce => grp_fu_971_ce,
        dout => grp_fu_971_p2);

    correlation_accel_v3_fdiv_32ns_32ns_32_30_U6 : component correlation_accel_v3_fdiv_32ns_32ns_32_30
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_975_p0,
        din1 => grp_fu_975_p1,
        ce => grp_fu_975_ce,
        dout => grp_fu_975_p2);

    correlation_accel_v3_flog_32ns_32ns_32_18_full_dsp_U7 : component correlation_accel_v3_flog_32ns_32ns_32_18_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_979_p0,
        din1 => grp_fu_979_p1,
        ce => grp_fu_979_ce,
        dout => grp_fu_979_p2);

    correlation_accel_v3_urem_32ns_4ns_32_36_U8 : component correlation_accel_v3_urem_32ns_4ns_32_36
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1207_p0,
        din1 => grp_fu_1207_p1,
        ce => grp_fu_1207_ce,
        dout => grp_fu_1207_p2);

    correlation_accel_v3_urem_32ns_4ns_32_36_U9 : component correlation_accel_v3_urem_32ns_4ns_32_36
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1312_p0,
        din1 => grp_fu_1312_p1,
        ce => grp_fu_1312_ce,
        dout => grp_fu_1312_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and (ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and (tmp_6_i_reg_1522 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and not((tmp_6_i_reg_1522 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it26 assign process. --
    ap_reg_ppiten_pp0_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it27 assign process. --
    ap_reg_ppiten_pp0_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it28 assign process. --
    ap_reg_ppiten_pp0_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it29 assign process. --
    ap_reg_ppiten_pp0_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it30 assign process. --
    ap_reg_ppiten_pp0_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it31 assign process. --
    ap_reg_ppiten_pp0_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it32 assign process. --
    ap_reg_ppiten_pp0_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it33 assign process. --
    ap_reg_ppiten_pp0_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it34 assign process. --
    ap_reg_ppiten_pp0_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and not((ap_const_lv1_0 = exitcond2_i_fu_1230_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond2_i_reg_1571) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg8_fsm_31))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg8_fsm_31) and not((ap_const_lv1_0 = exitcond2_i_reg_1571))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and (ap_const_lv1_0 = tmp_31_i_reg_1646) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and not((ap_const_lv1_0 = tmp_31_i_reg_1646))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it10 assign process. --
    ap_reg_ppiten_pp2_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it10 <= ap_reg_ppiten_pp2_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it11 assign process. --
    ap_reg_ppiten_pp2_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it11 <= ap_reg_ppiten_pp2_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it12 assign process. --
    ap_reg_ppiten_pp2_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it12 <= ap_reg_ppiten_pp2_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it13 assign process. --
    ap_reg_ppiten_pp2_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it13 <= ap_reg_ppiten_pp2_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it14 assign process. --
    ap_reg_ppiten_pp2_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it14 <= ap_reg_ppiten_pp2_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it15 assign process. --
    ap_reg_ppiten_pp2_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it15 <= ap_reg_ppiten_pp2_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it16 assign process. --
    ap_reg_ppiten_pp2_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it16 <= ap_reg_ppiten_pp2_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it17 assign process. --
    ap_reg_ppiten_pp2_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it17 <= ap_reg_ppiten_pp2_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it18 assign process. --
    ap_reg_ppiten_pp2_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it18 <= ap_reg_ppiten_pp2_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it19 assign process. --
    ap_reg_ppiten_pp2_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it19 <= ap_reg_ppiten_pp2_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it20 assign process. --
    ap_reg_ppiten_pp2_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it20 <= ap_reg_ppiten_pp2_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it21 assign process. --
    ap_reg_ppiten_pp2_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it21 <= ap_reg_ppiten_pp2_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it22 assign process. --
    ap_reg_ppiten_pp2_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it22 <= ap_reg_ppiten_pp2_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it23 assign process. --
    ap_reg_ppiten_pp2_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it23 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it23 <= ap_reg_ppiten_pp2_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it24 assign process. --
    ap_reg_ppiten_pp2_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it24 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it24 <= ap_reg_ppiten_pp2_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it25 assign process. --
    ap_reg_ppiten_pp2_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it25 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it25 <= ap_reg_ppiten_pp2_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it26 assign process. --
    ap_reg_ppiten_pp2_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it26 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it26 <= ap_reg_ppiten_pp2_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it27 assign process. --
    ap_reg_ppiten_pp2_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it27 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it27 <= ap_reg_ppiten_pp2_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it28 assign process. --
    ap_reg_ppiten_pp2_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it28 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it28 <= ap_reg_ppiten_pp2_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it29 assign process. --
    ap_reg_ppiten_pp2_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it29 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it29 <= ap_reg_ppiten_pp2_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it30 assign process. --
    ap_reg_ppiten_pp2_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it30 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it30 <= ap_reg_ppiten_pp2_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it31 assign process. --
    ap_reg_ppiten_pp2_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it31 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it31 <= ap_reg_ppiten_pp2_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it32 assign process. --
    ap_reg_ppiten_pp2_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it32 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it32 <= ap_reg_ppiten_pp2_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it33 assign process. --
    ap_reg_ppiten_pp2_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it33 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it33 <= ap_reg_ppiten_pp2_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it34 assign process. --
    ap_reg_ppiten_pp2_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it34 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it34 <= ap_reg_ppiten_pp2_it33;
                elsif ((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35))) then 
                    ap_reg_ppiten_pp2_it34 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it4 assign process. --
    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it5 assign process. --
    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it6 assign process. --
    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it7 assign process. --
    ap_reg_ppiten_pp2_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it7 <= ap_reg_ppiten_pp2_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it8 assign process. --
    ap_reg_ppiten_pp2_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it8 <= ap_reg_ppiten_pp2_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it9 assign process. --
    ap_reg_ppiten_pp2_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                    ap_reg_ppiten_pp2_it9 <= ap_reg_ppiten_pp2_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38) and not((ap_const_lv1_0 = exitcond_i_fu_1336_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_i_reg_1720) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg8_fsm_46))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg8_fsm_46) and not((ap_const_lv1_0 = exitcond_i_reg_1720))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- column_index_i_reg_849 assign process. --
    column_index_i_reg_849_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st104_fsm_32)) then 
                column_index_i_reg_849 <= ap_const_lv31_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
                column_index_i_reg_849 <= column_index_fu_1353_p2;
            end if; 
        end if;
    end process;

    -- i1_i_i_reg_755 assign process. --
    i1_i_i_reg_755_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_i_i_fu_1122_p2)))) then 
                i1_i_i_reg_755 <= ap_const_lv31_2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
                i1_i_i_reg_755 <= i_1_reg_1416;
            end if; 
        end if;
    end process;

    -- i1_i_reg_787 assign process. --
    i1_i_reg_787_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_i_reg_1522 = ap_const_lv1_0))) then 
                i1_i_reg_787 <= i_3_reg_1538;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                i1_i_reg_787 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- i2_i_reg_838 assign process. --
    i2_i_reg_838_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2)))) then 
                i2_i_reg_838 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond2_i_reg_1571) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23))) then 
                i2_i_reg_838 <= i_2_reg_1575;
            end if; 
        end if;
    end process;

    -- i4_i_reg_870 assign process. --
    i4_i_reg_870_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_31_i_reg_1646))) then 
                i4_i_reg_870 <= i_5_reg_1661;
            elsif ((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35))) then 
                i4_i_reg_870 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- i8_i_reg_934 assign process. --
    i8_i_reg_934_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2)))) then 
                i8_i_reg_934 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_i_reg_1720) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38))) then 
                i8_i_reg_934 <= i_4_reg_1724;
            end if; 
        end if;
    end process;

    -- i_i_i_reg_743 assign process. --
    i_i_i_reg_743_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_i_i_reg_743 <= i_fu_1133_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_748))) then 
                i_i_i_reg_743 <= ap_const_lv8_2;
            end if; 
        end if;
    end process;

    -- reg_1021 assign process. --
    reg_1021_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                reg_1021 <= weight_rom_q0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                reg_1021 <= weight_rom_q1;
            end if; 
        end if;
    end process;

    -- reg_1028 assign process. --
    reg_1028_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5))) then 
                reg_1028 <= weight_rom_q1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5)))) then 
                reg_1028 <= weight_rom_q0;
            end if; 
        end if;
    end process;

    -- reg_1060 assign process. --
    reg_1060_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_24) and (ap_const_lv1_0 = exitcond2_i_reg_1571)))) then 
                reg_1060 <= acc_return_q0;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it23)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_39) and (ap_const_lv1_0 = exitcond_i_reg_1720)))) then 
                reg_1060 <= acc_return_q1;
            end if; 
        end if;
    end process;

    -- reg_1072 assign process. --
    reg_1072_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26)) or ((ap_const_lv1_0 = exitcond_i_reg_1720) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_41)))) then 
                reg_1072 <= acc_weight_return_q1;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26)) or ((ap_const_lv1_0 = exitcond2_i_reg_1571) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_25)))) then 
                reg_1072 <= acc_weight_return_q0;
            end if; 
        end if;
    end process;

    -- reg_1084 assign process. --
    reg_1084_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = exitcond2_i_reg_1571) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_25)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28)))) then 
                reg_1084 <= acc_weight_returnSquare_q0;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28)) or ((ap_const_lv1_0 = exitcond_i_reg_1720) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40)))) then 
                reg_1084 <= acc_weight_returnSquare_q1;
            end if; 
        end if;
    end process;

    -- shift_reg_load1_i_fu_224 assign process. --
    shift_reg_load1_i_fu_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and (ap_const_lv1_0 = tmp_31_i_reg_1646) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then 
                shift_reg_load1_i_fu_224 <= tmp_54_i_fu_1287_p1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st104_fsm_32)) then 
                shift_reg_load1_i_fu_224 <= tmp_4_i_reg_766;
            end if; 
        end if;
    end process;

    -- tmp_1_reg_812 assign process. --
    tmp_1_reg_812_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2)))) then 
                tmp_1_reg_812 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_26))) then 
                tmp_1_reg_812 <= reg_1104;
            end if; 
        end if;
    end process;

    -- tmp_2_reg_825 assign process. --
    tmp_2_reg_825_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2)))) then 
                tmp_2_reg_825 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_25) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1))) then 
                tmp_2_reg_825 <= reg_1098;
            end if; 
        end if;
    end process;

    -- tmp_30_i_reg_861 assign process. --
    tmp_30_i_reg_861_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_31_i_reg_1646))) then 
                tmp_30_i_reg_861 <= tmp_30_i_shift_reg_load_i_reg_1650;
            elsif ((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35))) then 
                tmp_30_i_reg_861 <= tmp_28_i_fu_1261_p1;
            end if; 
        end if;
    end process;

    -- tmp_3_reg_921 assign process. --
    tmp_3_reg_921_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2)))) then 
                tmp_3_reg_921 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1))) then 
                tmp_3_reg_921 <= reg_1098;
            end if; 
        end if;
    end process;

    -- tmp_5_i_reg_778 assign process. --
    tmp_5_i_reg_778_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_i_reg_1522 = ap_const_lv1_0))) then 
                tmp_5_i_reg_778 <= tmp_5_i_tmp_4_i_reg_1526;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0)))) then 
                tmp_5_i_reg_778 <= tmp_i_fu_1159_p1;
            end if; 
        end if;
    end process;

    -- tmp_5_reg_908 assign process. --
    tmp_5_reg_908_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2)))) then 
                tmp_5_reg_908 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_41) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1))) then 
                tmp_5_reg_908 <= reg_1104;
            end if; 
        end if;
    end process;

    -- tmp_7_reg_895 assign process. --
    tmp_7_reg_895_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2)))) then 
                tmp_7_reg_895 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_42))) then 
                tmp_7_reg_895 <= reg_1110;
            end if; 
        end if;
    end process;

    -- tmp_8_reg_882 assign process. --
    tmp_8_reg_882_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2)))) then 
                tmp_8_reg_882 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_42))) then 
                tmp_8_reg_882 <= grp_fu_946_p2;
            end if; 
        end if;
    end process;

    -- tmp_9_reg_799 assign process. --
    tmp_9_reg_799_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2)))) then 
                tmp_9_reg_799 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_26))) then 
                tmp_9_reg_799 <= grp_fu_946_p2;
            end if; 
        end if;
    end process;

    -- tmp_i_i_reg_731 assign process. --
    tmp_i_i_reg_731_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                tmp_i_i_reg_731 <= reg_1014;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_748))) then 
                tmp_i_i_reg_731 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22))) then
                acc_return_addr_7_reg_1553 <= tmp_17_i_fu_1213_p1(3 - 1 downto 0);
                acc_weight_returnSquare_addr_7_reg_1559 <= tmp_17_i_fu_1213_p1(3 - 1 downto 0);
                acc_weight_return_addr_7_reg_1565 <= tmp_17_i_fu_1213_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22))) then
                acc_return_addr_9_reg_1676 <= tmp_57_i_fu_1318_p1(3 - 1 downto 0);
                acc_weight_returnA_returnB_add_6_reg_1694 <= tmp_57_i_fu_1318_p1(3 - 1 downto 0);
                acc_weight_returnSquare_addr_9_reg_1682 <= tmp_57_i_fu_1318_p1(3 - 1 downto 0);
                acc_weight_return_addr_9_reg_1688 <= tmp_57_i_fu_1318_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21)) then
                ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it24 <= acc_return_addr_7_reg_1553;
                ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it25 <= ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it24;
                ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it26 <= ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it25;
                ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it27 <= ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it26;
                ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it28 <= ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it27;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it24 <= acc_weight_returnSquare_addr_7_reg_1559;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it25 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it24;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it26 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it25;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it27 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it26;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it28 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it27;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it29 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it28;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it30 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it29;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it31 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it30;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it32 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it31;
                ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it33 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it32;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it24 <= acc_weight_return_addr_7_reg_1565;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it25 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it24;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it26 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it25;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it27 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it26;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it28 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it27;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it29 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it28;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it30 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it29;
                ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it31 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it30;
                ap_reg_ppstg_i1_i_reg_787_pp0_it1 <= i1_i_reg_787;
                ap_reg_ppstg_i1_i_reg_787_pp0_it2 <= ap_reg_ppstg_i1_i_reg_787_pp0_it1;
                ap_reg_ppstg_i1_i_reg_787_pp0_it3 <= ap_reg_ppstg_i1_i_reg_787_pp0_it2;
                ap_reg_ppstg_i1_i_reg_787_pp0_it4 <= ap_reg_ppstg_i1_i_reg_787_pp0_it3;
                ap_reg_ppstg_i1_i_reg_787_pp0_it5 <= ap_reg_ppstg_i1_i_reg_787_pp0_it4;
                ap_reg_ppstg_reg_1028_pp0_it10 <= ap_reg_ppstg_reg_1028_pp0_it9;
                ap_reg_ppstg_reg_1028_pp0_it11 <= ap_reg_ppstg_reg_1028_pp0_it10;
                ap_reg_ppstg_reg_1028_pp0_it12 <= ap_reg_ppstg_reg_1028_pp0_it11;
                ap_reg_ppstg_reg_1028_pp0_it13 <= ap_reg_ppstg_reg_1028_pp0_it12;
                ap_reg_ppstg_reg_1028_pp0_it14 <= ap_reg_ppstg_reg_1028_pp0_it13;
                ap_reg_ppstg_reg_1028_pp0_it15 <= ap_reg_ppstg_reg_1028_pp0_it14;
                ap_reg_ppstg_reg_1028_pp0_it16 <= ap_reg_ppstg_reg_1028_pp0_it15;
                ap_reg_ppstg_reg_1028_pp0_it17 <= ap_reg_ppstg_reg_1028_pp0_it16;
                ap_reg_ppstg_reg_1028_pp0_it18 <= ap_reg_ppstg_reg_1028_pp0_it17;
                ap_reg_ppstg_reg_1028_pp0_it19 <= ap_reg_ppstg_reg_1028_pp0_it18;
                ap_reg_ppstg_reg_1028_pp0_it20 <= ap_reg_ppstg_reg_1028_pp0_it19;
                ap_reg_ppstg_reg_1028_pp0_it21 <= ap_reg_ppstg_reg_1028_pp0_it20;
                ap_reg_ppstg_reg_1028_pp0_it22 <= ap_reg_ppstg_reg_1028_pp0_it21;
                ap_reg_ppstg_reg_1028_pp0_it23 <= ap_reg_ppstg_reg_1028_pp0_it22;
                ap_reg_ppstg_reg_1028_pp0_it24 <= ap_reg_ppstg_reg_1028_pp0_it23;
                ap_reg_ppstg_reg_1028_pp0_it25 <= ap_reg_ppstg_reg_1028_pp0_it24;
                ap_reg_ppstg_reg_1028_pp0_it26 <= ap_reg_ppstg_reg_1028_pp0_it25;
                ap_reg_ppstg_reg_1028_pp0_it7 <= reg_1028;
                ap_reg_ppstg_reg_1028_pp0_it8 <= ap_reg_ppstg_reg_1028_pp0_it7;
                ap_reg_ppstg_reg_1028_pp0_it9 <= ap_reg_ppstg_reg_1028_pp0_it8;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it1 <= tmp_6_i_reg_1522;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it2 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it1;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it23 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it23;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it3 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it2;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it31 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it32 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it31;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it33 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it32;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it4 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it3;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it4;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7;
                ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9 <= ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8;
                tmp_6_i_reg_1522 <= tmp_6_i_fu_1168_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36)) then
                ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it24 <= acc_return_addr_9_reg_1676;
                ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it25 <= ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it24;
                ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it26 <= ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it25;
                ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it27 <= ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it26;
                ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it28 <= ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it27;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it24 <= acc_weight_returnA_returnB_add_6_reg_1694;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it25 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it24;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it26 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it25;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it27 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it26;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it28 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it27;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it29 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it28;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it30 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it29;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it31 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it30;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it32 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it31;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it33 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it32;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it34 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it33;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it24 <= acc_weight_returnSquare_addr_9_reg_1682;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it25 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it24;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it26 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it25;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it27 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it26;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it28 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it27;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it29 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it28;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it30 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it29;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it31 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it30;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it32 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it31;
                ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it33 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it32;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it24 <= acc_weight_return_addr_9_reg_1688;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it25 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it24;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it26 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it25;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it27 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it26;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it28 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it27;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it29 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it28;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it30 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it29;
                ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it31 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it30;
                ap_reg_ppstg_i4_i_reg_870_pp2_it1 <= i4_i_reg_870;
                ap_reg_ppstg_i4_i_reg_870_pp2_it2 <= ap_reg_ppstg_i4_i_reg_870_pp2_it1;
                ap_reg_ppstg_i4_i_reg_870_pp2_it3 <= ap_reg_ppstg_i4_i_reg_870_pp2_it2;
                ap_reg_ppstg_i4_i_reg_870_pp2_it4 <= ap_reg_ppstg_i4_i_reg_870_pp2_it3;
                ap_reg_ppstg_i4_i_reg_870_pp2_it5 <= ap_reg_ppstg_i4_i_reg_870_pp2_it4;
                ap_reg_ppstg_reg_1028_pp2_it10 <= ap_reg_ppstg_reg_1028_pp2_it9;
                ap_reg_ppstg_reg_1028_pp2_it11 <= ap_reg_ppstg_reg_1028_pp2_it10;
                ap_reg_ppstg_reg_1028_pp2_it12 <= ap_reg_ppstg_reg_1028_pp2_it11;
                ap_reg_ppstg_reg_1028_pp2_it13 <= ap_reg_ppstg_reg_1028_pp2_it12;
                ap_reg_ppstg_reg_1028_pp2_it14 <= ap_reg_ppstg_reg_1028_pp2_it13;
                ap_reg_ppstg_reg_1028_pp2_it15 <= ap_reg_ppstg_reg_1028_pp2_it14;
                ap_reg_ppstg_reg_1028_pp2_it16 <= ap_reg_ppstg_reg_1028_pp2_it15;
                ap_reg_ppstg_reg_1028_pp2_it17 <= ap_reg_ppstg_reg_1028_pp2_it16;
                ap_reg_ppstg_reg_1028_pp2_it18 <= ap_reg_ppstg_reg_1028_pp2_it17;
                ap_reg_ppstg_reg_1028_pp2_it19 <= ap_reg_ppstg_reg_1028_pp2_it18;
                ap_reg_ppstg_reg_1028_pp2_it20 <= ap_reg_ppstg_reg_1028_pp2_it19;
                ap_reg_ppstg_reg_1028_pp2_it21 <= ap_reg_ppstg_reg_1028_pp2_it20;
                ap_reg_ppstg_reg_1028_pp2_it22 <= ap_reg_ppstg_reg_1028_pp2_it21;
                ap_reg_ppstg_reg_1028_pp2_it23 <= ap_reg_ppstg_reg_1028_pp2_it22;
                ap_reg_ppstg_reg_1028_pp2_it24 <= ap_reg_ppstg_reg_1028_pp2_it23;
                ap_reg_ppstg_reg_1028_pp2_it25 <= ap_reg_ppstg_reg_1028_pp2_it24;
                ap_reg_ppstg_reg_1028_pp2_it26 <= ap_reg_ppstg_reg_1028_pp2_it25;
                ap_reg_ppstg_reg_1028_pp2_it7 <= reg_1028;
                ap_reg_ppstg_reg_1028_pp2_it8 <= ap_reg_ppstg_reg_1028_pp2_it7;
                ap_reg_ppstg_reg_1028_pp2_it9 <= ap_reg_ppstg_reg_1028_pp2_it8;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it1 <= tmp_31_i_reg_1646;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it2 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it1;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it3 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it2;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it31 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it32 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it31;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it32;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it34 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it4 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it3;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it4;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7;
                ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9 <= ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8;
                tmp_31_i_reg_1646 <= tmp_31_i_fu_1265_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23)) then
                ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1 <= exitcond2_i_reg_1571;
                exitcond2_i_reg_1571 <= exitcond2_i_fu_1230_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38)) then
                ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1 <= exitcond_i_reg_1720;
                exitcond_i_reg_1720 <= exitcond_i_fu_1336_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it10 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it9;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it11 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it10;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it12 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it11;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it13 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it12;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it14 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it13;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it15 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it14;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it16 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it15;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it17 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it16;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it18 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it17;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it19 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it18;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it20 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it19;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it21 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it20;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it22 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it21;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it6 <= tmp_4_reg_1666;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it7 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it6;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it8 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it7;
                ap_reg_ppstg_tmp_4_reg_1666_pp2_it9 <= ap_reg_ppstg_tmp_4_reg_1666_pp2_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then
                ap_reg_ppstg_tmp_reg_1543_pp0_it10 <= ap_reg_ppstg_tmp_reg_1543_pp0_it9;
                ap_reg_ppstg_tmp_reg_1543_pp0_it11 <= ap_reg_ppstg_tmp_reg_1543_pp0_it10;
                ap_reg_ppstg_tmp_reg_1543_pp0_it12 <= ap_reg_ppstg_tmp_reg_1543_pp0_it11;
                ap_reg_ppstg_tmp_reg_1543_pp0_it13 <= ap_reg_ppstg_tmp_reg_1543_pp0_it12;
                ap_reg_ppstg_tmp_reg_1543_pp0_it14 <= ap_reg_ppstg_tmp_reg_1543_pp0_it13;
                ap_reg_ppstg_tmp_reg_1543_pp0_it15 <= ap_reg_ppstg_tmp_reg_1543_pp0_it14;
                ap_reg_ppstg_tmp_reg_1543_pp0_it16 <= ap_reg_ppstg_tmp_reg_1543_pp0_it15;
                ap_reg_ppstg_tmp_reg_1543_pp0_it17 <= ap_reg_ppstg_tmp_reg_1543_pp0_it16;
                ap_reg_ppstg_tmp_reg_1543_pp0_it18 <= ap_reg_ppstg_tmp_reg_1543_pp0_it17;
                ap_reg_ppstg_tmp_reg_1543_pp0_it19 <= ap_reg_ppstg_tmp_reg_1543_pp0_it18;
                ap_reg_ppstg_tmp_reg_1543_pp0_it20 <= ap_reg_ppstg_tmp_reg_1543_pp0_it19;
                ap_reg_ppstg_tmp_reg_1543_pp0_it21 <= ap_reg_ppstg_tmp_reg_1543_pp0_it20;
                ap_reg_ppstg_tmp_reg_1543_pp0_it22 <= ap_reg_ppstg_tmp_reg_1543_pp0_it21;
                ap_reg_ppstg_tmp_reg_1543_pp0_it23 <= ap_reg_ppstg_tmp_reg_1543_pp0_it22;
                ap_reg_ppstg_tmp_reg_1543_pp0_it6 <= tmp_reg_1543;
                ap_reg_ppstg_tmp_reg_1543_pp0_it7 <= ap_reg_ppstg_tmp_reg_1543_pp0_it6;
                ap_reg_ppstg_tmp_reg_1543_pp0_it8 <= ap_reg_ppstg_tmp_reg_1543_pp0_it7;
                ap_reg_ppstg_tmp_reg_1543_pp0_it9 <= ap_reg_ppstg_tmp_reg_1543_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_69_i_i_fu_1143_p2)))) then
                i_1_reg_1416 <= i_1_fu_1153_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23))) then
                i_2_reg_1575 <= i_2_fu_1236_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and (tmp_6_i_reg_1522 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)))) then
                i_3_reg_1538 <= i_3_fu_1192_p2;
                tmp_14_i_reg_1532 <= tmp_14_i_fu_1187_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38))) then
                i_4_reg_1724 <= i_4_fu_1342_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and (ap_const_lv1_0 = tmp_31_i_reg_1646) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)))) then
                i_5_reg_1661 <= i_5_fu_1292_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23))) then
                lnReturnA_load_reg_1705 <= lnReturnA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26)))) then
                reg_1014 <= grp_fu_961_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30)))) then
                reg_1036 <= grp_fu_946_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14)))) then
                reg_1045 <= grp_fu_975_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it23)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23)))) then
                reg_1050 <= grp_fu_979_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26)))) then
                reg_1067 <= grp_fu_967_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28)))) then
                reg_1079 <= grp_fu_961_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it33)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33)))) then
                reg_1091 <= grp_fu_950_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_24) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_39) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1)))) then
                reg_1098 <= grp_fu_946_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_25) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1)))) then
                reg_1104 <= grp_fu_946_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_41) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1)))) then
                reg_1110 <= grp_fu_946_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = exitcond_i_reg_1720) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_41)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29)))) then
                reg_1116 <= acc_weight_returnA_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and (ap_const_lv1_0 = exitcond2_i_fu_1230_p2))) then
                tmp_11_i_reg_1580(0) <= tmp_11_i_fu_1242_p1(0);
    tmp_11_i_reg_1580(1) <= tmp_11_i_fu_1242_p1(1);
    tmp_11_i_reg_1580(2) <= tmp_11_i_fu_1242_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0)))) then
                tmp_1_i_reg_1516 <= tmp_1_i_fu_1163_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = tmp_31_i_fu_1265_p2))) then
                tmp_30_i_shift_reg_load_i_reg_1650 <= tmp_30_i_shift_reg_load_i_fu_1279_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_i_reg_1522 = ap_const_lv1_0))) then
                tmp_4_i_reg_766 <= tmp_14_i_reg_1532;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5))) then
                tmp_4_reg_1666 <= tmp_4_fu_1303_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = tmp_6_i_fu_1168_p2))) then
                tmp_5_i_tmp_4_i_reg_1526 <= tmp_5_i_tmp_4_i_fu_1179_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26))) then
                tmp_66_i_reg_1710 <= grp_fu_971_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28))) then
                tmp_67_i_reg_1715 <= grp_fu_967_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38) and (ap_const_lv1_0 = exitcond_i_fu_1336_p2))) then
                tmp_i_22_reg_1729(0) <= tmp_i_22_fu_1348_p1(0);
    tmp_i_22_reg_1729(1) <= tmp_i_22_fu_1348_p1(1);
    tmp_i_22_reg_1729(2) <= tmp_i_22_fu_1348_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5))) then
                tmp_reg_1543 <= tmp_fu_1198_p1;
            end if;
        end if;
    end process;
    acc_return_addr_reg_1421(2 downto 0) <= "000";
    acc_weight_returnSquare_addr_reg_1426(2 downto 0) <= "000";
    acc_weight_return_addr_reg_1431(2 downto 0) <= "000";
    acc_return_addr_1_reg_1436(2 downto 0) <= "001";
    acc_weight_returnSquare_addr_1_reg_1441(2 downto 0) <= "001";
    acc_weight_return_addr_1_reg_1446(2 downto 0) <= "001";
    acc_return_addr_2_reg_1451(2 downto 0) <= "010";
    acc_weight_returnSquare_addr_2_reg_1456(2 downto 0) <= "010";
    acc_weight_return_addr_2_reg_1461(2 downto 0) <= "010";
    acc_return_addr_3_reg_1466(2 downto 0) <= "011";
    acc_weight_returnSquare_addr_3_reg_1471(2 downto 0) <= "011";
    acc_weight_return_addr_3_reg_1476(2 downto 0) <= "011";
    acc_return_addr_4_reg_1481(2 downto 0) <= "100";
    acc_weight_returnSquare_addr_4_reg_1486(2 downto 0) <= "100";
    acc_weight_return_addr_4_reg_1491(2 downto 0) <= "100";
    acc_return_addr_5_reg_1496(2 downto 0) <= "101";
    acc_weight_returnSquare_addr_5_reg_1501(2 downto 0) <= "101";
    acc_weight_return_addr_5_reg_1506(2 downto 0) <= "101";
    tmp_11_i_reg_1580(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    acc_weight_returnA_returnB_add_reg_1608(2 downto 0) <= "000";
    acc_weight_returnA_returnB_add_1_reg_1613(2 downto 0) <= "001";
    acc_weight_returnA_returnB_add_2_reg_1618(2 downto 0) <= "010";
    acc_weight_returnA_returnB_add_3_reg_1623(2 downto 0) <= "011";
    acc_weight_returnA_returnB_add_4_reg_1628(2 downto 0) <= "100";
    acc_weight_returnA_returnB_add_5_reg_1633(2 downto 0) <= "101";
    tmp_i_22_reg_1729(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, in_indices_TVALID, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it33, ap_reg_ppiten_pp0_it34, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it33, ap_reg_ppiten_pp2_it34, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, ap_sig_cseq_ST_pp1_stg3_fsm_26, ap_sig_bdd_748, tmp_69_i_i_fu_1143_p2, tmp_6_i_fu_1168_p2, exitcond2_i_fu_1230_p2, tmp_31_i_fu_1265_p2, exitcond_i_fu_1336_p2, ap_sig_cseq_ST_pp3_stg4_fsm_42, ap_sig_bdd_1222, exitcond_i_i_fu_1122_p2, tmp_26_i_fu_1256_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_748)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond_i_i_fu_1122_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st8_fsm_7 => 
                if ((ap_const_lv1_0 = tmp_69_i_i_fu_1143_p2)) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                if (not((in_indices_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_pp0_stg0_fsm_21 => 
                if ((not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it34) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it33)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_22;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_6_i_fu_1168_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_23;
                end if;
            when ap_ST_pp0_stg1_fsm_22 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_22;
                end if;
            when ap_ST_pp1_stg0_fsm_23 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond2_i_fu_1230_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st104_fsm_32;
                end if;
            when ap_ST_pp1_stg1_fsm_24 => 
                ap_NS_fsm <= ap_ST_pp1_stg2_fsm_25;
            when ap_ST_pp1_stg2_fsm_25 => 
                ap_NS_fsm <= ap_ST_pp1_stg3_fsm_26;
            when ap_ST_pp1_stg3_fsm_26 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_26) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg4_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st104_fsm_32;
                end if;
            when ap_ST_pp1_stg4_fsm_27 => 
                ap_NS_fsm <= ap_ST_pp1_stg5_fsm_28;
            when ap_ST_pp1_stg5_fsm_28 => 
                ap_NS_fsm <= ap_ST_pp1_stg6_fsm_29;
            when ap_ST_pp1_stg6_fsm_29 => 
                ap_NS_fsm <= ap_ST_pp1_stg7_fsm_30;
            when ap_ST_pp1_stg7_fsm_30 => 
                ap_NS_fsm <= ap_ST_pp1_stg8_fsm_31;
            when ap_ST_pp1_stg8_fsm_31 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_23;
            when ap_ST_st104_fsm_32 => 
                ap_NS_fsm <= ap_ST_st105_fsm_33;
            when ap_ST_st105_fsm_33 => 
                if ((ap_const_lv1_0 = tmp_26_i_fu_1256_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st106_fsm_34;
                end if;
            when ap_ST_st106_fsm_34 => 
                ap_NS_fsm <= ap_ST_st107_fsm_35;
            when ap_ST_st107_fsm_35 => 
                if (not((in_indices_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_st107_fsm_35;
                end if;
            when ap_ST_pp2_stg0_fsm_36 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_const_lv1_0 = tmp_31_i_fu_1265_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg1_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_38;
                end if;
            when ap_ST_pp2_stg1_fsm_37 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it33)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_36;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it33)))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_38;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg1_fsm_37;
                end if;
            when ap_ST_pp3_stg0_fsm_38 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond_i_fu_1336_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg1_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st192_fsm_47;
                end if;
            when ap_ST_pp3_stg1_fsm_39 => 
                ap_NS_fsm <= ap_ST_pp3_stg2_fsm_40;
            when ap_ST_pp3_stg2_fsm_40 => 
                ap_NS_fsm <= ap_ST_pp3_stg3_fsm_41;
            when ap_ST_pp3_stg3_fsm_41 => 
                ap_NS_fsm <= ap_ST_pp3_stg4_fsm_42;
            when ap_ST_pp3_stg4_fsm_42 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_42) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it0))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg5_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st192_fsm_47;
                end if;
            when ap_ST_pp3_stg5_fsm_43 => 
                ap_NS_fsm <= ap_ST_pp3_stg6_fsm_44;
            when ap_ST_pp3_stg6_fsm_44 => 
                ap_NS_fsm <= ap_ST_pp3_stg7_fsm_45;
            when ap_ST_pp3_stg7_fsm_45 => 
                ap_NS_fsm <= ap_ST_pp3_stg8_fsm_46;
            when ap_ST_pp3_stg8_fsm_46 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_38;
            when ap_ST_st192_fsm_47 => 
                if (not(ap_sig_bdd_1222)) then
                    ap_NS_fsm <= ap_ST_st105_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st192_fsm_47;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    NUMBER_OF_DAYS_out_din <= NUMBER_OF_DAYS;

    -- NUMBER_OF_DAYS_out_write assign process. --
    NUMBER_OF_DAYS_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_748)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_748))) then 
            NUMBER_OF_DAYS_out_write <= ap_const_logic_1;
        else 
            NUMBER_OF_DAYS_out_write <= ap_const_logic_0;
        end if; 
    end process;

    NUMBER_OF_INDICES_out_din <= NUMBER_OF_INDICES;

    -- NUMBER_OF_INDICES_out_write assign process. --
    NUMBER_OF_INDICES_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_748)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_748))) then 
            NUMBER_OF_INDICES_out_write <= ap_const_logic_1;
        else 
            NUMBER_OF_INDICES_out_write <= ap_const_logic_0;
        end if; 
    end process;

    acc_return_addr_1_gep_fu_420_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_return_addr_2_gep_fu_457_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_return_addr_3_gep_fu_481_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_return_addr_4_gep_fu_505_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_return_addr_5_gep_fu_529_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_return_addr_gep_fu_381_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_return_address0 assign process. --
    acc_return_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it29, ap_reg_ppiten_pp2_it23, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st8_fsm_7, acc_return_addr_1_reg_1436, ap_sig_cseq_ST_st20_fsm_19, acc_return_addr_3_reg_1466, acc_return_addr_5_reg_1496, ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it28, ap_sig_cseq_ST_pp1_stg0_fsm_23, tmp_11_i_fu_1242_p1, ap_sig_cseq_ST_st107_fsm_35, acc_return_addr_9_reg_1676, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) then 
            acc_return_address0 <= acc_return_addr_5_reg_1496;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34)) then 
            acc_return_address0 <= acc_return_addr_3_reg_1466;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33)) then 
            acc_return_address0 <= acc_return_addr_1_reg_1436;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it29))) then 
            acc_return_address0 <= ap_reg_ppstg_acc_return_addr_7_reg_1553_pp0_it28;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            acc_return_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            acc_return_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            acc_return_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it23) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            acc_return_address0 <= acc_return_addr_9_reg_1676;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23))) then 
            acc_return_address0 <= tmp_11_i_fu_1242_p1(3 - 1 downto 0);
        else 
            acc_return_address0 <= "XXX";
        end if; 
    end process;


    -- acc_return_address1 assign process. --
    acc_return_address1_assign_proc : process(ap_reg_ppiten_pp0_it23, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st8_fsm_7, acc_return_addr_reg_1421, acc_return_addr_2_reg_1451, ap_sig_cseq_ST_st20_fsm_19, acc_return_addr_4_reg_1481, acc_return_addr_7_reg_1553, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it28, ap_sig_cseq_ST_pp3_stg0_fsm_38, tmp_i_22_fu_1348_p1, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it29))) then 
            acc_return_address1 <= ap_reg_ppstg_acc_return_addr_9_reg_1676_pp2_it28;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) then 
            acc_return_address1 <= acc_return_addr_4_reg_1481;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34)) then 
            acc_return_address1 <= acc_return_addr_2_reg_1451;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33)) then 
            acc_return_address1 <= acc_return_addr_reg_1421;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            acc_return_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            acc_return_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            acc_return_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38))) then 
            acc_return_address1 <= tmp_i_22_fu_1348_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it23) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            acc_return_address1 <= acc_return_addr_7_reg_1553;
        else 
            acc_return_address1 <= "XXX";
        end if; 
    end process;


    -- acc_return_ce0 assign process. --
    acc_return_ce0_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it29, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it23, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_pp1_stg0_fsm_23, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23)) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it29)) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it23) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415))))) then 
            acc_return_ce0 <= ap_const_logic_1;
        else 
            acc_return_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_return_ce1 assign process. --
    acc_return_ce1_assign_proc : process(in_indices_TVALID, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it23, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_pp3_stg0_fsm_38, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38)) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it23) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it29)))) then 
            acc_return_ce1 <= ap_const_logic_1;
        else 
            acc_return_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_return_d0 assign process. --
    acc_return_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it29, ap_sig_cseq_ST_st21_fsm_20, reg_1036, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it29))) then 
            acc_return_d0 <= reg_1036;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_return_d0 <= ap_const_lv32_0;
        else 
            acc_return_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_return_d1 assign process. --
    acc_return_d1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_st21_fsm_20, reg_1036, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it29))) then 
            acc_return_d1 <= reg_1036;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_return_d1 <= ap_const_lv32_0;
        else 
            acc_return_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_return_we0 assign process. --
    acc_return_we0_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it29, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28, ap_sig_cseq_ST_st8_fsm_7, tmp_69_i_i_fu_1143_p2, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_69_i_i_fu_1143_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it29) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and not((ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_return_we0 <= ap_const_logic_1;
        else 
            acc_return_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_return_we1 assign process. --
    acc_return_we1_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28, ap_sig_cseq_ST_st8_fsm_7, tmp_69_i_i_fu_1143_p2, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_69_i_i_fu_1143_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and not((ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28)))) then 
            acc_return_we1 <= ap_const_logic_1;
        else 
            acc_return_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_returnB_add_1_gep_fu_619_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_2_gep_fu_626_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_3_gep_fu_633_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_4_gep_fu_640_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_5_gep_fu_647_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_gep_fu_612_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_returnB_address0 assign process. --
    acc_weight_returnA_returnB_address0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it29, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_40, acc_weight_returnA_returnB_add_reg_1608, acc_weight_returnA_returnB_add_2_reg_1618, acc_weight_returnA_returnB_add_4_reg_1628, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it28, tmp_i_22_reg_1729, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_4_reg_1628;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_2_reg_1618;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_reg_1608;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40))) then 
            acc_weight_returnA_returnB_address0 <= tmp_i_22_reg_1729(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it29))) then 
            acc_weight_returnA_returnB_address0 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it28;
        else 
            acc_weight_returnA_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_address1 assign process. --
    acc_weight_returnA_returnB_address1_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp2_stg1_fsm_37, acc_weight_returnA_returnB_add_1_reg_1613, acc_weight_returnA_returnB_add_3_reg_1623, acc_weight_returnA_returnB_add_5_reg_1633, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it34, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            acc_weight_returnA_returnB_address1 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1694_pp2_it34;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_5_reg_1633;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_3_reg_1623;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_1_reg_1613;
        else 
            acc_weight_returnA_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce0 assign process. --
    acc_weight_returnA_returnB_ce0_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it29, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_40, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40)) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it29)))) then 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce1 assign process. --
    acc_weight_returnA_returnB_ce1_assign_proc : process(in_indices_TVALID, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415))))) then 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnA_returnB_d1 assign process. --
    acc_weight_returnA_returnB_d1_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp2_stg1_fsm_37, reg_1091, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            acc_weight_returnA_returnB_d1 <= reg_1091;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_weight_returnA_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we0 assign process. --
    acc_weight_returnA_returnB_we0_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and not((ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we1 assign process. --
    acc_weight_returnA_returnB_we1_assign_proc : process(in_indices_TVALID, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it34, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and not((ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it34)))) then 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquare_addr_1_gep_fu_432_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquare_addr_2_gep_fu_465_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquare_addr_3_gep_fu_489_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquare_addr_4_gep_fu_513_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquare_addr_5_gep_fu_537_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquare_addr_gep_fu_394_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquare_address0 assign process. --
    acc_weight_returnSquare_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it34, ap_reg_ppiten_pp2_it28, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_pp1_stg1_fsm_24, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st8_fsm_7, acc_weight_returnSquare_addr_1_reg_1441, ap_sig_cseq_ST_st20_fsm_19, acc_weight_returnSquare_addr_3_reg_1471, acc_weight_returnSquare_addr_5_reg_1501, ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it33, tmp_11_i_reg_1580, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it28, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) then 
            acc_weight_returnSquare_address0 <= acc_weight_returnSquare_addr_5_reg_1501;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34)) then 
            acc_weight_returnSquare_address0 <= acc_weight_returnSquare_addr_3_reg_1471;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33)) then 
            acc_weight_returnSquare_address0 <= acc_weight_returnSquare_addr_1_reg_1441;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it34))) then 
            acc_weight_returnSquare_address0 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it33;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            acc_weight_returnSquare_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            acc_weight_returnSquare_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            acc_weight_returnSquare_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it28) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            acc_weight_returnSquare_address0 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it28;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_24) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            acc_weight_returnSquare_address0 <= tmp_11_i_reg_1580(3 - 1 downto 0);
        else 
            acc_weight_returnSquare_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquare_address1 assign process. --
    acc_weight_returnSquare_address1_assign_proc : process(ap_reg_ppiten_pp0_it28, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_pp3_stg1_fsm_39, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st8_fsm_7, acc_weight_returnSquare_addr_reg_1426, ap_sig_cseq_ST_st20_fsm_19, acc_weight_returnSquare_addr_2_reg_1456, acc_weight_returnSquare_addr_4_reg_1486, ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it28, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it33, tmp_i_22_reg_1729, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it34))) then 
            acc_weight_returnSquare_address1 <= ap_reg_ppstg_acc_weight_returnSquare_addr_9_reg_1682_pp2_it33;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) then 
            acc_weight_returnSquare_address1 <= acc_weight_returnSquare_addr_4_reg_1486;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34)) then 
            acc_weight_returnSquare_address1 <= acc_weight_returnSquare_addr_2_reg_1456;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33)) then 
            acc_weight_returnSquare_address1 <= acc_weight_returnSquare_addr_reg_1426;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            acc_weight_returnSquare_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            acc_weight_returnSquare_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            acc_weight_returnSquare_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_39) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then 
            acc_weight_returnSquare_address1 <= tmp_i_22_reg_1729(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it28) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            acc_weight_returnSquare_address1 <= ap_reg_ppstg_acc_weight_returnSquare_addr_7_reg_1559_pp0_it28;
        else 
            acc_weight_returnSquare_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquare_ce0 assign process. --
    acc_weight_returnSquare_ce0_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it34, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it28, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_pp1_stg1_fsm_24, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_24) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it34)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it28) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415))))) then 
            acc_weight_returnSquare_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquare_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquare_ce1 assign process. --
    acc_weight_returnSquare_ce1_assign_proc : process(in_indices_TVALID, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it28, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_pp3_stg1_fsm_39, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_39) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it28) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it34)))) then 
            acc_weight_returnSquare_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquare_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquare_d0 assign process. --
    acc_weight_returnSquare_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it34, ap_sig_cseq_ST_st21_fsm_20, reg_1091, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it34))) then 
            acc_weight_returnSquare_d0 <= reg_1091;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_weight_returnSquare_d0 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquare_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquare_d1 assign process. --
    acc_weight_returnSquare_d1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_st21_fsm_20, reg_1091, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it34))) then 
            acc_weight_returnSquare_d1 <= reg_1091;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_weight_returnSquare_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquare_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquare_we0 assign process. --
    acc_weight_returnSquare_we0_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it34, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it33, ap_sig_cseq_ST_st8_fsm_7, tmp_69_i_i_fu_1143_p2, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_69_i_i_fu_1143_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and not((ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it34) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it33)))) then 
            acc_weight_returnSquare_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquare_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquare_we1 assign process. --
    acc_weight_returnSquare_we1_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33, ap_sig_cseq_ST_st8_fsm_7, tmp_69_i_i_fu_1143_p2, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_69_i_i_fu_1143_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and not((ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33)))) then 
            acc_weight_returnSquare_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquare_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_return_addr_1_gep_fu_444_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_return_addr_2_gep_fu_473_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_return_addr_3_gep_fu_497_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_return_addr_4_gep_fu_521_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_return_addr_5_gep_fu_545_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_return_addr_gep_fu_407_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_return_address0 assign process. --
    acc_weight_return_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it26, ap_reg_ppiten_pp2_it31, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_pp1_stg1_fsm_24, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st8_fsm_7, acc_weight_return_addr_1_reg_1446, ap_sig_cseq_ST_st20_fsm_19, acc_weight_return_addr_3_reg_1476, acc_weight_return_addr_5_reg_1506, ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it25, tmp_11_i_reg_1580, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it31, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it31) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            acc_weight_return_address0 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it31;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) then 
            acc_weight_return_address0 <= acc_weight_return_addr_5_reg_1506;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34)) then 
            acc_weight_return_address0 <= acc_weight_return_addr_3_reg_1476;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33)) then 
            acc_weight_return_address0 <= acc_weight_return_addr_1_reg_1446;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            acc_weight_return_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            acc_weight_return_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            acc_weight_return_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_24) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            acc_weight_return_address0 <= tmp_11_i_reg_1580(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it26))) then 
            acc_weight_return_address0 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it25;
        else 
            acc_weight_return_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_return_address1 assign process. --
    acc_weight_return_address1_assign_proc : process(ap_reg_ppiten_pp0_it31, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it26, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_40, ap_sig_cseq_ST_st8_fsm_7, acc_weight_return_addr_reg_1431, ap_sig_cseq_ST_st20_fsm_19, acc_weight_return_addr_2_reg_1461, acc_weight_return_addr_4_reg_1491, ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it31, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it25, tmp_i_22_reg_1729, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) then 
            acc_weight_return_address1 <= acc_weight_return_addr_4_reg_1491;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34)) then 
            acc_weight_return_address1 <= acc_weight_return_addr_2_reg_1461;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33)) then 
            acc_weight_return_address1 <= acc_weight_return_addr_reg_1431;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it31) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            acc_weight_return_address1 <= ap_reg_ppstg_acc_weight_return_addr_7_reg_1565_pp0_it31;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            acc_weight_return_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            acc_weight_return_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            acc_weight_return_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40))) then 
            acc_weight_return_address1 <= tmp_i_22_reg_1729(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it26))) then 
            acc_weight_return_address1 <= ap_reg_ppstg_acc_weight_return_addr_9_reg_1688_pp2_it25;
        else 
            acc_weight_return_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_return_ce0 assign process. --
    acc_weight_return_ce0_assign_proc : process(in_indices_TVALID, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it26, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it31, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_pp1_stg1_fsm_24, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_24) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it31) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415))))) then 
            acc_weight_return_ce0 <= ap_const_logic_1;
        else 
            acc_weight_return_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_return_ce1 assign process. --
    acc_weight_return_ce1_assign_proc : process(in_indices_TVALID, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it31, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it26, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_st21_fsm_20, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_40, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40)) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it31) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it26)))) then 
            acc_weight_return_ce1 <= ap_const_logic_1;
        else 
            acc_weight_return_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_return_d0 assign process. --
    acc_weight_return_d0_assign_proc : process(ap_reg_ppiten_pp2_it31, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_cseq_ST_st21_fsm_20, reg_1036, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it31) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            acc_weight_return_d0 <= reg_1036;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_weight_return_d0 <= ap_const_lv32_0;
        else 
            acc_weight_return_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_return_d1 assign process. --
    acc_weight_return_d1_assign_proc : process(ap_reg_ppiten_pp0_it31, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_st21_fsm_20, reg_1036, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it31) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            acc_weight_return_d1 <= reg_1036;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34))) then 
            acc_weight_return_d1 <= ap_const_lv32_0;
        else 
            acc_weight_return_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_return_we0 assign process. --
    acc_weight_return_we0_assign_proc : process(in_indices_TVALID, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it31, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st8_fsm_7, tmp_69_i_i_fu_1143_p2, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st107_fsm_35, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it31, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_69_i_i_fu_1143_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and not((ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it31) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it31)))) then 
            acc_weight_return_we0 <= ap_const_logic_1;
        else 
            acc_weight_return_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_return_we1 assign process. --
    acc_weight_return_we1_assign_proc : process(in_indices_TVALID, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it31, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st8_fsm_7, tmp_69_i_i_fu_1143_p2, ap_sig_cseq_ST_st20_fsm_19, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it31, ap_sig_cseq_ST_st107_fsm_35, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2, ap_sig_cseq_ST_st106_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_69_i_i_fu_1143_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and not((ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_34) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it31) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it31)))) then 
            acc_weight_return_we1 <= ap_const_logic_1;
        else 
            acc_weight_return_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and (ap_const_lv1_0 = tmp_26_i_fu_1256_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st105_fsm_33, tmp_26_i_fu_1256_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_33) and (ap_const_lv1_0 = tmp_26_i_fu_1256_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1001 assign process. --
    ap_sig_bdd_1001_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1001 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_1170 assign process. --
    ap_sig_bdd_1170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1170 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_1194 assign process. --
    ap_sig_bdd_1194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1194 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_1205 assign process. --
    ap_sig_bdd_1205_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1205 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_1222 assign process. --
    ap_sig_bdd_1222_assign_proc : process(sum_weight_out_V_full_n, sum_return_out_V_full_n, sum_weight_returnSquare_out_V_full_n, sum_weight_return_out_V_full_n, sum_weight_returnA_returnB_out_full_n, sum_returnA_out_V_full_n, sum_weight_returnSquareA_out_V_full_n, sum_weight_returnA_out_V_full_n)
    begin
                ap_sig_bdd_1222 <= ((sum_weight_out_V_full_n = ap_const_logic_0) or (sum_return_out_V_full_n = ap_const_logic_0) or (sum_weight_returnSquare_out_V_full_n = ap_const_logic_0) or (sum_weight_return_out_V_full_n = ap_const_logic_0) or (sum_weight_returnA_returnB_out_full_n = ap_const_logic_0) or (sum_returnA_out_V_full_n = ap_const_logic_0) or (sum_weight_returnSquareA_out_V_full_n = ap_const_logic_0) or (sum_weight_returnA_out_V_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_1239 assign process. --
    ap_sig_bdd_1239_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1239 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_1258 assign process. --
    ap_sig_bdd_1258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1258 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_1327 assign process. --
    ap_sig_bdd_1327_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1327 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_1335 assign process. --
    ap_sig_bdd_1335_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1335 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_1458 assign process. --
    ap_sig_bdd_1458_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1458 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_1471 assign process. --
    ap_sig_bdd_1471_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1471 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_1595 assign process. --
    ap_sig_bdd_1595_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1595 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_1605 assign process. --
    ap_sig_bdd_1605_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1605 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_1619 assign process. --
    ap_sig_bdd_1619_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1619 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_162 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_1755 assign process. --
    ap_sig_bdd_1755_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1755 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_1763 assign process. --
    ap_sig_bdd_1763_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1763 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_1771 assign process. --
    ap_sig_bdd_1771_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1771 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_1779 assign process. --
    ap_sig_bdd_1779_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1779 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_1787 assign process. --
    ap_sig_bdd_1787_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1787 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_1795 assign process. --
    ap_sig_bdd_1795_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1795 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_1803 assign process. --
    ap_sig_bdd_1803_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1803 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_1822 assign process. --
    ap_sig_bdd_1822_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1822 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_1831 assign process. --
    ap_sig_bdd_1831_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1831 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_1840 assign process. --
    ap_sig_bdd_1840_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1840 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_1867 assign process. --
    ap_sig_bdd_1867_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1867 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_1876 assign process. --
    ap_sig_bdd_1876_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1876 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_1914 assign process. --
    ap_sig_bdd_1914_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1914 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_1922 assign process. --
    ap_sig_bdd_1922_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1922 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_1930 assign process. --
    ap_sig_bdd_1930_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1930 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_273 assign process. --
    ap_sig_bdd_273_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_273 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_383 assign process. --
    ap_sig_bdd_383_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_383 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_392 assign process. --
    ap_sig_bdd_392_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_392 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_399 assign process. --
    ap_sig_bdd_399_assign_proc : process(in_indices_TVALID, tmp_6_i_reg_1522)
    begin
                ap_sig_bdd_399 <= ((in_indices_TVALID = ap_const_logic_0) and (tmp_6_i_reg_1522 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_410 assign process. --
    ap_sig_bdd_410_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_410 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_415 assign process. --
    ap_sig_bdd_415_assign_proc : process(in_indices_TVALID, tmp_31_i_reg_1646)
    begin
                ap_sig_bdd_415 <= ((in_indices_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = tmp_31_i_reg_1646));
    end process;


    -- ap_sig_bdd_434 assign process. --
    ap_sig_bdd_434_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_434 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_441 assign process. --
    ap_sig_bdd_441_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_441 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_505 assign process. --
    ap_sig_bdd_505_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_505 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_584 assign process. --
    ap_sig_bdd_584_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_584 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_599 assign process. --
    ap_sig_bdd_599_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_599 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_634 assign process. --
    ap_sig_bdd_634_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_634 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_648 assign process. --
    ap_sig_bdd_648_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_648 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_67 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_683 assign process. --
    ap_sig_bdd_683_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_683 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_720 assign process. --
    ap_sig_bdd_720_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_720 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_748 assign process. --
    ap_sig_bdd_748_assign_proc : process(ap_start, ap_done_reg, NUMBER_OF_DAYS_out_full_n, NUMBER_OF_INDICES_out_full_n)
    begin
                ap_sig_bdd_748 <= ((NUMBER_OF_INDICES_out_full_n = ap_const_logic_0) or (NUMBER_OF_DAYS_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_760 assign process. --
    ap_sig_bdd_760_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_760 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_769 assign process. --
    ap_sig_bdd_769_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_769 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_797 assign process. --
    ap_sig_bdd_797_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_797 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_959 assign process. --
    ap_sig_bdd_959_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_959 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_982 assign process. --
    ap_sig_bdd_982_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_982 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_21 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_21_assign_proc : process(ap_sig_bdd_162)
    begin
        if (ap_sig_bdd_162) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_22 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_22_assign_proc : process(ap_sig_bdd_392)
    begin
        if (ap_sig_bdd_392) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_23 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_23_assign_proc : process(ap_sig_bdd_959)
    begin
        if (ap_sig_bdd_959) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg1_fsm_24 assign process. --
    ap_sig_cseq_ST_pp1_stg1_fsm_24_assign_proc : process(ap_sig_bdd_584)
    begin
        if (ap_sig_bdd_584) then 
            ap_sig_cseq_ST_pp1_stg1_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg1_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg2_fsm_25 assign process. --
    ap_sig_cseq_ST_pp1_stg2_fsm_25_assign_proc : process(ap_sig_bdd_634)
    begin
        if (ap_sig_bdd_634) then 
            ap_sig_cseq_ST_pp1_stg2_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg2_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg3_fsm_26 assign process. --
    ap_sig_cseq_ST_pp1_stg3_fsm_26_assign_proc : process(ap_sig_bdd_720)
    begin
        if (ap_sig_bdd_720) then 
            ap_sig_cseq_ST_pp1_stg3_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg3_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg4_fsm_27 assign process. --
    ap_sig_cseq_ST_pp1_stg4_fsm_27_assign_proc : process(ap_sig_bdd_1605)
    begin
        if (ap_sig_bdd_1605) then 
            ap_sig_cseq_ST_pp1_stg4_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg4_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg5_fsm_28 assign process. --
    ap_sig_cseq_ST_pp1_stg5_fsm_28_assign_proc : process(ap_sig_bdd_1822)
    begin
        if (ap_sig_bdd_1822) then 
            ap_sig_cseq_ST_pp1_stg5_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg5_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg6_fsm_29 assign process. --
    ap_sig_cseq_ST_pp1_stg6_fsm_29_assign_proc : process(ap_sig_bdd_1831)
    begin
        if (ap_sig_bdd_1831) then 
            ap_sig_cseq_ST_pp1_stg6_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg6_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg7_fsm_30 assign process. --
    ap_sig_cseq_ST_pp1_stg7_fsm_30_assign_proc : process(ap_sig_bdd_1840)
    begin
        if (ap_sig_bdd_1840) then 
            ap_sig_cseq_ST_pp1_stg7_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg7_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg8_fsm_31 assign process. --
    ap_sig_cseq_ST_pp1_stg8_fsm_31_assign_proc : process(ap_sig_bdd_1239)
    begin
        if (ap_sig_bdd_1239) then 
            ap_sig_cseq_ST_pp1_stg8_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg8_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_36 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_36_assign_proc : process(ap_sig_bdd_273)
    begin
        if (ap_sig_bdd_273) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg1_fsm_37 assign process. --
    ap_sig_cseq_ST_pp2_stg1_fsm_37_assign_proc : process(ap_sig_bdd_410)
    begin
        if (ap_sig_bdd_410) then 
            ap_sig_cseq_ST_pp2_stg1_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg1_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_38 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_38_assign_proc : process(ap_sig_bdd_1170)
    begin
        if (ap_sig_bdd_1170) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg1_fsm_39 assign process. --
    ap_sig_cseq_ST_pp3_stg1_fsm_39_assign_proc : process(ap_sig_bdd_599)
    begin
        if (ap_sig_bdd_599) then 
            ap_sig_cseq_ST_pp3_stg1_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg1_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg2_fsm_40 assign process. --
    ap_sig_cseq_ST_pp3_stg2_fsm_40_assign_proc : process(ap_sig_bdd_683)
    begin
        if (ap_sig_bdd_683) then 
            ap_sig_cseq_ST_pp3_stg2_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg2_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg3_fsm_41 assign process. --
    ap_sig_cseq_ST_pp3_stg3_fsm_41_assign_proc : process(ap_sig_bdd_648)
    begin
        if (ap_sig_bdd_648) then 
            ap_sig_cseq_ST_pp3_stg3_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg3_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg4_fsm_42 assign process. --
    ap_sig_cseq_ST_pp3_stg4_fsm_42_assign_proc : process(ap_sig_bdd_1194)
    begin
        if (ap_sig_bdd_1194) then 
            ap_sig_cseq_ST_pp3_stg4_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg4_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg5_fsm_43 assign process. --
    ap_sig_cseq_ST_pp3_stg5_fsm_43_assign_proc : process(ap_sig_bdd_1619)
    begin
        if (ap_sig_bdd_1619) then 
            ap_sig_cseq_ST_pp3_stg5_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg5_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg6_fsm_44 assign process. --
    ap_sig_cseq_ST_pp3_stg6_fsm_44_assign_proc : process(ap_sig_bdd_1867)
    begin
        if (ap_sig_bdd_1867) then 
            ap_sig_cseq_ST_pp3_stg6_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg6_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg7_fsm_45 assign process. --
    ap_sig_cseq_ST_pp3_stg7_fsm_45_assign_proc : process(ap_sig_bdd_1876)
    begin
        if (ap_sig_bdd_1876) then 
            ap_sig_cseq_ST_pp3_stg7_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg7_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg8_fsm_46 assign process. --
    ap_sig_cseq_ST_pp3_stg8_fsm_46_assign_proc : process(ap_sig_bdd_1258)
    begin
        if (ap_sig_bdd_1258) then 
            ap_sig_cseq_ST_pp3_stg8_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg8_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st104_fsm_32 assign process. --
    ap_sig_cseq_ST_st104_fsm_32_assign_proc : process(ap_sig_bdd_982)
    begin
        if (ap_sig_bdd_982) then 
            ap_sig_cseq_ST_st104_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st104_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st105_fsm_33 assign process. --
    ap_sig_cseq_ST_st105_fsm_33_assign_proc : process(ap_sig_bdd_1458)
    begin
        if (ap_sig_bdd_1458) then 
            ap_sig_cseq_ST_st105_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st105_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st106_fsm_34 assign process. --
    ap_sig_cseq_ST_st106_fsm_34_assign_proc : process(ap_sig_bdd_1471)
    begin
        if (ap_sig_bdd_1471) then 
            ap_sig_cseq_ST_st106_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st106_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st107_fsm_35 assign process. --
    ap_sig_cseq_ST_st107_fsm_35_assign_proc : process(ap_sig_bdd_1001)
    begin
        if (ap_sig_bdd_1001) then 
            ap_sig_cseq_ST_st107_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st107_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_1595)
    begin
        if (ap_sig_bdd_1595) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_1755)
    begin
        if (ap_sig_bdd_1755) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_1763)
    begin
        if (ap_sig_bdd_1763) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_1771)
    begin
        if (ap_sig_bdd_1771) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_1779)
    begin
        if (ap_sig_bdd_1779) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_1787)
    begin
        if (ap_sig_bdd_1787) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_1795)
    begin
        if (ap_sig_bdd_1795) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_1803)
    begin
        if (ap_sig_bdd_1803) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_505)
    begin
        if (ap_sig_bdd_505) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st192_fsm_47 assign process. --
    ap_sig_cseq_ST_st192_fsm_47_assign_proc : process(ap_sig_bdd_1205)
    begin
        if (ap_sig_bdd_1205) then 
            ap_sig_cseq_ST_st192_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st192_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_1327)
    begin
        if (ap_sig_bdd_1327) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_67)
    begin
        if (ap_sig_bdd_67) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_797)
    begin
        if (ap_sig_bdd_797) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_441)
    begin
        if (ap_sig_bdd_441) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_1335)
    begin
        if (ap_sig_bdd_1335) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_1914)
    begin
        if (ap_sig_bdd_1914) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_1922)
    begin
        if (ap_sig_bdd_1922) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_1930)
    begin
        if (ap_sig_bdd_1930) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_383)
    begin
        if (ap_sig_bdd_383) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_760)
    begin
        if (ap_sig_bdd_760) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_769)
    begin
        if (ap_sig_bdd_769) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_434)
    begin
        if (ap_sig_bdd_434) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    column_index_cast_i_fu_1252_p1 <= std_logic_vector(resize(unsigned(column_index_i_reg_849),32));
    column_index_fu_1353_p2 <= std_logic_vector(unsigned(column_index_i_reg_849) + unsigned(ap_const_lv31_1));
    exitcond2_i_fu_1230_p2 <= "1" when (i2_i_phi_fu_842_p4 = ap_const_lv3_6) else "0";
    exitcond_i_fu_1336_p2 <= "1" when (i8_i_phi_fu_938_p4 = ap_const_lv3_6) else "0";
    exitcond_i_i_fu_1122_p2 <= "1" when (i_i_i_reg_743 = ap_const_lv8_FC) else "0";

    -- grp_fu_1207_ce assign process. --
    grp_fu_1207_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21))))) then 
            grp_fu_1207_ce <= ap_const_logic_1;
        else 
            grp_fu_1207_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1207_p0 <= ap_reg_ppstg_i1_i_reg_787_pp0_it5;
    grp_fu_1207_p1 <= ap_const_lv32_6(4 - 1 downto 0);

    -- grp_fu_1312_ce assign process. --
    grp_fu_1312_ce_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21))))) then 
            grp_fu_1312_ce <= ap_const_logic_1;
        else 
            grp_fu_1312_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1312_p0 <= ap_reg_ppstg_i4_i_reg_870_pp2_it5;
    grp_fu_1312_p1 <= ap_const_lv32_6(4 - 1 downto 0);

    -- grp_fu_946_ce assign process. --
    grp_fu_946_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26, ap_sig_cseq_ST_st18_fsm_17, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30, ap_sig_cseq_ST_pp1_stg1_fsm_24, exitcond2_i_reg_1571, ap_sig_cseq_ST_pp3_stg1_fsm_39, exitcond_i_reg_1720, ap_sig_cseq_ST_pp1_stg2_fsm_25, ap_sig_cseq_ST_pp3_stg3_fsm_41, ap_sig_cseq_ST_pp3_stg2_fsm_40, ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1, ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1, ap_sig_cseq_ST_pp1_stg3_fsm_26, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29, ap_sig_cseq_ST_pp1_stg0_fsm_23, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27, ap_sig_cseq_ST_pp3_stg0_fsm_38, ap_sig_cseq_ST_pp3_stg4_fsm_42, ap_sig_cseq_ST_pp1_stg8_fsm_31, ap_sig_cseq_ST_pp3_stg8_fsm_46, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_pp1_stg4_fsm_27, ap_sig_cseq_ST_pp3_stg5_fsm_43, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_pp1_stg5_fsm_28, ap_sig_cseq_ST_pp1_stg6_fsm_29, ap_sig_cseq_ST_pp1_stg7_fsm_30, ap_sig_cseq_ST_pp3_stg6_fsm_44, ap_sig_cseq_ST_pp3_stg7_fsm_45)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_25) and ((ap_const_lv1_0 = exitcond2_i_reg_1571) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_26) and ((ap_const_lv1_0 = exitcond2_i_reg_1571) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_27) and ((ap_const_lv1_0 = exitcond2_i_reg_1571))) or (((ap_const_lv1_0 = exitcond2_i_reg_1571)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_28)) or (((ap_const_lv1_0 = exitcond2_i_reg_1571)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_29)) or (((ap_const_lv1_0 = exitcond2_i_reg_1571)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg7_fsm_30)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg8_fsm_31) and ((ap_const_lv1_0 = exitcond2_i_reg_1571))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and ((ap_const_lv1_0 = exitcond2_i_reg_1571))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_24) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40) and ((ap_const_lv1_0 = exitcond_i_reg_1720) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_41) and ((ap_const_lv1_0 = exitcond_i_reg_1720) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_42) and ((ap_const_lv1_0 = exitcond_i_reg_1720) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_43) and ((ap_const_lv1_0 = exitcond_i_reg_1720))) or (((ap_const_lv1_0 = exitcond_i_reg_1720)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_44)) or (((ap_const_lv1_0 = exitcond_i_reg_1720)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg7_fsm_45)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg8_fsm_46) and ((ap_const_lv1_0 = exitcond_i_reg_1720))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38) and ((ap_const_lv1_0 = exitcond_i_reg_1720))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_39) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1))))) then 
            grp_fu_946_ce <= ap_const_logic_1;
        else 
            grp_fu_946_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_946_p0 assign process. --
    grp_fu_946_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it27, tmp_9_reg_799, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it24, ap_reg_ppiten_pp2_it27, tmp_8_reg_882, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, reg_1028, reg_1060, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp3_it0, reg_1072, ap_sig_cseq_ST_pp1_stg2_fsm_25, ap_sig_cseq_ST_pp3_stg3_fsm_41, ap_sig_cseq_ST_pp3_stg2_fsm_40, ap_sig_cseq_ST_pp1_stg3_fsm_26, ap_sig_cseq_ST_pp3_stg4_fsm_42, tmp_1_phi_fu_817_p4, tmp_2_phi_fu_830_p4, tmp_7_phi_fu_900_p4, tmp_5_phi_fu_913_p4, tmp_3_phi_fu_926_p4, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_pp1_stg4_fsm_27, ap_sig_cseq_ST_pp3_stg5_fsm_43)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_43))) then 
            grp_fu_946_p0 <= tmp_8_reg_882;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_42))) then 
            grp_fu_946_p0 <= tmp_7_phi_fu_900_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_41))) then 
            grp_fu_946_p0 <= tmp_5_phi_fu_913_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40))) then 
            grp_fu_946_p0 <= tmp_3_phi_fu_926_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_27))) then 
            grp_fu_946_p0 <= tmp_9_reg_799;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_26))) then 
            grp_fu_946_p0 <= tmp_1_phi_fu_817_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_25))) then 
            grp_fu_946_p0 <= tmp_2_phi_fu_830_p4;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it27)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it27)))) then 
            grp_fu_946_p0 <= reg_1072;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37)))) then 
            grp_fu_946_p0 <= reg_1060;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_946_p0 <= reg_1028;
        else 
            grp_fu_946_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_946_p1 assign process. --
    grp_fu_946_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it27, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it24, ap_reg_ppiten_pp2_it27, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, reg_1021, reg_1050, reg_1060, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp3_it0, reg_1067, reg_1072, ap_sig_cseq_ST_pp1_stg2_fsm_25, ap_sig_cseq_ST_pp3_stg3_fsm_41, reg_1084, ap_sig_cseq_ST_pp3_stg2_fsm_40, ap_sig_cseq_ST_pp1_stg3_fsm_26, reg_1116, ap_sig_cseq_ST_pp3_stg4_fsm_42, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_pp1_stg4_fsm_27, ap_sig_cseq_ST_pp3_stg5_fsm_43)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_43))) then 
            grp_fu_946_p1 <= reg_1116;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_42)))) then 
            grp_fu_946_p1 <= reg_1072;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_41)))) then 
            grp_fu_946_p1 <= reg_1084;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_25)))) then 
            grp_fu_946_p1 <= reg_1060;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it27)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it27)))) then 
            grp_fu_946_p1 <= reg_1067;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37)))) then 
            grp_fu_946_p1 <= reg_1050;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_946_p1 <= reg_1021;
        else 
            grp_fu_946_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_950_ce assign process. --
    grp_fu_950_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it33, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it31, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it32, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it31, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it32)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it33) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it32))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it32))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it32))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it33) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it32))))) then 
            grp_fu_950_ce <= ap_const_logic_1;
        else 
            grp_fu_950_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_950_p0 assign process. --
    grp_fu_950_p0_assign_proc : process(ap_reg_ppiten_pp0_it29, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it29, ap_reg_ppiten_pp2_it30, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, reg_1084, reg_1116)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it30))) then 
            grp_fu_950_p0 <= reg_1116;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37)))) then 
            grp_fu_950_p0 <= reg_1084;
        else 
            grp_fu_950_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_950_p1 assign process. --
    grp_fu_950_p1_assign_proc : process(ap_reg_ppiten_pp0_it29, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it29, ap_reg_ppiten_pp2_it30, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, reg_1079, tmp_67_i_reg_1715)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it30))) then 
            grp_fu_950_p1 <= tmp_67_i_reg_1715;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37)))) then 
            grp_fu_950_p1 <= reg_1079;
        else 
            grp_fu_950_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_961_ce assign process. --
    grp_fu_961_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27, ap_sig_cseq_ST_st2_fsm_1, exitcond_i_i_fu_1122_p2, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_i_i_fu_1122_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27))))) then 
            grp_fu_961_ce <= ap_const_logic_1;
        else 
            grp_fu_961_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_961_p0 assign process. --
    grp_fu_961_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it27, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it24, ap_reg_ppiten_pp2_it27, reg_1014, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, reg_1050, tmp_i_i_reg_731, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it27)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it27)))) then 
            grp_fu_961_p0 <= reg_1014;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37)))) then 
            grp_fu_961_p0 <= reg_1050;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_961_p0 <= tmp_i_i_reg_731;
        else 
            grp_fu_961_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_961_p1 assign process. --
    grp_fu_961_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it27, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it24, ap_reg_ppiten_pp2_it27, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_reg_ppstg_reg_1028_pp0_it26, ap_reg_ppstg_reg_1028_pp2_it26, reg_1050, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it27))) then 
            grp_fu_961_p1 <= ap_reg_ppstg_reg_1028_pp2_it26;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it27))) then 
            grp_fu_961_p1 <= ap_reg_ppstg_reg_1028_pp0_it26;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37)))) then 
            grp_fu_961_p1 <= reg_1050;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_961_p1 <= ap_const_lv32_3F70A3D7;
        else 
            grp_fu_961_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_967_ce assign process. --
    grp_fu_967_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it25))))) then 
            grp_fu_967_ce <= ap_const_logic_1;
        else 
            grp_fu_967_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_967_p0 assign process. --
    grp_fu_967_p0_assign_proc : process(ap_reg_ppiten_pp0_it24, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it24, ap_reg_ppiten_pp2_it27, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, reg_1050, tmp_66_i_reg_1710)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it27))) then 
            grp_fu_967_p0 <= tmp_66_i_reg_1710;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37)))) then 
            grp_fu_967_p0 <= reg_1050;
        else 
            grp_fu_967_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_967_p1 assign process. --
    grp_fu_967_p1_assign_proc : process(ap_reg_ppiten_pp0_it24, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it24, ap_reg_ppiten_pp2_it27, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_reg_ppstg_reg_1028_pp0_it24, ap_reg_ppstg_reg_1028_pp2_it24, ap_reg_ppstg_reg_1028_pp2_it26)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it27))) then 
            grp_fu_967_p1 <= ap_reg_ppstg_reg_1028_pp2_it26;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            grp_fu_967_p1 <= ap_reg_ppstg_reg_1028_pp2_it24;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            grp_fu_967_p1 <= ap_reg_ppstg_reg_1028_pp0_it24;
        else 
            grp_fu_967_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_971_ce assign process. --
    grp_fu_971_ce_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it25))))) then 
            grp_fu_971_ce <= ap_const_logic_1;
        else 
            grp_fu_971_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_971_p0 <= lnReturnA_load_reg_1705;
    grp_fu_971_p1 <= reg_1050;

    -- grp_fu_975_ce assign process. --
    grp_fu_975_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, tmp_6_i_reg_1522, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, tmp_31_i_reg_1646, ap_sig_bdd_415, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it1, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it2, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it3, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it4, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it1, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it2, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it3, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it4, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and ((tmp_6_i_reg_1522 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and ((tmp_6_i_reg_1522 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it13))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and ((ap_const_lv1_0 = tmp_31_i_reg_1646) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and ((ap_const_lv1_0 = tmp_31_i_reg_1646) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it13))))) then 
            grp_fu_975_ce <= ap_const_logic_1;
        else 
            grp_fu_975_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_975_p0 assign process. --
    grp_fu_975_p0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, tmp_5_i_tmp_4_i_reg_1526, tmp_30_i_shift_reg_load_i_reg_1650)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            grp_fu_975_p0 <= tmp_30_i_shift_reg_load_i_reg_1650;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            grp_fu_975_p0 <= tmp_5_i_tmp_4_i_reg_1526;
        else 
            grp_fu_975_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_975_p1 assign process. --
    grp_fu_975_p1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, tmp_14_i_fu_1187_p1, tmp_54_i_fu_1287_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            grp_fu_975_p1 <= tmp_54_i_fu_1287_p1;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            grp_fu_975_p1 <= tmp_14_i_fu_1187_p1;
        else 
            grp_fu_975_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_979_ce assign process. --
    grp_fu_979_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it23, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21, ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it21))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415)) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_31_i_reg_1646_pp2_it21))))) then 
            grp_fu_979_ce <= ap_const_logic_1;
        else 
            grp_fu_979_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_979_p0 <= ap_const_lv32_0;
    grp_fu_979_p1 <= reg_1045;
    i1_i_cast_i_fu_1139_p1 <= std_logic_vector(resize(unsigned(i1_i_i_reg_755),32));

    -- i1_i_phi_fu_791_p4 assign process. --
    i1_i_phi_fu_791_p4_assign_proc : process(i1_i_reg_787, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it1, tmp_6_i_reg_1522, i_3_reg_1538)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_i_reg_1522 = ap_const_lv1_0))) then 
            i1_i_phi_fu_791_p4 <= i_3_reg_1538;
        else 
            i1_i_phi_fu_791_p4 <= i1_i_reg_787;
        end if; 
    end process;


    -- i2_i_phi_fu_842_p4 assign process. --
    i2_i_phi_fu_842_p4_assign_proc : process(i2_i_reg_838, ap_reg_ppiten_pp1_it1, exitcond2_i_reg_1571, ap_sig_cseq_ST_pp1_stg0_fsm_23, i_2_reg_1575)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond2_i_reg_1571) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23))) then 
            i2_i_phi_fu_842_p4 <= i_2_reg_1575;
        else 
            i2_i_phi_fu_842_p4 <= i2_i_reg_838;
        end if; 
    end process;


    -- i4_i_phi_fu_874_p4 assign process. --
    i4_i_phi_fu_874_p4_assign_proc : process(i4_i_reg_870, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it1, tmp_31_i_reg_1646, i_5_reg_1661)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_31_i_reg_1646))) then 
            i4_i_phi_fu_874_p4 <= i_5_reg_1661;
        else 
            i4_i_phi_fu_874_p4 <= i4_i_reg_870;
        end if; 
    end process;


    -- i8_i_phi_fu_938_p4 assign process. --
    i8_i_phi_fu_938_p4_assign_proc : process(i8_i_reg_934, ap_reg_ppiten_pp3_it1, exitcond_i_reg_1720, ap_sig_cseq_ST_pp3_stg0_fsm_38, i_4_reg_1724)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_i_reg_1720) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_38))) then 
            i8_i_phi_fu_938_p4 <= i_4_reg_1724;
        else 
            i8_i_phi_fu_938_p4 <= i8_i_reg_934;
        end if; 
    end process;

    i_1_fu_1153_p2 <= std_logic_vector(unsigned(i1_i_i_reg_755) + unsigned(ap_const_lv31_1));
    i_2_fu_1236_p2 <= std_logic_vector(unsigned(i2_i_phi_fu_842_p4) + unsigned(ap_const_lv3_1));
    i_3_fu_1192_p2 <= std_logic_vector(unsigned(i1_i_reg_787) + unsigned(ap_const_lv32_1));
    i_4_fu_1342_p2 <= std_logic_vector(unsigned(i8_i_phi_fu_938_p4) + unsigned(ap_const_lv3_1));
    i_5_fu_1292_p2 <= std_logic_vector(unsigned(i4_i_reg_870) + unsigned(ap_const_lv32_1));
    i_fu_1133_p2 <= std_logic_vector(unsigned(i_i_i_reg_743) + unsigned(ap_const_lv8_1));

    -- in_indices_TREADY assign process. --
    in_indices_TREADY_assign_proc : process(in_indices_TVALID, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp0_stg1_fsm_22, tmp_6_i_reg_1522, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, tmp_31_i_reg_1646, ap_sig_bdd_415, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st107_fsm_35)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((in_indices_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and (tmp_6_i_reg_1522 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399))) or (not((in_indices_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_35)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and (ap_const_lv1_0 = tmp_31_i_reg_1646) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415))))) then 
            in_indices_TREADY <= ap_const_logic_1;
        else 
            in_indices_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- lnReturnA_address0 assign process. --
    lnReturnA_address0_assign_proc : process(ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp2_it23, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_pp2_stg1_fsm_37, tmp_25_i_fu_1225_p1, tmp_65_i_fu_1331_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            lnReturnA_address0 <= tmp_25_i_fu_1225_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it23) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            lnReturnA_address0 <= tmp_65_i_fu_1331_p1(8 - 1 downto 0);
        else 
            lnReturnA_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- lnReturnA_ce0 assign process. --
    lnReturnA_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it23, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it23) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399))))) then 
            lnReturnA_ce0 <= ap_const_logic_1;
        else 
            lnReturnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lnReturnA_d0 <= reg_1050;

    -- lnReturnA_we0 assign process. --
    lnReturnA_we0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it24, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399)) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_6_i_reg_1522_pp0_it24)))) then 
            lnReturnA_we0 <= ap_const_logic_1;
        else 
            lnReturnA_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_returnA_out_V_din <= tmp_2_reg_825;

    -- sum_returnA_out_V_write assign process. --
    sum_returnA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st192_fsm_47, ap_sig_bdd_1222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
            sum_returnA_out_V_write <= ap_const_logic_1;
        else 
            sum_returnA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_return_out_V_din <= tmp_3_reg_921;

    -- sum_return_out_V_write assign process. --
    sum_return_out_V_write_assign_proc : process(ap_sig_cseq_ST_st192_fsm_47, ap_sig_bdd_1222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
            sum_return_out_V_write <= ap_const_logic_1;
        else 
            sum_return_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_out_V_din <= reg_1021;

    -- sum_weight_out_V_write assign process. --
    sum_weight_out_V_write_assign_proc : process(ap_sig_cseq_ST_st192_fsm_47, ap_sig_bdd_1222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
            sum_weight_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnA_out_V_din <= tmp_9_reg_799;

    -- sum_weight_returnA_out_V_write assign process. --
    sum_weight_returnA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st192_fsm_47, ap_sig_bdd_1222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
            sum_weight_returnA_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnA_returnB_out_din <= tmp_8_reg_882;

    -- sum_weight_returnA_returnB_out_write assign process. --
    sum_weight_returnA_returnB_out_write_assign_proc : process(ap_sig_cseq_ST_st192_fsm_47, ap_sig_bdd_1222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
            sum_weight_returnA_returnB_out_write <= ap_const_logic_1;
        else 
            sum_weight_returnA_returnB_out_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnSquareA_out_V_din <= tmp_1_reg_812;

    -- sum_weight_returnSquareA_out_V_write assign process. --
    sum_weight_returnSquareA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st192_fsm_47, ap_sig_bdd_1222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
            sum_weight_returnSquareA_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnSquareA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnSquare_out_V_din <= tmp_5_reg_908;

    -- sum_weight_returnSquare_out_V_write assign process. --
    sum_weight_returnSquare_out_V_write_assign_proc : process(ap_sig_cseq_ST_st192_fsm_47, ap_sig_bdd_1222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
            sum_weight_returnSquare_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnSquare_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_return_out_V_din <= tmp_7_reg_895;

    -- sum_weight_return_out_V_write assign process. --
    sum_weight_return_out_V_write_assign_proc : process(ap_sig_cseq_ST_st192_fsm_47, ap_sig_bdd_1222)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_47) and not(ap_sig_bdd_1222))) then 
            sum_weight_return_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_return_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_i_fu_1242_p1 <= std_logic_vector(resize(unsigned(i2_i_phi_fu_842_p4),64));
    tmp_14_i_fu_1187_p1 <= in_indices_TDATA;
    tmp_16_i_fu_1202_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i1_i_reg_787_pp0_it5),64));
    tmp_17_i_fu_1213_p1 <= std_logic_vector(resize(unsigned(grp_fu_1207_p2),64));
    tmp_1_i_fu_1163_p2 <= std_logic_vector(unsigned(NUMBER_OF_DAYS) + unsigned(ap_const_lv32_FFFFFFFF));

    -- tmp_1_phi_fu_817_p4 assign process. --
    tmp_1_phi_fu_817_p4_assign_proc : process(tmp_1_reg_812, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1, reg_1104, ap_sig_cseq_ST_pp1_stg3_fsm_26)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_26))) then 
            tmp_1_phi_fu_817_p4 <= reg_1104;
        else 
            tmp_1_phi_fu_817_p4 <= tmp_1_reg_812;
        end if; 
    end process;

    tmp_24_i_fu_1220_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_reg_1543_pp0_it23) + unsigned(ap_const_lv31_7FFFFFFF));
    tmp_25_i_fu_1225_p1 <= std_logic_vector(resize(unsigned(tmp_24_i_fu_1220_p2),64));
    tmp_26_i_fu_1256_p2 <= "1" when (signed(column_index_cast_i_fu_1252_p1) < signed(NUMBER_OF_INDICES)) else "0";
    tmp_28_i_fu_1261_p1 <= in_indices_TDATA;

    -- tmp_2_phi_fu_830_p4 assign process. --
    tmp_2_phi_fu_830_p4_assign_proc : process(tmp_2_reg_825, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg2_fsm_25, reg_1098, ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_25) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_i_reg_1571_pp1_it1))) then 
            tmp_2_phi_fu_830_p4 <= reg_1098;
        else 
            tmp_2_phi_fu_830_p4 <= tmp_2_reg_825;
        end if; 
    end process;


    -- tmp_30_i_phi_fu_864_p4 assign process. --
    tmp_30_i_phi_fu_864_p4_assign_proc : process(tmp_30_i_reg_861, ap_sig_cseq_ST_pp2_stg0_fsm_36, ap_reg_ppiten_pp2_it1, tmp_31_i_reg_1646, tmp_30_i_shift_reg_load_i_reg_1650)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_36) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = tmp_31_i_reg_1646))) then 
            tmp_30_i_phi_fu_864_p4 <= tmp_30_i_shift_reg_load_i_reg_1650;
        else 
            tmp_30_i_phi_fu_864_p4 <= tmp_30_i_reg_861;
        end if; 
    end process;

    tmp_30_i_shift_reg_load_i_fu_1279_p3 <= 
        tmp_30_i_phi_fu_864_p4 when (tmp_32_i_fu_1273_p2(0) = '1') else 
        shift_reg_load1_i_fu_224;
    tmp_31_i_fu_1265_p2 <= "1" when (signed(i4_i_phi_fu_874_p4) > signed(tmp_1_i_reg_1516)) else "0";
    tmp_32_i_fu_1273_p2 <= "1" when (i4_i_phi_fu_874_p4 = ap_const_lv32_1) else "0";

    -- tmp_3_phi_fu_926_p4 assign process. --
    tmp_3_phi_fu_926_p4_assign_proc : process(tmp_3_reg_921, ap_reg_ppiten_pp3_it1, ap_sig_cseq_ST_pp3_stg2_fsm_40, reg_1098, ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_40) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1))) then 
            tmp_3_phi_fu_926_p4 <= reg_1098;
        else 
            tmp_3_phi_fu_926_p4 <= tmp_3_reg_921;
        end if; 
    end process;

    tmp_4_fu_1303_p1 <= ap_reg_ppstg_i4_i_reg_870_pp2_it5(31 - 1 downto 0);

    -- tmp_4_i_phi_fu_770_p4 assign process. --
    tmp_4_i_phi_fu_770_p4_assign_proc : process(tmp_4_i_reg_766, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it1, tmp_6_i_reg_1522, tmp_14_i_reg_1532)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_i_reg_1522 = ap_const_lv1_0))) then 
            tmp_4_i_phi_fu_770_p4 <= tmp_14_i_reg_1532;
        else 
            tmp_4_i_phi_fu_770_p4 <= tmp_4_i_reg_766;
        end if; 
    end process;

    tmp_54_i_fu_1287_p1 <= in_indices_TDATA;
    tmp_56_i_fu_1307_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i4_i_reg_870_pp2_it5),64));
    tmp_57_i_fu_1318_p1 <= std_logic_vector(resize(unsigned(grp_fu_1312_p2),64));

    -- tmp_5_i_phi_fu_781_p4 assign process. --
    tmp_5_i_phi_fu_781_p4_assign_proc : process(tmp_5_i_reg_778, ap_sig_cseq_ST_pp0_stg0_fsm_21, ap_reg_ppiten_pp0_it1, tmp_6_i_reg_1522, tmp_5_i_tmp_4_i_reg_1526)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_21) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_6_i_reg_1522 = ap_const_lv1_0))) then 
            tmp_5_i_phi_fu_781_p4 <= tmp_5_i_tmp_4_i_reg_1526;
        else 
            tmp_5_i_phi_fu_781_p4 <= tmp_5_i_reg_778;
        end if; 
    end process;

    tmp_5_i_tmp_4_i_fu_1179_p3 <= 
        tmp_5_i_phi_fu_781_p4 when (tmp_7_i_fu_1173_p2(0) = '1') else 
        tmp_4_i_phi_fu_770_p4;

    -- tmp_5_phi_fu_913_p4 assign process. --
    tmp_5_phi_fu_913_p4_assign_proc : process(tmp_5_reg_908, ap_reg_ppiten_pp3_it1, ap_sig_cseq_ST_pp3_stg3_fsm_41, ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1, reg_1104)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_41) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1))) then 
            tmp_5_phi_fu_913_p4 <= reg_1104;
        else 
            tmp_5_phi_fu_913_p4 <= tmp_5_reg_908;
        end if; 
    end process;

    tmp_64_i_fu_1326_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_tmp_4_reg_1666_pp2_it22) + unsigned(ap_const_lv31_7FFFFFFF));
    tmp_65_i_fu_1331_p1 <= std_logic_vector(resize(unsigned(tmp_64_i_fu_1326_p2),64));
    tmp_69_i_i_fu_1143_p2 <= "1" when (signed(i1_i_cast_i_fu_1139_p1) < signed(NUMBER_OF_DAYS)) else "0";
    tmp_6_i_fu_1168_p2 <= "1" when (signed(i1_i_phi_fu_791_p4) > signed(tmp_1_i_reg_1516)) else "0";
    tmp_70_i_i_fu_1128_p1 <= std_logic_vector(resize(unsigned(i_i_i_reg_743),64));
    tmp_71_i_i_fu_1148_p1 <= std_logic_vector(resize(unsigned(i1_i_i_reg_755),64));
    tmp_7_i_fu_1173_p2 <= "1" when (i1_i_phi_fu_791_p4 = ap_const_lv32_1) else "0";

    -- tmp_7_phi_fu_900_p4 assign process. --
    tmp_7_phi_fu_900_p4_assign_proc : process(tmp_7_reg_895, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1, reg_1110, ap_sig_cseq_ST_pp3_stg4_fsm_42)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1720_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_42))) then 
            tmp_7_phi_fu_900_p4 <= reg_1110;
        else 
            tmp_7_phi_fu_900_p4 <= tmp_7_reg_895;
        end if; 
    end process;

    tmp_fu_1198_p1 <= ap_reg_ppstg_i1_i_reg_787_pp0_it5(31 - 1 downto 0);
    tmp_i_22_fu_1348_p1 <= std_logic_vector(resize(unsigned(i8_i_phi_fu_938_p4),64));
    tmp_i_fu_1159_p1 <= in_indices_TDATA;

    -- weight_rom_address0 assign process. --
    weight_rom_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_reg_ppiten_pp2_it5, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19, tmp_70_i_i_fu_1128_p1, tmp_56_i_fu_1307_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            weight_rom_address0 <= tmp_70_i_i_fu_1128_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37))) then 
            weight_rom_address0 <= tmp_56_i_fu_1307_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            weight_rom_address0 <= ap_const_lv8_0;
        else 
            weight_rom_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- weight_rom_address1 assign process. --
    weight_rom_address1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st19_fsm_18, tmp_71_i_i_fu_1148_p1, tmp_16_i_fu_1202_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            weight_rom_address1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_address1 <= ap_const_lv8_1;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22))) then 
            weight_rom_address1 <= tmp_16_i_fu_1202_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            weight_rom_address1 <= tmp_71_i_i_fu_1148_p1(8 - 1 downto 0);
        else 
            weight_rom_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- weight_rom_ce0 assign process. --
    weight_rom_ce0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it5, ap_sig_cseq_ST_pp2_stg1_fsm_37, ap_sig_bdd_415, ap_sig_bdd_748, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_748)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_37) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and ap_sig_bdd_415))))) then 
            weight_rom_ce0 <= ap_const_logic_1;
        else 
            weight_rom_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_ce1 assign process. --
    weight_rom_ce1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg1_fsm_22, ap_sig_bdd_399, ap_sig_bdd_748, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_748)) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_22) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_399))))) then 
            weight_rom_ce1 <= ap_const_logic_1;
        else 
            weight_rom_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_d0 assign process. --
    weight_rom_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, reg_1014, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            weight_rom_d0 <= reg_1014;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_d0 <= ap_const_lv32_3F800000;
        else 
            weight_rom_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_rom_d1 assign process. --
    weight_rom_d1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, reg_1036, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            weight_rom_d1 <= reg_1036;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_d1 <= ap_const_lv32_3F800000;
        else 
            weight_rom_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_rom_we0 assign process. --
    weight_rom_we0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_748, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_748)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            weight_rom_we0 <= ap_const_logic_1;
        else 
            weight_rom_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_we1 assign process. --
    weight_rom_we1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_748, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_748)) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            weight_rom_we1 <= ap_const_logic_1;
        else 
            weight_rom_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
