// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_accel,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.950000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.353000,HLS_SYN_LAT=526401,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=669,HLS_SYN_LUT=890}" *)

module mmult_accel (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_A_Addr_A,
        in_A_EN_A,
        in_A_WEN_A,
        in_A_Din_A,
        in_A_Dout_A,
        in_A_Clk_A,
        in_A_Rst_A,
        in_B_Addr_A,
        in_B_EN_A,
        in_B_WEN_A,
        in_B_Din_A,
        in_B_Dout_A,
        in_B_Clk_A,
        in_B_Rst_A,
        out_C_Addr_A,
        out_C_EN_A,
        out_C_WEN_A,
        out_C_Din_A,
        out_C_Dout_A,
        out_C_Clk_A,
        out_C_Rst_A
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 19'b1;
parameter    ap_ST_st2_fsm_1 = 19'b10;
parameter    ap_ST_st3_fsm_2 = 19'b100;
parameter    ap_ST_st4_fsm_3 = 19'b1000;
parameter    ap_ST_st5_fsm_4 = 19'b10000;
parameter    ap_ST_st6_fsm_5 = 19'b100000;
parameter    ap_ST_st7_fsm_6 = 19'b1000000;
parameter    ap_ST_st8_fsm_7 = 19'b10000000;
parameter    ap_ST_st9_fsm_8 = 19'b100000000;
parameter    ap_ST_st10_fsm_9 = 19'b1000000000;
parameter    ap_ST_st11_fsm_10 = 19'b10000000000;
parameter    ap_ST_st12_fsm_11 = 19'b100000000000;
parameter    ap_ST_st13_fsm_12 = 19'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 19'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 19'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 19'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 19'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 19'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 19'b1000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] in_A_Addr_A;
output   in_A_EN_A;
output  [3:0] in_A_WEN_A;
output  [31:0] in_A_Din_A;
input  [31:0] in_A_Dout_A;
output   in_A_Clk_A;
output   in_A_Rst_A;
output  [31:0] in_B_Addr_A;
output   in_B_EN_A;
output  [3:0] in_B_WEN_A;
output  [31:0] in_B_Din_A;
input  [31:0] in_B_Dout_A;
output   in_B_Clk_A;
output   in_B_Rst_A;
output  [31:0] out_C_Addr_A;
output   out_C_EN_A;
output  [3:0] out_C_WEN_A;
output  [31:0] out_C_Din_A;
input  [31:0] out_C_Dout_A;
output   out_C_Clk_A;
output   out_C_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_A_EN_A;
reg in_B_EN_A;
reg out_C_EN_A;
reg[3:0] out_C_WEN_A;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm = 19'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_37;
wire   [5:0] row_1_fu_148_p2;
reg   [5:0] row_1_reg_242;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_78;
wire   [9:0] tmp_fu_158_p3;
reg   [9:0] tmp_reg_247;
wire   [0:0] exitcond2_fu_142_p2;
wire   [9:0] col_cast2_fu_166_p1;
reg   [9:0] col_cast2_reg_253;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_93;
wire   [5:0] col_1_fu_176_p2;
reg   [5:0] col_1_reg_262;
wire   [5:0] k_1_fu_192_p2;
reg   [5:0] k_1_reg_270;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_104;
wire   [0:0] exitcond_fu_186_p2;
reg   [31:0] in_A_load_reg_285;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_119;
reg   [31:0] in_B_load_reg_290;
wire   [31:0] grp_fu_138_p2;
reg   [31:0] tmp_s_reg_295;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_129;
wire   [31:0] grp_fu_133_p2;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_bdd_138;
reg   [5:0] row_reg_86;
wire   [0:0] exitcond1_fu_170_p2;
reg   [5:0] col_reg_97;
reg   [31:0] result_reg_108;
reg   [5:0] k_reg_121;
wire   [63:0] tmp_6_fu_203_p1;
wire   [63:0] tmp_9_fu_225_p1;
wire   [63:0] tmp_3_fu_234_p1;
wire   [31:0] in_A_Addr_A_orig;
wire   [31:0] in_B_Addr_A_orig;
wire   [31:0] out_C_Addr_A_orig;
wire   [31:0] grp_fu_133_p0;
wire   [31:0] grp_fu_133_p1;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_179;
wire   [31:0] grp_fu_138_p0;
wire   [31:0] grp_fu_138_p1;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_188;
wire   [4:0] tmp_1_fu_154_p1;
wire   [9:0] k_cast1_fu_182_p1;
wire   [9:0] tmp_5_fu_198_p2;
wire   [4:0] tmp_4_fu_208_p1;
wire   [9:0] tmp_7_fu_212_p3;
wire   [9:0] tmp_8_fu_220_p2;
wire   [9:0] tmp_2_fu_230_p2;
wire    grp_fu_133_ce;
wire    grp_fu_138_ce;
reg   [18:0] ap_NS_fsm;


mmult_accel_fadd_32ns_32ns_32_9_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_accel_fadd_32ns_32ns_32_9_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_133_p0 ),
    .din1( grp_fu_133_p1 ),
    .ce( grp_fu_133_ce ),
    .dout( grp_fu_133_p2 )
);

mmult_accel_fmul_32ns_32ns_32_5_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_accel_fmul_32ns_32ns_32_5_max_dsp_U2(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_138_p0 ),
    .din1( grp_fu_138_p1 ),
    .ce( grp_fu_138_ce ),
    .dout( grp_fu_138_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_142_p2 == ap_const_lv1_0))) begin
        col_reg_97 <= ap_const_lv6_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_186_p2))) begin
        col_reg_97 <= col_1_reg_262;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_170_p2))) begin
        k_reg_121 <= ap_const_lv6_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        k_reg_121 <= k_1_reg_270;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_170_p2))) begin
        result_reg_108 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        result_reg_108 <= grp_fu_133_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_170_p2))) begin
        row_reg_86 <= row_1_reg_242;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        row_reg_86 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        col_1_reg_262 <= col_1_fu_176_p2;
        col_cast2_reg_253[0] <= col_cast2_fu_166_p1[0];
col_cast2_reg_253[1] <= col_cast2_fu_166_p1[1];
col_cast2_reg_253[2] <= col_cast2_fu_166_p1[2];
col_cast2_reg_253[3] <= col_cast2_fu_166_p1[3];
col_cast2_reg_253[4] <= col_cast2_fu_166_p1[4];
col_cast2_reg_253[5] <= col_cast2_fu_166_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        in_A_load_reg_285 <= in_A_Dout_A;
        in_B_load_reg_290 <= in_B_Dout_A;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_1_reg_270 <= k_1_fu_192_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        row_1_reg_242 <= row_1_fu_148_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_142_p2 == ap_const_lv1_0))) begin
        tmp_reg_247[5] <= tmp_fu_158_p3[5];
tmp_reg_247[6] <= tmp_fu_158_p3[6];
tmp_reg_247[7] <= tmp_fu_158_p3[7];
tmp_reg_247[8] <= tmp_fu_158_p3[8];
tmp_reg_247[9] <= tmp_fu_158_p3[9];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_s_reg_295 <= grp_fu_138_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_142_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_142_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_142_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_142_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_129)
begin
    if (ap_sig_bdd_129) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_179)
begin
    if (ap_sig_bdd_179) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st19_fsm_18 assign process. ///
always @ (ap_sig_bdd_138)
begin
    if (ap_sig_bdd_138) begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_37)
begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_78)
begin
    if (ap_sig_bdd_78) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_93)
begin
    if (ap_sig_bdd_93) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_104)
begin
    if (ap_sig_bdd_104) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_119)
begin
    if (ap_sig_bdd_119) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_188)
begin
    if (ap_sig_bdd_188) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// in_A_EN_A assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        in_A_EN_A = ap_const_logic_1;
    end else begin
        in_A_EN_A = ap_const_logic_0;
    end
end

/// in_B_EN_A assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        in_B_EN_A = ap_const_logic_1;
    end else begin
        in_B_EN_A = ap_const_logic_0;
    end
end

/// out_C_EN_A assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        out_C_EN_A = ap_const_logic_1;
    end else begin
        out_C_EN_A = ap_const_logic_0;
    end
end

/// out_C_WEN_A assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond_fu_186_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_186_p2))) begin
        out_C_WEN_A = ap_const_lv4_F;
    end else begin
        out_C_WEN_A = ap_const_lv4_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_142_p2 or exitcond_fu_186_p2 or exitcond1_fu_170_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_142_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond1_fu_170_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_186_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_104 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_104 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_119 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_119 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_129 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_129 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_138 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_138 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

/// ap_sig_bdd_179 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_179 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_188 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_188 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_37 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_78 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_78 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_93 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_93 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign col_1_fu_176_p2 = (col_reg_97 + ap_const_lv6_1);
assign col_cast2_fu_166_p1 = col_reg_97;
assign exitcond1_fu_170_p2 = (col_reg_97 == ap_const_lv6_20? 1'b1: 1'b0);
assign exitcond2_fu_142_p2 = (row_reg_86 == ap_const_lv6_20? 1'b1: 1'b0);
assign exitcond_fu_186_p2 = (k_reg_121 == ap_const_lv6_20? 1'b1: 1'b0);
assign grp_fu_133_ce = ap_const_logic_1;
assign grp_fu_133_p0 = result_reg_108;
assign grp_fu_133_p1 = tmp_s_reg_295;
assign grp_fu_138_ce = ap_const_logic_1;
assign grp_fu_138_p0 = in_A_load_reg_285;
assign grp_fu_138_p1 = in_B_load_reg_290;
assign in_A_Addr_A = in_A_Addr_A_orig << ap_const_lv32_2;
assign in_A_Addr_A_orig = tmp_6_fu_203_p1;
assign in_A_Clk_A = ap_clk;
assign in_A_Din_A = ap_const_lv32_0;
assign in_A_Rst_A = ap_rst_n_inv;
assign in_A_WEN_A = ap_const_lv4_0;
assign in_B_Addr_A = in_B_Addr_A_orig << ap_const_lv32_2;
assign in_B_Addr_A_orig = tmp_9_fu_225_p1;
assign in_B_Clk_A = ap_clk;
assign in_B_Din_A = ap_const_lv32_0;
assign in_B_Rst_A = ap_rst_n_inv;
assign in_B_WEN_A = ap_const_lv4_0;
assign k_1_fu_192_p2 = (k_reg_121 + ap_const_lv6_1);
assign k_cast1_fu_182_p1 = k_reg_121;
assign out_C_Addr_A = out_C_Addr_A_orig << ap_const_lv32_2;
assign out_C_Addr_A_orig = tmp_3_fu_234_p1;
assign out_C_Clk_A = ap_clk;
assign out_C_Din_A = result_reg_108;
assign out_C_Rst_A = ap_rst_n_inv;
assign row_1_fu_148_p2 = (row_reg_86 + ap_const_lv6_1);
assign tmp_1_fu_154_p1 = row_reg_86[4:0];
assign tmp_2_fu_230_p2 = (col_cast2_reg_253 + tmp_reg_247);
assign tmp_3_fu_234_p1 = tmp_2_fu_230_p2;
assign tmp_4_fu_208_p1 = k_reg_121[4:0];
assign tmp_5_fu_198_p2 = (k_cast1_fu_182_p1 + tmp_reg_247);
assign tmp_6_fu_203_p1 = tmp_5_fu_198_p2;
assign tmp_7_fu_212_p3 = {{tmp_4_fu_208_p1}, {ap_const_lv5_0}};
assign tmp_8_fu_220_p2 = (tmp_7_fu_212_p3 + col_cast2_reg_253);
assign tmp_9_fu_225_p1 = tmp_8_fu_220_p2;
assign tmp_fu_158_p3 = {{tmp_1_fu_154_p1}, {ap_const_lv5_0}};
always @ (posedge ap_clk)
begin
    tmp_reg_247[4:0] <= 5'b00000;
    col_cast2_reg_253[9:6] <= 4'b0000;
end



endmodule //mmult_accel

