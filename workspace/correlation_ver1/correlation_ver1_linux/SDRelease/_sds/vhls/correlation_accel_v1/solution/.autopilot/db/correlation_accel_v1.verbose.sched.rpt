

================================================================
== Vivado HLS Report for 'correlation_accel_v1'
================================================================
* Date:           Mon Oct 31 20:38:29 2016

* Version:        2014.4 (Build 1071461 on Tue Nov 18 16:42:57 PM 2014)
* Project:        correlation_accel_v1
* Solution:       solution
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |   8.50|      9.65|        1.06|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------------------------------------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+
        |                                                                              |       Latency      | Iteration|  Initiation Interval  |      Trip      |          |
        |                                   Loop Name                                  |  min |     max     |  Latency |  achieved |   target  |      Count     | Pipelined|
        +------------------------------------------------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+
        |- INIT_WEIGHT_ROM                                                             |  1250|         1250|         5|          -|          -|             250|    no    |
        |- COMP_SUM_OF_WEIGHT                                                          |     0|  17179869160|         8|          -|          -| 0 ~ 2147483645 |    no    |
        |- OUTER_LOOP                                                                  |     ?|            ?|         ?|          -|          -|               ?|    no    |
        | + memcpy.correlation_accel_v1(int, int, float*, float*)::bramA.in_indices    |     0|   1073741824|         3|          1|          1| 0 ~ 1073741823 |    yes   |
        | + INNER_LOOP                                                                 |     ?|            ?|         ?|          -|          -|               ?|    no    |
        |  ++ memcpy.correlation_accel_v1(int, int, float*, float*)::bramB.in_indices  |     0|   1073741824|         3|          1|          1| 0 ~ 1073741823 |    yes   |
        |  ++ ACCUMULATION_LOOP                                                        |     ?|            ?|        44|          1|          1|               ?|    yes   |
        |  ++ LAST_ACCUM_LOOP                                                          |    34|           34|        10|          5|          5|               6|    yes   |
        +------------------------------------------------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3
  * Pipeline-1: initiation interval (II) = 1, depth = 3
  * Pipeline-2: initiation interval (II) = 1, depth = 44
  * Pipeline-3: initiation interval (II) = 5, depth = 10


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 198
* Pipeline: 4
  Pipeline-0: II = 1, D = 3, States = { 28 29 30 }
  Pipeline-1: II = 1, D = 3, States = { 47 48 49 }
  Pipeline-2: II = 1, D = 44, States = { 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 }
  Pipeline-3: II = 5, D = 10, States = { 99 100 101 102 103 104 105 106 107 108 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond_i)
	7  / (exitcond_i)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	2  / true
7 --> 
	8  / (tmp_59_i)
	15  / (!tmp_59_i)
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	7  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / (tmp_4)
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	31  / (exitcond4)
	29  / (!exitcond4)
29 --> 
	30  / true
30 --> 
	28  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / (tmp_8)
	21  / (!tmp_8)
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	50  / (exitcond2)
	48  / (!exitcond2)
48 --> 
	49  / true
49 --> 
	47  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	97  / (!tmp_14)
	54  / (tmp_14)
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	53  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	109  / (exitcond)
	100  / (!exitcond)
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	99  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	122  / true
122 --> 
	123  / true
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	126  / true
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	129  / true
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	138  / true
138 --> 
	139  / true
139 --> 
	140  / true
140 --> 
	141  / true
141 --> 
	142  / true
142 --> 
	143  / true
143 --> 
	144  / true
144 --> 
	145  / true
145 --> 
	146  / true
146 --> 
	147  / true
147 --> 
	148  / true
148 --> 
	149  / true
149 --> 
	150  / true
150 --> 
	151  / true
151 --> 
	152  / true
152 --> 
	153  / true
153 --> 
	154  / true
154 --> 
	155  / true
155 --> 
	156  / true
156 --> 
	157  / true
157 --> 
	158  / true
158 --> 
	159  / true
159 --> 
	160  / true
160 --> 
	161  / true
161 --> 
	162  / true
162 --> 
	163  / true
163 --> 
	164  / true
164 --> 
	165  / true
165 --> 
	166  / true
166 --> 
	167  / true
167 --> 
	168  / true
168 --> 
	169  / true
169 --> 
	170  / true
170 --> 
	171  / true
171 --> 
	172  / true
172 --> 
	173  / true
173 --> 
	174  / true
174 --> 
	175  / true
175 --> 
	176  / true
176 --> 
	177  / true
177 --> 
	178  / true
178 --> 
	179  / true
179 --> 
	180  / true
180 --> 
	181  / true
181 --> 
	182  / true
182 --> 
	183  / true
183 --> 
	184  / true
184 --> 
	185  / true
185 --> 
	186  / true
186 --> 
	187  / true
187 --> 
	188  / true
188 --> 
	189  / true
189 --> 
	190  / true
190 --> 
	191  / true
191 --> 
	192  / true
192 --> 
	193  / true
193 --> 
	194  / true
194 --> 
	195  / true
195 --> 
	196  / true
196 --> 
	197  / true
197 --> 
	198  / true
198 --> 
	33  / true
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: out_correlation_read [1/1] 0.00ns
:0  %out_correlation_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %out_correlation)

ST_1: in_indices_read [1/1] 0.00ns
:1  %in_indices_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %in_indices)

ST_1: number_of_indices_read [1/1] 0.00ns
:2  %number_of_indices_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %number_of_indices)

ST_1: number_of_days_read [1/1] 0.00ns
:3  %number_of_days_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %number_of_days)

ST_1: tmp_3 [1/1] 0.00ns
:4  %tmp_3 = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %out_correlation_read, i32 2, i32 31)

ST_1: tmp_61_cast [1/1] 0.00ns
:5  %tmp_61_cast = zext i30 %tmp_3 to i33

ST_1: tmp_5 [1/1] 0.00ns
:6  %tmp_5 = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %in_indices_read, i32 2, i32 31)

ST_1: tmp_62_cast [1/1] 0.00ns
:7  %tmp_62_cast = zext i30 %tmp_5 to i33

ST_1: stg_207 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecBitsMap(float* %gmem32), !map !1

ST_1: stg_208 [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecBitsMap(i32 %number_of_days) nounwind, !map !10

ST_1: stg_209 [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecBitsMap(i32 %number_of_indices) nounwind, !map !16

ST_1: stg_210 [1/1] 0.00ns
:11  call void (...)* @_ssdm_op_SpecBitsMap(i32 0) nounwind, !map !20

ST_1: stg_211 [1/1] 0.00ns
:12  call void (...)* @_ssdm_op_SpecTopModule([21 x i8]* @str) nounwind

ST_1: acc_returnA [1/1] 0.00ns
:13  %acc_returnA = alloca [6 x float], align 16

ST_1: acc_returnB [1/1] 0.00ns
:14  %acc_returnB = alloca [6 x float], align 16

ST_1: acc_weight_returnSquareA [1/1] 0.00ns
:15  %acc_weight_returnSquareA = alloca [6 x float], align 16

ST_1: acc_weight_returnA [1/1] 0.00ns
:16  %acc_weight_returnA = alloca [6 x float], align 16

ST_1: acc_weight_returnSquareB [1/1] 0.00ns
:17  %acc_weight_returnSquareB = alloca [6 x float], align 16

ST_1: acc_weight_returnB [1/1] 0.00ns
:18  %acc_weight_returnB = alloca [6 x float], align 16

ST_1: acc_weight_returnA_returnB [1/1] 0.00ns
:19  %acc_weight_returnA_returnB = alloca [6 x float], align 16

ST_1: stg_219 [1/1] 0.00ns
:20  call void (...)* @_ssdm_op_SpecLatency(i32 1, i32 65535, [1 x i8]* @p_str) nounwind

ST_1: stg_220 [1/1] 0.00ns
:21  call void (...)* @_ssdm_op_SpecInterface(float* %gmem32, [6 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 2520000, [1 x i8]* @p_str, [7 x i8]* @p_str2, [1 x i8]* @p_str)

ST_1: stg_221 [1/1] 0.00ns
:22  call void (...)* @_ssdm_op_SpecInterface(i32 0, [11 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind

ST_1: stg_222 [1/1] 2.39ns
:23  store float 1.000000e+00, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_1: stg_223 [1/1] 2.39ns
:24  store float 1.000000e+00, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 1), align 4

ST_1: stg_224 [1/1] 1.57ns
:25  br label %1


 <State 2>: 5.70ns
ST_2: tmp_i [1/1] 0.00ns
:0  %tmp_i = phi float [ 1.000000e+00, %0 ], [ %tmp_i_5, %2 ]

ST_2: i_i [1/1] 0.00ns
:1  %i_i = phi i8 [ 2, %0 ], [ %i_2, %2 ]

ST_2: exitcond_i [1/1] 2.00ns
:2  %exitcond_i = icmp eq i8 %i_i, -4

ST_2: empty [1/1] 0.00ns
:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 250, i64 250, i64 250) nounwind

ST_2: stg_229 [1/1] 1.57ns
:4  br i1 %exitcond_i, label %.preheader.i, label %2

ST_2: tmp_i_5 [4/4] 5.70ns
:1  %tmp_i_5 = fmul float %tmp_i, 0x3FEE147AE0000000


 <State 3>: 5.70ns
ST_3: tmp_i_5 [3/4] 5.70ns
:1  %tmp_i_5 = fmul float %tmp_i, 0x3FEE147AE0000000


 <State 4>: 5.70ns
ST_4: tmp_i_5 [2/4] 5.70ns
:1  %tmp_i_5 = fmul float %tmp_i, 0x3FEE147AE0000000


 <State 5>: 5.70ns
ST_5: tmp_i_5 [1/4] 5.70ns
:1  %tmp_i_5 = fmul float %tmp_i, 0x3FEE147AE0000000


 <State 6>: 2.39ns
ST_6: stg_234 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([16 x i8]* @p_str9) nounwind

ST_6: tmp_58_i [1/1] 0.00ns
:2  %tmp_58_i = zext i8 %i_i to i64

ST_6: weight_rom_addr_1 [1/1] 0.00ns
:3  %weight_rom_addr_1 = getelementptr [252 x float]* @weight_rom, i64 0, i64 %tmp_58_i

ST_6: stg_237 [1/1] 2.39ns
:4  store float %tmp_i_5, float* %weight_rom_addr_1, align 4

ST_6: i_2 [1/1] 1.72ns
:5  %i_2 = add i8 %i_i, 1

ST_6: stg_239 [1/1] 0.00ns
:6  br label %1


 <State 7>: 2.52ns
ST_7: i1_i [1/1] 0.00ns
.preheader.i:0  %i1_i = phi i31 [ %i_3, %3 ], [ 2, %1 ]

ST_7: i1_i_cast [1/1] 0.00ns
.preheader.i:1  %i1_i_cast = zext i31 %i1_i to i32

ST_7: tmp_59_i [1/1] 2.52ns
.preheader.i:2  %tmp_59_i = icmp slt i32 %i1_i_cast, %number_of_days_read

ST_7: empty_6 [1/1] 0.00ns
.preheader.i:3  %empty_6 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 2147483645, i64 0) nounwind

ST_7: stg_244 [1/1] 0.00ns
.preheader.i:4  br i1 %tmp_59_i, label %3, label %weight_rom_init.exit

ST_7: tmp_60_i [1/1] 0.00ns
:1  %tmp_60_i = zext i31 %i1_i to i64

ST_7: weight_rom_addr_2 [1/1] 0.00ns
:2  %weight_rom_addr_2 = getelementptr [252 x float]* @weight_rom, i64 0, i64 %tmp_60_i

ST_7: weight_rom_load [2/2] 2.39ns
:3  %weight_rom_load = load float* %weight_rom_addr_2, align 4

ST_7: weight_rom_load_1 [2/2] 2.39ns
:4  %weight_rom_load_1 = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_7: i_3 [1/1] 2.44ns
:7  %i_3 = add i31 %i1_i, 1

ST_7: tmp_1 [1/1] 2.44ns
weight_rom_init.exit:1  %tmp_1 = add nsw i32 %number_of_days_read, -1


 <State 8>: 2.39ns
ST_8: weight_rom_load [1/2] 2.39ns
:3  %weight_rom_load = load float* %weight_rom_addr_2, align 4

ST_8: weight_rom_load_1 [1/2] 2.39ns
:4  %weight_rom_load_1 = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16


 <State 9>: 7.26ns
ST_9: tmp_61_i [5/5] 7.26ns
:5  %tmp_61_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 10>: 7.26ns
ST_10: tmp_61_i [4/5] 7.26ns
:5  %tmp_61_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 11>: 7.26ns
ST_11: tmp_61_i [3/5] 7.26ns
:5  %tmp_61_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 12>: 7.26ns
ST_12: tmp_61_i [2/5] 7.26ns
:5  %tmp_61_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 13>: 7.26ns
ST_13: tmp_61_i [1/5] 7.26ns
:5  %tmp_61_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 14>: 2.39ns
ST_14: stg_258 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([19 x i8]* @p_str10) nounwind

ST_14: stg_259 [1/1] 2.39ns
:6  store float %tmp_61_i, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_14: stg_260 [1/1] 0.00ns
:8  br label %.preheader.i


 <State 15>: 6.41ns
ST_15: tmp_2 [6/6] 6.41ns
weight_rom_init.exit:2  %tmp_2 = sitofp i32 %tmp_1 to float


 <State 16>: 6.41ns
ST_16: tmp_2 [5/6] 6.41ns
weight_rom_init.exit:2  %tmp_2 = sitofp i32 %tmp_1 to float


 <State 17>: 6.41ns
ST_17: tmp_2 [4/6] 6.41ns
weight_rom_init.exit:2  %tmp_2 = sitofp i32 %tmp_1 to float


 <State 18>: 6.41ns
ST_18: tmp_2 [3/6] 6.41ns
weight_rom_init.exit:2  %tmp_2 = sitofp i32 %tmp_1 to float


 <State 19>: 6.41ns
ST_19: tmp_2 [2/6] 6.41ns
weight_rom_init.exit:2  %tmp_2 = sitofp i32 %tmp_1 to float


 <State 20>: 6.41ns
ST_20: tmp [1/1] 2.44ns
weight_rom_init.exit:0  %tmp = add nsw i32 %number_of_indices_read, -1

ST_20: tmp_2 [1/6] 6.41ns
weight_rom_init.exit:2  %tmp_2 = sitofp i32 %tmp_1 to float

ST_20: tmp_6 [1/1] 0.00ns
weight_rom_init.exit:3  %tmp_6 = trunc i32 %number_of_days_read to i30

ST_20: p_add_i32_shr [1/1] 0.00ns
weight_rom_init.exit:4  %p_add_i32_shr = zext i30 %tmp_6 to i32

ST_20: acc_returnA_addr [1/1] 0.00ns
weight_rom_init.exit:5  %acc_returnA_addr = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 0

ST_20: acc_returnB_addr [1/1] 0.00ns
weight_rom_init.exit:6  %acc_returnB_addr = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 0

ST_20: acc_weight_returnSquareA_addr [1/1] 0.00ns
weight_rom_init.exit:7  %acc_weight_returnSquareA_addr = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 0

ST_20: acc_weight_returnA_addr [1/1] 0.00ns
weight_rom_init.exit:8  %acc_weight_returnA_addr = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 0

ST_20: acc_weight_returnSquareB_addr [1/1] 0.00ns
weight_rom_init.exit:9  %acc_weight_returnSquareB_addr = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 0

ST_20: acc_weight_returnB_addr [1/1] 0.00ns
weight_rom_init.exit:10  %acc_weight_returnB_addr = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 0

ST_20: acc_weight_returnA_returnB_add [1/1] 0.00ns
weight_rom_init.exit:11  %acc_weight_returnA_returnB_add = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 0

ST_20: acc_returnA_addr_6 [1/1] 0.00ns
weight_rom_init.exit:12  %acc_returnA_addr_6 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 1

ST_20: acc_returnB_addr_6 [1/1] 0.00ns
weight_rom_init.exit:13  %acc_returnB_addr_6 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 1

ST_20: acc_weight_returnSquareA_addr_6 [1/1] 0.00ns
weight_rom_init.exit:14  %acc_weight_returnSquareA_addr_6 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 1

ST_20: acc_weight_returnA_addr_6 [1/1] 0.00ns
weight_rom_init.exit:15  %acc_weight_returnA_addr_6 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 1

ST_20: acc_weight_returnSquareB_addr_6 [1/1] 0.00ns
weight_rom_init.exit:16  %acc_weight_returnSquareB_addr_6 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 1

ST_20: acc_weight_returnB_addr_6 [1/1] 0.00ns
weight_rom_init.exit:17  %acc_weight_returnB_addr_6 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 1

ST_20: acc_weight_returnA_returnB_add_1 [1/1] 0.00ns
weight_rom_init.exit:18  %acc_weight_returnA_returnB_add_1 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 1

ST_20: acc_returnA_addr_7 [1/1] 0.00ns
weight_rom_init.exit:19  %acc_returnA_addr_7 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 2

ST_20: acc_returnB_addr_7 [1/1] 0.00ns
weight_rom_init.exit:20  %acc_returnB_addr_7 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 2

ST_20: acc_weight_returnSquareA_addr_7 [1/1] 0.00ns
weight_rom_init.exit:21  %acc_weight_returnSquareA_addr_7 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 2

ST_20: acc_weight_returnA_addr_7 [1/1] 0.00ns
weight_rom_init.exit:22  %acc_weight_returnA_addr_7 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 2

ST_20: acc_weight_returnSquareB_addr_7 [1/1] 0.00ns
weight_rom_init.exit:23  %acc_weight_returnSquareB_addr_7 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 2

ST_20: acc_weight_returnB_addr_7 [1/1] 0.00ns
weight_rom_init.exit:24  %acc_weight_returnB_addr_7 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 2

ST_20: acc_weight_returnA_returnB_add_2 [1/1] 0.00ns
weight_rom_init.exit:25  %acc_weight_returnA_returnB_add_2 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 2

ST_20: acc_returnA_addr_3 [1/1] 0.00ns
weight_rom_init.exit:26  %acc_returnA_addr_3 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 3

ST_20: acc_returnB_addr_3 [1/1] 0.00ns
weight_rom_init.exit:27  %acc_returnB_addr_3 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 3

ST_20: acc_weight_returnSquareA_addr_3 [1/1] 0.00ns
weight_rom_init.exit:28  %acc_weight_returnSquareA_addr_3 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 3

ST_20: acc_weight_returnA_addr_3 [1/1] 0.00ns
weight_rom_init.exit:29  %acc_weight_returnA_addr_3 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 3

ST_20: acc_weight_returnSquareB_addr_3 [1/1] 0.00ns
weight_rom_init.exit:30  %acc_weight_returnSquareB_addr_3 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 3

ST_20: acc_weight_returnB_addr_3 [1/1] 0.00ns
weight_rom_init.exit:31  %acc_weight_returnB_addr_3 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 3

ST_20: acc_weight_returnA_returnB_add_3 [1/1] 0.00ns
weight_rom_init.exit:32  %acc_weight_returnA_returnB_add_3 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 3

ST_20: acc_returnA_addr_4 [1/1] 0.00ns
weight_rom_init.exit:33  %acc_returnA_addr_4 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 4

ST_20: acc_returnB_addr_4 [1/1] 0.00ns
weight_rom_init.exit:34  %acc_returnB_addr_4 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 4

ST_20: acc_weight_returnSquareA_addr_4 [1/1] 0.00ns
weight_rom_init.exit:35  %acc_weight_returnSquareA_addr_4 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 4

ST_20: acc_weight_returnA_addr_4 [1/1] 0.00ns
weight_rom_init.exit:36  %acc_weight_returnA_addr_4 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 4

ST_20: acc_weight_returnSquareB_addr_4 [1/1] 0.00ns
weight_rom_init.exit:37  %acc_weight_returnSquareB_addr_4 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 4

ST_20: acc_weight_returnB_addr_4 [1/1] 0.00ns
weight_rom_init.exit:38  %acc_weight_returnB_addr_4 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 4

ST_20: acc_weight_returnA_returnB_add_4 [1/1] 0.00ns
weight_rom_init.exit:39  %acc_weight_returnA_returnB_add_4 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 4

ST_20: acc_returnA_addr_5 [1/1] 0.00ns
weight_rom_init.exit:40  %acc_returnA_addr_5 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 5

ST_20: acc_returnB_addr_5 [1/1] 0.00ns
weight_rom_init.exit:41  %acc_returnB_addr_5 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 5

ST_20: acc_weight_returnSquareA_addr_5 [1/1] 0.00ns
weight_rom_init.exit:42  %acc_weight_returnSquareA_addr_5 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 5

ST_20: acc_weight_returnA_addr_5 [1/1] 0.00ns
weight_rom_init.exit:43  %acc_weight_returnA_addr_5 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 5

ST_20: acc_weight_returnSquareB_addr_5 [1/1] 0.00ns
weight_rom_init.exit:44  %acc_weight_returnSquareB_addr_5 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 5

ST_20: acc_weight_returnB_addr_5 [1/1] 0.00ns
weight_rom_init.exit:45  %acc_weight_returnB_addr_5 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 5

ST_20: acc_weight_returnA_returnB_add_5 [1/1] 0.00ns
weight_rom_init.exit:46  %acc_weight_returnA_returnB_add_5 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 5

ST_20: stg_312 [1/1] 1.57ns
weight_rom_init.exit:47  br label %4


 <State 21>: 2.52ns
ST_21: indvars_iv2 [1/1] 0.00ns
:0  %indvars_iv2 = phi i32 [ %indvars_iv_next3, %13 ], [ -1, %weight_rom_init.exit ]

ST_21: indvars_iv [1/1] 0.00ns
:1  %indvars_iv = phi i32 [ %indvars_iv_next, %13 ], [ 1, %weight_rom_init.exit ]

ST_21: row_index [1/1] 0.00ns
:2  %row_index = phi i31 [ %row_index_1, %13 ], [ 0, %weight_rom_init.exit ]

ST_21: counter [1/1] 0.00ns
:3  %counter = phi i32 [ %counter_2, %13 ], [ 0, %weight_rom_init.exit ]

ST_21: phi_mul [1/1] 0.00ns
:4  %phi_mul = phi i32 [ %next_mul, %13 ], [ 0, %weight_rom_init.exit ]

ST_21: next_mul [1/1] 2.44ns
:5  %next_mul = add i32 %phi_mul, %number_of_days_read

ST_21: row_index_cast [1/1] 0.00ns
:6  %row_index_cast = zext i31 %row_index to i32

ST_21: tmp_4 [1/1] 2.52ns
:7  %tmp_4 = icmp slt i32 %row_index_cast, %tmp

ST_21: row_index_1 [1/1] 2.44ns
:8  %row_index_1 = add i31 %row_index, 1

ST_21: stg_322 [1/1] 0.00ns
:9  br i1 %tmp_4, label %5, label %14

ST_21: tmp_9 [1/1] 0.00ns
:2  %tmp_9 = sext i32 %phi_mul to i33

ST_21: tmp_11 [1/1] 2.44ns
:3  %tmp_11 = add i33 %tmp_62_cast, %tmp_9

ST_21: tmp_55 [1/1] 0.00ns
:4  %tmp_55 = sext i33 %tmp_11 to i64

ST_21: gmem32_addr [1/1] 0.00ns
:5  %gmem32_addr = getelementptr float* %gmem32, i64 %tmp_55

ST_21: stg_327 [1/1] 0.00ns
:0  ret i32 0


 <State 22>: 7.44ns
ST_22: p_rd_req [6/6] 7.44ns
:6  %p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr, i32 %p_add_i32_shr)


 <State 23>: 7.44ns
ST_23: p_rd_req [5/6] 7.44ns
:6  %p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr, i32 %p_add_i32_shr)


 <State 24>: 7.44ns
ST_24: p_rd_req [4/6] 7.44ns
:6  %p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr, i32 %p_add_i32_shr)


 <State 25>: 7.44ns
ST_25: p_rd_req [3/6] 7.44ns
:6  %p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr, i32 %p_add_i32_shr)


 <State 26>: 7.44ns
ST_26: p_rd_req [2/6] 7.44ns
:6  %p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr, i32 %p_add_i32_shr)


 <State 27>: 7.44ns
ST_27: stg_333 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([11 x i8]* @p_str4) nounwind

ST_27: tmp_7 [1/1] 0.00ns
:1  %tmp_7 = call i32 (...)* @_ssdm_op_SpecRegionBegin([11 x i8]* @p_str4) nounwind

ST_27: p_rd_req [1/6] 7.44ns
:6  %p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr, i32 %p_add_i32_shr)

ST_27: stg_336 [1/1] 1.57ns
:7  br label %burst.rd.header


 <State 28>: 2.49ns
ST_28: indvar [1/1] 0.00ns
burst.rd.header:0  %indvar = phi i30 [ 0, %5 ], [ %indvar_next, %burst.rd.body ]

ST_28: exitcond4 [1/1] 2.49ns
burst.rd.header:1  %exitcond4 = icmp eq i30 %indvar, %tmp_6

ST_28: empty_7 [1/1] 0.00ns
burst.rd.header:2  %empty_7 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 1073741823, i64 0) nounwind

ST_28: indvar_next [1/1] 2.44ns
burst.rd.header:3  %indvar_next = add i30 %indvar, 1

ST_28: stg_341 [1/1] 0.00ns
burst.rd.header:4  br i1 %exitcond4, label %burst.rd.end, label %burst.rd.body


 <State 29>: 7.44ns
ST_29: gmem32_addr_read [1/1] 7.44ns
burst.rd.body:3  %gmem32_addr_read = call float @_ssdm_op_Read.m_axi.floatP(float* %gmem32_addr)


 <State 30>: 2.39ns
ST_30: burstread_rbegin [1/1] 0.00ns
burst.rd.body:0  %burstread_rbegin = call i32 (...)* @_ssdm_op_SpecRegionBegin([17 x i8]* @p_str11) nounwind

ST_30: stg_344 [1/1] 0.00ns
burst.rd.body:1  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @str2)

ST_30: stg_345 [1/1] 0.00ns
burst.rd.body:2  call void (...)* @_ssdm_op_SpecLoopName([72 x i8]* @str1)

ST_30: tmp_s [1/1] 0.00ns
burst.rd.body:4  %tmp_s = zext i30 %indvar to i64

ST_30: bramA_addr [1/1] 0.00ns
burst.rd.body:5  %bramA_addr = getelementptr [252 x float]* @bramA, i64 0, i64 %tmp_s

ST_30: stg_348 [1/1] 2.39ns
burst.rd.body:6  store float %gmem32_addr_read, float* %bramA_addr, align 4

ST_30: burstread_rend [1/1] 0.00ns
burst.rd.body:7  %burstread_rend = call i32 (...)* @_ssdm_op_SpecRegionEnd([17 x i8]* @p_str11, i32 %burstread_rbegin) nounwind

ST_30: stg_350 [1/1] 0.00ns
burst.rd.body:8  br label %burst.rd.header


 <State 31>: 2.52ns
ST_31: tmp_61 [1/1] 2.52ns
burst.rd.end:0  %tmp_61 = icmp slt i32 %indvars_iv, %number_of_indices_read


 <State 32>: 5.31ns
ST_32: smax [1/1] 1.37ns
burst.rd.end:1  %smax = select i1 %tmp_61, i32 %number_of_indices_read, i32 %indvars_iv

ST_32: tmp_13 [1/1] 1.97ns
burst.rd.end:2  %tmp_13 = add i32 %smax, %indvars_iv2

ST_32: counter_2 [1/1] 1.97ns
burst.rd.end:3  %counter_2 = add i32 %counter, %tmp_13

ST_32: stg_355 [1/1] 1.57ns
burst.rd.end:4  br label %6


 <State 33>: 4.96ns
ST_33: column_index_0_in [1/1] 0.00ns
:0  %column_index_0_in = phi i32 [ %row_index_cast, %burst.rd.end ], [ %column_index, %12 ]

ST_33: counter_1 [1/1] 0.00ns
:1  %counter_1 = phi i32 [ %counter, %burst.rd.end ], [ %tmp_56, %12 ]

ST_33: column_index [1/1] 2.44ns
:2  %column_index = add nsw i32 %column_index_0_in, 1

ST_33: tmp_8 [1/1] 2.52ns
:3  %tmp_8 = icmp slt i32 %column_index, %number_of_indices_read

ST_33: stg_360 [1/1] 0.00ns
:4  br i1 %tmp_8, label %7, label %13

ST_33: empty_13 [1/1] 0.00ns
:0  %empty_13 = call i32 (...)* @_ssdm_op_SpecRegionEnd([11 x i8]* @p_str4, i32 %tmp_7) nounwind

ST_33: indvars_iv_next [1/1] 2.44ns
:1  %indvars_iv_next = add i32 %indvars_iv, 1

ST_33: indvars_iv_next3 [1/1] 2.44ns
:2  %indvars_iv_next3 = add i32 %indvars_iv2, -1

ST_33: stg_364 [1/1] 0.00ns
:3  br label %4


 <State 34>: 6.08ns
ST_34: tmp_10 [6/6] 6.08ns
:2  %tmp_10 = mul nsw i32 %column_index, %number_of_days_read


 <State 35>: 6.08ns
ST_35: tmp_10 [5/6] 6.08ns
:2  %tmp_10 = mul nsw i32 %column_index, %number_of_days_read


 <State 36>: 6.08ns
ST_36: tmp_10 [4/6] 6.08ns
:2  %tmp_10 = mul nsw i32 %column_index, %number_of_days_read


 <State 37>: 6.08ns
ST_37: tmp_10 [3/6] 6.08ns
:2  %tmp_10 = mul nsw i32 %column_index, %number_of_days_read


 <State 38>: 6.08ns
ST_38: tmp_10 [2/6] 6.08ns
:2  %tmp_10 = mul nsw i32 %column_index, %number_of_days_read


 <State 39>: 6.08ns
ST_39: tmp_10 [1/6] 6.08ns
:2  %tmp_10 = mul nsw i32 %column_index, %number_of_days_read


 <State 40>: 2.44ns
ST_40: tmp_62 [1/1] 0.00ns
:3  %tmp_62 = sext i32 %tmp_10 to i33

ST_40: tmp_63 [1/1] 2.44ns
:4  %tmp_63 = add i33 %tmp_62_cast, %tmp_62

ST_40: tmp_64 [1/1] 0.00ns
:5  %tmp_64 = sext i33 %tmp_63 to i64

ST_40: gmem32_addr_1 [1/1] 0.00ns
:6  %gmem32_addr_1 = getelementptr float* %gmem32, i64 %tmp_64


 <State 41>: 7.44ns
ST_41: p_rd_req12 [6/6] 7.44ns
:7  %p_rd_req12 = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr_1, i32 %p_add_i32_shr)


 <State 42>: 7.44ns
ST_42: p_rd_req12 [5/6] 7.44ns
:7  %p_rd_req12 = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr_1, i32 %p_add_i32_shr)


 <State 43>: 7.44ns
ST_43: p_rd_req12 [4/6] 7.44ns
:7  %p_rd_req12 = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr_1, i32 %p_add_i32_shr)


 <State 44>: 7.44ns
ST_44: p_rd_req12 [3/6] 7.44ns
:7  %p_rd_req12 = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr_1, i32 %p_add_i32_shr)


 <State 45>: 7.44ns
ST_45: p_rd_req12 [2/6] 7.44ns
:7  %p_rd_req12 = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr_1, i32 %p_add_i32_shr)


 <State 46>: 7.44ns
ST_46: stg_380 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([11 x i8]* @p_str5) nounwind

ST_46: tmp_58 [1/1] 0.00ns
:1  %tmp_58 = call i32 (...)* @_ssdm_op_SpecRegionBegin([11 x i8]* @p_str5) nounwind

ST_46: p_rd_req12 [1/6] 7.44ns
:7  %p_rd_req12 = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %gmem32_addr_1, i32 %p_add_i32_shr)

ST_46: stg_383 [1/1] 1.57ns
:8  br label %burst.rd.header8


 <State 47>: 2.49ns
ST_47: indvar1 [1/1] 0.00ns
burst.rd.header8:0  %indvar1 = phi i30 [ 0, %7 ], [ %indvar_next1, %burst.rd.body9 ]

ST_47: exitcond2 [1/1] 2.49ns
burst.rd.header8:1  %exitcond2 = icmp eq i30 %indvar1, %tmp_6

ST_47: empty_8 [1/1] 0.00ns
burst.rd.header8:2  %empty_8 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 1073741823, i64 0) nounwind

ST_47: indvar_next1 [1/1] 2.44ns
burst.rd.header8:3  %indvar_next1 = add i30 %indvar1, 1

ST_47: stg_388 [1/1] 0.00ns
burst.rd.header8:4  br i1 %exitcond2, label %burst.rd.end7.0, label %burst.rd.body9


 <State 48>: 7.44ns
ST_48: gmem32_addr_1_read [1/1] 7.44ns
burst.rd.body9:3  %gmem32_addr_1_read = call float @_ssdm_op_Read.m_axi.floatP(float* %gmem32_addr_1)


 <State 49>: 2.39ns
ST_49: burstread_rbegin1 [1/1] 0.00ns
burst.rd.body9:0  %burstread_rbegin1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([17 x i8]* @p_str15) nounwind

ST_49: stg_391 [1/1] 0.00ns
burst.rd.body9:1  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @str13)

ST_49: stg_392 [1/1] 0.00ns
burst.rd.body9:2  call void (...)* @_ssdm_op_SpecLoopName([72 x i8]* @str12)

ST_49: tmp_12 [1/1] 0.00ns
burst.rd.body9:4  %tmp_12 = zext i30 %indvar1 to i64

ST_49: bramB_addr [1/1] 0.00ns
burst.rd.body9:5  %bramB_addr = getelementptr [252 x float]* @bramB, i64 0, i64 %tmp_12

ST_49: stg_395 [1/1] 2.39ns
burst.rd.body9:6  store float %gmem32_addr_1_read, float* %bramB_addr, align 4

ST_49: burstread_rend18 [1/1] 0.00ns
burst.rd.body9:7  %burstread_rend18 = call i32 (...)* @_ssdm_op_SpecRegionEnd([17 x i8]* @p_str15, i32 %burstread_rbegin1) nounwind

ST_49: stg_397 [1/1] 0.00ns
burst.rd.body9:8  br label %burst.rd.header8


 <State 50>: 2.39ns
ST_50: stg_398 [1/1] 2.39ns
burst.rd.end7.0:0  store float 0.000000e+00, float* %acc_returnA_addr, align 16

ST_50: stg_399 [1/1] 2.39ns
burst.rd.end7.0:1  store float 0.000000e+00, float* %acc_returnB_addr, align 16

ST_50: stg_400 [1/1] 2.39ns
burst.rd.end7.0:2  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr, align 16

ST_50: stg_401 [1/1] 2.39ns
burst.rd.end7.0:3  store float 0.000000e+00, float* %acc_weight_returnA_addr, align 16

ST_50: stg_402 [1/1] 2.39ns
burst.rd.end7.0:4  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr, align 16

ST_50: stg_403 [1/1] 2.39ns
burst.rd.end7.0:5  store float 0.000000e+00, float* %acc_weight_returnB_addr, align 16

ST_50: stg_404 [1/1] 2.39ns
burst.rd.end7.0:6  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add, align 16

ST_50: stg_405 [1/1] 2.39ns
burst.rd.end7.0:7  store float 0.000000e+00, float* %acc_returnA_addr_6, align 4

ST_50: stg_406 [1/1] 2.39ns
burst.rd.end7.0:8  store float 0.000000e+00, float* %acc_returnB_addr_6, align 4

ST_50: stg_407 [1/1] 2.39ns
burst.rd.end7.0:9  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_6, align 4

ST_50: stg_408 [1/1] 2.39ns
burst.rd.end7.0:10  store float 0.000000e+00, float* %acc_weight_returnA_addr_6, align 4

ST_50: stg_409 [1/1] 2.39ns
burst.rd.end7.0:11  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_6, align 4

ST_50: stg_410 [1/1] 2.39ns
burst.rd.end7.0:12  store float 0.000000e+00, float* %acc_weight_returnB_addr_6, align 4

ST_50: stg_411 [1/1] 2.39ns
burst.rd.end7.0:13  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_1, align 4


 <State 51>: 2.39ns
ST_51: stg_412 [1/1] 2.39ns
burst.rd.end7.0:14  store float 0.000000e+00, float* %acc_returnA_addr_7, align 8

ST_51: stg_413 [1/1] 2.39ns
burst.rd.end7.0:15  store float 0.000000e+00, float* %acc_returnB_addr_7, align 8

ST_51: stg_414 [1/1] 2.39ns
burst.rd.end7.0:16  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_7, align 8

ST_51: stg_415 [1/1] 2.39ns
burst.rd.end7.0:17  store float 0.000000e+00, float* %acc_weight_returnA_addr_7, align 8

ST_51: stg_416 [1/1] 2.39ns
burst.rd.end7.0:18  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_7, align 8

ST_51: stg_417 [1/1] 2.39ns
burst.rd.end7.0:19  store float 0.000000e+00, float* %acc_weight_returnB_addr_7, align 8

ST_51: stg_418 [1/1] 2.39ns
burst.rd.end7.0:20  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_2, align 8

ST_51: stg_419 [1/1] 2.39ns
burst.rd.end7.0:21  store float 0.000000e+00, float* %acc_returnA_addr_3, align 4

ST_51: stg_420 [1/1] 2.39ns
burst.rd.end7.0:22  store float 0.000000e+00, float* %acc_returnB_addr_3, align 4

ST_51: stg_421 [1/1] 2.39ns
burst.rd.end7.0:23  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_3, align 4

ST_51: stg_422 [1/1] 2.39ns
burst.rd.end7.0:24  store float 0.000000e+00, float* %acc_weight_returnA_addr_3, align 4

ST_51: stg_423 [1/1] 2.39ns
burst.rd.end7.0:25  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_3, align 4

ST_51: stg_424 [1/1] 2.39ns
burst.rd.end7.0:26  store float 0.000000e+00, float* %acc_weight_returnB_addr_3, align 4

ST_51: stg_425 [1/1] 2.39ns
burst.rd.end7.0:27  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_3, align 4


 <State 52>: 2.39ns
ST_52: stg_426 [1/1] 2.39ns
burst.rd.end7.0:28  store float 0.000000e+00, float* %acc_returnA_addr_4, align 16

ST_52: stg_427 [1/1] 2.39ns
burst.rd.end7.0:29  store float 0.000000e+00, float* %acc_returnB_addr_4, align 16

ST_52: stg_428 [1/1] 2.39ns
burst.rd.end7.0:30  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_4, align 16

ST_52: stg_429 [1/1] 2.39ns
burst.rd.end7.0:31  store float 0.000000e+00, float* %acc_weight_returnA_addr_4, align 16

ST_52: stg_430 [1/1] 2.39ns
burst.rd.end7.0:32  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_4, align 16

ST_52: stg_431 [1/1] 2.39ns
burst.rd.end7.0:33  store float 0.000000e+00, float* %acc_weight_returnB_addr_4, align 16

ST_52: stg_432 [1/1] 2.39ns
burst.rd.end7.0:34  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_4, align 16

ST_52: stg_433 [1/1] 2.39ns
burst.rd.end7.0:35  store float 0.000000e+00, float* %acc_returnA_addr_5, align 4

ST_52: stg_434 [1/1] 2.39ns
burst.rd.end7.0:36  store float 0.000000e+00, float* %acc_returnB_addr_5, align 4

ST_52: stg_435 [1/1] 2.39ns
burst.rd.end7.0:37  store float 0.000000e+00, float* %acc_weight_returnSquareA_addr_5, align 4

ST_52: stg_436 [1/1] 2.39ns
burst.rd.end7.0:38  store float 0.000000e+00, float* %acc_weight_returnA_addr_5, align 4

ST_52: stg_437 [1/1] 2.39ns
burst.rd.end7.0:39  store float 0.000000e+00, float* %acc_weight_returnSquareB_addr_5, align 4

ST_52: stg_438 [1/1] 2.39ns
burst.rd.end7.0:40  store float 0.000000e+00, float* %acc_weight_returnB_addr_5, align 4

ST_52: stg_439 [1/1] 2.39ns
burst.rd.end7.0:41  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_5, align 4

ST_52: stg_440 [1/1] 1.57ns
burst.rd.end7.0:42  br label %.preheader


 <State 53>: 4.83ns
ST_53: i1 [1/1] 0.00ns
.preheader:0  %i1 = phi i31 [ %i, %8 ], [ 0, %burst.rd.end7.0 ]

ST_53: i1_cast [1/1] 0.00ns
.preheader:1  %i1_cast = zext i31 %i1 to i32

ST_53: tmp_14 [1/1] 2.52ns
.preheader:2  %tmp_14 = icmp slt i32 %i1_cast, %tmp_1

ST_53: i [1/1] 2.44ns
.preheader:3  %i = add i31 %i1, 1

ST_53: stg_445 [1/1] 0.00ns
.preheader:4  br i1 %tmp_14, label %8, label %9

ST_53: tmp_15 [1/1] 0.00ns
:3  %tmp_15 = zext i31 %i1 to i64

ST_53: bramA_addr_1 [1/1] 0.00ns
:4  %bramA_addr_1 = getelementptr inbounds [252 x float]* @bramA, i64 0, i64 %tmp_15

ST_53: bramA_load [2/2] 2.39ns
:5  %bramA_load = load float* %bramA_addr_1, align 4

ST_53: tmp_16 [1/1] 0.00ns
:6  %tmp_16 = zext i31 %i to i64

ST_53: bramA_addr_2 [1/1] 0.00ns
:7  %bramA_addr_2 = getelementptr inbounds [252 x float]* @bramA, i64 0, i64 %tmp_16

ST_53: bramA_load_1 [2/2] 2.39ns
:8  %bramA_load_1 = load float* %bramA_addr_2, align 4

ST_53: bramB_addr_1 [1/1] 0.00ns
:11  %bramB_addr_1 = getelementptr inbounds [252 x float]* @bramB, i64 0, i64 %tmp_15

ST_53: bramB_load [2/2] 2.39ns
:12  %bramB_load = load float* %bramB_addr_1, align 4

ST_53: bramB_addr_2 [1/1] 0.00ns
:13  %bramB_addr_2 = getelementptr inbounds [252 x float]* @bramB, i64 0, i64 %tmp_16

ST_53: bramB_load_1 [2/2] 2.39ns
:14  %bramB_load_1 = load float* %bramB_addr_2, align 4

ST_53: weight_rom_addr [1/1] 0.00ns
:17  %weight_rom_addr = getelementptr inbounds [252 x float]* @weight_rom, i64 0, i64 %tmp_16

ST_53: weight [2/2] 2.39ns
:18  %weight = load float* %weight_rom_addr, align 4

ST_53: tmp_19 [35/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 54>: 4.58ns
ST_54: bramA_load [1/2] 2.39ns
:5  %bramA_load = load float* %bramA_addr_1, align 4

ST_54: bramA_load_1 [1/2] 2.39ns
:8  %bramA_load_1 = load float* %bramA_addr_2, align 4

ST_54: bramB_load [1/2] 2.39ns
:12  %bramB_load = load float* %bramB_addr_1, align 4

ST_54: bramB_load_1 [1/2] 2.39ns
:14  %bramB_load_1 = load float* %bramB_addr_2, align 4

ST_54: weight [1/2] 2.39ns
:18  %weight = load float* %weight_rom_addr, align 4

ST_54: tmp_19 [34/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 55>: 6.08ns
ST_55: tmp_17 [16/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_55: tmp_18 [16/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_55: tmp_19 [33/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 56>: 6.08ns
ST_56: tmp_17 [15/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_56: tmp_18 [15/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_56: tmp_19 [32/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 57>: 6.08ns
ST_57: tmp_17 [14/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_57: tmp_18 [14/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_57: tmp_19 [31/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 58>: 6.08ns
ST_58: tmp_17 [13/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_58: tmp_18 [13/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_58: tmp_19 [30/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 59>: 6.08ns
ST_59: tmp_17 [12/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_59: tmp_18 [12/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_59: tmp_19 [29/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 60>: 6.08ns
ST_60: tmp_17 [11/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_60: tmp_18 [11/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_60: tmp_19 [28/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 61>: 6.08ns
ST_61: tmp_17 [10/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_61: tmp_18 [10/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_61: tmp_19 [27/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 62>: 6.08ns
ST_62: tmp_17 [9/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_62: tmp_18 [9/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_62: tmp_19 [26/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 63>: 6.08ns
ST_63: tmp_17 [8/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_63: tmp_18 [8/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_63: tmp_19 [25/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 64>: 6.08ns
ST_64: tmp_17 [7/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_64: tmp_18 [7/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_64: tmp_19 [24/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 65>: 6.08ns
ST_65: tmp_17 [6/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_65: tmp_18 [6/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_65: tmp_19 [23/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 66>: 6.08ns
ST_66: tmp_17 [5/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_66: tmp_18 [5/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_66: tmp_19 [22/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 67>: 6.08ns
ST_67: tmp_17 [4/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_67: tmp_18 [4/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_67: tmp_19 [21/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 68>: 6.08ns
ST_68: tmp_17 [3/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_68: tmp_18 [3/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_68: tmp_19 [20/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 69>: 6.08ns
ST_69: tmp_17 [2/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_69: tmp_18 [2/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_69: tmp_19 [19/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 70>: 6.08ns
ST_70: tmp_17 [1/16] 6.08ns
:9  %tmp_17 = fdiv float %bramA_load, %bramA_load_1

ST_70: tmp_18 [1/16] 6.08ns
:15  %tmp_18 = fdiv float %bramB_load, %bramB_load_1

ST_70: tmp_19 [18/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 71>: 7.09ns
ST_71: lnReturnA [13/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_71: lnReturnB [13/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_71: tmp_19 [17/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 72>: 7.09ns
ST_72: lnReturnA [12/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_72: lnReturnB [12/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_72: tmp_19 [16/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 73>: 7.09ns
ST_73: lnReturnA [11/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_73: lnReturnB [11/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_73: tmp_19 [15/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 74>: 7.09ns
ST_74: lnReturnA [10/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_74: lnReturnB [10/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_74: tmp_19 [14/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 75>: 7.09ns
ST_75: lnReturnA [9/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_75: lnReturnB [9/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_75: tmp_19 [13/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 76>: 7.09ns
ST_76: lnReturnA [8/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_76: lnReturnB [8/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_76: tmp_19 [12/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 77>: 7.09ns
ST_77: lnReturnA [7/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_77: lnReturnB [7/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_77: tmp_19 [11/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 78>: 7.09ns
ST_78: lnReturnA [6/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_78: lnReturnB [6/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_78: tmp_19 [10/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 79>: 7.09ns
ST_79: lnReturnA [5/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_79: lnReturnB [5/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_79: tmp_19 [9/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 80>: 7.09ns
ST_80: lnReturnA [4/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_80: lnReturnB [4/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_80: tmp_19 [8/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 81>: 7.09ns
ST_81: lnReturnA [3/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_81: lnReturnB [3/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_81: tmp_19 [7/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 82>: 7.09ns
ST_82: lnReturnA [2/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_82: lnReturnB [2/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_82: tmp_19 [6/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 83>: 7.09ns
ST_83: lnReturnA [1/13] 7.09ns
:10  %lnReturnA = call float @llvm.log.f32(float %tmp_17)

ST_83: lnReturnB [1/13] 7.09ns
:16  %lnReturnB = call float @llvm.log.f32(float %tmp_18)

ST_83: tmp_19 [5/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6


 <State 84>: 5.70ns
ST_84: tmp_19 [4/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6

ST_84: tmp_23 [4/4] 5.70ns
:29  %tmp_23 = fmul float %lnReturnA, %lnReturnA

ST_84: tmp_26 [4/4] 5.70ns
:35  %tmp_26 = fmul float %lnReturnB, %lnReturnB

ST_84: tmp_29 [4/4] 5.70ns
:41  %tmp_29 = fmul float %lnReturnA, %weight

ST_84: tmp_31 [4/4] 5.70ns
:46  %tmp_31 = fmul float %lnReturnB, %weight

ST_84: tmp_33 [4/4] 5.70ns
:51  %tmp_33 = fmul float %lnReturnA, %lnReturnB


 <State 85>: 5.70ns
ST_85: tmp_19 [3/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6

ST_85: tmp_23 [3/4] 5.70ns
:29  %tmp_23 = fmul float %lnReturnA, %lnReturnA

ST_85: tmp_26 [3/4] 5.70ns
:35  %tmp_26 = fmul float %lnReturnB, %lnReturnB

ST_85: tmp_29 [3/4] 5.70ns
:41  %tmp_29 = fmul float %lnReturnA, %weight

ST_85: tmp_31 [3/4] 5.70ns
:46  %tmp_31 = fmul float %lnReturnB, %weight

ST_85: tmp_33 [3/4] 5.70ns
:51  %tmp_33 = fmul float %lnReturnA, %lnReturnB


 <State 86>: 5.70ns
ST_86: tmp_19 [2/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6

ST_86: tmp_23 [2/4] 5.70ns
:29  %tmp_23 = fmul float %lnReturnA, %lnReturnA

ST_86: tmp_26 [2/4] 5.70ns
:35  %tmp_26 = fmul float %lnReturnB, %lnReturnB

ST_86: tmp_29 [2/4] 5.70ns
:41  %tmp_29 = fmul float %lnReturnA, %weight

ST_86: tmp_31 [2/4] 5.70ns
:46  %tmp_31 = fmul float %lnReturnB, %weight

ST_86: tmp_33 [2/4] 5.70ns
:51  %tmp_33 = fmul float %lnReturnA, %lnReturnB


 <State 87>: 6.97ns
ST_87: tmp_19 [1/35] 4.58ns
:19  %tmp_19 = urem i31 %i1, 6

ST_87: tmp_20 [1/1] 0.00ns
:20  %tmp_20 = zext i31 %tmp_19 to i64

ST_87: acc_returnA_addr_1 [1/1] 0.00ns
:21  %acc_returnA_addr_1 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 %tmp_20

ST_87: acc_returnA_load [2/2] 2.39ns
:22  %acc_returnA_load = load float* %acc_returnA_addr_1, align 4

ST_87: acc_returnB_addr_1 [1/1] 0.00ns
:25  %acc_returnB_addr_1 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 %tmp_20

ST_87: acc_returnB_load [2/2] 2.39ns
:26  %acc_returnB_load = load float* %acc_returnB_addr_1, align 4

ST_87: tmp_23 [1/4] 5.70ns
:29  %tmp_23 = fmul float %lnReturnA, %lnReturnA

ST_87: acc_weight_returnSquareA_addr_1 [1/1] 0.00ns
:31  %acc_weight_returnSquareA_addr_1 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 %tmp_20

ST_87: tmp_26 [1/4] 5.70ns
:35  %tmp_26 = fmul float %lnReturnB, %lnReturnB

ST_87: acc_weight_returnSquareB_addr_1 [1/1] 0.00ns
:37  %acc_weight_returnSquareB_addr_1 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 %tmp_20

ST_87: tmp_29 [1/4] 5.70ns
:41  %tmp_29 = fmul float %lnReturnA, %weight

ST_87: acc_weight_returnA_addr_1 [1/1] 0.00ns
:42  %acc_weight_returnA_addr_1 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 %tmp_20

ST_87: acc_weight_returnA_load [2/2] 2.39ns
:43  %acc_weight_returnA_load = load float* %acc_weight_returnA_addr_1, align 4

ST_87: tmp_31 [1/4] 5.70ns
:46  %tmp_31 = fmul float %lnReturnB, %weight

ST_87: acc_weight_returnB_addr_1 [1/1] 0.00ns
:47  %acc_weight_returnB_addr_1 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 %tmp_20

ST_87: acc_weight_returnB_load [2/2] 2.39ns
:48  %acc_weight_returnB_load = load float* %acc_weight_returnB_addr_1, align 4

ST_87: tmp_33 [1/4] 5.70ns
:51  %tmp_33 = fmul float %lnReturnA, %lnReturnB

ST_87: acc_weight_returnA_returnB_add_6 [1/1] 0.00ns
:53  %acc_weight_returnA_returnB_add_6 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 %tmp_20


 <State 88>: 9.65ns
ST_88: acc_returnA_load [1/2] 2.39ns
:22  %acc_returnA_load = load float* %acc_returnA_addr_1, align 4

ST_88: tmp_21 [5/5] 7.26ns
:23  %tmp_21 = fadd float %acc_returnA_load, %lnReturnA

ST_88: acc_returnB_load [1/2] 2.39ns
:26  %acc_returnB_load = load float* %acc_returnB_addr_1, align 4

ST_88: tmp_22 [5/5] 7.26ns
:27  %tmp_22 = fadd float %acc_returnB_load, %lnReturnB

ST_88: tmp_24 [4/4] 5.70ns
:30  %tmp_24 = fmul float %tmp_23, %weight

ST_88: tmp_27 [4/4] 5.70ns
:36  %tmp_27 = fmul float %tmp_26, %weight

ST_88: acc_weight_returnA_load [1/2] 2.39ns
:43  %acc_weight_returnA_load = load float* %acc_weight_returnA_addr_1, align 4

ST_88: tmp_30 [5/5] 7.26ns
:44  %tmp_30 = fadd float %acc_weight_returnA_load, %tmp_29

ST_88: acc_weight_returnB_load [1/2] 2.39ns
:48  %acc_weight_returnB_load = load float* %acc_weight_returnB_addr_1, align 4

ST_88: tmp_32 [5/5] 7.26ns
:49  %tmp_32 = fadd float %acc_weight_returnB_load, %tmp_31

ST_88: tmp_34 [4/4] 5.70ns
:52  %tmp_34 = fmul float %tmp_33, %weight


 <State 89>: 7.26ns
ST_89: tmp_21 [4/5] 7.26ns
:23  %tmp_21 = fadd float %acc_returnA_load, %lnReturnA

ST_89: tmp_22 [4/5] 7.26ns
:27  %tmp_22 = fadd float %acc_returnB_load, %lnReturnB

ST_89: tmp_24 [3/4] 5.70ns
:30  %tmp_24 = fmul float %tmp_23, %weight

ST_89: tmp_27 [3/4] 5.70ns
:36  %tmp_27 = fmul float %tmp_26, %weight

ST_89: tmp_30 [4/5] 7.26ns
:44  %tmp_30 = fadd float %acc_weight_returnA_load, %tmp_29

ST_89: tmp_32 [4/5] 7.26ns
:49  %tmp_32 = fadd float %acc_weight_returnB_load, %tmp_31

ST_89: tmp_34 [3/4] 5.70ns
:52  %tmp_34 = fmul float %tmp_33, %weight


 <State 90>: 7.26ns
ST_90: tmp_21 [3/5] 7.26ns
:23  %tmp_21 = fadd float %acc_returnA_load, %lnReturnA

ST_90: tmp_22 [3/5] 7.26ns
:27  %tmp_22 = fadd float %acc_returnB_load, %lnReturnB

ST_90: tmp_24 [2/4] 5.70ns
:30  %tmp_24 = fmul float %tmp_23, %weight

ST_90: tmp_27 [2/4] 5.70ns
:36  %tmp_27 = fmul float %tmp_26, %weight

ST_90: tmp_30 [3/5] 7.26ns
:44  %tmp_30 = fadd float %acc_weight_returnA_load, %tmp_29

ST_90: tmp_32 [3/5] 7.26ns
:49  %tmp_32 = fadd float %acc_weight_returnB_load, %tmp_31

ST_90: tmp_34 [2/4] 5.70ns
:52  %tmp_34 = fmul float %tmp_33, %weight


 <State 91>: 7.26ns
ST_91: tmp_21 [2/5] 7.26ns
:23  %tmp_21 = fadd float %acc_returnA_load, %lnReturnA

ST_91: tmp_22 [2/5] 7.26ns
:27  %tmp_22 = fadd float %acc_returnB_load, %lnReturnB

ST_91: tmp_24 [1/4] 5.70ns
:30  %tmp_24 = fmul float %tmp_23, %weight

ST_91: acc_weight_returnSquareA_load [2/2] 2.39ns
:32  %acc_weight_returnSquareA_load = load float* %acc_weight_returnSquareA_addr_1, align 4

ST_91: tmp_27 [1/4] 5.70ns
:36  %tmp_27 = fmul float %tmp_26, %weight

ST_91: acc_weight_returnSquareB_load [2/2] 2.39ns
:38  %acc_weight_returnSquareB_load = load float* %acc_weight_returnSquareB_addr_1, align 4

ST_91: tmp_30 [2/5] 7.26ns
:44  %tmp_30 = fadd float %acc_weight_returnA_load, %tmp_29

ST_91: tmp_32 [2/5] 7.26ns
:49  %tmp_32 = fadd float %acc_weight_returnB_load, %tmp_31

ST_91: tmp_34 [1/4] 5.70ns
:52  %tmp_34 = fmul float %tmp_33, %weight

ST_91: acc_weight_returnA_returnB_loa [2/2] 2.39ns
:54  %acc_weight_returnA_returnB_loa = load float* %acc_weight_returnA_returnB_add_6, align 4


 <State 92>: 9.65ns
ST_92: tmp_21 [1/5] 7.26ns
:23  %tmp_21 = fadd float %acc_returnA_load, %lnReturnA

ST_92: stg_624 [1/1] 2.39ns
:24  store float %tmp_21, float* %acc_returnA_addr_1, align 4

ST_92: tmp_22 [1/5] 7.26ns
:27  %tmp_22 = fadd float %acc_returnB_load, %lnReturnB

ST_92: stg_626 [1/1] 2.39ns
:28  store float %tmp_22, float* %acc_returnB_addr_1, align 4

ST_92: acc_weight_returnSquareA_load [1/2] 2.39ns
:32  %acc_weight_returnSquareA_load = load float* %acc_weight_returnSquareA_addr_1, align 4

ST_92: tmp_25 [5/5] 7.26ns
:33  %tmp_25 = fadd float %acc_weight_returnSquareA_load, %tmp_24

ST_92: acc_weight_returnSquareB_load [1/2] 2.39ns
:38  %acc_weight_returnSquareB_load = load float* %acc_weight_returnSquareB_addr_1, align 4

ST_92: tmp_28 [5/5] 7.26ns
:39  %tmp_28 = fadd float %acc_weight_returnSquareB_load, %tmp_27

ST_92: tmp_30 [1/5] 7.26ns
:44  %tmp_30 = fadd float %acc_weight_returnA_load, %tmp_29

ST_92: stg_632 [1/1] 2.39ns
:45  store float %tmp_30, float* %acc_weight_returnA_addr_1, align 4

ST_92: tmp_32 [1/5] 7.26ns
:49  %tmp_32 = fadd float %acc_weight_returnB_load, %tmp_31

ST_92: stg_634 [1/1] 2.39ns
:50  store float %tmp_32, float* %acc_weight_returnB_addr_1, align 4

ST_92: acc_weight_returnA_returnB_loa [1/2] 2.39ns
:54  %acc_weight_returnA_returnB_loa = load float* %acc_weight_returnA_returnB_add_6, align 4

ST_92: tmp_35 [5/5] 7.26ns
:55  %tmp_35 = fadd float %acc_weight_returnA_returnB_loa, %tmp_34


 <State 93>: 7.26ns
ST_93: tmp_25 [4/5] 7.26ns
:33  %tmp_25 = fadd float %acc_weight_returnSquareA_load, %tmp_24

ST_93: tmp_28 [4/5] 7.26ns
:39  %tmp_28 = fadd float %acc_weight_returnSquareB_load, %tmp_27

ST_93: tmp_35 [4/5] 7.26ns
:55  %tmp_35 = fadd float %acc_weight_returnA_returnB_loa, %tmp_34


 <State 94>: 7.26ns
ST_94: tmp_25 [3/5] 7.26ns
:33  %tmp_25 = fadd float %acc_weight_returnSquareA_load, %tmp_24

ST_94: tmp_28 [3/5] 7.26ns
:39  %tmp_28 = fadd float %acc_weight_returnSquareB_load, %tmp_27

ST_94: tmp_35 [3/5] 7.26ns
:55  %tmp_35 = fadd float %acc_weight_returnA_returnB_loa, %tmp_34


 <State 95>: 7.26ns
ST_95: tmp_25 [2/5] 7.26ns
:33  %tmp_25 = fadd float %acc_weight_returnSquareA_load, %tmp_24

ST_95: tmp_28 [2/5] 7.26ns
:39  %tmp_28 = fadd float %acc_weight_returnSquareB_load, %tmp_27

ST_95: tmp_35 [2/5] 7.26ns
:55  %tmp_35 = fadd float %acc_weight_returnA_returnB_loa, %tmp_34


 <State 96>: 9.65ns
ST_96: stg_646 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([18 x i8]* @p_str7) nounwind

ST_96: tmp_59 [1/1] 0.00ns
:1  %tmp_59 = call i32 (...)* @_ssdm_op_SpecRegionBegin([18 x i8]* @p_str7) nounwind

ST_96: stg_648 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_96: tmp_25 [1/5] 7.26ns
:33  %tmp_25 = fadd float %acc_weight_returnSquareA_load, %tmp_24

ST_96: stg_650 [1/1] 2.39ns
:34  store float %tmp_25, float* %acc_weight_returnSquareA_addr_1, align 4

ST_96: tmp_28 [1/5] 7.26ns
:39  %tmp_28 = fadd float %acc_weight_returnSquareB_load, %tmp_27

ST_96: stg_652 [1/1] 2.39ns
:40  store float %tmp_28, float* %acc_weight_returnSquareB_addr_1, align 4

ST_96: tmp_35 [1/5] 7.26ns
:55  %tmp_35 = fadd float %acc_weight_returnA_returnB_loa, %tmp_34

ST_96: stg_654 [1/1] 2.39ns
:56  store float %tmp_35, float* %acc_weight_returnA_returnB_add_6, align 4

ST_96: empty_9 [1/1] 0.00ns
:57  %empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([18 x i8]* @p_str7, i32 %tmp_59) nounwind

ST_96: stg_656 [1/1] 0.00ns
:58  br label %.preheader


 <State 97>: 2.39ns
ST_97: sum_weight [2/2] 2.39ns
:0  %sum_weight = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16


 <State 98>: 2.39ns
ST_98: sum_weight [1/2] 2.39ns
:0  %sum_weight = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_98: stg_659 [1/1] 1.57ns
:1  br label %10


 <State 99>: 2.39ns
ST_99: sum_returnA [1/1] 0.00ns
:0  %sum_returnA = phi float [ 0.000000e+00, %9 ], [ %sum_returnA_1, %11 ]

ST_99: sum_returnB [1/1] 0.00ns
:1  %sum_returnB = phi float [ 0.000000e+00, %9 ], [ %sum_returnB_1, %11 ]

ST_99: sum_weight_returnSquareA [1/1] 0.00ns
:2  %sum_weight_returnSquareA = phi float [ 0.000000e+00, %9 ], [ %sum_weight_returnSquareA_1, %11 ]

ST_99: sum_weight_returnA [1/1] 0.00ns
:3  %sum_weight_returnA = phi float [ 0.000000e+00, %9 ], [ %sum_weight_returnA_1, %11 ]

ST_99: sum_weight_returnSquareB [1/1] 0.00ns
:4  %sum_weight_returnSquareB = phi float [ 0.000000e+00, %9 ], [ %sum_weight_returnSquareB_1, %11 ]

ST_99: sum_weight_returnB [1/1] 0.00ns
:5  %sum_weight_returnB = phi float [ 0.000000e+00, %9 ], [ %sum_weight_returnB_1, %11 ]

ST_99: sum_weight_returnA_returnB [1/1] 0.00ns
:6  %sum_weight_returnA_returnB = phi float [ 0.000000e+00, %9 ], [ %sum_weight_returnA_returnB_1, %11 ]

ST_99: i2 [1/1] 0.00ns
:7  %i2 = phi i3 [ 0, %9 ], [ %i_1, %11 ]

ST_99: exitcond [1/1] 1.62ns
:8  %exitcond = icmp eq i3 %i2, -2

ST_99: i_1 [1/1] 0.80ns
:9  %i_1 = add i3 %i2, 1

ST_99: stg_670 [1/1] 0.00ns
:10  br i1 %exitcond, label %12, label %11

ST_99: tmp_57 [1/1] 0.00ns
:4  %tmp_57 = zext i3 %i2 to i64

ST_99: acc_returnA_addr_2 [1/1] 0.00ns
:5  %acc_returnA_addr_2 = getelementptr inbounds [6 x float]* %acc_returnA, i64 0, i64 %tmp_57

ST_99: acc_returnA_load_1 [2/2] 2.39ns
:6  %acc_returnA_load_1 = load float* %acc_returnA_addr_2, align 4

ST_99: acc_returnB_addr_2 [1/1] 0.00ns
:8  %acc_returnB_addr_2 = getelementptr inbounds [6 x float]* %acc_returnB, i64 0, i64 %tmp_57

ST_99: acc_returnB_load_1 [2/2] 2.39ns
:9  %acc_returnB_load_1 = load float* %acc_returnB_addr_2, align 4


 <State 100>: 2.39ns
ST_100: acc_returnA_load_1 [1/2] 2.39ns
:6  %acc_returnA_load_1 = load float* %acc_returnA_addr_2, align 4

ST_100: acc_returnB_load_1 [1/2] 2.39ns
:9  %acc_returnB_load_1 = load float* %acc_returnB_addr_2, align 4

ST_100: acc_weight_returnSquareA_addr_2 [1/1] 0.00ns
:11  %acc_weight_returnSquareA_addr_2 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareA, i64 0, i64 %tmp_57

ST_100: acc_weight_returnSquareA_load_1 [2/2] 2.39ns
:12  %acc_weight_returnSquareA_load_1 = load float* %acc_weight_returnSquareA_addr_2, align 4

ST_100: acc_weight_returnA_addr_2 [1/1] 0.00ns
:14  %acc_weight_returnA_addr_2 = getelementptr inbounds [6 x float]* %acc_weight_returnA, i64 0, i64 %tmp_57

ST_100: acc_weight_returnA_load_1 [2/2] 2.39ns
:15  %acc_weight_returnA_load_1 = load float* %acc_weight_returnA_addr_2, align 4


 <State 101>: 7.26ns
ST_101: sum_returnA_1 [5/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_returnA_load_1

ST_101: sum_returnB_1 [5/5] 7.26ns
:10  %sum_returnB_1 = fadd float %sum_returnB, %acc_returnB_load_1

ST_101: acc_weight_returnSquareA_load_1 [1/2] 2.39ns
:12  %acc_weight_returnSquareA_load_1 = load float* %acc_weight_returnSquareA_addr_2, align 4

ST_101: acc_weight_returnA_load_1 [1/2] 2.39ns
:15  %acc_weight_returnA_load_1 = load float* %acc_weight_returnA_addr_2, align 4

ST_101: acc_weight_returnSquareB_addr_2 [1/1] 0.00ns
:17  %acc_weight_returnSquareB_addr_2 = getelementptr inbounds [6 x float]* %acc_weight_returnSquareB, i64 0, i64 %tmp_57

ST_101: acc_weight_returnSquareB_load_1 [2/2] 2.39ns
:18  %acc_weight_returnSquareB_load_1 = load float* %acc_weight_returnSquareB_addr_2, align 4

ST_101: acc_weight_returnB_addr_2 [1/1] 0.00ns
:20  %acc_weight_returnB_addr_2 = getelementptr inbounds [6 x float]* %acc_weight_returnB, i64 0, i64 %tmp_57

ST_101: acc_weight_returnB_load_1 [2/2] 2.39ns
:21  %acc_weight_returnB_load_1 = load float* %acc_weight_returnB_addr_2, align 4

ST_101: acc_weight_returnA_returnB_add_7 [1/1] 0.00ns
:23  %acc_weight_returnA_returnB_add_7 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 %tmp_57

ST_101: acc_weight_returnA_returnB_loa_1 [2/2] 2.39ns
:24  %acc_weight_returnA_returnB_loa_1 = load float* %acc_weight_returnA_returnB_add_7, align 4


 <State 102>: 7.26ns
ST_102: sum_returnA_1 [4/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_returnA_load_1

ST_102: sum_returnB_1 [4/5] 7.26ns
:10  %sum_returnB_1 = fadd float %sum_returnB, %acc_returnB_load_1

ST_102: sum_weight_returnSquareA_1 [5/5] 7.26ns
:13  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquareA_load_1

ST_102: sum_weight_returnA_1 [5/5] 7.26ns
:16  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_returnA_load_1

ST_102: acc_weight_returnSquareB_load_1 [1/2] 2.39ns
:18  %acc_weight_returnSquareB_load_1 = load float* %acc_weight_returnSquareB_addr_2, align 4

ST_102: acc_weight_returnB_load_1 [1/2] 2.39ns
:21  %acc_weight_returnB_load_1 = load float* %acc_weight_returnB_addr_2, align 4

ST_102: acc_weight_returnA_returnB_loa_1 [1/2] 2.39ns
:24  %acc_weight_returnA_returnB_loa_1 = load float* %acc_weight_returnA_returnB_add_7, align 4


 <State 103>: 7.26ns
ST_103: sum_returnA_1 [3/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_returnA_load_1

ST_103: sum_returnB_1 [3/5] 7.26ns
:10  %sum_returnB_1 = fadd float %sum_returnB, %acc_returnB_load_1

ST_103: sum_weight_returnSquareA_1 [4/5] 7.26ns
:13  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquareA_load_1

ST_103: sum_weight_returnA_1 [4/5] 7.26ns
:16  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_returnA_load_1

ST_103: sum_weight_returnSquareB_1 [5/5] 7.26ns
:19  %sum_weight_returnSquareB_1 = fadd float %sum_weight_returnSquareB, %acc_weight_returnSquareB_load_1

ST_103: sum_weight_returnB_1 [5/5] 7.26ns
:22  %sum_weight_returnB_1 = fadd float %sum_weight_returnB, %acc_weight_returnB_load_1


 <State 104>: 7.26ns
ST_104: sum_returnA_1 [2/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_returnA_load_1

ST_104: sum_returnB_1 [2/5] 7.26ns
:10  %sum_returnB_1 = fadd float %sum_returnB, %acc_returnB_load_1

ST_104: sum_weight_returnSquareA_1 [3/5] 7.26ns
:13  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquareA_load_1

ST_104: sum_weight_returnA_1 [3/5] 7.26ns
:16  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_returnA_load_1

ST_104: sum_weight_returnSquareB_1 [4/5] 7.26ns
:19  %sum_weight_returnSquareB_1 = fadd float %sum_weight_returnSquareB, %acc_weight_returnSquareB_load_1

ST_104: sum_weight_returnB_1 [4/5] 7.26ns
:22  %sum_weight_returnB_1 = fadd float %sum_weight_returnB, %acc_weight_returnB_load_1

ST_104: sum_weight_returnA_returnB_1 [5/5] 7.26ns
:25  %sum_weight_returnA_returnB_1 = fadd float %sum_weight_returnA_returnB, %acc_weight_returnA_returnB_loa_1


 <State 105>: 7.26ns
ST_105: sum_returnA_1 [1/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_returnA_load_1

ST_105: sum_returnB_1 [1/5] 7.26ns
:10  %sum_returnB_1 = fadd float %sum_returnB, %acc_returnB_load_1

ST_105: sum_weight_returnSquareA_1 [2/5] 7.26ns
:13  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquareA_load_1

ST_105: sum_weight_returnA_1 [2/5] 7.26ns
:16  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_returnA_load_1

ST_105: sum_weight_returnSquareB_1 [3/5] 7.26ns
:19  %sum_weight_returnSquareB_1 = fadd float %sum_weight_returnSquareB, %acc_weight_returnSquareB_load_1

ST_105: sum_weight_returnB_1 [3/5] 7.26ns
:22  %sum_weight_returnB_1 = fadd float %sum_weight_returnB, %acc_weight_returnB_load_1

ST_105: sum_weight_returnA_returnB_1 [4/5] 7.26ns
:25  %sum_weight_returnA_returnB_1 = fadd float %sum_weight_returnA_returnB, %acc_weight_returnA_returnB_loa_1


 <State 106>: 7.26ns
ST_106: sum_weight_returnSquareA_1 [1/5] 7.26ns
:13  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquareA_load_1

ST_106: sum_weight_returnA_1 [1/5] 7.26ns
:16  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_returnA_load_1

ST_106: sum_weight_returnSquareB_1 [2/5] 7.26ns
:19  %sum_weight_returnSquareB_1 = fadd float %sum_weight_returnSquareB, %acc_weight_returnSquareB_load_1

ST_106: sum_weight_returnB_1 [2/5] 7.26ns
:22  %sum_weight_returnB_1 = fadd float %sum_weight_returnB, %acc_weight_returnB_load_1

ST_106: sum_weight_returnA_returnB_1 [3/5] 7.26ns
:25  %sum_weight_returnA_returnB_1 = fadd float %sum_weight_returnA_returnB, %acc_weight_returnA_returnB_loa_1


 <State 107>: 7.26ns
ST_107: sum_weight_returnSquareB_1 [1/5] 7.26ns
:19  %sum_weight_returnSquareB_1 = fadd float %sum_weight_returnSquareB, %acc_weight_returnSquareB_load_1

ST_107: sum_weight_returnB_1 [1/5] 7.26ns
:22  %sum_weight_returnB_1 = fadd float %sum_weight_returnB, %acc_weight_returnB_load_1

ST_107: sum_weight_returnA_returnB_1 [2/5] 7.26ns
:25  %sum_weight_returnA_returnB_1 = fadd float %sum_weight_returnA_returnB, %acc_weight_returnA_returnB_loa_1


 <State 108>: 7.26ns
ST_108: empty_10 [1/1] 0.00ns
:0  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 6, i64 6, i64 6) nounwind

ST_108: stg_728 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([16 x i8]* @p_str8) nounwind

ST_108: tmp_60 [1/1] 0.00ns
:2  %tmp_60 = call i32 (...)* @_ssdm_op_SpecRegionBegin([16 x i8]* @p_str8) nounwind

ST_108: stg_730 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 5, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_108: sum_weight_returnA_returnB_1 [1/5] 7.26ns
:25  %sum_weight_returnA_returnB_1 = fadd float %sum_weight_returnA_returnB, %acc_weight_returnA_returnB_loa_1

ST_108: empty_11 [1/1] 0.00ns
:26  %empty_11 = call i32 (...)* @_ssdm_op_SpecRegionEnd([16 x i8]* @p_str8, i32 %tmp_60) nounwind

ST_108: stg_733 [1/1] 0.00ns
:27  br label %10


 <State 109>: 6.08ns
ST_109: meanReturn1 [16/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_109: meanReturn2 [16/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2

ST_109: tmp_55_cast [1/1] 0.00ns
:25  %tmp_55_cast = sext i32 %counter_1 to i33

ST_109: out_correlation4_sum [1/1] 2.44ns
:26  %out_correlation4_sum = add i33 %tmp_61_cast, %tmp_55_cast

ST_109: out_correlation4_sum_cast [1/1] 0.00ns
:27  %out_correlation4_sum_cast = sext i33 %out_correlation4_sum to i64

ST_109: gmem32_addr_2 [1/1] 0.00ns
:28  %gmem32_addr_2 = getelementptr float* %gmem32, i64 %out_correlation4_sum_cast

ST_109: tmp_56 [1/1] 2.44ns
:32  %tmp_56 = add nsw i32 %counter_1, 1


 <State 110>: 6.08ns
ST_110: meanReturn1 [15/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_110: meanReturn2 [15/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 111>: 6.08ns
ST_111: meanReturn1 [14/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_111: meanReturn2 [14/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 112>: 6.08ns
ST_112: meanReturn1 [13/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_112: meanReturn2 [13/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 113>: 6.08ns
ST_113: meanReturn1 [12/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_113: meanReturn2 [12/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 114>: 6.08ns
ST_114: meanReturn1 [11/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_114: meanReturn2 [11/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 115>: 6.08ns
ST_115: meanReturn1 [10/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_115: meanReturn2 [10/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 116>: 6.08ns
ST_116: meanReturn1 [9/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_116: meanReturn2 [9/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 117>: 6.08ns
ST_117: meanReturn1 [8/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_117: meanReturn2 [8/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 118>: 6.08ns
ST_118: meanReturn1 [7/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_118: meanReturn2 [7/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 119>: 6.08ns
ST_119: meanReturn1 [6/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_119: meanReturn2 [6/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 120>: 6.08ns
ST_120: meanReturn1 [5/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_120: meanReturn2 [5/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 121>: 6.08ns
ST_121: meanReturn1 [4/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_121: meanReturn2 [4/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 122>: 6.08ns
ST_122: meanReturn1 [3/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_122: meanReturn2 [3/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 123>: 6.08ns
ST_123: meanReturn1 [2/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_123: meanReturn2 [2/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 124>: 6.08ns
ST_124: meanReturn1 [1/16] 6.08ns
:0  %meanReturn1 = fdiv float %sum_returnA, %tmp_2

ST_124: meanReturn2 [1/16] 6.08ns
:1  %meanReturn2 = fdiv float %sum_returnB, %tmp_2


 <State 125>: 5.70ns
ST_125: tmp_36 [4/4] 5.70ns
:2  %tmp_36 = fmul float %meanReturn1, 2.000000e+00

ST_125: tmp_42 [4/4] 5.70ns
:9  %tmp_42 = fmul float %meanReturn2, 2.000000e+00

ST_125: tmp_48 [4/4] 5.70ns
:16  %tmp_48 = fmul float %meanReturn1, %sum_weight_returnB


 <State 126>: 5.70ns
ST_126: tmp_36 [3/4] 5.70ns
:2  %tmp_36 = fmul float %meanReturn1, 2.000000e+00

ST_126: tmp_42 [3/4] 5.70ns
:9  %tmp_42 = fmul float %meanReturn2, 2.000000e+00

ST_126: tmp_48 [3/4] 5.70ns
:16  %tmp_48 = fmul float %meanReturn1, %sum_weight_returnB


 <State 127>: 5.70ns
ST_127: tmp_36 [2/4] 5.70ns
:2  %tmp_36 = fmul float %meanReturn1, 2.000000e+00

ST_127: tmp_42 [2/4] 5.70ns
:9  %tmp_42 = fmul float %meanReturn2, 2.000000e+00

ST_127: tmp_48 [2/4] 5.70ns
:16  %tmp_48 = fmul float %meanReturn1, %sum_weight_returnB


 <State 128>: 5.70ns
ST_128: tmp_36 [1/4] 5.70ns
:2  %tmp_36 = fmul float %meanReturn1, 2.000000e+00

ST_128: tmp_42 [1/4] 5.70ns
:9  %tmp_42 = fmul float %meanReturn2, 2.000000e+00

ST_128: tmp_48 [1/4] 5.70ns
:16  %tmp_48 = fmul float %meanReturn1, %sum_weight_returnB


 <State 129>: 7.26ns
ST_129: tmp_37 [4/4] 5.70ns
:3  %tmp_37 = fmul float %tmp_36, %sum_weight_returnA

ST_129: tmp_43 [4/4] 5.70ns
:10  %tmp_43 = fmul float %tmp_42, %sum_weight_returnB

ST_129: tmp_49 [5/5] 7.26ns
:17  %tmp_49 = fsub float %sum_weight_returnA_returnB, %tmp_48

ST_129: tmp_50 [4/4] 5.70ns
:18  %tmp_50 = fmul float %meanReturn2, %sum_weight_returnA


 <State 130>: 7.26ns
ST_130: tmp_37 [3/4] 5.70ns
:3  %tmp_37 = fmul float %tmp_36, %sum_weight_returnA

ST_130: tmp_43 [3/4] 5.70ns
:10  %tmp_43 = fmul float %tmp_42, %sum_weight_returnB

ST_130: tmp_49 [4/5] 7.26ns
:17  %tmp_49 = fsub float %sum_weight_returnA_returnB, %tmp_48

ST_130: tmp_50 [3/4] 5.70ns
:18  %tmp_50 = fmul float %meanReturn2, %sum_weight_returnA


 <State 131>: 7.26ns
ST_131: tmp_37 [2/4] 5.70ns
:3  %tmp_37 = fmul float %tmp_36, %sum_weight_returnA

ST_131: tmp_43 [2/4] 5.70ns
:10  %tmp_43 = fmul float %tmp_42, %sum_weight_returnB

ST_131: tmp_49 [3/5] 7.26ns
:17  %tmp_49 = fsub float %sum_weight_returnA_returnB, %tmp_48

ST_131: tmp_50 [2/4] 5.70ns
:18  %tmp_50 = fmul float %meanReturn2, %sum_weight_returnA


 <State 132>: 7.26ns
ST_132: tmp_37 [1/4] 5.70ns
:3  %tmp_37 = fmul float %tmp_36, %sum_weight_returnA

ST_132: tmp_43 [1/4] 5.70ns
:10  %tmp_43 = fmul float %tmp_42, %sum_weight_returnB

ST_132: tmp_49 [2/5] 7.26ns
:17  %tmp_49 = fsub float %sum_weight_returnA_returnB, %tmp_48

ST_132: tmp_50 [1/4] 5.70ns
:18  %tmp_50 = fmul float %meanReturn2, %sum_weight_returnA


 <State 133>: 7.26ns
ST_133: tmp_38 [5/5] 7.26ns
:4  %tmp_38 = fsub float %sum_weight_returnSquareA, %tmp_37

ST_133: tmp_44 [5/5] 7.26ns
:11  %tmp_44 = fsub float %sum_weight_returnSquareB, %tmp_43

ST_133: tmp_49 [1/5] 7.26ns
:17  %tmp_49 = fsub float %sum_weight_returnA_returnB, %tmp_48


 <State 134>: 7.26ns
ST_134: tmp_38 [4/5] 7.26ns
:4  %tmp_38 = fsub float %sum_weight_returnSquareA, %tmp_37

ST_134: tmp_44 [4/5] 7.26ns
:11  %tmp_44 = fsub float %sum_weight_returnSquareB, %tmp_43

ST_134: tmp_51 [5/5] 7.26ns
:19  %tmp_51 = fsub float %tmp_49, %tmp_50


 <State 135>: 7.26ns
ST_135: tmp_38 [3/5] 7.26ns
:4  %tmp_38 = fsub float %sum_weight_returnSquareA, %tmp_37

ST_135: tmp_44 [3/5] 7.26ns
:11  %tmp_44 = fsub float %sum_weight_returnSquareB, %tmp_43

ST_135: tmp_51 [4/5] 7.26ns
:19  %tmp_51 = fsub float %tmp_49, %tmp_50


 <State 136>: 7.26ns
ST_136: tmp_38 [2/5] 7.26ns
:4  %tmp_38 = fsub float %sum_weight_returnSquareA, %tmp_37

ST_136: tmp_44 [2/5] 7.26ns
:11  %tmp_44 = fsub float %sum_weight_returnSquareB, %tmp_43

ST_136: tmp_51 [3/5] 7.26ns
:19  %tmp_51 = fsub float %tmp_49, %tmp_50


 <State 137>: 7.26ns
ST_137: tmp_38 [1/5] 7.26ns
:4  %tmp_38 = fsub float %sum_weight_returnSquareA, %tmp_37

ST_137: tmp_44 [1/5] 7.26ns
:11  %tmp_44 = fsub float %sum_weight_returnSquareB, %tmp_43

ST_137: tmp_51 [2/5] 7.26ns
:19  %tmp_51 = fsub float %tmp_49, %tmp_50


 <State 138>: 7.26ns
ST_138: tmp_39 [16/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_138: tmp_45 [16/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_138: tmp_51 [1/5] 7.26ns
:19  %tmp_51 = fsub float %tmp_49, %tmp_50


 <State 139>: 6.08ns
ST_139: tmp_39 [15/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_139: tmp_45 [15/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_139: tmp_52 [16/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 140>: 6.08ns
ST_140: tmp_39 [14/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_140: tmp_45 [14/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_140: tmp_52 [15/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 141>: 6.08ns
ST_141: tmp_39 [13/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_141: tmp_45 [13/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_141: tmp_52 [14/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 142>: 6.08ns
ST_142: tmp_39 [12/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_142: tmp_45 [12/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_142: tmp_52 [13/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 143>: 6.08ns
ST_143: tmp_39 [11/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_143: tmp_45 [11/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_143: tmp_52 [12/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 144>: 6.08ns
ST_144: tmp_39 [10/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_144: tmp_45 [10/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_144: tmp_52 [11/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 145>: 6.08ns
ST_145: tmp_39 [9/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_145: tmp_45 [9/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_145: tmp_52 [10/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 146>: 6.08ns
ST_146: tmp_39 [8/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_146: tmp_45 [8/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_146: tmp_52 [9/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 147>: 6.08ns
ST_147: tmp_39 [7/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_147: tmp_45 [7/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_147: tmp_52 [8/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 148>: 6.08ns
ST_148: tmp_39 [6/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_148: tmp_45 [6/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_148: tmp_52 [7/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 149>: 6.08ns
ST_149: tmp_39 [5/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_149: tmp_45 [5/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_149: tmp_52 [6/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 150>: 6.08ns
ST_150: tmp_39 [4/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_150: tmp_40 [4/4] 5.70ns
:6  %tmp_40 = fmul float %meanReturn1, %meanReturn1

ST_150: tmp_45 [4/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_150: tmp_46 [4/4] 5.70ns
:13  %tmp_46 = fmul float %meanReturn2, %meanReturn2

ST_150: tmp_52 [5/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight

ST_150: tmp_53 [4/4] 5.70ns
:21  %tmp_53 = fmul float %meanReturn1, %meanReturn2


 <State 151>: 6.08ns
ST_151: tmp_39 [3/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_151: tmp_40 [3/4] 5.70ns
:6  %tmp_40 = fmul float %meanReturn1, %meanReturn1

ST_151: tmp_45 [3/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_151: tmp_46 [3/4] 5.70ns
:13  %tmp_46 = fmul float %meanReturn2, %meanReturn2

ST_151: tmp_52 [4/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight

ST_151: tmp_53 [3/4] 5.70ns
:21  %tmp_53 = fmul float %meanReturn1, %meanReturn2


 <State 152>: 6.08ns
ST_152: tmp_39 [2/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_152: tmp_40 [2/4] 5.70ns
:6  %tmp_40 = fmul float %meanReturn1, %meanReturn1

ST_152: tmp_45 [2/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_152: tmp_46 [2/4] 5.70ns
:13  %tmp_46 = fmul float %meanReturn2, %meanReturn2

ST_152: tmp_52 [3/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight

ST_152: tmp_53 [2/4] 5.70ns
:21  %tmp_53 = fmul float %meanReturn1, %meanReturn2


 <State 153>: 6.08ns
ST_153: tmp_39 [1/16] 6.08ns
:5  %tmp_39 = fdiv float %tmp_38, %sum_weight

ST_153: tmp_40 [1/4] 5.70ns
:6  %tmp_40 = fmul float %meanReturn1, %meanReturn1

ST_153: tmp_45 [1/16] 6.08ns
:12  %tmp_45 = fdiv float %tmp_44, %sum_weight

ST_153: tmp_46 [1/4] 5.70ns
:13  %tmp_46 = fmul float %meanReturn2, %meanReturn2

ST_153: tmp_52 [2/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight

ST_153: tmp_53 [1/4] 5.70ns
:21  %tmp_53 = fmul float %meanReturn1, %meanReturn2


 <State 154>: 7.26ns
ST_154: tmp_41 [5/5] 7.26ns
:7  %tmp_41 = fadd float %tmp_39, %tmp_40

ST_154: tmp_47 [5/5] 7.26ns
:14  %tmp_47 = fadd float %tmp_45, %tmp_46

ST_154: tmp_52 [1/16] 6.08ns
:20  %tmp_52 = fdiv float %tmp_51, %sum_weight


 <State 155>: 7.26ns
ST_155: tmp_41 [4/5] 7.26ns
:7  %tmp_41 = fadd float %tmp_39, %tmp_40

ST_155: tmp_47 [4/5] 7.26ns
:14  %tmp_47 = fadd float %tmp_45, %tmp_46

ST_155: covariance [5/5] 7.26ns
:22  %covariance = fadd float %tmp_52, %tmp_53


 <State 156>: 7.26ns
ST_156: tmp_41 [3/5] 7.26ns
:7  %tmp_41 = fadd float %tmp_39, %tmp_40

ST_156: tmp_47 [3/5] 7.26ns
:14  %tmp_47 = fadd float %tmp_45, %tmp_46

ST_156: covariance [4/5] 7.26ns
:22  %covariance = fadd float %tmp_52, %tmp_53


 <State 157>: 7.26ns
ST_157: tmp_41 [2/5] 7.26ns
:7  %tmp_41 = fadd float %tmp_39, %tmp_40

ST_157: tmp_47 [2/5] 7.26ns
:14  %tmp_47 = fadd float %tmp_45, %tmp_46

ST_157: covariance [3/5] 7.26ns
:22  %covariance = fadd float %tmp_52, %tmp_53


 <State 158>: 7.26ns
ST_158: tmp_41 [1/5] 7.26ns
:7  %tmp_41 = fadd float %tmp_39, %tmp_40

ST_158: tmp_47 [1/5] 7.26ns
:14  %tmp_47 = fadd float %tmp_45, %tmp_46

ST_158: covariance [2/5] 7.26ns
:22  %covariance = fadd float %tmp_52, %tmp_53


 <State 159>: 7.26ns
ST_159: volatilityA [16/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_159: volatilityB [16/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)

ST_159: covariance [1/5] 7.26ns
:22  %covariance = fadd float %tmp_52, %tmp_53


 <State 160>: 6.24ns
ST_160: volatilityA [15/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_160: volatilityB [15/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 161>: 6.24ns
ST_161: volatilityA [14/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_161: volatilityB [14/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 162>: 6.24ns
ST_162: volatilityA [13/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_162: volatilityB [13/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 163>: 6.24ns
ST_163: volatilityA [12/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_163: volatilityB [12/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 164>: 6.24ns
ST_164: volatilityA [11/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_164: volatilityB [11/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 165>: 6.24ns
ST_165: volatilityA [10/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_165: volatilityB [10/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 166>: 6.24ns
ST_166: volatilityA [9/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_166: volatilityB [9/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 167>: 6.24ns
ST_167: volatilityA [8/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_167: volatilityB [8/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 168>: 6.24ns
ST_168: volatilityA [7/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_168: volatilityB [7/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 169>: 6.24ns
ST_169: volatilityA [6/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_169: volatilityB [6/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 170>: 6.24ns
ST_170: volatilityA [5/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_170: volatilityB [5/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 171>: 6.24ns
ST_171: volatilityA [4/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_171: volatilityB [4/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 172>: 6.24ns
ST_172: volatilityA [3/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_172: volatilityB [3/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 173>: 6.24ns
ST_173: volatilityA [2/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_173: volatilityB [2/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 174>: 6.24ns
ST_174: volatilityA [1/16] 6.24ns
:8  %volatilityA = call float @llvm.sqrt.f32(float %tmp_41)

ST_174: volatilityB [1/16] 6.24ns
:15  %volatilityB = call float @llvm.sqrt.f32(float %tmp_47)


 <State 175>: 5.70ns
ST_175: tmp_54 [4/4] 5.70ns
:23  %tmp_54 = fmul float %volatilityA, %volatilityB


 <State 176>: 5.70ns
ST_176: tmp_54 [3/4] 5.70ns
:23  %tmp_54 = fmul float %volatilityA, %volatilityB


 <State 177>: 5.70ns
ST_177: tmp_54 [2/4] 5.70ns
:23  %tmp_54 = fmul float %volatilityA, %volatilityB


 <State 178>: 5.70ns
ST_178: tmp_54 [1/4] 5.70ns
:23  %tmp_54 = fmul float %volatilityA, %volatilityB


 <State 179>: 6.08ns
ST_179: corr_temp [16/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 180>: 6.08ns
ST_180: corr_temp [15/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 181>: 6.08ns
ST_181: corr_temp [14/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 182>: 6.08ns
ST_182: corr_temp [13/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 183>: 6.08ns
ST_183: corr_temp [12/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 184>: 6.08ns
ST_184: corr_temp [11/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 185>: 6.08ns
ST_185: corr_temp [10/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 186>: 6.08ns
ST_186: corr_temp [9/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 187>: 6.08ns
ST_187: corr_temp [8/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 188>: 6.08ns
ST_188: corr_temp [7/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 189>: 6.08ns
ST_189: corr_temp [6/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 190>: 6.08ns
ST_190: corr_temp [5/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 191>: 6.08ns
ST_191: corr_temp [4/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 192>: 6.08ns
ST_192: corr_temp [3/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 193>: 6.08ns
ST_193: corr_temp [2/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54


 <State 194>: 7.44ns
ST_194: corr_temp [1/16] 6.08ns
:24  %corr_temp = fdiv float %covariance, %tmp_54

ST_194: gmem32_addr_3_req [1/1] 7.44ns
:29  %gmem32_addr_3_req = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %gmem32_addr_2, i32 1)


 <State 195>: 7.44ns
ST_195: stg_943 [1/1] 7.44ns
:30  call void @_ssdm_op_Write.m_axi.floatP(float* %gmem32_addr_2, float %corr_temp, i4 -1)


 <State 196>: 7.44ns
ST_196: gmem32_addr_3_resp [3/3] 7.44ns
:31  %gmem32_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %gmem32_addr_2)


 <State 197>: 7.44ns
ST_197: gmem32_addr_3_resp [2/3] 7.44ns
:31  %gmem32_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %gmem32_addr_2)


 <State 198>: 7.44ns
ST_198: gmem32_addr_3_resp [1/3] 7.44ns
:31  %gmem32_addr_3_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %gmem32_addr_2)

ST_198: empty_12 [1/1] 0.00ns
:33  %empty_12 = call i32 (...)* @_ssdm_op_SpecRegionEnd([11 x i8]* @p_str5, i32 %tmp_58) nounwind

ST_198: stg_948 [1/1] 0.00ns
:34  br label %6



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139
	State 140
	State 141
	State 142
	State 143
	State 144
	State 145
	State 146
	State 147
	State 148
	State 149
	State 150
	State 151
	State 152
	State 153
	State 154
	State 155
	State 156
	State 157
	State 158
	State 159
	State 160
	State 161
	State 162
	State 163
	State 164
	State 165
	State 166
	State 167
	State 168
	State 169
	State 170
	State 171
	State 172
	State 173
	State 174
	State 175
	State 176
	State 177
	State 178
	State 179
	State 180
	State 181
	State 182
	State 183
	State 184
	State 185
	State 186
	State 187
	State 188
	State 189
	State 190
	State 191
	State 192
	State 193
	State 194
	State 195
	State 196
	State 197
	State 198


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
