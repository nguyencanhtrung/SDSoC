// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="madd,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.950000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.147500,HLS_SYN_LAT=1037,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=486,HLS_SYN_LUT=536}" *)

module madd (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_Addr_A,
        A_EN_A,
        A_WEN_A,
        A_Din_A,
        A_Dout_A,
        A_Clk_A,
        A_Rst_A,
        B_Addr_A,
        B_EN_A,
        B_WEN_A,
        B_Din_A,
        B_Dout_A,
        B_Clk_A,
        B_Rst_A,
        C_Addr_A,
        C_EN_A,
        C_WEN_A,
        C_Din_A,
        C_Dout_A,
        C_Clk_A,
        C_Rst_A
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st15_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv5_0 = 5'b00000;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] A_Addr_A;
output   A_EN_A;
output  [3:0] A_WEN_A;
output  [31:0] A_Din_A;
input  [31:0] A_Dout_A;
output   A_Clk_A;
output   A_Rst_A;
output  [31:0] B_Addr_A;
output   B_EN_A;
output  [3:0] B_WEN_A;
output  [31:0] B_Din_A;
input  [31:0] B_Dout_A;
output   B_Clk_A;
output   B_Rst_A;
output  [31:0] C_Addr_A;
output   C_EN_A;
output  [3:0] C_WEN_A;
output  [31:0] C_Din_A;
input  [31:0] C_Dout_A;
output   C_Clk_A;
output   C_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_EN_A;
reg B_EN_A;
reg C_EN_A;
reg[3:0] C_WEN_A;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [10:0] indvar_flatten_reg_102;
reg   [5:0] i_reg_113;
reg   [5:0] j_reg_124;
wire   [0:0] exitcond_flatten_fu_140_p2;
reg   [0:0] exitcond_flatten_reg_213;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_68;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg    ap_reg_ppiten_pp0_it7 = 1'b0;
reg    ap_reg_ppiten_pp0_it8 = 1'b0;
reg    ap_reg_ppiten_pp0_it9 = 1'b0;
reg    ap_reg_ppiten_pp0_it10 = 1'b0;
reg    ap_reg_ppiten_pp0_it11 = 1'b0;
reg    ap_reg_ppiten_pp0_it12 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it4;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it5;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it6;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it7;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it8;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it9;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it10;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it11;
wire   [10:0] indvar_flatten_next_fu_146_p2;
wire   [5:0] i_mid2_fu_172_p3;
reg   [5:0] i_mid2_reg_222;
wire   [9:0] tmp_2_fu_196_p2;
reg   [9:0] tmp_2_reg_227;
wire   [5:0] j_1_fu_202_p2;
wire   [63:0] tmp_3_fu_208_p1;
reg   [63:0] tmp_3_reg_237;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it2;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it3;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it4;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it5;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it6;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it7;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it8;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it9;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it10;
reg   [63:0] ap_reg_ppstg_tmp_3_reg_237_pp0_it11;
reg   [31:0] A_load_reg_252;
reg   [31:0] B_load_reg_257;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] tmp_4_reg_262;
reg   [5:0] i_phi_fu_117_p4;
wire   [31:0] A_Addr_A_orig;
wire   [31:0] B_Addr_A_orig;
wire   [31:0] C_Addr_A_orig;
wire   [31:0] grp_fu_136_p0;
wire   [31:0] grp_fu_136_p1;
wire   [0:0] exitcond4_fu_152_p2;
wire   [5:0] i_s_fu_166_p2;
wire   [4:0] tmp_5_fu_180_p1;
wire   [5:0] j_mid2_fu_158_p3;
wire   [9:0] j_cast1_fu_192_p1;
wire   [9:0] tmp_fu_184_p3;
wire    grp_fu_136_ce;
reg    ap_sig_cseq_ST_st15_fsm_2;
reg    ap_sig_bdd_245;
reg   [2:0] ap_NS_fsm;


madd_fadd_32ns_32ns_32_9_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
madd_fadd_32ns_32ns_32_9_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( grp_fu_136_p0 ),
    .din1( grp_fu_136_p1 ),
    .ce( grp_fu_136_ce ),
    .dout( grp_fu_136_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_140_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_140_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_140_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it10 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it10
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
    end
end

/// ap_reg_ppiten_pp0_it11 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it11
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
    end
end

/// ap_reg_ppiten_pp0_it12 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it12
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

/// ap_reg_ppiten_pp0_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

/// ap_reg_ppiten_pp0_it7 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it7
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
    end
end

/// ap_reg_ppiten_pp0_it8 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it8
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
    end
end

/// ap_reg_ppiten_pp0_it9 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it9
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_213 == ap_const_lv1_0))) begin
        i_reg_113 <= i_mid2_reg_222;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_113 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_140_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_102 <= indvar_flatten_next_fu_146_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten_reg_102 <= ap_const_lv11_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_140_p2 == ap_const_lv1_0))) begin
        j_reg_124 <= j_1_fu_202_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        j_reg_124 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it1 == ap_const_lv1_0)) begin
        A_load_reg_252 <= A_Dout_A;
        B_load_reg_257 <= B_Dout_A;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it1 <= exitcond_flatten_reg_213;
        exitcond_flatten_reg_213 <= exitcond_flatten_fu_140_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it10 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it9;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it11 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it10;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it1;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it2;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it3;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it5 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it4;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it6 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it5;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it7 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it6;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it8 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it7;
        ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it9 <= ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it8;
        ap_reg_ppstg_tmp_3_reg_237_pp0_it10[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it10[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it9[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it11[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it11[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it10[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it2[0] <= tmp_3_reg_237[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[1] <= tmp_3_reg_237[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[2] <= tmp_3_reg_237[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[3] <= tmp_3_reg_237[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[4] <= tmp_3_reg_237[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[5] <= tmp_3_reg_237[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[6] <= tmp_3_reg_237[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[7] <= tmp_3_reg_237[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[8] <= tmp_3_reg_237[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it2[9] <= tmp_3_reg_237[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it3[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it3[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it2[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it4[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it4[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it3[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it5[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it5[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it4[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it6[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it6[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it5[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it7[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it7[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it6[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it8[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it8[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it7[9];
        ap_reg_ppstg_tmp_3_reg_237_pp0_it9[0] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[0];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[1] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[1];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[2] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[2];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[3] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[3];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[4] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[4];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[5] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[5];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[6] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[6];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[7] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[7];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[8] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[8];
ap_reg_ppstg_tmp_3_reg_237_pp0_it9[9] <= ap_reg_ppstg_tmp_3_reg_237_pp0_it8[9];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_140_p2 == ap_const_lv1_0))) begin
        i_mid2_reg_222 <= i_mid2_fu_172_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_140_p2 == ap_const_lv1_0))) begin
        tmp_2_reg_227 <= tmp_2_fu_196_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_reg_213 == ap_const_lv1_0))) begin
        tmp_3_reg_237[0] <= tmp_3_fu_208_p1[0];
tmp_3_reg_237[1] <= tmp_3_fu_208_p1[1];
tmp_3_reg_237[2] <= tmp_3_fu_208_p1[2];
tmp_3_reg_237[3] <= tmp_3_fu_208_p1[3];
tmp_3_reg_237[4] <= tmp_3_fu_208_p1[4];
tmp_3_reg_237[5] <= tmp_3_fu_208_p1[5];
tmp_3_reg_237[6] <= tmp_3_fu_208_p1[6];
tmp_3_reg_237[7] <= tmp_3_fu_208_p1[7];
tmp_3_reg_237[8] <= tmp_3_fu_208_p1[8];
tmp_3_reg_237[9] <= tmp_3_fu_208_p1[9];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it10 == ap_const_lv1_0)) begin
        tmp_4_reg_262 <= grp_fu_136_p2;
    end
end

/// A_EN_A assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        A_EN_A = ap_const_logic_1;
    end else begin
        A_EN_A = ap_const_logic_0;
    end
end

/// B_EN_A assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        B_EN_A = ap_const_logic_1;
    end else begin
        B_EN_A = ap_const_logic_0;
    end
end

/// C_EN_A assign process. ///
always @ (ap_reg_ppiten_pp0_it12)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it12)) begin
        C_EN_A = ap_const_logic_1;
    end else begin
        C_EN_A = ap_const_logic_0;
    end
end

/// C_WEN_A assign process. ///
always @ (ap_reg_ppiten_pp0_it12 or ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it11)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it12) & (ap_reg_ppstg_exitcond_flatten_reg_213_pp0_it11 == ap_const_lv1_0))) begin
        C_WEN_A = ap_const_lv4_F;
    end else begin
        C_WEN_A = ap_const_lv4_0;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st15_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_2)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st15_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_68)
begin
    if (ap_sig_bdd_68) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_2 assign process. ///
always @ (ap_sig_bdd_245)
begin
    if (ap_sig_bdd_245) begin
        ap_sig_cseq_ST_st15_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// i_phi_fu_117_p4 assign process. ///
always @ (i_reg_113 or exitcond_flatten_reg_213 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or i_mid2_reg_222)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_213 == ap_const_lv1_0))) begin
        i_phi_fu_117_p4 = i_mid2_reg_222;
    end else begin
        i_phi_fu_117_p4 = i_reg_113;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_flatten_fu_140_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it11 or ap_reg_ppiten_pp0_it12)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it12) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it11)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_140_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_140_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st15_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_2;
            end
        end
        ap_ST_st15_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_Addr_A = A_Addr_A_orig << ap_const_lv32_2;
assign A_Addr_A_orig = tmp_3_fu_208_p1;
assign A_Clk_A = ap_clk;
assign A_Din_A = ap_const_lv32_0;
assign A_Rst_A = ap_rst_n_inv;
assign A_WEN_A = ap_const_lv4_0;
assign B_Addr_A = B_Addr_A_orig << ap_const_lv32_2;
assign B_Addr_A_orig = tmp_3_fu_208_p1;
assign B_Clk_A = ap_clk;
assign B_Din_A = ap_const_lv32_0;
assign B_Rst_A = ap_rst_n_inv;
assign B_WEN_A = ap_const_lv4_0;
assign C_Addr_A = C_Addr_A_orig << ap_const_lv32_2;
assign C_Addr_A_orig = ap_reg_ppstg_tmp_3_reg_237_pp0_it11;
assign C_Clk_A = ap_clk;
assign C_Din_A = tmp_4_reg_262;
assign C_Rst_A = ap_rst_n_inv;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_245 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_245 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_68 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_68 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign exitcond4_fu_152_p2 = (j_reg_124 == ap_const_lv6_20? 1'b1: 1'b0);
assign exitcond_flatten_fu_140_p2 = (indvar_flatten_reg_102 == ap_const_lv11_400? 1'b1: 1'b0);
assign grp_fu_136_ce = ap_const_logic_1;
assign grp_fu_136_p0 = A_load_reg_252;
assign grp_fu_136_p1 = B_load_reg_257;
assign i_mid2_fu_172_p3 = ((exitcond4_fu_152_p2)? i_s_fu_166_p2: i_phi_fu_117_p4);
assign i_s_fu_166_p2 = (i_phi_fu_117_p4 + ap_const_lv6_1);
assign indvar_flatten_next_fu_146_p2 = (indvar_flatten_reg_102 + ap_const_lv11_1);
assign j_1_fu_202_p2 = (j_mid2_fu_158_p3 + ap_const_lv6_1);
assign j_cast1_fu_192_p1 = j_mid2_fu_158_p3;
assign j_mid2_fu_158_p3 = ((exitcond4_fu_152_p2)? ap_const_lv6_0: j_reg_124);
assign tmp_2_fu_196_p2 = (j_cast1_fu_192_p1 + tmp_fu_184_p3);
assign tmp_3_fu_208_p1 = tmp_2_reg_227;
assign tmp_5_fu_180_p1 = i_mid2_fu_172_p3[4:0];
assign tmp_fu_184_p3 = {{tmp_5_fu_180_p1}, {ap_const_lv5_0}};
always @ (posedge ap_clk)
begin
    tmp_3_reg_237[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it2[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it3[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it4[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it5[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it6[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it7[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it8[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it9[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it10[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_3_reg_237_pp0_it11[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end



endmodule //madd

