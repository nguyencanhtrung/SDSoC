// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _madd_HH_
#define _madd_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "madd_fadd_32ns_32ns_32_9_full_dsp.h"

namespace ap_rtl {

struct madd : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > A_dout;
    sc_in< sc_logic > A_empty_n;
    sc_out< sc_logic > A_read;
    sc_in< sc_lv<32> > B_dout;
    sc_in< sc_logic > B_empty_n;
    sc_out< sc_logic > B_read;
    sc_out< sc_lv<32> > C_din;
    sc_in< sc_logic > C_full_n;
    sc_out< sc_logic > C_write;


    // Module declarations
    madd(sc_module_name name);
    SC_HAS_PROCESS(madd);

    ~madd();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    madd_fadd_32ns_32ns_32_9_full_dsp<1,9,32,32,32>* madd_fadd_32ns_32ns_32_9_full_dsp_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_21;
    sc_signal< sc_lv<11> > indvar_flatten_reg_67;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_82_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_94;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_49;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_60;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it4;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it5;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it6;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it7;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it8;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it9;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it10;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it10;
    sc_signal< bool > ap_sig_bdd_86;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it11;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it3;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it4;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it5;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it6;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it7;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it8;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_94_pp0_it9;
    sc_signal< sc_lv<11> > indvar_flatten_next_fu_88_p2;
    sc_signal< sc_lv<32> > A_read_reg_103;
    sc_signal< sc_lv<32> > B_read_reg_108;
    sc_signal< sc_lv<32> > grp_fu_78_p2;
    sc_signal< sc_lv<32> > tmp_4_reg_113;
    sc_signal< sc_logic > grp_fu_78_ce;
    sc_signal< sc_logic > ap_sig_cseq_ST_st14_fsm_2;
    sc_signal< bool > ap_sig_bdd_187;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st14_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_read();
    void thread_B_read();
    void thread_C_din();
    void thread_C_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_187();
    void thread_ap_sig_bdd_21();
    void thread_ap_sig_bdd_49();
    void thread_ap_sig_bdd_60();
    void thread_ap_sig_bdd_86();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st14_fsm_2();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_exitcond_flatten_fu_82_p2();
    void thread_grp_fu_78_ce();
    void thread_indvar_flatten_next_fu_88_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
