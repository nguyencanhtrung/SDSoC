-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_r_empty_n : IN STD_LOGIC;
    input_r_read : OUT STD_LOGIC;
    output_r_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_full_n : IN STD_LOGIC;
    output_r_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sobel_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_filter,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.950001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.046250,HLS_SYN_LAT=2076613,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=419,HLS_SYN_LUT=395}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st14_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv21_1FAFB9 : STD_LOGIC_VECTOR (20 downto 0) := "111111010111110111001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_781 : STD_LOGIC_VECTOR (10 downto 0) := "11110000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv12_C8 : STD_LOGIC_VECTOR (11 downto 0) := "000011001000";
    constant ap_const_lv12_64 : STD_LOGIC_VECTOR (11 downto 0) := "000001100100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal indvar_flatten_reg_179 : STD_LOGIC_VECTOR (20 downto 0);
    signal row_reg_190 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_assign_reg_201 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_54 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_7_reg_696_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_72 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal or_cond_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_96 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_240_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal col_assign_mid2_fu_252_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_assign_mid2_reg_656 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it3 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_mid2_fu_266_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_mid2_reg_666 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_673_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_673_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_673_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_680 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_680_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal buff_A_1_addr_reg_685 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_buff_A_1_addr_reg_685_pp0_it2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_7_reg_696_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_700_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_311_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_1_load_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal return_value_reg_714 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_720 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_0_0_load_reg_731 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_2_0_load_reg_736 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_buff_C_2_0_load_reg_736_pp0_it6 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_0_load_reg_741 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_2_1_load_1_reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_buff_C_2_1_load_1_reg_746_pp0_it6 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_0_1_load_reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_2_fu_366_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_2_reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_0_2_fu_373_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_0_2_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_2_2_fu_380_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_2_2_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_buff_C_2_2_reg_766_pp0_it6 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_weight_2_1_2_i_fu_457_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_2_1_2_i_reg_771 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_1_2_i_fu_473_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_weight_2_1_2_i_reg_776 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_weight_2_2_2_i_fu_516_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_2_2_2_i_reg_781 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_2_2_i_fu_522_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_2_2_i_reg_788 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i_fu_538_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i_reg_795 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_i_fu_555_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_i_reg_800 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_i_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_reg_805 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_586_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_816 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_fu_601_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_reg_821 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_0_ce0 : STD_LOGIC;
    signal buff_A_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_0_ce1 : STD_LOGIC;
    signal buff_A_0_we1 : STD_LOGIC;
    signal buff_A_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_1_ce0 : STD_LOGIC;
    signal buff_A_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_1_ce1 : STD_LOGIC;
    signal buff_A_1_we1 : STD_LOGIC;
    signal buff_A_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_2_ce0 : STD_LOGIC;
    signal buff_A_2_we0 : STD_LOGIC;
    signal buff_A_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_2_ce1 : STD_LOGIC;
    signal buff_A_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_phi_fu_194_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_assign_phi_fu_205_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buff_C_2_1_fu_74 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_0_0_fu_78 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_0_1_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_2_0_fu_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_0_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_1_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_s_fu_260_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_0_1_i_fu_405_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_0_2_i_cast_fu_416_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_0_i_cast_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_weight_2_0_2_i_fu_419_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_i_fu_429_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_weight_2_0_2_i_cast_fu_425_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_i_cast_fu_436_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_1_2_i_fu_446_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_weight_2_1_1_i_fu_440_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_1_2_i_cast_fu_453_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_463_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_0_1_i_cast_fu_412_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_469_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_2_i_cast_fu_482_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_1_2_i_cast_fu_479_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_fu_496_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_weight_2_2_i_fu_490_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_cast_fu_503_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_2_2_i_cast_fu_513_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_weight_2_2_i_fu_485_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_weight_2_2_1_i_fu_507_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_fu_533_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_i_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_550_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_i_cast_fu_565_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_i_cast_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal edge_weight_fu_568_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_i_fu_590_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_583 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_300 : BOOLEAN;
    signal ap_sig_bdd_295 : BOOLEAN;
    signal ap_sig_bdd_304 : BOOLEAN;
    signal ap_sig_bdd_251 : BOOLEAN;
    signal ap_sig_bdd_317 : BOOLEAN;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal ap_sig_bdd_310 : BOOLEAN;

    component sobel_filter_buff_A_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_filter_buff_A_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buff_A_0_U : component sobel_filter_buff_A_0
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_A_0_address0,
        ce0 => buff_A_0_ce0,
        q0 => buff_A_0_q0,
        address1 => buff_A_0_address1,
        ce1 => buff_A_0_ce1,
        we1 => buff_A_0_we1,
        d1 => buff_A_0_d1);

    buff_A_1_U : component sobel_filter_buff_A_0
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_A_1_address0,
        ce0 => buff_A_1_ce0,
        q0 => buff_A_1_q0,
        address1 => buff_A_1_address1,
        ce1 => buff_A_1_ce1,
        we1 => buff_A_1_we1,
        d1 => buff_A_1_d1);

    buff_A_2_U : component sobel_filter_buff_A_2
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_A_2_address0,
        ce0 => buff_A_2_ce0,
        we0 => buff_A_2_we0,
        d0 => buff_A_2_d0,
        address1 => buff_A_2_address1,
        ce1 => buff_A_2_ce1,
        q1 => buff_A_2_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not((exitcond_flatten_fu_234_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then
                    if (not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) then 
                        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) then 
                        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it4 assign process. --
    ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_295) then
                if (ap_sig_bdd_300) then 
                    ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it4 <= return_value_reg_714;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it4 <= ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it3;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it5 assign process. --
    ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_251) then
                if (ap_sig_bdd_304) then 
                    ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it5 <= ap_const_lv8_0;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it5 <= ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it4;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it2 assign process. --
    ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_180) then
                if (ap_sig_bdd_317) then 
                    ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it2 <= ap_const_lv8_0;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it2 <= ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it1;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it5 assign process. --
    ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_251) then
                if (ap_sig_bdd_310) then 
                    ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it5 <= y_reg_720;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it5 <= ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it4;
                end if;
            end if; 
        end if;
    end process;

    -- col_assign_reg_201 assign process. --
    col_assign_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (exitcond_flatten_reg_647 = ap_const_lv1_0))) then 
                col_assign_reg_201 <= col_fu_311_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                col_assign_reg_201 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_179 assign process. --
    indvar_flatten_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (exitcond_flatten_fu_234_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_179 <= indvar_flatten_next_fu_240_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_179 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    -- row_reg_190 assign process. --
    row_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (exitcond_flatten_reg_647 = ap_const_lv1_0))) then 
                row_reg_190 <= row_mid2_reg_666;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                row_reg_190 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then
                ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it3 <= ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then
                ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it4 <= ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11))))) then
                ap_reg_ppstg_buff_A_1_addr_reg_685_pp0_it2 <= buff_A_1_addr_reg_685;
                ap_reg_ppstg_buff_C_2_0_load_reg_736_pp0_it6 <= buff_C_2_0_load_reg_736;
                ap_reg_ppstg_buff_C_2_1_load_1_reg_746_pp0_it6 <= buff_C_2_1_load_1_reg_746;
                ap_reg_ppstg_buff_C_2_2_reg_766_pp0_it6 <= buff_C_2_2_reg_766;
                ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it2 <= ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it1;
                ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it3 <= ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3;
                ap_reg_ppstg_or_cond_reg_700_pp0_it10 <= ap_reg_ppstg_or_cond_reg_700_pp0_it9;
                ap_reg_ppstg_or_cond_reg_700_pp0_it2 <= or_cond_reg_700;
                ap_reg_ppstg_or_cond_reg_700_pp0_it3 <= ap_reg_ppstg_or_cond_reg_700_pp0_it2;
                ap_reg_ppstg_or_cond_reg_700_pp0_it4 <= ap_reg_ppstg_or_cond_reg_700_pp0_it3;
                ap_reg_ppstg_or_cond_reg_700_pp0_it5 <= ap_reg_ppstg_or_cond_reg_700_pp0_it4;
                ap_reg_ppstg_or_cond_reg_700_pp0_it6 <= ap_reg_ppstg_or_cond_reg_700_pp0_it5;
                ap_reg_ppstg_or_cond_reg_700_pp0_it7 <= ap_reg_ppstg_or_cond_reg_700_pp0_it6;
                ap_reg_ppstg_or_cond_reg_700_pp0_it8 <= ap_reg_ppstg_or_cond_reg_700_pp0_it7;
                ap_reg_ppstg_or_cond_reg_700_pp0_it9 <= ap_reg_ppstg_or_cond_reg_700_pp0_it8;
                ap_reg_ppstg_tmp_3_reg_673_pp0_it2 <= tmp_3_reg_673;
                ap_reg_ppstg_tmp_3_reg_673_pp0_it3 <= ap_reg_ppstg_tmp_3_reg_673_pp0_it2;
                ap_reg_ppstg_tmp_3_reg_673_pp0_it4 <= ap_reg_ppstg_tmp_3_reg_673_pp0_it3;
                    ap_reg_ppstg_tmp_4_reg_680_pp0_it2(10 downto 0) <= tmp_4_reg_680(10 downto 0);
                ap_reg_ppstg_tmp_7_reg_696_pp0_it2 <= tmp_7_reg_696;
                ap_reg_ppstg_tmp_7_reg_696_pp0_it3 <= ap_reg_ppstg_tmp_7_reg_696_pp0_it2;
                buff_C_0_0_load_reg_731 <= buff_C_0_0_fu_78;
                buff_C_1_0_load_reg_741 <= buff_C_1_0_fu_90;
                buff_C_2_0_load_reg_736 <= buff_C_2_0_fu_86;
                edge_val_reg_821 <= edge_val_fu_601_p3;
                tmp_2_i_reg_795 <= tmp_2_i_fu_538_p3;
                tmp_5_i_reg_800 <= tmp_5_i_fu_555_p3;
                tmp_7_i_reg_805 <= tmp_7_i_fu_574_p2;
                tmp_8_reg_816 <= tmp_8_fu_586_p1;
                tmp_9_i_reg_811 <= tmp_9_i_fu_580_p2;
                x_weight_2_1_2_i_reg_771 <= x_weight_2_1_2_i_fu_457_p2;
                x_weight_2_2_2_i_reg_781 <= x_weight_2_2_2_i_fu_516_p2;
                y_weight_2_1_2_i_reg_776 <= y_weight_2_1_2_i_fu_473_p2;
                y_weight_2_2_2_i_reg_788 <= y_weight_2_2_2_i_fu_522_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then
                ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it1 <= col_assign_mid2_reg_656;
                ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it1 <= exitcond_flatten_reg_647;
                exitcond_flatten_reg_647 <= exitcond_flatten_fu_234_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (exitcond_flatten_reg_647 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_3_fu_284_p2)))) then
                buff_A_1_addr_reg_685 <= tmp_4_fu_289_p1(11 - 1 downto 0);
                    tmp_4_reg_680(10 downto 0) <= tmp_4_fu_289_p1(10 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it1) and not((ap_const_lv1_0 = tmp_3_reg_673)))) then
                buff_A_1_load_reg_709 <= buff_A_1_q0;
                return_value_reg_714 <= buff_A_0_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then
                buff_C_0_0_fu_78 <= buff_C_0_1_fu_82;
                buff_C_1_0_fu_90 <= buff_C_1_1_fu_94;
                buff_C_2_0_fu_86 <= buff_C_2_1_fu_74;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it4))) then
                buff_C_0_1_fu_82 <= buff_C_0_2_fu_373_p3;
                buff_C_1_1_fu_94 <= buff_C_1_2_fu_366_p3;
                buff_C_2_1_fu_74 <= buff_C_2_2_fu_380_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it4))) then
                buff_C_0_1_load_reg_751 <= buff_C_0_1_fu_82;
                buff_C_0_2_reg_761 <= buff_C_0_2_fu_373_p3;
                buff_C_1_2_reg_756 <= buff_C_1_2_fu_366_p3;
                buff_C_2_1_load_1_reg_746 <= buff_C_2_1_fu_74;
                buff_C_2_2_reg_766 <= buff_C_2_2_fu_380_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (exitcond_flatten_fu_234_p2 = ap_const_lv1_0))) then
                col_assign_mid2_reg_656 <= col_assign_mid2_fu_252_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (exitcond_flatten_reg_647 = ap_const_lv1_0))) then
                or_cond_reg_700 <= or_cond_fu_305_p2;
                tmp_3_reg_673 <= tmp_3_fu_284_p2;
                tmp_7_reg_696 <= tmp_7_fu_294_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (exitcond_flatten_fu_234_p2 = ap_const_lv1_0))) then
                row_mid2_reg_666 <= row_mid2_fu_266_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_696_pp0_it2)) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then
                y_reg_720 <= input_r_dout;
            end if;
        end if;
    end process;
    tmp_4_reg_680(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_4_reg_680_pp0_it2(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it10, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it10)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it10))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st14_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st14_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it3 <= "XXXXXXXX";
    ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it1 <= "XXXXXXXX";
    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
                ap_sig_bdd_180 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_251 assign process. --
    ap_sig_bdd_251_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
                ap_sig_bdd_251 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))));
    end process;


    -- ap_sig_bdd_295 assign process. --
    ap_sig_bdd_295_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
                ap_sig_bdd_295 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))));
    end process;


    -- ap_sig_bdd_300 assign process. --
    ap_sig_bdd_300_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2, ap_reg_ppstg_tmp_3_reg_673_pp0_it2)
    begin
                ap_sig_bdd_300 <= ((ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_673_pp0_it2)));
    end process;


    -- ap_sig_bdd_304 assign process. --
    ap_sig_bdd_304_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3, ap_reg_ppstg_tmp_3_reg_673_pp0_it3)
    begin
                ap_sig_bdd_304 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_673_pp0_it3));
    end process;


    -- ap_sig_bdd_310 assign process. --
    ap_sig_bdd_310_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3, ap_reg_ppstg_tmp_7_reg_696_pp0_it3)
    begin
                ap_sig_bdd_310 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_696_pp0_it3)));
    end process;


    -- ap_sig_bdd_317 assign process. --
    ap_sig_bdd_317_assign_proc : process(exitcond_flatten_reg_647, tmp_7_fu_294_p2)
    begin
                ap_sig_bdd_317 <= ((exitcond_flatten_reg_647 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_7_fu_294_p2));
    end process;


    -- ap_sig_bdd_54 assign process. --
    ap_sig_bdd_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_54 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_583 assign process. --
    ap_sig_bdd_583_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_583 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(input_r_empty_n, ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2, ap_reg_ppstg_tmp_7_reg_696_pp0_it2)
    begin
                ap_sig_bdd_72 <= ((input_r_empty_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_696_pp0_it2)));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(output_r_full_n, ap_reg_ppstg_or_cond_reg_700_pp0_it10)
    begin
                ap_sig_bdd_96 <= ((output_r_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_reg_700_pp0_it10)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_54)
    begin
        if (ap_sig_bdd_54) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_2 assign process. --
    ap_sig_cseq_ST_st14_fsm_2_assign_proc : process(ap_sig_bdd_583)
    begin
        if (ap_sig_bdd_583) then 
            ap_sig_cseq_ST_st14_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_0_address0 <= tmp_4_fu_289_p1(11 - 1 downto 0);
    buff_A_0_address1 <= tmp_9_fu_316_p1(11 - 1 downto 0);

    -- buff_A_0_ce0 assign process. --
    buff_A_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
            buff_A_0_ce0 <= ap_const_logic_1;
        else 
            buff_A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_0_ce1 assign process. --
    buff_A_0_ce1_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
            buff_A_0_ce1 <= ap_const_logic_1;
        else 
            buff_A_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_0_d1 <= y_reg_720;

    -- buff_A_0_we1 assign process. --
    buff_A_0_we1_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11, ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3, ap_reg_ppstg_tmp_7_reg_696_pp0_it3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it3) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_696_pp0_it3))))) then 
            buff_A_0_we1 <= ap_const_logic_1;
        else 
            buff_A_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_1_address0 <= tmp_4_fu_289_p1(11 - 1 downto 0);
    buff_A_1_address1 <= ap_reg_ppstg_buff_A_1_addr_reg_685_pp0_it2;

    -- buff_A_1_ce0 assign process. --
    buff_A_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
            buff_A_1_ce0 <= ap_const_logic_1;
        else 
            buff_A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_1_ce1 assign process. --
    buff_A_1_ce1_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
            buff_A_1_ce1 <= ap_const_logic_1;
        else 
            buff_A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_1_d1 <= return_value_reg_714;

    -- buff_A_1_we1 assign process. --
    buff_A_1_we1_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11, ap_reg_ppstg_tmp_3_reg_673_pp0_it2)
    begin
        if ((((ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_673_pp0_it2))))) then 
            buff_A_1_we1 <= ap_const_logic_1;
        else 
            buff_A_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_2_address0 <= ap_reg_ppstg_tmp_4_reg_680_pp0_it2(11 - 1 downto 0);
    buff_A_2_address1 <= tmp_6_fu_320_p1(11 - 1 downto 0);

    -- buff_A_2_ce0 assign process. --
    buff_A_2_ce0_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
            buff_A_2_ce0 <= ap_const_logic_1;
        else 
            buff_A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_2_ce1 assign process. --
    buff_A_2_ce1_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
            buff_A_2_ce1 <= ap_const_logic_1;
        else 
            buff_A_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_2_d0 <= buff_A_1_load_reg_709;

    -- buff_A_2_we0 assign process. --
    buff_A_2_we0_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11, ap_reg_ppstg_tmp_3_reg_673_pp0_it2)
    begin
        if ((((ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_3_reg_673_pp0_it2))))) then 
            buff_A_2_we0 <= ap_const_logic_1;
        else 
            buff_A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_C_0_2_fu_373_p3 <= 
        buff_A_2_q1 when (ap_reg_ppstg_tmp_3_reg_673_pp0_it4(0) = '1') else 
        buff_C_0_1_fu_82;
    buff_C_1_2_fu_366_p3 <= 
        ap_reg_phiprechg_buff_C_1_2_1_reg_212pp0_it5 when (ap_reg_ppstg_tmp_3_reg_673_pp0_it4(0) = '1') else 
        buff_C_1_1_fu_94;
    buff_C_2_2_fu_380_p3 <= 
        ap_reg_phiprechg_buff_C_2_2_1_reg_223pp0_it5 when (ap_reg_ppstg_tmp_3_reg_673_pp0_it4(0) = '1') else 
        buff_C_2_1_fu_74;
    col_assign_mid2_fu_252_p3 <= 
        ap_const_lv11_0 when (exitcond4_fu_246_p2(0) = '1') else 
        col_assign_phi_fu_205_p4;

    -- col_assign_phi_fu_205_p4 assign process. --
    col_assign_phi_fu_205_p4_assign_proc : process(col_assign_reg_201, exitcond_flatten_reg_647, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, col_fu_311_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_647 = ap_const_lv1_0))) then 
            col_assign_phi_fu_205_p4 <= col_fu_311_p2;
        else 
            col_assign_phi_fu_205_p4 <= col_assign_reg_201;
        end if; 
    end process;

    col_fu_311_p2 <= std_logic_vector(unsigned(col_assign_mid2_reg_656) + unsigned(ap_const_lv11_1));
    edge_val_fu_601_p3 <= 
        phitmp_i_fu_590_p3 when (tmp_5_fu_597_p2(0) = '1') else 
        tmp_8_reg_816;
    edge_weight_fu_568_p2 <= std_logic_vector(signed(tmp_5_i_cast_fu_565_p1) + signed(tmp_2_i_cast_fu_562_p1));
    exitcond4_fu_246_p2 <= "1" when (col_assign_phi_fu_205_p4 = ap_const_lv11_781) else "0";
    exitcond_flatten_fu_234_p2 <= "1" when (indvar_flatten_reg_179 = ap_const_lv21_1FAFB9) else "0";
    indvar_flatten_next_fu_240_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_179) + unsigned(ap_const_lv21_1));

    -- input_r_read assign process. --
    input_r_read_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2, ap_reg_ppstg_tmp_7_reg_696_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        if (((ap_reg_ppstg_exitcond_flatten_reg_647_pp0_it2 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_696_pp0_it2)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
            input_r_read <= ap_const_logic_1;
        else 
            input_r_read <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_305_p2 <= (tmp_1_fu_279_p2 and tmp_s_fu_300_p2);
    output_r_din <= edge_val_reg_821;

    -- output_r_write assign process. --
    output_r_write_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_or_cond_reg_700_pp0_it10, ap_sig_bdd_96, ap_reg_ppiten_pp0_it11)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_reg_700_pp0_it10)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_96 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))))) then 
            output_r_write <= ap_const_logic_1;
        else 
            output_r_write <= ap_const_logic_0;
        end if; 
    end process;

    p_shl6_i_cast_fu_436_p1 <= std_logic_vector(resize(unsigned(p_shl6_i_fu_429_p3),11));
    p_shl6_i_fu_429_p3 <= (buff_C_1_0_load_reg_741 & ap_const_lv1_0);
    p_shl_i_cast_fu_503_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_496_p3),11));
    p_shl_i_fu_496_p3 <= (ap_reg_ppstg_buff_C_2_1_load_1_reg_746_pp0_it6 & ap_const_lv1_0);
    phitmp_i_fu_590_p3 <= 
        ap_const_lv8_FF when (tmp_7_i_reg_805(0) = '1') else 
        ap_const_lv8_0;
    row_mid2_fu_266_p3 <= 
        row_s_fu_260_p2 when (exitcond4_fu_246_p2(0) = '1') else 
        row_phi_fu_194_p4;

    -- row_phi_fu_194_p4 assign process. --
    row_phi_fu_194_p4_assign_proc : process(row_reg_190, exitcond_flatten_reg_647, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, row_mid2_reg_666)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_647 = ap_const_lv1_0))) then 
            row_phi_fu_194_p4 <= row_mid2_reg_666;
        else 
            row_phi_fu_194_p4 <= row_reg_190;
        end if; 
    end process;

    row_s_fu_260_p2 <= std_logic_vector(unsigned(row_phi_fu_194_p4) + unsigned(ap_const_lv11_1));
    tmp1_cast_fu_469_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_463_p2),10));
    tmp1_fu_463_p2 <= std_logic_vector(unsigned(tmp_10_0_2_i_cast_fu_416_p1) + unsigned(tmp_10_0_i_cast_fu_402_p1));
    tmp_10_0_2_i_cast_fu_416_p1 <= std_logic_vector(resize(unsigned(buff_C_0_2_reg_761),9));
    tmp_10_0_i_cast_fu_402_p1 <= std_logic_vector(resize(unsigned(buff_C_0_0_load_reg_731),9));
    tmp_10_2_2_i_cast_fu_513_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_buff_C_2_2_reg_766_pp0_it6),11));
    tmp_10_2_i_cast_fu_482_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_buff_C_2_0_load_reg_736_pp0_it6),11));
    tmp_11_1_2_i_cast_fu_453_p1 <= std_logic_vector(resize(unsigned(tmp_11_1_2_i_fu_446_p3),11));
    tmp_11_1_2_i_fu_446_p3 <= (buff_C_1_2_reg_756 & ap_const_lv1_0);
    tmp_12_0_1_i_cast_fu_412_p1 <= std_logic_vector(resize(unsigned(tmp_12_0_1_i_fu_405_p3),10));
    tmp_12_0_1_i_fu_405_p3 <= (buff_C_0_1_load_reg_751 & ap_const_lv1_0);
    tmp_1_fu_279_p2 <= "0" when (row_mid2_reg_666 = ap_const_lv11_0) else "1";
    tmp_1_i_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(x_weight_2_2_2_i_reg_781));
        tmp_2_i_cast_fu_562_p1 <= std_logic_vector(resize(signed(tmp_2_i_reg_795),12));

    tmp_2_i_fu_538_p3 <= 
        x_weight_2_2_2_i_reg_781 when (tmp_i_fu_528_p2(0) = '1') else 
        tmp_1_i_fu_533_p2;
    tmp_3_fu_284_p2 <= "1" when (unsigned(col_assign_mid2_reg_656) < unsigned(ap_const_lv11_780)) else "0";
    tmp_3_i_fu_545_p2 <= "1" when (signed(y_weight_2_2_2_i_reg_788) > signed(ap_const_lv11_0)) else "0";
    tmp_4_fu_289_p1 <= std_logic_vector(resize(unsigned(col_assign_mid2_reg_656),64));
    tmp_4_i_fu_550_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(y_weight_2_2_2_i_reg_788));
    tmp_5_fu_597_p2 <= (tmp_7_i_reg_805 or tmp_9_i_reg_811);
        tmp_5_i_cast_fu_565_p1 <= std_logic_vector(resize(signed(tmp_5_i_reg_800),12));

    tmp_5_i_fu_555_p3 <= 
        y_weight_2_2_2_i_reg_788 when (tmp_3_i_fu_545_p2(0) = '1') else 
        tmp_4_i_fu_550_p2;
    tmp_6_fu_320_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it3),64));
    tmp_7_fu_294_p2 <= (tmp_3_fu_284_p2 and tmp_fu_274_p2);
    tmp_7_i_fu_574_p2 <= "1" when (signed(edge_weight_fu_568_p2) > signed(ap_const_lv12_C8)) else "0";
    tmp_8_fu_586_p1 <= edge_weight_fu_568_p2(8 - 1 downto 0);
    tmp_9_fu_316_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_col_assign_mid2_reg_656_pp0_it3),64));
    tmp_9_i_fu_580_p2 <= "1" when (signed(edge_weight_fu_568_p2) < signed(ap_const_lv12_64)) else "0";
    tmp_fu_274_p2 <= "1" when (unsigned(row_mid2_reg_666) < unsigned(ap_const_lv11_438)) else "0";
    tmp_i_fu_528_p2 <= "1" when (signed(x_weight_2_2_2_i_reg_781) > signed(ap_const_lv11_0)) else "0";
    tmp_s_fu_300_p2 <= "0" when (col_assign_mid2_reg_656 = ap_const_lv11_0) else "1";
        x_weight_2_0_2_i_cast_fu_425_p1 <= std_logic_vector(resize(signed(x_weight_2_0_2_i_fu_419_p2),11));

    x_weight_2_0_2_i_fu_419_p2 <= std_logic_vector(unsigned(tmp_10_0_2_i_cast_fu_416_p1) - unsigned(tmp_10_0_i_cast_fu_402_p1));
    x_weight_2_1_1_i_fu_440_p2 <= std_logic_vector(signed(x_weight_2_0_2_i_cast_fu_425_p1) - signed(p_shl6_i_cast_fu_436_p1));
    x_weight_2_1_2_i_fu_457_p2 <= std_logic_vector(unsigned(x_weight_2_1_1_i_fu_440_p2) + unsigned(tmp_11_1_2_i_cast_fu_453_p1));
    x_weight_2_2_2_i_fu_516_p2 <= std_logic_vector(unsigned(tmp_10_2_2_i_cast_fu_513_p1) + unsigned(x_weight_2_2_i_fu_485_p2));
    x_weight_2_2_i_fu_485_p2 <= std_logic_vector(unsigned(x_weight_2_1_2_i_reg_771) - unsigned(tmp_10_2_i_cast_fu_482_p1));
    y_weight_2_1_2_i_cast_fu_479_p1 <= std_logic_vector(resize(unsigned(y_weight_2_1_2_i_reg_776),11));
    y_weight_2_1_2_i_fu_473_p2 <= std_logic_vector(unsigned(tmp_12_0_1_i_cast_fu_412_p1) + unsigned(tmp1_cast_fu_469_p1));
    y_weight_2_2_1_i_fu_507_p2 <= std_logic_vector(unsigned(y_weight_2_2_i_fu_490_p2) - unsigned(p_shl_i_cast_fu_503_p1));
    y_weight_2_2_2_i_fu_522_p2 <= std_logic_vector(unsigned(y_weight_2_2_1_i_fu_507_p2) - unsigned(tmp_10_2_2_i_cast_fu_513_p1));
    y_weight_2_2_i_fu_490_p2 <= std_logic_vector(unsigned(y_weight_2_1_2_i_cast_fu_479_p1) - unsigned(tmp_10_2_i_cast_fu_482_p1));
end behav;
