-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlation_accel_v1 is
generic (
    C_M_AXI_GMEM32_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM32_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM32_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM32_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM32_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem32_AWVALID : OUT STD_LOGIC;
    m_axi_gmem32_AWREADY : IN STD_LOGIC;
    m_axi_gmem32_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ADDR_WIDTH-1 downto 0);
    m_axi_gmem32_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem32_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem32_WVALID : OUT STD_LOGIC;
    m_axi_gmem32_WREADY : IN STD_LOGIC;
    m_axi_gmem32_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH-1 downto 0);
    m_axi_gmem32_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem32_WLAST : OUT STD_LOGIC;
    m_axi_gmem32_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_WUSER_WIDTH-1 downto 0);
    m_axi_gmem32_ARVALID : OUT STD_LOGIC;
    m_axi_gmem32_ARREADY : IN STD_LOGIC;
    m_axi_gmem32_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ADDR_WIDTH-1 downto 0);
    m_axi_gmem32_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem32_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem32_RVALID : IN STD_LOGIC;
    m_axi_gmem32_RREADY : OUT STD_LOGIC;
    m_axi_gmem32_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH-1 downto 0);
    m_axi_gmem32_RLAST : IN STD_LOGIC;
    m_axi_gmem32_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_RUSER_WIDTH-1 downto 0);
    m_axi_gmem32_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_BVALID : IN STD_LOGIC;
    m_axi_gmem32_BREADY : OUT STD_LOGIC;
    m_axi_gmem32_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_BUSER_WIDTH-1 downto 0);
    number_of_days : IN STD_LOGIC_VECTOR (31 downto 0);
    number_of_indices : IN STD_LOGIC_VECTOR (31 downto 0);
    in_indices : IN STD_LOGIC_VECTOR (31 downto 0);
    out_correlation : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of correlation_accel_v1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "correlation_accel_v1,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.950000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.338000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=37,HLS_SYN_FF=12517,HLS_SYN_LUT=12846}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_pp0_stg0_fsm_34 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st38_fsm_35 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st39_fsm_36 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_37 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_38 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_39 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_40 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_41 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_42 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_43 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_44 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_45 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_46 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_47 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_pp1_stg0_fsm_48 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_49 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_50 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_51 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp2_stg0_fsm_52 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp2_stg1_fsm_53 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st128_fsm_54 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st129_fsm_55 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_56 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg1_fsm_57 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg2_fsm_58 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg3_fsm_59 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg4_fsm_60 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg5_fsm_61 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg6_fsm_62 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg7_fsm_63 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg8_fsm_64 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st147_fsm_65 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st148_fsm_66 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st149_fsm_67 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st150_fsm_68 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st151_fsm_69 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st152_fsm_70 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st153_fsm_71 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st154_fsm_72 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st155_fsm_73 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st156_fsm_74 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st157_fsm_75 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st158_fsm_76 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st159_fsm_77 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st160_fsm_78 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st161_fsm_79 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st162_fsm_80 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st163_fsm_81 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st164_fsm_82 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st165_fsm_83 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st166_fsm_84 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st167_fsm_85 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st168_fsm_86 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st169_fsm_87 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st170_fsm_88 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st171_fsm_89 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st172_fsm_90 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st173_fsm_91 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st174_fsm_92 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st175_fsm_93 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st176_fsm_94 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st177_fsm_95 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st178_fsm_96 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st179_fsm_97 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st180_fsm_98 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st181_fsm_99 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st182_fsm_100 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st183_fsm_101 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st184_fsm_102 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st185_fsm_103 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st186_fsm_104 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st187_fsm_105 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st188_fsm_106 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st189_fsm_107 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st190_fsm_108 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st191_fsm_109 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st192_fsm_110 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st193_fsm_111 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st194_fsm_112 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st195_fsm_113 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st196_fsm_114 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st197_fsm_115 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st198_fsm_116 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st199_fsm_117 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st200_fsm_118 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st201_fsm_119 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st202_fsm_120 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st203_fsm_121 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st204_fsm_122 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st205_fsm_123 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st206_fsm_124 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st207_fsm_125 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st208_fsm_126 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st209_fsm_127 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st210_fsm_128 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st211_fsm_129 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st212_fsm_130 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st213_fsm_131 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st214_fsm_132 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st215_fsm_133 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st216_fsm_134 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st217_fsm_135 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st218_fsm_136 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st219_fsm_137 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st220_fsm_138 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st221_fsm_139 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st222_fsm_140 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st223_fsm_141 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st224_fsm_142 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st225_fsm_143 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st226_fsm_144 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st227_fsm_145 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st228_fsm_146 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st229_fsm_147 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st230_fsm_148 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st231_fsm_149 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st232_fsm_150 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st233_fsm_151 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st234_fsm_152 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st235_fsm_153 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st236_fsm_154 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st237_fsm_155 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st238_fsm_156 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st239_fsm_157 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st240_fsm_158 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st241_fsm_159 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st242_fsm_160 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st243_fsm_161 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st244_fsm_162 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st245_fsm_163 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st246_fsm_164 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st247_fsm_165 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st248_fsm_166 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st249_fsm_167 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st250_fsm_168 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st251_fsm_169 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st252_fsm_170 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st253_fsm_171 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st254_fsm_172 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st255_fsm_173 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st256_fsm_174 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st257_fsm_175 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st258_fsm_176 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st259_fsm_177 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st260_fsm_178 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st261_fsm_179 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st262_fsm_180 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st263_fsm_181 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st264_fsm_182 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st265_fsm_183 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st266_fsm_184 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st267_fsm_185 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st268_fsm_186 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st269_fsm_187 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st270_fsm_188 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st271_fsm_189 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st272_fsm_190 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st273_fsm_191 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st274_fsm_192 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st275_fsm_193 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st276_fsm_194 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st277_fsm_195 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st278_fsm_196 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st279_fsm_197 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st280_fsm_198 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st281_fsm_199 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st282_fsm_200 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st283_fsm_201 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st284_fsm_202 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st285_fsm_203 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st286_fsm_204 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st287_fsm_205 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st288_fsm_206 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st289_fsm_207 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st290_fsm_208 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st291_fsm_209 : STD_LOGIC_VECTOR (219 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st292_fsm_210 : STD_LOGIC_VECTOR (219 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st293_fsm_211 : STD_LOGIC_VECTOR (219 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st294_fsm_212 : STD_LOGIC_VECTOR (219 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st295_fsm_213 : STD_LOGIC_VECTOR (219 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st296_fsm_214 : STD_LOGIC_VECTOR (219 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st297_fsm_215 : STD_LOGIC_VECTOR (219 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st298_fsm_216 : STD_LOGIC_VECTOR (219 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st299_fsm_217 : STD_LOGIC_VECTOR (219 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st300_fsm_218 : STD_LOGIC_VECTOR (219 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st301_fsm_219 : STD_LOGIC_VECTOR (219 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_D6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_3F70A3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011100001010001111010111";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_B5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv31_6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_BB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111011";
    constant ap_const_lv32_BC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111100";
    constant ap_const_lv32_BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111101";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000001";
    constant ap_const_lv32_C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000010";
    constant ap_const_lv32_C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000011";
    constant ap_const_lv32_C4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000100";
    constant ap_const_lv32_C5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000101";
    constant ap_const_lv32_C6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000110";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001001";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001101";
    constant ap_const_lv32_CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001110";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_D3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010011";
    constant ap_const_lv32_D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010100";
    constant ap_const_lv32_D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (219 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_238 : BOOLEAN;
    signal weight_rom_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_rom_ce0 : STD_LOGIC;
    signal weight_rom_we0 : STD_LOGIC;
    signal weight_rom_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_rom_ce1 : STD_LOGIC;
    signal weight_rom_we1 : STD_LOGIC;
    signal weight_rom_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramA_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramA_ce0 : STD_LOGIC;
    signal bramA_we0 : STD_LOGIC;
    signal bramA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramA_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramA_ce1 : STD_LOGIC;
    signal bramA_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramB_ce0 : STD_LOGIC;
    signal bramB_we0 : STD_LOGIC;
    signal bramB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal gmem32_AWVALID : STD_LOGIC;
    signal gmem32_AWREADY : STD_LOGIC;
    signal gmem32_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_WVALID : STD_LOGIC;
    signal gmem32_WREADY : STD_LOGIC;
    signal gmem32_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_WLAST : STD_LOGIC;
    signal gmem32_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_ARVALID : STD_LOGIC;
    signal gmem32_ARREADY : STD_LOGIC;
    signal gmem32_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RVALID : STD_LOGIC;
    signal gmem32_RREADY : STD_LOGIC;
    signal gmem32_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_RLAST : STD_LOGIC;
    signal gmem32_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_BVALID : STD_LOGIC;
    signal gmem32_BREADY : STD_LOGIC;
    signal gmem32_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal correlation_accel_v1_gmem32_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_831 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar_reg_831_pp0_it1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_426 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond2_reg_1790 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_435 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar8_reg_852 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar8_reg_852_pp1_it1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_451 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond3_reg_1814 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_458 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal i1_reg_864 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_52 : STD_LOGIC;
    signal ap_sig_bdd_474 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it35 : STD_LOGIC := '0';
    signal sum_returnA_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnB_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA_reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareB_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnB_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_returnB_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_960 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_586 : BOOLEAN;
    signal tmp_12_reg_1823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st181_fsm_99 : STD_LOGIC;
    signal ap_sig_bdd_602 : BOOLEAN;
    signal ap_sig_cseq_ST_st186_fsm_104 : STD_LOGIC;
    signal ap_sig_bdd_610 : BOOLEAN;
    signal ap_sig_cseq_ST_st225_fsm_143 : STD_LOGIC;
    signal ap_sig_bdd_618 : BOOLEAN;
    signal ap_sig_cseq_ST_st267_fsm_185 : STD_LOGIC;
    signal ap_sig_bdd_626 : BOOLEAN;
    signal reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_635 : BOOLEAN;
    signal ap_reg_ppstg_reg_1058_pp2_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it21 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it22 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it23 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it24 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it25 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it26 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1058_pp2_it27 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st129_fsm_55 : STD_LOGIC;
    signal ap_sig_bdd_674 : BOOLEAN;
    signal grp_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_684 : BOOLEAN;
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg1_fsm_53 : STD_LOGIC;
    signal ap_sig_bdd_696 : BOOLEAN;
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st190_fsm_108 : STD_LOGIC;
    signal ap_sig_bdd_708 : BOOLEAN;
    signal ap_sig_cseq_ST_st199_fsm_117 : STD_LOGIC;
    signal ap_sig_bdd_716 : BOOLEAN;
    signal ap_sig_cseq_ST_st234_fsm_152 : STD_LOGIC;
    signal ap_sig_bdd_724 : BOOLEAN;
    signal reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st176_fsm_94 : STD_LOGIC;
    signal ap_sig_bdd_752 : BOOLEAN;
    signal ap_sig_cseq_ST_st297_fsm_215 : STD_LOGIC;
    signal ap_sig_bdd_761 : BOOLEAN;
    signal ap_sig_ioackin_gmem32_AWREADY : STD_LOGIC;
    signal reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st229_fsm_147 : STD_LOGIC;
    signal ap_sig_bdd_784 : BOOLEAN;
    signal acc_returnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg1_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_803 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal exitcond_reg_1968 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_returnB_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1107 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg2_fsm_58 : STD_LOGIC;
    signal ap_sig_bdd_827 : BOOLEAN;
    signal grp_fu_1002_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg4_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_853 : BOOLEAN;
    signal acc_weight_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1127 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg6_fsm_62 : STD_LOGIC;
    signal ap_sig_bdd_872 : BOOLEAN;
    signal grp_fu_1006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg3_fsm_59 : STD_LOGIC;
    signal ap_sig_bdd_895 : BOOLEAN;
    signal reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg5_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_920 : BOOLEAN;
    signal acc_weight_returnA_returnB_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1158 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_976_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st195_fsm_113 : STD_LOGIC;
    signal ap_sig_bdd_945 : BOOLEAN;
    signal grp_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1179 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st238_fsm_156 : STD_LOGIC;
    signal ap_sig_bdd_969 : BOOLEAN;
    signal tmp_59_cast_fu_1203_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_59_cast_reg_1491 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_60_cast_fu_1217_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_60_cast_reg_1496 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_2_fu_1232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_990 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_999 : BOOLEAN;
    signal tmp_57_i_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1252_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_1518 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_1258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1523 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_load_1_reg_1529 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_1018 : BOOLEAN;
    signal grp_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1539 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1268_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_reg_1545 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_add_i32_shr_fu_1271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_add_i32_shr_reg_1551 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_addr_gep_fu_259_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_reg_1556 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_gep_fu_266_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_reg_1561 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_gep_fu_273_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_reg_1566 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_gep_fu_280_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_reg_1571 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_gep_fu_287_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_reg_1576 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_gep_fu_294_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_reg_1581 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_gep_fu_301_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_reg_1586 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_6_gep_fu_308_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_6_reg_1591 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_6_gep_fu_315_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_6_reg_1596 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_6_gep_fu_322_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_6_reg_1601 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_6_gep_fu_329_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_6_reg_1606 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_6_gep_fu_336_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_6_reg_1611 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_6_gep_fu_343_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_6_reg_1616 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_1_gep_fu_350_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_1_reg_1621 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_7_gep_fu_357_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_7_reg_1626 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_7_gep_fu_364_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_7_reg_1631 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_7_gep_fu_371_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_7_reg_1636 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_7_gep_fu_378_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_7_reg_1641 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_7_gep_fu_385_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_7_reg_1646 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_7_gep_fu_392_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_7_reg_1651 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_gep_fu_399_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_reg_1656 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_3_gep_fu_406_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_3_reg_1661 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_3_gep_fu_413_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_3_reg_1666 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_3_gep_fu_420_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_3_reg_1671 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_3_gep_fu_427_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_3_reg_1676 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_3_gep_fu_434_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_3_reg_1681 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_3_gep_fu_441_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_3_reg_1686 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_gep_fu_448_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_reg_1691 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_4_gep_fu_455_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_4_reg_1696 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_4_gep_fu_462_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_4_reg_1701 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_4_gep_fu_469_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_4_reg_1706 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_4_gep_fu_476_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_4_reg_1711 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_4_gep_fu_483_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_4_reg_1716 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_4_gep_fu_490_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_4_reg_1721 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_gep_fu_497_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_reg_1726 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_5_gep_fu_504_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_5_reg_1731 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_5_gep_fu_511_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_5_reg_1736 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_5_gep_fu_518_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_5_reg_1741 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_5_gep_fu_525_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_5_reg_1746 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_5_gep_fu_532_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_5_reg_1751 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_5_gep_fu_539_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_5_reg_1756 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_gep_fu_546_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_reg_1761 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_mul_fu_1275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1766 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_1117 : BOOLEAN;
    signal row_index_cast_fu_1280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_index_cast_reg_1771 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_index_1_fu_1289_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_index_1_reg_1779 : STD_LOGIC_VECTOR (30 downto 0);
    signal gmem32_addr_reg_1784 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_1314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_1790_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_1319_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_reg_1794 : STD_LOGIC_VECTOR (29 downto 0);
    signal column_index_fu_1330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_reg_1799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_1143 : BOOLEAN;
    signal gmem32_addr_1_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_1152 : BOOLEAN;
    signal exitcond3_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_1814_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next9_fu_1370_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next9_reg_1818 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_12_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_1823_pp2_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1390_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_1827 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_1402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_reg_1837 : STD_LOGIC_VECTOR (63 downto 0);
    signal bramA_load_reg_1853 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramA_load_1_reg_1858 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_load_reg_1863 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_load_1_reg_1878 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_addr_1_reg_1883 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it22 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it23 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_1_reg_1889 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it22 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it23 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_1_reg_1895 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it22 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it23 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it32 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it33 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it34 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_1_reg_1901 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it22 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it23 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it32 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it33 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it34 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_1_reg_1907 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it22 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it23 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_1_reg_1913 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it22 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it23 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it32 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_6_reg_1919 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it22 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it23 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it24 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it25 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it26 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it27 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it28 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it29 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it30 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it31 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it32 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it33 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it34 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1043_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnA_reg_1925 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnB_reg_1934 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1943 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_1948 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1010_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1953 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1958 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_1963 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_1444 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_reg_1968_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_1430_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1972 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_55_fu_1436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_reg_1977 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_returnA_1_reg_2022 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnB_1_reg_2027 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA_1_reg_2032 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_1_reg_2037 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareB_1_reg_2042 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnB_1_reg_2047 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg7_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_1494 : BOOLEAN;
    signal grp_fu_1033_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal volatilityA_reg_2057 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st262_fsm_180 : STD_LOGIC;
    signal ap_sig_bdd_1505 : BOOLEAN;
    signal grp_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal volatilityB_reg_2062 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_addr_2_reg_2067 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st296_fsm_214 : STD_LOGIC;
    signal ap_sig_bdd_1516 : BOOLEAN;
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_1523 : BOOLEAN;
    signal ap_sig_cseq_ST_st50_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_1535 : BOOLEAN;
    signal ap_sig_cseq_ST_st56_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_1547 : BOOLEAN;
    signal ap_sig_cseq_ST_pp3_stg8_fsm_64 : STD_LOGIC;
    signal ap_sig_bdd_1559 : BOOLEAN;
    signal acc_returnA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_ce0 : STD_LOGIC;
    signal acc_returnA_we0 : STD_LOGIC;
    signal acc_returnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_ce1 : STD_LOGIC;
    signal acc_returnA_we1 : STD_LOGIC;
    signal acc_returnA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_ce0 : STD_LOGIC;
    signal acc_returnB_we0 : STD_LOGIC;
    signal acc_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_ce1 : STD_LOGIC;
    signal acc_returnB_we1 : STD_LOGIC;
    signal acc_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_ce0 : STD_LOGIC;
    signal acc_weight_returnSquareA_we0 : STD_LOGIC;
    signal acc_weight_returnSquareA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_ce1 : STD_LOGIC;
    signal acc_weight_returnSquareA_we1 : STD_LOGIC;
    signal acc_weight_returnSquareA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_ce0 : STD_LOGIC;
    signal acc_weight_returnA_we0 : STD_LOGIC;
    signal acc_weight_returnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_ce1 : STD_LOGIC;
    signal acc_weight_returnA_we1 : STD_LOGIC;
    signal acc_weight_returnA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_ce0 : STD_LOGIC;
    signal acc_weight_returnSquareB_we0 : STD_LOGIC;
    signal acc_weight_returnSquareB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_ce1 : STD_LOGIC;
    signal acc_weight_returnSquareB_we1 : STD_LOGIC;
    signal acc_weight_returnSquareB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_786 : STD_LOGIC_VECTOR (7 downto 0);
    signal i1_i_reg_798 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_1664 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_1672 : BOOLEAN;
    signal exitcond_i_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_index_reg_809 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_835_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal column_index_0_in_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st301_fsm_219 : STD_LOGIC;
    signal ap_sig_bdd_1699 : BOOLEAN;
    signal indvar8_phi_fu_856_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal i1_phi_fu_868_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_returnA_phi_fu_880_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnB_phi_fu_892_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA_phi_fu_904_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_phi_fu_916_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareB_phi_fu_928_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnB_phi_fu_940_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_returnB_phi_fu_952_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_phi_fu_964_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_56_i_fu_1227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_i_fu_1247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_1396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_1413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_1304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_1355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_correlation4_sum_cast_fu_1454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem32_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem32_ARREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_1770 : BOOLEAN;
    signal ap_sig_cseq_ST_st45_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_1786 : BOOLEAN;
    signal ap_reg_ioackin_gmem32_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem32_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem32_WREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st298_fsm_216 : STD_LOGIC;
    signal ap_sig_bdd_1808 : BOOLEAN;
    signal tmp_54_fu_1464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st128_fsm_54 : STD_LOGIC;
    signal ap_sig_bdd_1836 : BOOLEAN;
    signal ap_sig_cseq_ST_st54_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_1857 : BOOLEAN;
    signal ap_sig_cseq_ST_st55_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_1864 : BOOLEAN;
    signal grp_fu_972_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_1939 : BOOLEAN;
    signal ap_sig_cseq_ST_st182_fsm_100 : STD_LOGIC;
    signal ap_sig_bdd_1951 : BOOLEAN;
    signal ap_sig_cseq_ST_st187_fsm_105 : STD_LOGIC;
    signal ap_sig_bdd_1958 : BOOLEAN;
    signal ap_sig_cseq_ST_st191_fsm_109 : STD_LOGIC;
    signal ap_sig_bdd_1965 : BOOLEAN;
    signal ap_sig_cseq_ST_st226_fsm_144 : STD_LOGIC;
    signal ap_sig_bdd_1972 : BOOLEAN;
    signal ap_sig_cseq_ST_st230_fsm_148 : STD_LOGIC;
    signal ap_sig_bdd_1979 : BOOLEAN;
    signal grp_fu_976_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_976_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_980_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_984_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_984_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_996_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_996_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st177_fsm_95 : STD_LOGIC;
    signal ap_sig_bdd_2003 : BOOLEAN;
    signal ap_sig_cseq_ST_st221_fsm_139 : STD_LOGIC;
    signal ap_sig_bdd_2010 : BOOLEAN;
    signal ap_sig_cseq_ST_st263_fsm_181 : STD_LOGIC;
    signal ap_sig_bdd_2018 : BOOLEAN;
    signal grp_fu_1002_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1002_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1006_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1006_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1010_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1020_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1020_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st147_fsm_65 : STD_LOGIC;
    signal ap_sig_bdd_2035 : BOOLEAN;
    signal ap_sig_cseq_ST_st196_fsm_114 : STD_LOGIC;
    signal ap_sig_bdd_2042 : BOOLEAN;
    signal ap_sig_cseq_ST_st200_fsm_118 : STD_LOGIC;
    signal ap_sig_bdd_2049 : BOOLEAN;
    signal ap_sig_cseq_ST_st268_fsm_186 : STD_LOGIC;
    signal ap_sig_bdd_2056 : BOOLEAN;
    signal grp_fu_1025_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1025_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1030_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_2068 : BOOLEAN;
    signal grp_fu_1033_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st235_fsm_153 : STD_LOGIC;
    signal ap_sig_bdd_2076 : BOOLEAN;
    signal grp_fu_1038_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1043_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1193_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_1207_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal i1_i_cast_fu_1238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_i_fu_1242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1258_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1268_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_1275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1295_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_53_fu_1299_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_1346_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_61_fu_1350_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal i1_cast_fu_1381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1407_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1407_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1407_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_53_cast_fu_1445_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal out_correlation4_sum_fu_1449_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_972_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_972_ce : STD_LOGIC;
    signal grp_fu_976_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_976_ce : STD_LOGIC;
    signal grp_fu_980_ce : STD_LOGIC;
    signal grp_fu_984_ce : STD_LOGIC;
    signal grp_fu_996_ce : STD_LOGIC;
    signal grp_fu_1002_ce : STD_LOGIC;
    signal grp_fu_1006_ce : STD_LOGIC;
    signal grp_fu_1010_ce : STD_LOGIC;
    signal grp_fu_1020_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st148_fsm_66 : STD_LOGIC;
    signal ap_sig_bdd_2295 : BOOLEAN;
    signal ap_sig_cseq_ST_st149_fsm_67 : STD_LOGIC;
    signal ap_sig_bdd_2303 : BOOLEAN;
    signal ap_sig_cseq_ST_st150_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_2311 : BOOLEAN;
    signal ap_sig_cseq_ST_st151_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_2319 : BOOLEAN;
    signal ap_sig_cseq_ST_st152_fsm_70 : STD_LOGIC;
    signal ap_sig_bdd_2327 : BOOLEAN;
    signal ap_sig_cseq_ST_st153_fsm_71 : STD_LOGIC;
    signal ap_sig_bdd_2335 : BOOLEAN;
    signal ap_sig_cseq_ST_st154_fsm_72 : STD_LOGIC;
    signal ap_sig_bdd_2343 : BOOLEAN;
    signal ap_sig_cseq_ST_st155_fsm_73 : STD_LOGIC;
    signal ap_sig_bdd_2351 : BOOLEAN;
    signal ap_sig_cseq_ST_st156_fsm_74 : STD_LOGIC;
    signal ap_sig_bdd_2359 : BOOLEAN;
    signal ap_sig_cseq_ST_st157_fsm_75 : STD_LOGIC;
    signal ap_sig_bdd_2367 : BOOLEAN;
    signal ap_sig_cseq_ST_st158_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_2375 : BOOLEAN;
    signal ap_sig_cseq_ST_st159_fsm_77 : STD_LOGIC;
    signal ap_sig_bdd_2383 : BOOLEAN;
    signal ap_sig_cseq_ST_st160_fsm_78 : STD_LOGIC;
    signal ap_sig_bdd_2391 : BOOLEAN;
    signal ap_sig_cseq_ST_st161_fsm_79 : STD_LOGIC;
    signal ap_sig_bdd_2399 : BOOLEAN;
    signal ap_sig_cseq_ST_st162_fsm_80 : STD_LOGIC;
    signal ap_sig_bdd_2407 : BOOLEAN;
    signal ap_sig_cseq_ST_st163_fsm_81 : STD_LOGIC;
    signal ap_sig_bdd_2415 : BOOLEAN;
    signal ap_sig_cseq_ST_st164_fsm_82 : STD_LOGIC;
    signal ap_sig_bdd_2423 : BOOLEAN;
    signal ap_sig_cseq_ST_st165_fsm_83 : STD_LOGIC;
    signal ap_sig_bdd_2431 : BOOLEAN;
    signal ap_sig_cseq_ST_st166_fsm_84 : STD_LOGIC;
    signal ap_sig_bdd_2439 : BOOLEAN;
    signal ap_sig_cseq_ST_st167_fsm_85 : STD_LOGIC;
    signal ap_sig_bdd_2447 : BOOLEAN;
    signal ap_sig_cseq_ST_st168_fsm_86 : STD_LOGIC;
    signal ap_sig_bdd_2455 : BOOLEAN;
    signal ap_sig_cseq_ST_st169_fsm_87 : STD_LOGIC;
    signal ap_sig_bdd_2463 : BOOLEAN;
    signal ap_sig_cseq_ST_st170_fsm_88 : STD_LOGIC;
    signal ap_sig_bdd_2471 : BOOLEAN;
    signal ap_sig_cseq_ST_st171_fsm_89 : STD_LOGIC;
    signal ap_sig_bdd_2479 : BOOLEAN;
    signal ap_sig_cseq_ST_st172_fsm_90 : STD_LOGIC;
    signal ap_sig_bdd_2487 : BOOLEAN;
    signal ap_sig_cseq_ST_st173_fsm_91 : STD_LOGIC;
    signal ap_sig_bdd_2495 : BOOLEAN;
    signal ap_sig_cseq_ST_st174_fsm_92 : STD_LOGIC;
    signal ap_sig_bdd_2503 : BOOLEAN;
    signal ap_sig_cseq_ST_st175_fsm_93 : STD_LOGIC;
    signal ap_sig_bdd_2511 : BOOLEAN;
    signal ap_sig_cseq_ST_st197_fsm_115 : STD_LOGIC;
    signal ap_sig_bdd_2521 : BOOLEAN;
    signal ap_sig_cseq_ST_st198_fsm_116 : STD_LOGIC;
    signal ap_sig_bdd_2529 : BOOLEAN;
    signal ap_sig_cseq_ST_st201_fsm_119 : STD_LOGIC;
    signal ap_sig_bdd_2539 : BOOLEAN;
    signal ap_sig_cseq_ST_st202_fsm_120 : STD_LOGIC;
    signal ap_sig_bdd_2547 : BOOLEAN;
    signal ap_sig_cseq_ST_st203_fsm_121 : STD_LOGIC;
    signal ap_sig_bdd_2555 : BOOLEAN;
    signal ap_sig_cseq_ST_st204_fsm_122 : STD_LOGIC;
    signal ap_sig_bdd_2563 : BOOLEAN;
    signal ap_sig_cseq_ST_st205_fsm_123 : STD_LOGIC;
    signal ap_sig_bdd_2571 : BOOLEAN;
    signal ap_sig_cseq_ST_st206_fsm_124 : STD_LOGIC;
    signal ap_sig_bdd_2579 : BOOLEAN;
    signal ap_sig_cseq_ST_st207_fsm_125 : STD_LOGIC;
    signal ap_sig_bdd_2587 : BOOLEAN;
    signal ap_sig_cseq_ST_st208_fsm_126 : STD_LOGIC;
    signal ap_sig_bdd_2595 : BOOLEAN;
    signal ap_sig_cseq_ST_st209_fsm_127 : STD_LOGIC;
    signal ap_sig_bdd_2603 : BOOLEAN;
    signal ap_sig_cseq_ST_st210_fsm_128 : STD_LOGIC;
    signal ap_sig_bdd_2611 : BOOLEAN;
    signal ap_sig_cseq_ST_st211_fsm_129 : STD_LOGIC;
    signal ap_sig_bdd_2619 : BOOLEAN;
    signal ap_sig_cseq_ST_st212_fsm_130 : STD_LOGIC;
    signal ap_sig_bdd_2627 : BOOLEAN;
    signal ap_sig_cseq_ST_st213_fsm_131 : STD_LOGIC;
    signal ap_sig_bdd_2635 : BOOLEAN;
    signal ap_sig_cseq_ST_st214_fsm_132 : STD_LOGIC;
    signal ap_sig_bdd_2643 : BOOLEAN;
    signal ap_sig_cseq_ST_st215_fsm_133 : STD_LOGIC;
    signal ap_sig_bdd_2651 : BOOLEAN;
    signal ap_sig_cseq_ST_st216_fsm_134 : STD_LOGIC;
    signal ap_sig_bdd_2659 : BOOLEAN;
    signal ap_sig_cseq_ST_st217_fsm_135 : STD_LOGIC;
    signal ap_sig_bdd_2667 : BOOLEAN;
    signal ap_sig_cseq_ST_st218_fsm_136 : STD_LOGIC;
    signal ap_sig_bdd_2675 : BOOLEAN;
    signal ap_sig_cseq_ST_st219_fsm_137 : STD_LOGIC;
    signal ap_sig_bdd_2683 : BOOLEAN;
    signal ap_sig_cseq_ST_st220_fsm_138 : STD_LOGIC;
    signal ap_sig_bdd_2691 : BOOLEAN;
    signal ap_sig_cseq_ST_st222_fsm_140 : STD_LOGIC;
    signal ap_sig_bdd_2700 : BOOLEAN;
    signal ap_sig_cseq_ST_st223_fsm_141 : STD_LOGIC;
    signal ap_sig_bdd_2708 : BOOLEAN;
    signal ap_sig_cseq_ST_st224_fsm_142 : STD_LOGIC;
    signal ap_sig_bdd_2716 : BOOLEAN;
    signal ap_sig_cseq_ST_st227_fsm_145 : STD_LOGIC;
    signal ap_sig_bdd_2726 : BOOLEAN;
    signal ap_sig_cseq_ST_st228_fsm_146 : STD_LOGIC;
    signal ap_sig_bdd_2734 : BOOLEAN;
    signal ap_sig_cseq_ST_st269_fsm_187 : STD_LOGIC;
    signal ap_sig_bdd_2744 : BOOLEAN;
    signal ap_sig_cseq_ST_st270_fsm_188 : STD_LOGIC;
    signal ap_sig_bdd_2752 : BOOLEAN;
    signal ap_sig_cseq_ST_st271_fsm_189 : STD_LOGIC;
    signal ap_sig_bdd_2760 : BOOLEAN;
    signal ap_sig_cseq_ST_st272_fsm_190 : STD_LOGIC;
    signal ap_sig_bdd_2768 : BOOLEAN;
    signal ap_sig_cseq_ST_st273_fsm_191 : STD_LOGIC;
    signal ap_sig_bdd_2776 : BOOLEAN;
    signal ap_sig_cseq_ST_st274_fsm_192 : STD_LOGIC;
    signal ap_sig_bdd_2784 : BOOLEAN;
    signal ap_sig_cseq_ST_st275_fsm_193 : STD_LOGIC;
    signal ap_sig_bdd_2792 : BOOLEAN;
    signal ap_sig_cseq_ST_st276_fsm_194 : STD_LOGIC;
    signal ap_sig_bdd_2800 : BOOLEAN;
    signal ap_sig_cseq_ST_st277_fsm_195 : STD_LOGIC;
    signal ap_sig_bdd_2808 : BOOLEAN;
    signal ap_sig_cseq_ST_st278_fsm_196 : STD_LOGIC;
    signal ap_sig_bdd_2816 : BOOLEAN;
    signal ap_sig_cseq_ST_st279_fsm_197 : STD_LOGIC;
    signal ap_sig_bdd_2824 : BOOLEAN;
    signal ap_sig_cseq_ST_st280_fsm_198 : STD_LOGIC;
    signal ap_sig_bdd_2832 : BOOLEAN;
    signal ap_sig_cseq_ST_st281_fsm_199 : STD_LOGIC;
    signal ap_sig_bdd_2840 : BOOLEAN;
    signal ap_sig_cseq_ST_st282_fsm_200 : STD_LOGIC;
    signal ap_sig_bdd_2848 : BOOLEAN;
    signal ap_sig_cseq_ST_st283_fsm_201 : STD_LOGIC;
    signal ap_sig_bdd_2856 : BOOLEAN;
    signal ap_sig_cseq_ST_st284_fsm_202 : STD_LOGIC;
    signal ap_sig_bdd_2864 : BOOLEAN;
    signal ap_sig_cseq_ST_st285_fsm_203 : STD_LOGIC;
    signal ap_sig_bdd_2872 : BOOLEAN;
    signal ap_sig_cseq_ST_st286_fsm_204 : STD_LOGIC;
    signal ap_sig_bdd_2880 : BOOLEAN;
    signal ap_sig_cseq_ST_st287_fsm_205 : STD_LOGIC;
    signal ap_sig_bdd_2888 : BOOLEAN;
    signal ap_sig_cseq_ST_st288_fsm_206 : STD_LOGIC;
    signal ap_sig_bdd_2896 : BOOLEAN;
    signal ap_sig_cseq_ST_st289_fsm_207 : STD_LOGIC;
    signal ap_sig_bdd_2904 : BOOLEAN;
    signal ap_sig_cseq_ST_st290_fsm_208 : STD_LOGIC;
    signal ap_sig_bdd_2912 : BOOLEAN;
    signal ap_sig_cseq_ST_st291_fsm_209 : STD_LOGIC;
    signal ap_sig_bdd_2920 : BOOLEAN;
    signal ap_sig_cseq_ST_st292_fsm_210 : STD_LOGIC;
    signal ap_sig_bdd_2928 : BOOLEAN;
    signal ap_sig_cseq_ST_st293_fsm_211 : STD_LOGIC;
    signal ap_sig_bdd_2936 : BOOLEAN;
    signal ap_sig_cseq_ST_st294_fsm_212 : STD_LOGIC;
    signal ap_sig_bdd_2944 : BOOLEAN;
    signal ap_sig_cseq_ST_st295_fsm_213 : STD_LOGIC;
    signal ap_sig_bdd_2952 : BOOLEAN;
    signal grp_fu_1025_ce : STD_LOGIC;
    signal grp_fu_1030_ce : STD_LOGIC;
    signal grp_fu_1033_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1033_ce : STD_LOGIC;
    signal grp_fu_1038_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1038_ce : STD_LOGIC;
    signal grp_fu_1043_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1043_ce : STD_LOGIC;
    signal grp_fu_1341_ce : STD_LOGIC;
    signal grp_fu_1407_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (219 downto 0);

    component correlation_accel_v1_faddfsub_32ns_32ns_32_9_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_fadd_32ns_32ns_32_9_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_fdiv_32ns_32ns_32_30 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_sitofp_32s_32_8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_fsqrt_32ns_32ns_32_28 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_flog_32ns_32ns_32_18_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_mul_32s_32s_32_7 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_urem_31ns_4ns_31_35 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component correlation_accel_v1_weight_rom IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_bramA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_bramB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_acc_returnA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_acc_returnB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_gmem32_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    weight_rom_U : component correlation_accel_v1_weight_rom
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weight_rom_address0,
        ce0 => weight_rom_ce0,
        we0 => weight_rom_we0,
        d0 => weight_rom_d0,
        q0 => weight_rom_q0,
        address1 => weight_rom_address1,
        ce1 => weight_rom_ce1,
        we1 => weight_rom_we1,
        d1 => weight_rom_d1,
        q1 => weight_rom_q1);

    bramA_U : component correlation_accel_v1_bramA
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramA_address0,
        ce0 => bramA_ce0,
        we0 => bramA_we0,
        d0 => bramA_d0,
        q0 => bramA_q0,
        address1 => bramA_address1,
        ce1 => bramA_ce1,
        q1 => bramA_q1);

    bramB_U : component correlation_accel_v1_bramB
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramB_address0,
        ce0 => bramB_ce0,
        we0 => bramB_we0,
        d0 => bramB_d0,
        q0 => bramB_q0);

    correlation_accel_v1_gmem32_m_axi_U : component correlation_accel_v1_gmem32_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_GMEM32_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_GMEM32_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_GMEM32_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_GMEM32_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_GMEM32_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_GMEM32_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_GMEM32_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_GMEM32_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM32_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM32_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM32_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem32_AWVALID,
        AWREADY => m_axi_gmem32_AWREADY,
        AWADDR => m_axi_gmem32_AWADDR,
        AWID => m_axi_gmem32_AWID,
        AWLEN => m_axi_gmem32_AWLEN,
        AWSIZE => m_axi_gmem32_AWSIZE,
        AWBURST => m_axi_gmem32_AWBURST,
        AWLOCK => m_axi_gmem32_AWLOCK,
        AWCACHE => m_axi_gmem32_AWCACHE,
        AWPROT => m_axi_gmem32_AWPROT,
        AWQOS => m_axi_gmem32_AWQOS,
        AWREGION => m_axi_gmem32_AWREGION,
        AWUSER => m_axi_gmem32_AWUSER,
        WVALID => m_axi_gmem32_WVALID,
        WREADY => m_axi_gmem32_WREADY,
        WDATA => m_axi_gmem32_WDATA,
        WSTRB => m_axi_gmem32_WSTRB,
        WLAST => m_axi_gmem32_WLAST,
        WID => m_axi_gmem32_WID,
        WUSER => m_axi_gmem32_WUSER,
        ARVALID => m_axi_gmem32_ARVALID,
        ARREADY => m_axi_gmem32_ARREADY,
        ARADDR => m_axi_gmem32_ARADDR,
        ARID => m_axi_gmem32_ARID,
        ARLEN => m_axi_gmem32_ARLEN,
        ARSIZE => m_axi_gmem32_ARSIZE,
        ARBURST => m_axi_gmem32_ARBURST,
        ARLOCK => m_axi_gmem32_ARLOCK,
        ARCACHE => m_axi_gmem32_ARCACHE,
        ARPROT => m_axi_gmem32_ARPROT,
        ARQOS => m_axi_gmem32_ARQOS,
        ARREGION => m_axi_gmem32_ARREGION,
        ARUSER => m_axi_gmem32_ARUSER,
        RVALID => m_axi_gmem32_RVALID,
        RREADY => m_axi_gmem32_RREADY,
        RDATA => m_axi_gmem32_RDATA,
        RLAST => m_axi_gmem32_RLAST,
        RID => m_axi_gmem32_RID,
        RUSER => m_axi_gmem32_RUSER,
        RRESP => m_axi_gmem32_RRESP,
        BVALID => m_axi_gmem32_BVALID,
        BREADY => m_axi_gmem32_BREADY,
        BRESP => m_axi_gmem32_BRESP,
        BID => m_axi_gmem32_BID,
        BUSER => m_axi_gmem32_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => correlation_accel_v1_gmem32_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem32_ARVALID,
        I_ARREADY => gmem32_ARREADY,
        I_ARADDR => gmem32_ARADDR,
        I_ARID => gmem32_ARID,
        I_ARLEN => gmem32_ARLEN,
        I_ARSIZE => gmem32_ARSIZE,
        I_ARLOCK => gmem32_ARLOCK,
        I_ARCACHE => gmem32_ARCACHE,
        I_ARQOS => gmem32_ARQOS,
        I_ARPROT => gmem32_ARPROT,
        I_ARUSER => gmem32_ARUSER,
        I_ARBURST => gmem32_ARBURST,
        I_ARREGION => gmem32_ARREGION,
        I_RVALID => gmem32_RVALID,
        I_RREADY => gmem32_RREADY,
        I_RDATA => gmem32_RDATA,
        I_RID => gmem32_RID,
        I_RUSER => gmem32_RUSER,
        I_RRESP => gmem32_RRESP,
        I_RLAST => gmem32_RLAST,
        I_AWVALID => gmem32_AWVALID,
        I_AWREADY => gmem32_AWREADY,
        I_AWADDR => gmem32_AWADDR,
        I_AWID => gmem32_AWID,
        I_AWLEN => gmem32_AWLEN,
        I_AWSIZE => gmem32_AWSIZE,
        I_AWLOCK => gmem32_AWLOCK,
        I_AWCACHE => gmem32_AWCACHE,
        I_AWQOS => gmem32_AWQOS,
        I_AWPROT => gmem32_AWPROT,
        I_AWUSER => gmem32_AWUSER,
        I_AWBURST => gmem32_AWBURST,
        I_AWREGION => gmem32_AWREGION,
        I_WVALID => gmem32_WVALID,
        I_WREADY => gmem32_WREADY,
        I_WDATA => gmem32_WDATA,
        I_WID => gmem32_WID,
        I_WUSER => gmem32_WUSER,
        I_WLAST => gmem32_WLAST,
        I_WSTRB => gmem32_WSTRB,
        I_BVALID => gmem32_BVALID,
        I_BREADY => gmem32_BREADY,
        I_BRESP => gmem32_BRESP,
        I_BID => gmem32_BID,
        I_BUSER => gmem32_BUSER);

    acc_returnA_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_returnA_address0,
        ce0 => acc_returnA_ce0,
        we0 => acc_returnA_we0,
        d0 => acc_returnA_d0,
        q0 => acc_returnA_q0,
        address1 => acc_returnA_address1,
        ce1 => acc_returnA_ce1,
        we1 => acc_returnA_we1,
        d1 => acc_returnA_d1);

    acc_returnB_U : component correlation_accel_v1_acc_returnB
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_returnB_address0,
        ce0 => acc_returnB_ce0,
        we0 => acc_returnB_we0,
        d0 => acc_returnB_d0,
        q0 => acc_returnB_q0,
        address1 => acc_returnB_address1,
        ce1 => acc_returnB_ce1,
        we1 => acc_returnB_we1,
        d1 => acc_returnB_d1,
        q1 => acc_returnB_q1);

    acc_weight_returnSquareA_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnSquareA_address0,
        ce0 => acc_weight_returnSquareA_ce0,
        we0 => acc_weight_returnSquareA_we0,
        d0 => acc_weight_returnSquareA_d0,
        q0 => acc_weight_returnSquareA_q0,
        address1 => acc_weight_returnSquareA_address1,
        ce1 => acc_weight_returnSquareA_ce1,
        we1 => acc_weight_returnSquareA_we1,
        d1 => acc_weight_returnSquareA_d1);

    acc_weight_returnA_U : component correlation_accel_v1_acc_returnB
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnA_address0,
        ce0 => acc_weight_returnA_ce0,
        we0 => acc_weight_returnA_we0,
        d0 => acc_weight_returnA_d0,
        q0 => acc_weight_returnA_q0,
        address1 => acc_weight_returnA_address1,
        ce1 => acc_weight_returnA_ce1,
        we1 => acc_weight_returnA_we1,
        d1 => acc_weight_returnA_d1,
        q1 => acc_weight_returnA_q1);

    acc_weight_returnSquareB_U : component correlation_accel_v1_acc_returnB
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnSquareB_address0,
        ce0 => acc_weight_returnSquareB_ce0,
        we0 => acc_weight_returnSquareB_we0,
        d0 => acc_weight_returnSquareB_d0,
        q0 => acc_weight_returnSquareB_q0,
        address1 => acc_weight_returnSquareB_address1,
        ce1 => acc_weight_returnSquareB_ce1,
        we1 => acc_weight_returnSquareB_we1,
        d1 => acc_weight_returnSquareB_d1,
        q1 => acc_weight_returnSquareB_q1);

    acc_weight_returnB_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnB_address0,
        ce0 => acc_weight_returnB_ce0,
        we0 => acc_weight_returnB_we0,
        d0 => acc_weight_returnB_d0,
        q0 => acc_weight_returnB_q0,
        address1 => acc_weight_returnB_address1,
        ce1 => acc_weight_returnB_ce1,
        we1 => acc_weight_returnB_we1,
        d1 => acc_weight_returnB_d1);

    acc_weight_returnA_returnB_U : component correlation_accel_v1_acc_returnB
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnA_returnB_address0,
        ce0 => acc_weight_returnA_returnB_ce0,
        we0 => acc_weight_returnA_returnB_we0,
        d0 => acc_weight_returnA_returnB_d0,
        q0 => acc_weight_returnA_returnB_q0,
        address1 => acc_weight_returnA_returnB_address1,
        ce1 => acc_weight_returnA_returnB_ce1,
        we1 => acc_weight_returnA_returnB_we1,
        d1 => acc_weight_returnA_returnB_d1,
        q1 => acc_weight_returnA_returnB_q1);

    correlation_accel_v1_faddfsub_32ns_32ns_32_9_full_dsp_U1 : component correlation_accel_v1_faddfsub_32ns_32ns_32_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_972_p0,
        din1 => grp_fu_972_p1,
        opcode => grp_fu_972_opcode,
        ce => grp_fu_972_ce,
        dout => grp_fu_972_p2);

    correlation_accel_v1_faddfsub_32ns_32ns_32_9_full_dsp_U2 : component correlation_accel_v1_faddfsub_32ns_32ns_32_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_976_p0,
        din1 => grp_fu_976_p1,
        opcode => grp_fu_976_opcode,
        ce => grp_fu_976_ce,
        dout => grp_fu_976_p2);

    correlation_accel_v1_fadd_32ns_32ns_32_9_full_dsp_U3 : component correlation_accel_v1_fadd_32ns_32ns_32_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_980_p0,
        din1 => grp_fu_980_p1,
        ce => grp_fu_980_ce,
        dout => grp_fu_980_p2);

    correlation_accel_v1_fadd_32ns_32ns_32_9_full_dsp_U4 : component correlation_accel_v1_fadd_32ns_32ns_32_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_984_p0,
        din1 => grp_fu_984_p1,
        ce => grp_fu_984_ce,
        dout => grp_fu_984_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp_U5 : component correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_996_p0,
        din1 => grp_fu_996_p1,
        ce => grp_fu_996_ce,
        dout => grp_fu_996_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp_U6 : component correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1002_p0,
        din1 => grp_fu_1002_p1,
        ce => grp_fu_1002_ce,
        dout => grp_fu_1002_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp_U7 : component correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1006_p0,
        din1 => grp_fu_1006_p1,
        ce => grp_fu_1006_ce,
        dout => grp_fu_1006_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp_U8 : component correlation_accel_v1_fmul_32ns_32ns_32_5_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1010_p0,
        din1 => grp_fu_1010_p1,
        ce => grp_fu_1010_ce,
        dout => grp_fu_1010_p2);

    correlation_accel_v1_fdiv_32ns_32ns_32_30_U9 : component correlation_accel_v1_fdiv_32ns_32ns_32_30
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1020_p0,
        din1 => grp_fu_1020_p1,
        ce => grp_fu_1020_ce,
        dout => grp_fu_1020_p2);

    correlation_accel_v1_fdiv_32ns_32ns_32_30_U10 : component correlation_accel_v1_fdiv_32ns_32ns_32_30
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1025_p0,
        din1 => grp_fu_1025_p1,
        ce => grp_fu_1025_ce,
        dout => grp_fu_1025_p2);

    correlation_accel_v1_sitofp_32s_32_8_U11 : component correlation_accel_v1_sitofp_32s_32_8
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1030_p0,
        ce => grp_fu_1030_ce,
        dout => grp_fu_1030_p1);

    correlation_accel_v1_fsqrt_32ns_32ns_32_28_U12 : component correlation_accel_v1_fsqrt_32ns_32ns_32_28
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1033_p0,
        din1 => grp_fu_1033_p1,
        ce => grp_fu_1033_ce,
        dout => grp_fu_1033_p2);

    correlation_accel_v1_fsqrt_32ns_32ns_32_28_U13 : component correlation_accel_v1_fsqrt_32ns_32ns_32_28
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1038_p0,
        din1 => grp_fu_1038_p1,
        ce => grp_fu_1038_ce,
        dout => grp_fu_1038_p2);

    correlation_accel_v1_flog_32ns_32ns_32_18_full_dsp_U14 : component correlation_accel_v1_flog_32ns_32ns_32_18_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1043_p0,
        din1 => grp_fu_1043_p1,
        ce => grp_fu_1043_ce,
        dout => grp_fu_1043_p2);

    correlation_accel_v1_mul_32s_32s_32_7_U15 : component correlation_accel_v1_mul_32s_32s_32_7
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1341_p0,
        din1 => grp_fu_1341_p1,
        ce => grp_fu_1341_ce,
        dout => grp_fu_1341_p2);

    correlation_accel_v1_urem_31ns_4ns_31_35_U16 : component correlation_accel_v1_urem_31ns_4ns_31_35
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 31,
        din1_WIDTH => 4,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1407_p0,
        din1 => grp_fu_1407_p1,
        ce => grp_fu_1407_ce,
        dout => grp_fu_1407_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_ARREADY assign process. --
    ap_reg_ioackin_gmem32_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) and not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_42)))) then 
                    ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = gmem32_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) or ((ap_const_logic_1 = gmem32_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_42)))) then 
                    ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_AWREADY assign process. --
    ap_reg_ioackin_gmem32_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st297_fsm_215)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY))) then 
                        ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem32_AWREADY)) then 
                        ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_WREADY assign process. --
    ap_reg_ioackin_gmem32_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st298_fsm_216)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_WREADY))) then 
                        ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem32_WREADY)) then 
                        ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1314_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond2_fu_1314_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1314_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_1365_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_47)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond3_fu_1365_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_47) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_1365_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_47)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_lv1_0 = tmp_12_fu_1385_p2))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if ((not((ap_const_lv1_0 = tmp_12_reg_1823)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or ((ap_const_lv1_0 = tmp_12_reg_1823) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it10 assign process. --
    ap_reg_ppiten_pp2_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it10 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it10 <= ap_reg_ppiten_pp2_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it11 assign process. --
    ap_reg_ppiten_pp2_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it11 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it11 <= ap_reg_ppiten_pp2_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it12 assign process. --
    ap_reg_ppiten_pp2_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it12 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it12 <= ap_reg_ppiten_pp2_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it13 assign process. --
    ap_reg_ppiten_pp2_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it13 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it13 <= ap_reg_ppiten_pp2_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it14 assign process. --
    ap_reg_ppiten_pp2_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it14 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it14 <= ap_reg_ppiten_pp2_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it15 assign process. --
    ap_reg_ppiten_pp2_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it15 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it15 <= ap_reg_ppiten_pp2_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it16 assign process. --
    ap_reg_ppiten_pp2_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it16 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it16 <= ap_reg_ppiten_pp2_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it17 assign process. --
    ap_reg_ppiten_pp2_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it17 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it17 <= ap_reg_ppiten_pp2_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it18 assign process. --
    ap_reg_ppiten_pp2_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it18 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it18 <= ap_reg_ppiten_pp2_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it19 assign process. --
    ap_reg_ppiten_pp2_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it19 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it19 <= ap_reg_ppiten_pp2_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it20 assign process. --
    ap_reg_ppiten_pp2_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it20 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it20 <= ap_reg_ppiten_pp2_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it21 assign process. --
    ap_reg_ppiten_pp2_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it21 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it21 <= ap_reg_ppiten_pp2_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it22 assign process. --
    ap_reg_ppiten_pp2_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it22 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it22 <= ap_reg_ppiten_pp2_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it23 assign process. --
    ap_reg_ppiten_pp2_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it23 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it23 <= ap_reg_ppiten_pp2_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it24 assign process. --
    ap_reg_ppiten_pp2_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it24 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it24 <= ap_reg_ppiten_pp2_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it25 assign process. --
    ap_reg_ppiten_pp2_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it25 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it25 <= ap_reg_ppiten_pp2_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it26 assign process. --
    ap_reg_ppiten_pp2_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it26 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it26 <= ap_reg_ppiten_pp2_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it27 assign process. --
    ap_reg_ppiten_pp2_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it27 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it27 <= ap_reg_ppiten_pp2_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it28 assign process. --
    ap_reg_ppiten_pp2_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it28 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it28 <= ap_reg_ppiten_pp2_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it29 assign process. --
    ap_reg_ppiten_pp2_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it29 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it29 <= ap_reg_ppiten_pp2_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it30 assign process. --
    ap_reg_ppiten_pp2_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it30 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it30 <= ap_reg_ppiten_pp2_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it31 assign process. --
    ap_reg_ppiten_pp2_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it31 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it31 <= ap_reg_ppiten_pp2_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it32 assign process. --
    ap_reg_ppiten_pp2_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it32 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it32 <= ap_reg_ppiten_pp2_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it33 assign process. --
    ap_reg_ppiten_pp2_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it33 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it33 <= ap_reg_ppiten_pp2_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it34 assign process. --
    ap_reg_ppiten_pp2_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it34 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it34 <= ap_reg_ppiten_pp2_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it35 assign process. --
    ap_reg_ppiten_pp2_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it35 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it35 <= ap_reg_ppiten_pp2_it34;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
                    ap_reg_ppiten_pp2_it35 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it4 assign process. --
    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it5 assign process. --
    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it6 assign process. --
    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it7 assign process. --
    ap_reg_ppiten_pp2_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it7 <= ap_reg_ppiten_pp2_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it8 assign process. --
    ap_reg_ppiten_pp2_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it8 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it8 <= ap_reg_ppiten_pp2_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it9 assign process. --
    ap_reg_ppiten_pp2_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it9 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                    ap_reg_ppiten_pp2_it9 <= ap_reg_ppiten_pp2_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_56) and not((ap_const_lv1_0 = exitcond_fu_1424_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg8_fsm_64))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg8_fsm_64) and not((ap_const_lv1_0 = exitcond_reg_1968))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- column_index_0_in_reg_843 assign process. --
    column_index_0_in_reg_843_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1314_p2)))) then 
                column_index_0_in_reg_843 <= row_index_cast_reg_1771;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st301_fsm_219) and not((gmem32_BVALID = ap_const_logic_0)))) then 
                column_index_0_in_reg_843 <= column_index_reg_1799;
            end if; 
        end if;
    end process;

    -- i1_i_reg_798 assign process. --
    i1_i_reg_798_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_i_fu_1221_p2)))) then 
                i1_i_reg_798 <= ap_const_lv31_2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
                i1_i_reg_798 <= i_3_reg_1518;
            end if; 
        end if;
    end process;

    -- i1_reg_864 assign process. --
    i1_reg_864_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
                i1_reg_864 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_const_lv1_0 = tmp_12_reg_1823)))) then 
                i1_reg_864 <= i_reg_1827;
            end if; 
        end if;
    end process;

    -- i2_reg_960 assign process. --
    i2_reg_960_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_56))) then 
                i2_reg_960 <= i_1_reg_1972;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                i2_reg_960 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i_i_reg_786 assign process. --
    i_i_reg_786_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_i_reg_786 <= i_2_fu_1232_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_i_reg_786 <= ap_const_lv8_2;
            end if; 
        end if;
    end process;

    -- indvar8_reg_852 assign process. --
    indvar8_reg_852_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and (ap_const_lv1_0 = exitcond3_reg_1814) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                indvar8_reg_852 <= indvar_next9_reg_1818;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_47)) then 
                indvar8_reg_852 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_831 assign process. --
    indvar_reg_831_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and (exitcond2_reg_1790 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_831 <= indvar_next_reg_1794;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                indvar_reg_831 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_820 assign process. --
    phi_mul_reg_820_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_35) and (ap_const_lv1_0 = tmp_8_fu_1336_p2))) then 
                phi_mul_reg_820 <= next_mul_reg_1766;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                phi_mul_reg_820 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- reg_1058 assign process. --
    reg_1058_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = tmp_12_reg_1823)))) then 
                reg_1058 <= weight_rom_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55))) then 
                reg_1058 <= weight_rom_q1;
            end if; 
        end if;
    end process;

    -- reg_1107 assign process. --
    reg_1107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58))) then 
                reg_1107 <= acc_returnB_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it24)))) then 
                reg_1107 <= acc_returnB_q1;
            end if; 
        end if;
    end process;

    -- reg_1120 assign process. --
    reg_1120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60))) then 
                reg_1120 <= acc_weight_returnA_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it26)))) then 
                reg_1120 <= acc_weight_returnA_q1;
            end if; 
        end if;
    end process;

    -- reg_1151 assign process. --
    reg_1151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61))) then 
                reg_1151 <= acc_weight_returnSquareB_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29)))) then 
                reg_1151 <= acc_weight_returnSquareB_q1;
            end if; 
        end if;
    end process;

    -- reg_1158 assign process. --
    reg_1158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_62))) then 
                reg_1158 <= acc_weight_returnA_returnB_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29)))) then 
                reg_1158 <= acc_weight_returnA_returnB_q1;
            end if; 
        end if;
    end process;

    -- row_index_reg_809 assign process. --
    row_index_reg_809_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_35) and (ap_const_lv1_0 = tmp_8_fu_1336_p2))) then 
                row_index_reg_809 <= row_index_1_reg_1779;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                row_index_reg_809 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- sum_returnA_reg_876 assign process. --
    sum_returnA_reg_876_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
                sum_returnA_reg_876 <= sum_returnA_1_reg_2022;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                sum_returnA_reg_876 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_returnB_reg_888 assign process. --
    sum_returnB_reg_888_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
                sum_returnB_reg_888 <= sum_returnB_1_reg_2027;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                sum_returnB_reg_888 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnA_reg_912 assign process. --
    sum_weight_returnA_reg_912_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
                sum_weight_returnA_reg_912 <= sum_weight_returnA_1_reg_2037;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                sum_weight_returnA_reg_912 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnA_returnB_reg_948 assign process. --
    sum_weight_returnA_returnB_reg_948_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg7_fsm_63))) then 
                sum_weight_returnA_returnB_reg_948 <= grp_fu_972_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                sum_weight_returnA_returnB_reg_948 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnB_reg_936 assign process. --
    sum_weight_returnB_reg_936_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg7_fsm_63))) then 
                sum_weight_returnB_reg_936 <= sum_weight_returnB_1_reg_2047;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                sum_weight_returnB_reg_936 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnSquareA_reg_900 assign process. --
    sum_weight_returnSquareA_reg_900_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
                sum_weight_returnSquareA_reg_900 <= sum_weight_returnSquareA_1_reg_2032;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                sum_weight_returnSquareA_reg_900 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnSquareB_reg_924 assign process. --
    sum_weight_returnSquareB_reg_924_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_62) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
                sum_weight_returnSquareB_reg_924 <= sum_weight_returnSquareB_1_reg_2042;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_55)) then 
                sum_weight_returnSquareB_reg_924 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- tmp_i_reg_774 assign process. --
    tmp_i_reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                tmp_i_reg_774 <= reg_1048;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                tmp_i_reg_774 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it16)))) then
                acc_returnA_addr_1_reg_1883 <= tmp_18_fu_1413_p1(3 - 1 downto 0);
                acc_returnB_addr_1_reg_1889 <= tmp_18_fu_1413_p1(3 - 1 downto 0);
                acc_weight_returnA_addr_1_reg_1907 <= tmp_18_fu_1413_p1(3 - 1 downto 0);
                acc_weight_returnA_returnB_add_6_reg_1919 <= tmp_18_fu_1413_p1(3 - 1 downto 0);
                acc_weight_returnB_addr_1_reg_1913 <= tmp_18_fu_1413_p1(3 - 1 downto 0);
                acc_weight_returnSquareA_addr_1_reg_1895 <= tmp_18_fu_1413_p1(3 - 1 downto 0);
                acc_weight_returnSquareB_addr_1_reg_1901 <= tmp_18_fu_1413_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52)) then
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it18 <= acc_returnA_addr_1_reg_1883;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it19 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it18;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it20 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it19;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it21 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it20;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it22 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it21;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it23 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it22;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it24 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it23;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it25 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it24;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it26 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it25;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it27 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it26;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it28 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it27;
                ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it29 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it28;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it18 <= acc_returnB_addr_1_reg_1889;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it19 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it18;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it20 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it19;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it21 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it20;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it22 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it21;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it23 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it22;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it24 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it23;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it25 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it24;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it26 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it25;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it27 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it26;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it28 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it27;
                ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it29 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it28;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it18 <= acc_weight_returnA_addr_1_reg_1907;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it19 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it18;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it20 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it19;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it21 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it20;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it22 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it21;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it23 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it22;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it24 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it23;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it25 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it24;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it26 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it25;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it27 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it26;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it28 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it27;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it29 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it28;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it30 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it29;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it31 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it30;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it18 <= acc_weight_returnA_returnB_add_6_reg_1919;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it19 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it18;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it20 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it19;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it21 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it20;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it22 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it21;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it23 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it22;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it24 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it23;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it25 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it24;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it26 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it25;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it27 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it26;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it28 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it27;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it29 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it28;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it30 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it29;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it31 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it30;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it32 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it31;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it33 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it32;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it34 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it33;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it18 <= acc_weight_returnB_addr_1_reg_1913;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it19 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it18;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it20 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it19;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it21 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it20;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it22 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it21;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it23 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it22;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it24 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it23;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it25 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it24;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it26 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it25;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it27 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it26;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it28 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it27;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it29 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it28;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it30 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it29;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it31 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it30;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it32 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it31;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it18 <= acc_weight_returnSquareA_addr_1_reg_1895;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it19 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it18;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it20 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it19;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it21 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it20;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it22 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it21;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it23 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it22;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it24 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it23;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it25 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it24;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it26 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it25;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it27 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it26;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it28 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it27;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it29 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it28;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it30 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it29;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it31 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it30;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it32 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it31;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it33 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it32;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it34 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it33;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it18 <= acc_weight_returnSquareB_addr_1_reg_1901;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it19 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it18;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it20 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it19;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it21 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it20;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it22 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it21;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it23 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it22;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it24 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it23;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it25 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it24;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it26 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it25;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it27 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it26;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it28 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it27;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it29 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it28;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it30 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it29;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it31 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it30;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it32 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it31;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it33 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it32;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it34 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it33;
                ap_reg_ppstg_reg_1058_pp2_it10 <= ap_reg_ppstg_reg_1058_pp2_it9;
                ap_reg_ppstg_reg_1058_pp2_it11 <= ap_reg_ppstg_reg_1058_pp2_it10;
                ap_reg_ppstg_reg_1058_pp2_it12 <= ap_reg_ppstg_reg_1058_pp2_it11;
                ap_reg_ppstg_reg_1058_pp2_it13 <= ap_reg_ppstg_reg_1058_pp2_it12;
                ap_reg_ppstg_reg_1058_pp2_it14 <= ap_reg_ppstg_reg_1058_pp2_it13;
                ap_reg_ppstg_reg_1058_pp2_it15 <= ap_reg_ppstg_reg_1058_pp2_it14;
                ap_reg_ppstg_reg_1058_pp2_it16 <= ap_reg_ppstg_reg_1058_pp2_it15;
                ap_reg_ppstg_reg_1058_pp2_it17 <= ap_reg_ppstg_reg_1058_pp2_it16;
                ap_reg_ppstg_reg_1058_pp2_it18 <= ap_reg_ppstg_reg_1058_pp2_it17;
                ap_reg_ppstg_reg_1058_pp2_it19 <= ap_reg_ppstg_reg_1058_pp2_it18;
                ap_reg_ppstg_reg_1058_pp2_it2 <= reg_1058;
                ap_reg_ppstg_reg_1058_pp2_it20 <= ap_reg_ppstg_reg_1058_pp2_it19;
                ap_reg_ppstg_reg_1058_pp2_it21 <= ap_reg_ppstg_reg_1058_pp2_it20;
                ap_reg_ppstg_reg_1058_pp2_it22 <= ap_reg_ppstg_reg_1058_pp2_it21;
                ap_reg_ppstg_reg_1058_pp2_it23 <= ap_reg_ppstg_reg_1058_pp2_it22;
                ap_reg_ppstg_reg_1058_pp2_it24 <= ap_reg_ppstg_reg_1058_pp2_it23;
                ap_reg_ppstg_reg_1058_pp2_it25 <= ap_reg_ppstg_reg_1058_pp2_it24;
                ap_reg_ppstg_reg_1058_pp2_it26 <= ap_reg_ppstg_reg_1058_pp2_it25;
                ap_reg_ppstg_reg_1058_pp2_it27 <= ap_reg_ppstg_reg_1058_pp2_it26;
                ap_reg_ppstg_reg_1058_pp2_it3 <= ap_reg_ppstg_reg_1058_pp2_it2;
                ap_reg_ppstg_reg_1058_pp2_it4 <= ap_reg_ppstg_reg_1058_pp2_it3;
                ap_reg_ppstg_reg_1058_pp2_it5 <= ap_reg_ppstg_reg_1058_pp2_it4;
                ap_reg_ppstg_reg_1058_pp2_it6 <= ap_reg_ppstg_reg_1058_pp2_it5;
                ap_reg_ppstg_reg_1058_pp2_it7 <= ap_reg_ppstg_reg_1058_pp2_it6;
                ap_reg_ppstg_reg_1058_pp2_it8 <= ap_reg_ppstg_reg_1058_pp2_it7;
                ap_reg_ppstg_reg_1058_pp2_it9 <= ap_reg_ppstg_reg_1058_pp2_it8;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it1 <= tmp_12_reg_1823;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it10 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it9;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it11 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it10;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it12 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it11;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it13 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it12;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it14 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it13;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it15 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it14;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it16 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it15;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it17 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it16;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it18 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it17;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it19 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it18;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it2 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it1;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it20 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it19;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it21 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it20;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it22 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it21;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it23 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it22;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it24 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it23;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it25 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it24;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it26 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it25;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it27 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it26;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it28 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it27;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it29 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it28;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it3 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it2;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it30 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it29;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it31 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it30;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it32 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it31;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it33 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it32;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it34 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it33;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it4 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it3;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it5 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it4;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it6 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it5;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it7 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it6;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it8 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it7;
                ap_reg_ppstg_tmp_12_reg_1823_pp2_it9 <= ap_reg_ppstg_tmp_12_reg_1823_pp2_it8;
                tmp_12_reg_1823 <= tmp_12_fu_1385_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond2_reg_1790_pp0_it1 <= exitcond2_reg_1790;
                ap_reg_ppstg_indvar_reg_831_pp0_it1 <= indvar_reg_831;
                exitcond2_reg_1790 <= exitcond2_fu_1314_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                ap_reg_ppstg_exitcond3_reg_1814_pp1_it1 <= exitcond3_reg_1814;
                ap_reg_ppstg_indvar8_reg_852_pp1_it1 <= indvar8_reg_852;
                exitcond3_reg_1814 <= exitcond3_fu_1365_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_56)) then
                ap_reg_ppstg_exitcond_reg_1968_pp3_it1 <= exitcond_reg_1968;
                exitcond_reg_1968 <= exitcond_fu_1424_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_12_reg_1823)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then
                bramA_load_1_reg_1858 <= bramA_q1;
                bramA_load_reg_1853 <= bramA_q0;
                bramB_load_reg_1863 <= bramB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = tmp_12_reg_1823)))) then
                bramB_load_1_reg_1878 <= bramB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_35)) then
                column_index_reg_1799 <= column_index_fu_1330_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st296_fsm_214)) then
                counter <= tmp_54_fu_1464_p2;
                gmem32_addr_2_reg_2067 <= out_correlation4_sum_cast_fu_1454_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_41)) then
                gmem32_addr_1_reg_1808 <= tmp_62_fu_1355_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and not((ap_const_lv1_0 = tmp_3_fu_1284_p2)))) then
                gmem32_addr_reg_1784 <= tmp_59_fu_1304_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_56))) then
                i_1_reg_1972 <= i_1_fu_1430_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_57_i_fu_1242_p2)))) then
                i_3_reg_1518 <= i_3_fu_1252_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then
                i_reg_1827 <= i_fu_1390_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                indvar_next9_reg_1818 <= indvar_next9_fu_1370_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_1794 <= indvar_next_fu_1319_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it24)))) then
                lnReturnA_reg_1925 <= grp_fu_1043_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it24)))) then
                lnReturnB_reg_1934 <= grp_fu_1043_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                next_mul_reg_1766 <= next_mul_fu_1275_p2;
                row_index_1_reg_1779 <= row_index_1_fu_1289_p2;
                row_index_cast_reg_1771(0) <= row_index_cast_fu_1280_p1(0);
    row_index_cast_reg_1771(1) <= row_index_cast_fu_1280_p1(1);
    row_index_cast_reg_1771(2) <= row_index_cast_fu_1280_p1(2);
    row_index_cast_reg_1771(3) <= row_index_cast_fu_1280_p1(3);
    row_index_cast_reg_1771(4) <= row_index_cast_fu_1280_p1(4);
    row_index_cast_reg_1771(5) <= row_index_cast_fu_1280_p1(5);
    row_index_cast_reg_1771(6) <= row_index_cast_fu_1280_p1(6);
    row_index_cast_reg_1771(7) <= row_index_cast_fu_1280_p1(7);
    row_index_cast_reg_1771(8) <= row_index_cast_fu_1280_p1(8);
    row_index_cast_reg_1771(9) <= row_index_cast_fu_1280_p1(9);
    row_index_cast_reg_1771(10) <= row_index_cast_fu_1280_p1(10);
    row_index_cast_reg_1771(11) <= row_index_cast_fu_1280_p1(11);
    row_index_cast_reg_1771(12) <= row_index_cast_fu_1280_p1(12);
    row_index_cast_reg_1771(13) <= row_index_cast_fu_1280_p1(13);
    row_index_cast_reg_1771(14) <= row_index_cast_fu_1280_p1(14);
    row_index_cast_reg_1771(15) <= row_index_cast_fu_1280_p1(15);
    row_index_cast_reg_1771(16) <= row_index_cast_fu_1280_p1(16);
    row_index_cast_reg_1771(17) <= row_index_cast_fu_1280_p1(17);
    row_index_cast_reg_1771(18) <= row_index_cast_fu_1280_p1(18);
    row_index_cast_reg_1771(19) <= row_index_cast_fu_1280_p1(19);
    row_index_cast_reg_1771(20) <= row_index_cast_fu_1280_p1(20);
    row_index_cast_reg_1771(21) <= row_index_cast_fu_1280_p1(21);
    row_index_cast_reg_1771(22) <= row_index_cast_fu_1280_p1(22);
    row_index_cast_reg_1771(23) <= row_index_cast_fu_1280_p1(23);
    row_index_cast_reg_1771(24) <= row_index_cast_fu_1280_p1(24);
    row_index_cast_reg_1771(25) <= row_index_cast_fu_1280_p1(25);
    row_index_cast_reg_1771(26) <= row_index_cast_fu_1280_p1(26);
    row_index_cast_reg_1771(27) <= row_index_cast_fu_1280_p1(27);
    row_index_cast_reg_1771(28) <= row_index_cast_fu_1280_p1(28);
    row_index_cast_reg_1771(29) <= row_index_cast_fu_1280_p1(29);
    row_index_cast_reg_1771(30) <= row_index_cast_fu_1280_p1(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                p_add_i32_shr_reg_1551(0) <= p_add_i32_shr_fu_1271_p1(0);
    p_add_i32_shr_reg_1551(1) <= p_add_i32_shr_fu_1271_p1(1);
    p_add_i32_shr_reg_1551(2) <= p_add_i32_shr_fu_1271_p1(2);
    p_add_i32_shr_reg_1551(3) <= p_add_i32_shr_fu_1271_p1(3);
    p_add_i32_shr_reg_1551(4) <= p_add_i32_shr_fu_1271_p1(4);
    p_add_i32_shr_reg_1551(5) <= p_add_i32_shr_fu_1271_p1(5);
    p_add_i32_shr_reg_1551(6) <= p_add_i32_shr_fu_1271_p1(6);
    p_add_i32_shr_reg_1551(7) <= p_add_i32_shr_fu_1271_p1(7);
    p_add_i32_shr_reg_1551(8) <= p_add_i32_shr_fu_1271_p1(8);
    p_add_i32_shr_reg_1551(9) <= p_add_i32_shr_fu_1271_p1(9);
    p_add_i32_shr_reg_1551(10) <= p_add_i32_shr_fu_1271_p1(10);
    p_add_i32_shr_reg_1551(11) <= p_add_i32_shr_fu_1271_p1(11);
    p_add_i32_shr_reg_1551(12) <= p_add_i32_shr_fu_1271_p1(12);
    p_add_i32_shr_reg_1551(13) <= p_add_i32_shr_fu_1271_p1(13);
    p_add_i32_shr_reg_1551(14) <= p_add_i32_shr_fu_1271_p1(14);
    p_add_i32_shr_reg_1551(15) <= p_add_i32_shr_fu_1271_p1(15);
    p_add_i32_shr_reg_1551(16) <= p_add_i32_shr_fu_1271_p1(16);
    p_add_i32_shr_reg_1551(17) <= p_add_i32_shr_fu_1271_p1(17);
    p_add_i32_shr_reg_1551(18) <= p_add_i32_shr_fu_1271_p1(18);
    p_add_i32_shr_reg_1551(19) <= p_add_i32_shr_fu_1271_p1(19);
    p_add_i32_shr_reg_1551(20) <= p_add_i32_shr_fu_1271_p1(20);
    p_add_i32_shr_reg_1551(21) <= p_add_i32_shr_fu_1271_p1(21);
    p_add_i32_shr_reg_1551(22) <= p_add_i32_shr_fu_1271_p1(22);
    p_add_i32_shr_reg_1551(23) <= p_add_i32_shr_fu_1271_p1(23);
    p_add_i32_shr_reg_1551(24) <= p_add_i32_shr_fu_1271_p1(24);
    p_add_i32_shr_reg_1551(25) <= p_add_i32_shr_fu_1271_p1(25);
    p_add_i32_shr_reg_1551(26) <= p_add_i32_shr_fu_1271_p1(26);
    p_add_i32_shr_reg_1551(27) <= p_add_i32_shr_fu_1271_p1(27);
    p_add_i32_shr_reg_1551(28) <= p_add_i32_shr_fu_1271_p1(28);
    p_add_i32_shr_reg_1551(29) <= p_add_i32_shr_fu_1271_p1(29);
                tmp_2_reg_1539 <= grp_fu_1030_p1;
                tmp_6_reg_1545 <= tmp_6_fu_1268_p1;
                tmp_reg_1534 <= tmp_fu_1263_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it26))) or (ap_const_logic_1 = ap_sig_cseq_ST_st181_fsm_99) or (ap_const_logic_1 = ap_sig_cseq_ST_st186_fsm_104) or (ap_const_logic_1 = ap_sig_cseq_ST_st225_fsm_143) or (ap_const_logic_1 = ap_sig_cseq_ST_st267_fsm_185))) then
                reg_1048 <= grp_fu_996_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it28))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29))) or (ap_const_logic_1 = ap_sig_cseq_ST_st190_fsm_108) or (ap_const_logic_1 = ap_sig_cseq_ST_st199_fsm_117) or (ap_const_logic_1 = ap_sig_cseq_ST_st234_fsm_152))) then
                reg_1069 <= grp_fu_972_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and (exitcond2_reg_1790 = ap_const_lv1_0) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and (ap_const_lv1_0 = exitcond3_reg_1814) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                reg_1079 <= gmem32_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st225_fsm_143) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it15))) or (ap_const_logic_1 = ap_sig_cseq_ST_st176_fsm_94) or ((ap_const_logic_1 = ap_sig_cseq_ST_st297_fsm_215) and not((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY))))) then
                reg_1085 <= grp_fu_1020_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it15))) or (ap_const_logic_1 = ap_sig_cseq_ST_st229_fsm_147))) then
                reg_1095 <= grp_fu_1020_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it24))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_57) and (ap_const_lv1_0 = exitcond_reg_1968)))) then
                reg_1101 <= acc_returnA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it26))) or (ap_const_logic_1 = ap_sig_cseq_ST_st181_fsm_99) or (ap_const_logic_1 = ap_sig_cseq_ST_st186_fsm_104) or (ap_const_logic_1 = ap_sig_cseq_ST_st225_fsm_143))) then
                reg_1114 <= grp_fu_1002_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it27))) or ((ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_62)))) then
                reg_1127 <= acc_weight_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st181_fsm_99) or (ap_const_logic_1 = ap_sig_cseq_ST_st225_fsm_143) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it27))))) then
                reg_1133 <= grp_fu_1006_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29))) or ((ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59)))) then
                reg_1139 <= acc_weight_returnSquareA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st186_fsm_104) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29))))) then
                reg_1145 <= grp_fu_1006_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st234_fsm_152) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it31))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it31))) or (ap_const_logic_1 = ap_sig_cseq_ST_st195_fsm_113))) then
                reg_1165 <= grp_fu_976_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it33))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it34))))) then
                reg_1173 <= grp_fu_980_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st225_fsm_143) or (ap_const_logic_1 = ap_sig_cseq_ST_st176_fsm_94))) then
                reg_1179 <= grp_fu_1025_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st195_fsm_113) or (ap_const_logic_1 = ap_sig_cseq_ST_st238_fsm_156))) then
                reg_1188 <= grp_fu_972_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_57) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then
                sum_returnA_1_reg_2022 <= grp_fu_972_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then
                sum_returnB_1_reg_2027 <= grp_fu_972_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then
                sum_weight_returnA_1_reg_2037 <= grp_fu_972_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_62) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then
                sum_weight_returnB_1_reg_2047 <= grp_fu_972_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then
                sum_weight_returnSquareA_1_reg_2032 <= grp_fu_972_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then
                sum_weight_returnSquareB_1_reg_2042 <= grp_fu_972_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = tmp_12_fu_1385_p2)))) then
                tmp_14_reg_1837(0) <= tmp_14_fu_1402_p1(0);
    tmp_14_reg_1837(1) <= tmp_14_fu_1402_p1(1);
    tmp_14_reg_1837(2) <= tmp_14_fu_1402_p1(2);
    tmp_14_reg_1837(3) <= tmp_14_fu_1402_p1(3);
    tmp_14_reg_1837(4) <= tmp_14_fu_1402_p1(4);
    tmp_14_reg_1837(5) <= tmp_14_fu_1402_p1(5);
    tmp_14_reg_1837(6) <= tmp_14_fu_1402_p1(6);
    tmp_14_reg_1837(7) <= tmp_14_fu_1402_p1(7);
    tmp_14_reg_1837(8) <= tmp_14_fu_1402_p1(8);
    tmp_14_reg_1837(9) <= tmp_14_fu_1402_p1(9);
    tmp_14_reg_1837(10) <= tmp_14_fu_1402_p1(10);
    tmp_14_reg_1837(11) <= tmp_14_fu_1402_p1(11);
    tmp_14_reg_1837(12) <= tmp_14_fu_1402_p1(12);
    tmp_14_reg_1837(13) <= tmp_14_fu_1402_p1(13);
    tmp_14_reg_1837(14) <= tmp_14_fu_1402_p1(14);
    tmp_14_reg_1837(15) <= tmp_14_fu_1402_p1(15);
    tmp_14_reg_1837(16) <= tmp_14_fu_1402_p1(16);
    tmp_14_reg_1837(17) <= tmp_14_fu_1402_p1(17);
    tmp_14_reg_1837(18) <= tmp_14_fu_1402_p1(18);
    tmp_14_reg_1837(19) <= tmp_14_fu_1402_p1(19);
    tmp_14_reg_1837(20) <= tmp_14_fu_1402_p1(20);
    tmp_14_reg_1837(21) <= tmp_14_fu_1402_p1(21);
    tmp_14_reg_1837(22) <= tmp_14_fu_1402_p1(22);
    tmp_14_reg_1837(23) <= tmp_14_fu_1402_p1(23);
    tmp_14_reg_1837(24) <= tmp_14_fu_1402_p1(24);
    tmp_14_reg_1837(25) <= tmp_14_fu_1402_p1(25);
    tmp_14_reg_1837(26) <= tmp_14_fu_1402_p1(26);
    tmp_14_reg_1837(27) <= tmp_14_fu_1402_p1(27);
    tmp_14_reg_1837(28) <= tmp_14_fu_1402_p1(28);
    tmp_14_reg_1837(29) <= tmp_14_fu_1402_p1(29);
    tmp_14_reg_1837(30) <= tmp_14_fu_1402_p1(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_57_i_fu_1242_p2))) then
                tmp_1_reg_1523 <= tmp_1_fu_1258_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29)))) then
                tmp_22_reg_1953 <= grp_fu_1010_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it27)))) then
                tmp_24_reg_1943 <= grp_fu_996_p2;
                tmp_29_reg_1948 <= grp_fu_1002_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29)))) then
                tmp_32_reg_1958 <= grp_fu_1010_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it34)))) then
                tmp_33_reg_1963 <= grp_fu_984_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_56) and (ap_const_lv1_0 = exitcond_fu_1424_p2))) then
                tmp_55_reg_1977(0) <= tmp_55_fu_1436_p1(0);
    tmp_55_reg_1977(1) <= tmp_55_fu_1436_p1(1);
    tmp_55_reg_1977(2) <= tmp_55_fu_1436_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_59_cast_reg_1491(0) <= tmp_59_cast_fu_1203_p1(0);
    tmp_59_cast_reg_1491(1) <= tmp_59_cast_fu_1203_p1(1);
    tmp_59_cast_reg_1491(2) <= tmp_59_cast_fu_1203_p1(2);
    tmp_59_cast_reg_1491(3) <= tmp_59_cast_fu_1203_p1(3);
    tmp_59_cast_reg_1491(4) <= tmp_59_cast_fu_1203_p1(4);
    tmp_59_cast_reg_1491(5) <= tmp_59_cast_fu_1203_p1(5);
    tmp_59_cast_reg_1491(6) <= tmp_59_cast_fu_1203_p1(6);
    tmp_59_cast_reg_1491(7) <= tmp_59_cast_fu_1203_p1(7);
    tmp_59_cast_reg_1491(8) <= tmp_59_cast_fu_1203_p1(8);
    tmp_59_cast_reg_1491(9) <= tmp_59_cast_fu_1203_p1(9);
    tmp_59_cast_reg_1491(10) <= tmp_59_cast_fu_1203_p1(10);
    tmp_59_cast_reg_1491(11) <= tmp_59_cast_fu_1203_p1(11);
    tmp_59_cast_reg_1491(12) <= tmp_59_cast_fu_1203_p1(12);
    tmp_59_cast_reg_1491(13) <= tmp_59_cast_fu_1203_p1(13);
    tmp_59_cast_reg_1491(14) <= tmp_59_cast_fu_1203_p1(14);
    tmp_59_cast_reg_1491(15) <= tmp_59_cast_fu_1203_p1(15);
    tmp_59_cast_reg_1491(16) <= tmp_59_cast_fu_1203_p1(16);
    tmp_59_cast_reg_1491(17) <= tmp_59_cast_fu_1203_p1(17);
    tmp_59_cast_reg_1491(18) <= tmp_59_cast_fu_1203_p1(18);
    tmp_59_cast_reg_1491(19) <= tmp_59_cast_fu_1203_p1(19);
    tmp_59_cast_reg_1491(20) <= tmp_59_cast_fu_1203_p1(20);
    tmp_59_cast_reg_1491(21) <= tmp_59_cast_fu_1203_p1(21);
    tmp_59_cast_reg_1491(22) <= tmp_59_cast_fu_1203_p1(22);
    tmp_59_cast_reg_1491(23) <= tmp_59_cast_fu_1203_p1(23);
    tmp_59_cast_reg_1491(24) <= tmp_59_cast_fu_1203_p1(24);
    tmp_59_cast_reg_1491(25) <= tmp_59_cast_fu_1203_p1(25);
    tmp_59_cast_reg_1491(26) <= tmp_59_cast_fu_1203_p1(26);
    tmp_59_cast_reg_1491(27) <= tmp_59_cast_fu_1203_p1(27);
    tmp_59_cast_reg_1491(28) <= tmp_59_cast_fu_1203_p1(28);
    tmp_59_cast_reg_1491(29) <= tmp_59_cast_fu_1203_p1(29);
                tmp_60_cast_reg_1496(0) <= tmp_60_cast_fu_1217_p1(0);
    tmp_60_cast_reg_1496(1) <= tmp_60_cast_fu_1217_p1(1);
    tmp_60_cast_reg_1496(2) <= tmp_60_cast_fu_1217_p1(2);
    tmp_60_cast_reg_1496(3) <= tmp_60_cast_fu_1217_p1(3);
    tmp_60_cast_reg_1496(4) <= tmp_60_cast_fu_1217_p1(4);
    tmp_60_cast_reg_1496(5) <= tmp_60_cast_fu_1217_p1(5);
    tmp_60_cast_reg_1496(6) <= tmp_60_cast_fu_1217_p1(6);
    tmp_60_cast_reg_1496(7) <= tmp_60_cast_fu_1217_p1(7);
    tmp_60_cast_reg_1496(8) <= tmp_60_cast_fu_1217_p1(8);
    tmp_60_cast_reg_1496(9) <= tmp_60_cast_fu_1217_p1(9);
    tmp_60_cast_reg_1496(10) <= tmp_60_cast_fu_1217_p1(10);
    tmp_60_cast_reg_1496(11) <= tmp_60_cast_fu_1217_p1(11);
    tmp_60_cast_reg_1496(12) <= tmp_60_cast_fu_1217_p1(12);
    tmp_60_cast_reg_1496(13) <= tmp_60_cast_fu_1217_p1(13);
    tmp_60_cast_reg_1496(14) <= tmp_60_cast_fu_1217_p1(14);
    tmp_60_cast_reg_1496(15) <= tmp_60_cast_fu_1217_p1(15);
    tmp_60_cast_reg_1496(16) <= tmp_60_cast_fu_1217_p1(16);
    tmp_60_cast_reg_1496(17) <= tmp_60_cast_fu_1217_p1(17);
    tmp_60_cast_reg_1496(18) <= tmp_60_cast_fu_1217_p1(18);
    tmp_60_cast_reg_1496(19) <= tmp_60_cast_fu_1217_p1(19);
    tmp_60_cast_reg_1496(20) <= tmp_60_cast_fu_1217_p1(20);
    tmp_60_cast_reg_1496(21) <= tmp_60_cast_fu_1217_p1(21);
    tmp_60_cast_reg_1496(22) <= tmp_60_cast_fu_1217_p1(22);
    tmp_60_cast_reg_1496(23) <= tmp_60_cast_fu_1217_p1(23);
    tmp_60_cast_reg_1496(24) <= tmp_60_cast_fu_1217_p1(24);
    tmp_60_cast_reg_1496(25) <= tmp_60_cast_fu_1217_p1(25);
    tmp_60_cast_reg_1496(26) <= tmp_60_cast_fu_1217_p1(26);
    tmp_60_cast_reg_1496(27) <= tmp_60_cast_fu_1217_p1(27);
    tmp_60_cast_reg_1496(28) <= tmp_60_cast_fu_1217_p1(28);
    tmp_60_cast_reg_1496(29) <= tmp_60_cast_fu_1217_p1(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st262_fsm_180)) then
                volatilityA_reg_2057 <= grp_fu_1033_p2;
                volatilityB_reg_2062 <= grp_fu_1038_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                weight_rom_load_1_reg_1529 <= weight_rom_q0;
            end if;
        end if;
    end process;
    tmp_59_cast_reg_1491(32 downto 30) <= "000";
    tmp_60_cast_reg_1496(32 downto 30) <= "000";
    p_add_i32_shr_reg_1551(31 downto 30) <= "00";
    acc_returnA_addr_reg_1556(2 downto 0) <= "000";
    acc_returnB_addr_reg_1561(2 downto 0) <= "000";
    acc_weight_returnSquareA_addr_reg_1566(2 downto 0) <= "000";
    acc_weight_returnA_addr_reg_1571(2 downto 0) <= "000";
    acc_weight_returnSquareB_addr_reg_1576(2 downto 0) <= "000";
    acc_weight_returnB_addr_reg_1581(2 downto 0) <= "000";
    acc_weight_returnA_returnB_add_reg_1586(2 downto 0) <= "000";
    acc_returnA_addr_6_reg_1591(2 downto 0) <= "001";
    acc_returnB_addr_6_reg_1596(2 downto 0) <= "001";
    acc_weight_returnSquareA_addr_6_reg_1601(2 downto 0) <= "001";
    acc_weight_returnA_addr_6_reg_1606(2 downto 0) <= "001";
    acc_weight_returnSquareB_addr_6_reg_1611(2 downto 0) <= "001";
    acc_weight_returnB_addr_6_reg_1616(2 downto 0) <= "001";
    acc_weight_returnA_returnB_add_1_reg_1621(2 downto 0) <= "001";
    acc_returnA_addr_7_reg_1626(2 downto 0) <= "010";
    acc_returnB_addr_7_reg_1631(2 downto 0) <= "010";
    acc_weight_returnSquareA_addr_7_reg_1636(2 downto 0) <= "010";
    acc_weight_returnA_addr_7_reg_1641(2 downto 0) <= "010";
    acc_weight_returnSquareB_addr_7_reg_1646(2 downto 0) <= "010";
    acc_weight_returnB_addr_7_reg_1651(2 downto 0) <= "010";
    acc_weight_returnA_returnB_add_2_reg_1656(2 downto 0) <= "010";
    acc_returnA_addr_3_reg_1661(2 downto 0) <= "011";
    acc_returnB_addr_3_reg_1666(2 downto 0) <= "011";
    acc_weight_returnSquareA_addr_3_reg_1671(2 downto 0) <= "011";
    acc_weight_returnA_addr_3_reg_1676(2 downto 0) <= "011";
    acc_weight_returnSquareB_addr_3_reg_1681(2 downto 0) <= "011";
    acc_weight_returnB_addr_3_reg_1686(2 downto 0) <= "011";
    acc_weight_returnA_returnB_add_3_reg_1691(2 downto 0) <= "011";
    acc_returnA_addr_4_reg_1696(2 downto 0) <= "100";
    acc_returnB_addr_4_reg_1701(2 downto 0) <= "100";
    acc_weight_returnSquareA_addr_4_reg_1706(2 downto 0) <= "100";
    acc_weight_returnA_addr_4_reg_1711(2 downto 0) <= "100";
    acc_weight_returnSquareB_addr_4_reg_1716(2 downto 0) <= "100";
    acc_weight_returnB_addr_4_reg_1721(2 downto 0) <= "100";
    acc_weight_returnA_returnB_add_4_reg_1726(2 downto 0) <= "100";
    acc_returnA_addr_5_reg_1731(2 downto 0) <= "101";
    acc_returnB_addr_5_reg_1736(2 downto 0) <= "101";
    acc_weight_returnSquareA_addr_5_reg_1741(2 downto 0) <= "101";
    acc_weight_returnA_addr_5_reg_1746(2 downto 0) <= "101";
    acc_weight_returnSquareB_addr_5_reg_1751(2 downto 0) <= "101";
    acc_weight_returnB_addr_5_reg_1756(2 downto 0) <= "101";
    acc_weight_returnA_returnB_add_5_reg_1761(2 downto 0) <= "101";
    row_index_cast_reg_1771(31) <= '0';
    tmp_14_reg_1837(63 downto 31) <= "000000000000000000000000000000000";
    tmp_55_reg_1977(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, gmem32_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_435, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_458, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it34, ap_reg_ppiten_pp2_it35, ap_sig_ioackin_gmem32_AWREADY, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, tmp_57_i_fu_1242_p2, tmp_3_fu_1284_p2, exitcond2_fu_1314_p2, exitcond3_fu_1365_p2, tmp_12_fu_1385_p2, exitcond_fu_1424_p2, ap_sig_cseq_ST_pp3_stg7_fsm_63, exitcond_i_fu_1221_p2, tmp_8_fu_1336_p2, ap_sig_ioackin_gmem32_ARREADY, ap_sig_ioackin_gmem32_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_1221_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st8_fsm_7 => 
                if ((ap_const_lv1_0 = tmp_57_i_fu_1242_p2)) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                if ((ap_const_lv1_0 = tmp_3_fu_1284_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                end if;
            when ap_ST_st29_fsm_28 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                end if;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_34;
            when ap_ST_pp0_stg0_fsm_34 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1314_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_34;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1314_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_34;
                end if;
            when ap_ST_st38_fsm_35 => 
                if ((ap_const_lv1_0 = tmp_8_fu_1336_p2)) then
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_36;
                end if;
            when ap_ST_st39_fsm_36 => 
                ap_NS_fsm <= ap_ST_st40_fsm_37;
            when ap_ST_st40_fsm_37 => 
                ap_NS_fsm <= ap_ST_st41_fsm_38;
            when ap_ST_st41_fsm_38 => 
                ap_NS_fsm <= ap_ST_st42_fsm_39;
            when ap_ST_st42_fsm_39 => 
                ap_NS_fsm <= ap_ST_st43_fsm_40;
            when ap_ST_st43_fsm_40 => 
                ap_NS_fsm <= ap_ST_st44_fsm_41;
            when ap_ST_st44_fsm_41 => 
                ap_NS_fsm <= ap_ST_st45_fsm_42;
            when ap_ST_st45_fsm_42 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st46_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_42;
                end if;
            when ap_ST_st46_fsm_43 => 
                ap_NS_fsm <= ap_ST_st47_fsm_44;
            when ap_ST_st47_fsm_44 => 
                ap_NS_fsm <= ap_ST_st48_fsm_45;
            when ap_ST_st48_fsm_45 => 
                ap_NS_fsm <= ap_ST_st49_fsm_46;
            when ap_ST_st49_fsm_46 => 
                ap_NS_fsm <= ap_ST_st50_fsm_47;
            when ap_ST_st50_fsm_47 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_48;
            when ap_ST_pp1_stg0_fsm_48 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_1365_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_48;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_1365_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st54_fsm_49;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_48;
                end if;
            when ap_ST_st54_fsm_49 => 
                ap_NS_fsm <= ap_ST_st55_fsm_50;
            when ap_ST_st55_fsm_50 => 
                ap_NS_fsm <= ap_ST_st56_fsm_51;
            when ap_ST_st56_fsm_51 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_52;
            when ap_ST_pp2_stg0_fsm_52 => 
                if ((not(((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it34)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = tmp_12_fu_1385_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg1_fsm_53;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = tmp_12_fu_1385_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then
                    ap_NS_fsm <= ap_ST_st128_fsm_54;
                else
                    ap_NS_fsm <= ap_ST_st128_fsm_54;
                end if;
            when ap_ST_pp2_stg1_fsm_53 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_52;
            when ap_ST_st128_fsm_54 => 
                ap_NS_fsm <= ap_ST_st129_fsm_55;
            when ap_ST_st129_fsm_55 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_56;
            when ap_ST_pp3_stg0_fsm_56 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond_fu_1424_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg1_fsm_57;
                else
                    ap_NS_fsm <= ap_ST_st147_fsm_65;
                end if;
            when ap_ST_pp3_stg1_fsm_57 => 
                ap_NS_fsm <= ap_ST_pp3_stg2_fsm_58;
            when ap_ST_pp3_stg2_fsm_58 => 
                ap_NS_fsm <= ap_ST_pp3_stg3_fsm_59;
            when ap_ST_pp3_stg3_fsm_59 => 
                ap_NS_fsm <= ap_ST_pp3_stg4_fsm_60;
            when ap_ST_pp3_stg4_fsm_60 => 
                ap_NS_fsm <= ap_ST_pp3_stg5_fsm_61;
            when ap_ST_pp3_stg5_fsm_61 => 
                ap_NS_fsm <= ap_ST_pp3_stg6_fsm_62;
            when ap_ST_pp3_stg6_fsm_62 => 
                ap_NS_fsm <= ap_ST_pp3_stg7_fsm_63;
            when ap_ST_pp3_stg7_fsm_63 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg7_fsm_63) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it0))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg8_fsm_64;
                else
                    ap_NS_fsm <= ap_ST_st147_fsm_65;
                end if;
            when ap_ST_pp3_stg8_fsm_64 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_56;
            when ap_ST_st147_fsm_65 => 
                ap_NS_fsm <= ap_ST_st148_fsm_66;
            when ap_ST_st148_fsm_66 => 
                ap_NS_fsm <= ap_ST_st149_fsm_67;
            when ap_ST_st149_fsm_67 => 
                ap_NS_fsm <= ap_ST_st150_fsm_68;
            when ap_ST_st150_fsm_68 => 
                ap_NS_fsm <= ap_ST_st151_fsm_69;
            when ap_ST_st151_fsm_69 => 
                ap_NS_fsm <= ap_ST_st152_fsm_70;
            when ap_ST_st152_fsm_70 => 
                ap_NS_fsm <= ap_ST_st153_fsm_71;
            when ap_ST_st153_fsm_71 => 
                ap_NS_fsm <= ap_ST_st154_fsm_72;
            when ap_ST_st154_fsm_72 => 
                ap_NS_fsm <= ap_ST_st155_fsm_73;
            when ap_ST_st155_fsm_73 => 
                ap_NS_fsm <= ap_ST_st156_fsm_74;
            when ap_ST_st156_fsm_74 => 
                ap_NS_fsm <= ap_ST_st157_fsm_75;
            when ap_ST_st157_fsm_75 => 
                ap_NS_fsm <= ap_ST_st158_fsm_76;
            when ap_ST_st158_fsm_76 => 
                ap_NS_fsm <= ap_ST_st159_fsm_77;
            when ap_ST_st159_fsm_77 => 
                ap_NS_fsm <= ap_ST_st160_fsm_78;
            when ap_ST_st160_fsm_78 => 
                ap_NS_fsm <= ap_ST_st161_fsm_79;
            when ap_ST_st161_fsm_79 => 
                ap_NS_fsm <= ap_ST_st162_fsm_80;
            when ap_ST_st162_fsm_80 => 
                ap_NS_fsm <= ap_ST_st163_fsm_81;
            when ap_ST_st163_fsm_81 => 
                ap_NS_fsm <= ap_ST_st164_fsm_82;
            when ap_ST_st164_fsm_82 => 
                ap_NS_fsm <= ap_ST_st165_fsm_83;
            when ap_ST_st165_fsm_83 => 
                ap_NS_fsm <= ap_ST_st166_fsm_84;
            when ap_ST_st166_fsm_84 => 
                ap_NS_fsm <= ap_ST_st167_fsm_85;
            when ap_ST_st167_fsm_85 => 
                ap_NS_fsm <= ap_ST_st168_fsm_86;
            when ap_ST_st168_fsm_86 => 
                ap_NS_fsm <= ap_ST_st169_fsm_87;
            when ap_ST_st169_fsm_87 => 
                ap_NS_fsm <= ap_ST_st170_fsm_88;
            when ap_ST_st170_fsm_88 => 
                ap_NS_fsm <= ap_ST_st171_fsm_89;
            when ap_ST_st171_fsm_89 => 
                ap_NS_fsm <= ap_ST_st172_fsm_90;
            when ap_ST_st172_fsm_90 => 
                ap_NS_fsm <= ap_ST_st173_fsm_91;
            when ap_ST_st173_fsm_91 => 
                ap_NS_fsm <= ap_ST_st174_fsm_92;
            when ap_ST_st174_fsm_92 => 
                ap_NS_fsm <= ap_ST_st175_fsm_93;
            when ap_ST_st175_fsm_93 => 
                ap_NS_fsm <= ap_ST_st176_fsm_94;
            when ap_ST_st176_fsm_94 => 
                ap_NS_fsm <= ap_ST_st177_fsm_95;
            when ap_ST_st177_fsm_95 => 
                ap_NS_fsm <= ap_ST_st178_fsm_96;
            when ap_ST_st178_fsm_96 => 
                ap_NS_fsm <= ap_ST_st179_fsm_97;
            when ap_ST_st179_fsm_97 => 
                ap_NS_fsm <= ap_ST_st180_fsm_98;
            when ap_ST_st180_fsm_98 => 
                ap_NS_fsm <= ap_ST_st181_fsm_99;
            when ap_ST_st181_fsm_99 => 
                ap_NS_fsm <= ap_ST_st182_fsm_100;
            when ap_ST_st182_fsm_100 => 
                ap_NS_fsm <= ap_ST_st183_fsm_101;
            when ap_ST_st183_fsm_101 => 
                ap_NS_fsm <= ap_ST_st184_fsm_102;
            when ap_ST_st184_fsm_102 => 
                ap_NS_fsm <= ap_ST_st185_fsm_103;
            when ap_ST_st185_fsm_103 => 
                ap_NS_fsm <= ap_ST_st186_fsm_104;
            when ap_ST_st186_fsm_104 => 
                ap_NS_fsm <= ap_ST_st187_fsm_105;
            when ap_ST_st187_fsm_105 => 
                ap_NS_fsm <= ap_ST_st188_fsm_106;
            when ap_ST_st188_fsm_106 => 
                ap_NS_fsm <= ap_ST_st189_fsm_107;
            when ap_ST_st189_fsm_107 => 
                ap_NS_fsm <= ap_ST_st190_fsm_108;
            when ap_ST_st190_fsm_108 => 
                ap_NS_fsm <= ap_ST_st191_fsm_109;
            when ap_ST_st191_fsm_109 => 
                ap_NS_fsm <= ap_ST_st192_fsm_110;
            when ap_ST_st192_fsm_110 => 
                ap_NS_fsm <= ap_ST_st193_fsm_111;
            when ap_ST_st193_fsm_111 => 
                ap_NS_fsm <= ap_ST_st194_fsm_112;
            when ap_ST_st194_fsm_112 => 
                ap_NS_fsm <= ap_ST_st195_fsm_113;
            when ap_ST_st195_fsm_113 => 
                ap_NS_fsm <= ap_ST_st196_fsm_114;
            when ap_ST_st196_fsm_114 => 
                ap_NS_fsm <= ap_ST_st197_fsm_115;
            when ap_ST_st197_fsm_115 => 
                ap_NS_fsm <= ap_ST_st198_fsm_116;
            when ap_ST_st198_fsm_116 => 
                ap_NS_fsm <= ap_ST_st199_fsm_117;
            when ap_ST_st199_fsm_117 => 
                ap_NS_fsm <= ap_ST_st200_fsm_118;
            when ap_ST_st200_fsm_118 => 
                ap_NS_fsm <= ap_ST_st201_fsm_119;
            when ap_ST_st201_fsm_119 => 
                ap_NS_fsm <= ap_ST_st202_fsm_120;
            when ap_ST_st202_fsm_120 => 
                ap_NS_fsm <= ap_ST_st203_fsm_121;
            when ap_ST_st203_fsm_121 => 
                ap_NS_fsm <= ap_ST_st204_fsm_122;
            when ap_ST_st204_fsm_122 => 
                ap_NS_fsm <= ap_ST_st205_fsm_123;
            when ap_ST_st205_fsm_123 => 
                ap_NS_fsm <= ap_ST_st206_fsm_124;
            when ap_ST_st206_fsm_124 => 
                ap_NS_fsm <= ap_ST_st207_fsm_125;
            when ap_ST_st207_fsm_125 => 
                ap_NS_fsm <= ap_ST_st208_fsm_126;
            when ap_ST_st208_fsm_126 => 
                ap_NS_fsm <= ap_ST_st209_fsm_127;
            when ap_ST_st209_fsm_127 => 
                ap_NS_fsm <= ap_ST_st210_fsm_128;
            when ap_ST_st210_fsm_128 => 
                ap_NS_fsm <= ap_ST_st211_fsm_129;
            when ap_ST_st211_fsm_129 => 
                ap_NS_fsm <= ap_ST_st212_fsm_130;
            when ap_ST_st212_fsm_130 => 
                ap_NS_fsm <= ap_ST_st213_fsm_131;
            when ap_ST_st213_fsm_131 => 
                ap_NS_fsm <= ap_ST_st214_fsm_132;
            when ap_ST_st214_fsm_132 => 
                ap_NS_fsm <= ap_ST_st215_fsm_133;
            when ap_ST_st215_fsm_133 => 
                ap_NS_fsm <= ap_ST_st216_fsm_134;
            when ap_ST_st216_fsm_134 => 
                ap_NS_fsm <= ap_ST_st217_fsm_135;
            when ap_ST_st217_fsm_135 => 
                ap_NS_fsm <= ap_ST_st218_fsm_136;
            when ap_ST_st218_fsm_136 => 
                ap_NS_fsm <= ap_ST_st219_fsm_137;
            when ap_ST_st219_fsm_137 => 
                ap_NS_fsm <= ap_ST_st220_fsm_138;
            when ap_ST_st220_fsm_138 => 
                ap_NS_fsm <= ap_ST_st221_fsm_139;
            when ap_ST_st221_fsm_139 => 
                ap_NS_fsm <= ap_ST_st222_fsm_140;
            when ap_ST_st222_fsm_140 => 
                ap_NS_fsm <= ap_ST_st223_fsm_141;
            when ap_ST_st223_fsm_141 => 
                ap_NS_fsm <= ap_ST_st224_fsm_142;
            when ap_ST_st224_fsm_142 => 
                ap_NS_fsm <= ap_ST_st225_fsm_143;
            when ap_ST_st225_fsm_143 => 
                ap_NS_fsm <= ap_ST_st226_fsm_144;
            when ap_ST_st226_fsm_144 => 
                ap_NS_fsm <= ap_ST_st227_fsm_145;
            when ap_ST_st227_fsm_145 => 
                ap_NS_fsm <= ap_ST_st228_fsm_146;
            when ap_ST_st228_fsm_146 => 
                ap_NS_fsm <= ap_ST_st229_fsm_147;
            when ap_ST_st229_fsm_147 => 
                ap_NS_fsm <= ap_ST_st230_fsm_148;
            when ap_ST_st230_fsm_148 => 
                ap_NS_fsm <= ap_ST_st231_fsm_149;
            when ap_ST_st231_fsm_149 => 
                ap_NS_fsm <= ap_ST_st232_fsm_150;
            when ap_ST_st232_fsm_150 => 
                ap_NS_fsm <= ap_ST_st233_fsm_151;
            when ap_ST_st233_fsm_151 => 
                ap_NS_fsm <= ap_ST_st234_fsm_152;
            when ap_ST_st234_fsm_152 => 
                ap_NS_fsm <= ap_ST_st235_fsm_153;
            when ap_ST_st235_fsm_153 => 
                ap_NS_fsm <= ap_ST_st236_fsm_154;
            when ap_ST_st236_fsm_154 => 
                ap_NS_fsm <= ap_ST_st237_fsm_155;
            when ap_ST_st237_fsm_155 => 
                ap_NS_fsm <= ap_ST_st238_fsm_156;
            when ap_ST_st238_fsm_156 => 
                ap_NS_fsm <= ap_ST_st239_fsm_157;
            when ap_ST_st239_fsm_157 => 
                ap_NS_fsm <= ap_ST_st240_fsm_158;
            when ap_ST_st240_fsm_158 => 
                ap_NS_fsm <= ap_ST_st241_fsm_159;
            when ap_ST_st241_fsm_159 => 
                ap_NS_fsm <= ap_ST_st242_fsm_160;
            when ap_ST_st242_fsm_160 => 
                ap_NS_fsm <= ap_ST_st243_fsm_161;
            when ap_ST_st243_fsm_161 => 
                ap_NS_fsm <= ap_ST_st244_fsm_162;
            when ap_ST_st244_fsm_162 => 
                ap_NS_fsm <= ap_ST_st245_fsm_163;
            when ap_ST_st245_fsm_163 => 
                ap_NS_fsm <= ap_ST_st246_fsm_164;
            when ap_ST_st246_fsm_164 => 
                ap_NS_fsm <= ap_ST_st247_fsm_165;
            when ap_ST_st247_fsm_165 => 
                ap_NS_fsm <= ap_ST_st248_fsm_166;
            when ap_ST_st248_fsm_166 => 
                ap_NS_fsm <= ap_ST_st249_fsm_167;
            when ap_ST_st249_fsm_167 => 
                ap_NS_fsm <= ap_ST_st250_fsm_168;
            when ap_ST_st250_fsm_168 => 
                ap_NS_fsm <= ap_ST_st251_fsm_169;
            when ap_ST_st251_fsm_169 => 
                ap_NS_fsm <= ap_ST_st252_fsm_170;
            when ap_ST_st252_fsm_170 => 
                ap_NS_fsm <= ap_ST_st253_fsm_171;
            when ap_ST_st253_fsm_171 => 
                ap_NS_fsm <= ap_ST_st254_fsm_172;
            when ap_ST_st254_fsm_172 => 
                ap_NS_fsm <= ap_ST_st255_fsm_173;
            when ap_ST_st255_fsm_173 => 
                ap_NS_fsm <= ap_ST_st256_fsm_174;
            when ap_ST_st256_fsm_174 => 
                ap_NS_fsm <= ap_ST_st257_fsm_175;
            when ap_ST_st257_fsm_175 => 
                ap_NS_fsm <= ap_ST_st258_fsm_176;
            when ap_ST_st258_fsm_176 => 
                ap_NS_fsm <= ap_ST_st259_fsm_177;
            when ap_ST_st259_fsm_177 => 
                ap_NS_fsm <= ap_ST_st260_fsm_178;
            when ap_ST_st260_fsm_178 => 
                ap_NS_fsm <= ap_ST_st261_fsm_179;
            when ap_ST_st261_fsm_179 => 
                ap_NS_fsm <= ap_ST_st262_fsm_180;
            when ap_ST_st262_fsm_180 => 
                ap_NS_fsm <= ap_ST_st263_fsm_181;
            when ap_ST_st263_fsm_181 => 
                ap_NS_fsm <= ap_ST_st264_fsm_182;
            when ap_ST_st264_fsm_182 => 
                ap_NS_fsm <= ap_ST_st265_fsm_183;
            when ap_ST_st265_fsm_183 => 
                ap_NS_fsm <= ap_ST_st266_fsm_184;
            when ap_ST_st266_fsm_184 => 
                ap_NS_fsm <= ap_ST_st267_fsm_185;
            when ap_ST_st267_fsm_185 => 
                ap_NS_fsm <= ap_ST_st268_fsm_186;
            when ap_ST_st268_fsm_186 => 
                ap_NS_fsm <= ap_ST_st269_fsm_187;
            when ap_ST_st269_fsm_187 => 
                ap_NS_fsm <= ap_ST_st270_fsm_188;
            when ap_ST_st270_fsm_188 => 
                ap_NS_fsm <= ap_ST_st271_fsm_189;
            when ap_ST_st271_fsm_189 => 
                ap_NS_fsm <= ap_ST_st272_fsm_190;
            when ap_ST_st272_fsm_190 => 
                ap_NS_fsm <= ap_ST_st273_fsm_191;
            when ap_ST_st273_fsm_191 => 
                ap_NS_fsm <= ap_ST_st274_fsm_192;
            when ap_ST_st274_fsm_192 => 
                ap_NS_fsm <= ap_ST_st275_fsm_193;
            when ap_ST_st275_fsm_193 => 
                ap_NS_fsm <= ap_ST_st276_fsm_194;
            when ap_ST_st276_fsm_194 => 
                ap_NS_fsm <= ap_ST_st277_fsm_195;
            when ap_ST_st277_fsm_195 => 
                ap_NS_fsm <= ap_ST_st278_fsm_196;
            when ap_ST_st278_fsm_196 => 
                ap_NS_fsm <= ap_ST_st279_fsm_197;
            when ap_ST_st279_fsm_197 => 
                ap_NS_fsm <= ap_ST_st280_fsm_198;
            when ap_ST_st280_fsm_198 => 
                ap_NS_fsm <= ap_ST_st281_fsm_199;
            when ap_ST_st281_fsm_199 => 
                ap_NS_fsm <= ap_ST_st282_fsm_200;
            when ap_ST_st282_fsm_200 => 
                ap_NS_fsm <= ap_ST_st283_fsm_201;
            when ap_ST_st283_fsm_201 => 
                ap_NS_fsm <= ap_ST_st284_fsm_202;
            when ap_ST_st284_fsm_202 => 
                ap_NS_fsm <= ap_ST_st285_fsm_203;
            when ap_ST_st285_fsm_203 => 
                ap_NS_fsm <= ap_ST_st286_fsm_204;
            when ap_ST_st286_fsm_204 => 
                ap_NS_fsm <= ap_ST_st287_fsm_205;
            when ap_ST_st287_fsm_205 => 
                ap_NS_fsm <= ap_ST_st288_fsm_206;
            when ap_ST_st288_fsm_206 => 
                ap_NS_fsm <= ap_ST_st289_fsm_207;
            when ap_ST_st289_fsm_207 => 
                ap_NS_fsm <= ap_ST_st290_fsm_208;
            when ap_ST_st290_fsm_208 => 
                ap_NS_fsm <= ap_ST_st291_fsm_209;
            when ap_ST_st291_fsm_209 => 
                ap_NS_fsm <= ap_ST_st292_fsm_210;
            when ap_ST_st292_fsm_210 => 
                ap_NS_fsm <= ap_ST_st293_fsm_211;
            when ap_ST_st293_fsm_211 => 
                ap_NS_fsm <= ap_ST_st294_fsm_212;
            when ap_ST_st294_fsm_212 => 
                ap_NS_fsm <= ap_ST_st295_fsm_213;
            when ap_ST_st295_fsm_213 => 
                ap_NS_fsm <= ap_ST_st296_fsm_214;
            when ap_ST_st296_fsm_214 => 
                ap_NS_fsm <= ap_ST_st297_fsm_215;
            when ap_ST_st297_fsm_215 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st298_fsm_216;
                else
                    ap_NS_fsm <= ap_ST_st297_fsm_215;
                end if;
            when ap_ST_st298_fsm_216 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_WREADY))) then
                    ap_NS_fsm <= ap_ST_st299_fsm_217;
                else
                    ap_NS_fsm <= ap_ST_st298_fsm_216;
                end if;
            when ap_ST_st299_fsm_217 => 
                ap_NS_fsm <= ap_ST_st300_fsm_218;
            when ap_ST_st300_fsm_218 => 
                ap_NS_fsm <= ap_ST_st301_fsm_219;
            when ap_ST_st301_fsm_219 => 
                if (not((gmem32_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_st301_fsm_219;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_returnA_addr_3_gep_fu_406_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_returnA_addr_4_gep_fu_455_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_returnA_addr_5_gep_fu_504_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_returnA_addr_6_gep_fu_308_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_returnA_addr_7_gep_fu_357_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_returnA_addr_gep_fu_259_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_returnA_address0 assign process. --
    acc_returnA_address0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it24, ap_reg_ppiten_pp3_it0, acc_returnA_addr_reg_1556, acc_returnA_addr_7_reg_1626, acc_returnA_addr_4_reg_1696, ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it23, ap_sig_cseq_ST_pp3_stg0_fsm_56, tmp_55_fu_1436_p1, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_returnA_address0 <= acc_returnA_addr_4_reg_1696;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_returnA_address0 <= acc_returnA_addr_7_reg_1626;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_returnA_address0 <= acc_returnA_addr_reg_1556;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_56))) then 
            acc_returnA_address0 <= tmp_55_fu_1436_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it24))) then 
            acc_returnA_address0 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it23;
        else 
            acc_returnA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_returnA_address1 assign process. --
    acc_returnA_address1_assign_proc : process(ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp2_stg1_fsm_53, acc_returnA_addr_6_reg_1591, acc_returnA_addr_3_reg_1661, acc_returnA_addr_5_reg_1731, ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it29, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_returnA_address1 <= ap_reg_ppstg_acc_returnA_addr_1_reg_1883_pp2_it29;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_returnA_address1 <= acc_returnA_addr_5_reg_1731;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_returnA_address1 <= acc_returnA_addr_3_reg_1661;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_returnA_address1 <= acc_returnA_addr_6_reg_1591;
        else 
            acc_returnA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_returnA_ce0 assign process. --
    acc_returnA_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it24, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg0_fsm_56, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_56)) or (ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it24)))) then 
            acc_returnA_ce0 <= ap_const_logic_1;
        else 
            acc_returnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnA_ce1 assign process. --
    acc_returnA_ce1_assign_proc : process(ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            acc_returnA_ce1 <= ap_const_logic_1;
        else 
            acc_returnA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnA_d0 <= ap_const_lv32_0;

    -- acc_returnA_d1 assign process. --
    acc_returnA_d1_assign_proc : process(ap_reg_ppiten_pp2_it29, reg_1069, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_returnA_d1 <= reg_1069;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_returnA_d1 <= ap_const_lv32_0;
        else 
            acc_returnA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_returnA_we0 assign process. --
    acc_returnA_we0_assign_proc : process(ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_returnA_we0 <= ap_const_logic_1;
        else 
            acc_returnA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnA_we1 assign process. --
    acc_returnA_we1_assign_proc : process(ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_reg_ppstg_tmp_12_reg_1823_pp2_it29, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29))))) then 
            acc_returnA_we1 <= ap_const_logic_1;
        else 
            acc_returnA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnB_addr_3_gep_fu_413_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_returnB_addr_4_gep_fu_462_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_returnB_addr_5_gep_fu_511_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_returnB_addr_6_gep_fu_315_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_returnB_addr_7_gep_fu_364_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_returnB_addr_gep_fu_266_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_returnB_address0 assign process. --
    acc_returnB_address0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it30, ap_sig_cseq_ST_pp3_stg1_fsm_57, ap_reg_ppiten_pp3_it0, acc_returnB_addr_reg_1561, acc_returnB_addr_7_reg_1631, acc_returnB_addr_4_reg_1701, ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it29, tmp_55_reg_1977, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it30))) then 
            acc_returnB_address0 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it29;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_returnB_address0 <= acc_returnB_addr_4_reg_1701;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_returnB_address0 <= acc_returnB_addr_7_reg_1631;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_returnB_address0 <= acc_returnB_addr_reg_1561;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_57) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then 
            acc_returnB_address0 <= tmp_55_reg_1977(3 - 1 downto 0);
        else 
            acc_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_returnB_address1 assign process. --
    acc_returnB_address1_assign_proc : process(ap_reg_ppiten_pp2_it24, ap_sig_cseq_ST_pp2_stg1_fsm_53, acc_returnB_addr_6_reg_1596, acc_returnB_addr_3_reg_1666, acc_returnB_addr_5_reg_1736, ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it24, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_returnB_address1 <= acc_returnB_addr_5_reg_1736;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_returnB_address1 <= acc_returnB_addr_3_reg_1666;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_returnB_address1 <= acc_returnB_addr_6_reg_1596;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_returnB_address1 <= ap_reg_ppstg_acc_returnB_addr_1_reg_1889_pp2_it24;
        else 
            acc_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_returnB_ce0 assign process. --
    acc_returnB_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it30, ap_sig_cseq_ST_pp3_stg1_fsm_57, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_57) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it30)))) then 
            acc_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_ce1 assign process. --
    acc_returnB_ce1_assign_proc : process(ap_reg_ppiten_pp2_it24, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it24) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            acc_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_d0 assign process. --
    acc_returnB_d0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it30, reg_1069, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it30))) then 
            acc_returnB_d0 <= reg_1069;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_returnB_d0 <= ap_const_lv32_0;
        else 
            acc_returnB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    acc_returnB_d1 <= ap_const_lv32_0;

    -- acc_returnB_we0 assign process. --
    acc_returnB_we0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it30, ap_reg_ppstg_tmp_12_reg_1823_pp2_it29, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it30) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it29))))) then 
            acc_returnB_we0 <= ap_const_logic_1;
        else 
            acc_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_we1 assign process. --
    acc_returnB_we1_assign_proc : process(ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_returnB_we1 <= ap_const_logic_1;
        else 
            acc_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_addr_3_gep_fu_427_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_addr_4_gep_fu_476_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_addr_5_gep_fu_525_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_addr_6_gep_fu_329_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_addr_7_gep_fu_378_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_addr_gep_fu_280_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_address0 assign process. --
    acc_weight_returnA_address0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it32, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg3_fsm_59, acc_weight_returnA_addr_reg_1571, acc_weight_returnA_addr_7_reg_1641, acc_weight_returnA_addr_4_reg_1711, ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it31, tmp_55_reg_1977, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it32))) then 
            acc_weight_returnA_address0 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it31;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_4_reg_1711;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_7_reg_1641;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_reg_1571;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59))) then 
            acc_weight_returnA_address0 <= tmp_55_reg_1977(3 - 1 downto 0);
        else 
            acc_weight_returnA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_address1 assign process. --
    acc_weight_returnA_address1_assign_proc : process(ap_reg_ppiten_pp2_it26, ap_sig_cseq_ST_pp2_stg1_fsm_53, acc_weight_returnA_addr_6_reg_1606, acc_weight_returnA_addr_3_reg_1676, acc_weight_returnA_addr_5_reg_1746, ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it26, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_5_reg_1746;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_3_reg_1676;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_6_reg_1606;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it26) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_weight_returnA_address1 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_1907_pp2_it26;
        else 
            acc_weight_returnA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_ce0 assign process. --
    acc_weight_returnA_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it32, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg3_fsm_59, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59)) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it32)))) then 
            acc_weight_returnA_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_ce1 assign process. --
    acc_weight_returnA_ce1_assign_proc : process(ap_reg_ppiten_pp2_it26, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it26) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            acc_weight_returnA_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_d0 assign process. --
    acc_weight_returnA_d0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it32, reg_1165, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it32))) then 
            acc_weight_returnA_d0 <= reg_1165;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnA_d0 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    acc_weight_returnA_d1 <= ap_const_lv32_0;
    acc_weight_returnA_returnB_add_1_gep_fu_350_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_2_gep_fu_399_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_3_gep_fu_448_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_4_gep_fu_497_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_5_gep_fu_546_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_gep_fu_301_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_returnB_address0 assign process. --
    acc_weight_returnA_returnB_address0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it35, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg5_fsm_61, acc_weight_returnA_returnB_add_reg_1586, acc_weight_returnA_returnB_add_2_reg_1656, acc_weight_returnA_returnB_add_4_reg_1726, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it34, tmp_55_reg_1977, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35))) then 
            acc_weight_returnA_returnB_address0 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it34;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_4_reg_1726;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_2_reg_1656;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_reg_1586;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61))) then 
            acc_weight_returnA_returnB_address0 <= tmp_55_reg_1977(3 - 1 downto 0);
        else 
            acc_weight_returnA_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_address1 assign process. --
    acc_weight_returnA_returnB_address1_assign_proc : process(ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp2_stg1_fsm_53, acc_weight_returnA_returnB_add_1_reg_1621, acc_weight_returnA_returnB_add_3_reg_1691, acc_weight_returnA_returnB_add_5_reg_1761, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it29, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_5_reg_1761;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_3_reg_1691;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_1_reg_1621;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_weight_returnA_returnB_address1 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_1919_pp2_it29;
        else 
            acc_weight_returnA_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce0 assign process. --
    acc_weight_returnA_returnB_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it35, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg5_fsm_61, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61)) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35)))) then 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce1 assign process. --
    acc_weight_returnA_returnB_ce1_assign_proc : process(ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_d0 assign process. --
    acc_weight_returnA_returnB_d0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it35, tmp_33_reg_1963, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35))) then 
            acc_weight_returnA_returnB_d0 <= tmp_33_reg_1963;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnA_returnB_d0 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_returnB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    acc_weight_returnA_returnB_d1 <= ap_const_lv32_0;

    -- acc_weight_returnA_returnB_we0 assign process. --
    acc_weight_returnA_returnB_we0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it35, ap_reg_ppstg_tmp_12_reg_1823_pp2_it34, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it34))))) then 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we1 assign process. --
    acc_weight_returnA_returnB_we1_assign_proc : process(ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_we0 assign process. --
    acc_weight_returnA_we0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it32, ap_reg_ppstg_tmp_12_reg_1823_pp2_it31, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it32) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it31))))) then 
            acc_weight_returnA_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_we1 assign process. --
    acc_weight_returnA_we1_assign_proc : process(ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnA_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnB_addr_3_gep_fu_441_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnB_addr_4_gep_fu_490_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnB_addr_5_gep_fu_539_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnB_addr_6_gep_fu_343_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnB_addr_7_gep_fu_392_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnB_addr_gep_fu_294_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnB_address0 assign process. --
    acc_weight_returnB_address0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it27, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg5_fsm_61, acc_weight_returnB_addr_reg_1581, acc_weight_returnB_addr_7_reg_1651, acc_weight_returnB_addr_4_reg_1721, ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it26, tmp_55_reg_1977, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_4_reg_1721;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_7_reg_1651;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_reg_1581;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61))) then 
            acc_weight_returnB_address0 <= tmp_55_reg_1977(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it27))) then 
            acc_weight_returnB_address0 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it26;
        else 
            acc_weight_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnB_address1 assign process. --
    acc_weight_returnB_address1_assign_proc : process(ap_reg_ppiten_pp2_it32, ap_sig_cseq_ST_pp2_stg1_fsm_53, acc_weight_returnB_addr_6_reg_1616, acc_weight_returnB_addr_3_reg_1686, acc_weight_returnB_addr_5_reg_1756, ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it32, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it32) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_weight_returnB_address1 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_1913_pp2_it32;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_5_reg_1756;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_3_reg_1686;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_6_reg_1616;
        else 
            acc_weight_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnB_ce0 assign process. --
    acc_weight_returnB_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it27, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg5_fsm_61, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61)) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it27)))) then 
            acc_weight_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnB_ce1 assign process. --
    acc_weight_returnB_ce1_assign_proc : process(ap_reg_ppiten_pp2_it32, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it32) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            acc_weight_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnB_d1 assign process. --
    acc_weight_returnB_d1_assign_proc : process(ap_reg_ppiten_pp2_it32, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1165, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it32) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_weight_returnB_d1 <= reg_1165;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnB_we0 assign process. --
    acc_weight_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnB_we1 assign process. --
    acc_weight_returnB_we1_assign_proc : process(ap_reg_ppiten_pp2_it32, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_reg_ppstg_tmp_12_reg_1823_pp2_it32, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it32) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it32))))) then 
            acc_weight_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareA_addr_3_gep_fu_420_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_4_gep_fu_469_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_5_gep_fu_518_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_6_gep_fu_322_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_7_gep_fu_371_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_gep_fu_273_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquareA_address0 assign process. --
    acc_weight_returnSquareA_address0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it29, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_58, acc_weight_returnSquareA_addr_reg_1566, acc_weight_returnSquareA_addr_7_reg_1636, acc_weight_returnSquareA_addr_4_reg_1706, ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it28, tmp_55_reg_1977, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_4_reg_1706;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_7_reg_1636;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_reg_1566;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58))) then 
            acc_weight_returnSquareA_address0 <= tmp_55_reg_1977(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it29))) then 
            acc_weight_returnSquareA_address0 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it28;
        else 
            acc_weight_returnSquareA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_address1 assign process. --
    acc_weight_returnSquareA_address1_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp2_stg1_fsm_53, acc_weight_returnSquareA_addr_6_reg_1601, acc_weight_returnSquareA_addr_3_reg_1671, acc_weight_returnSquareA_addr_5_reg_1741, ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it34, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_weight_returnSquareA_address1 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_1895_pp2_it34;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_5_reg_1741;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_3_reg_1671;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_6_reg_1601;
        else 
            acc_weight_returnSquareA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_ce0 assign process. --
    acc_weight_returnSquareA_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it29, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_58, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58)) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it29)))) then 
            acc_weight_returnSquareA_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareA_ce1 assign process. --
    acc_weight_returnSquareA_ce1_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            acc_weight_returnSquareA_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareA_d0 <= ap_const_lv32_0;

    -- acc_weight_returnSquareA_d1 assign process. --
    acc_weight_returnSquareA_d1_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1173, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_weight_returnSquareA_d1 <= reg_1173;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnSquareA_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquareA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_we0 assign process. --
    acc_weight_returnSquareA_we0_assign_proc : process(ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnSquareA_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareA_we1 assign process. --
    acc_weight_returnSquareA_we1_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_reg_ppstg_tmp_12_reg_1823_pp2_it34, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it34))))) then 
            acc_weight_returnSquareA_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareB_addr_3_gep_fu_434_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_4_gep_fu_483_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_5_gep_fu_532_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_6_gep_fu_336_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_7_gep_fu_385_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_gep_fu_287_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquareB_address0 assign process. --
    acc_weight_returnSquareB_address0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it35, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg4_fsm_60, acc_weight_returnSquareB_addr_reg_1576, acc_weight_returnSquareB_addr_7_reg_1646, acc_weight_returnSquareB_addr_4_reg_1716, ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it34, tmp_55_reg_1977, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35))) then 
            acc_weight_returnSquareB_address0 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it34;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_4_reg_1716;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_7_reg_1646;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_reg_1576;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60))) then 
            acc_weight_returnSquareB_address0 <= tmp_55_reg_1977(3 - 1 downto 0);
        else 
            acc_weight_returnSquareB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_address1 assign process. --
    acc_weight_returnSquareB_address1_assign_proc : process(ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp2_stg1_fsm_53, acc_weight_returnSquareB_addr_6_reg_1611, acc_weight_returnSquareB_addr_3_reg_1681, acc_weight_returnSquareB_addr_5_reg_1751, ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it29, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_5_reg_1751;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_3_reg_1681;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_6_reg_1611;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            acc_weight_returnSquareB_address1 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_1901_pp2_it29;
        else 
            acc_weight_returnSquareB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_ce0 assign process. --
    acc_weight_returnSquareB_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it35, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg4_fsm_60, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60)) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35)))) then 
            acc_weight_returnSquareB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_ce1 assign process. --
    acc_weight_returnSquareB_ce1_assign_proc : process(ap_reg_ppiten_pp2_it29, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it29) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            acc_weight_returnSquareB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_d0 assign process. --
    acc_weight_returnSquareB_d0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it35, reg_1173, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35))) then 
            acc_weight_returnSquareB_d0 <= reg_1173;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnSquareB_d0 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquareB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    acc_weight_returnSquareB_d1 <= ap_const_lv32_0;

    -- acc_weight_returnSquareB_we0 assign process. --
    acc_weight_returnSquareB_we0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it35, ap_reg_ppstg_tmp_12_reg_1823_pp2_it34, ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it35) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it34))))) then 
            acc_weight_returnSquareB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_we1 assign process. --
    acc_weight_returnSquareB_we1_assign_proc : process(ap_sig_cseq_ST_st56_fsm_51, ap_sig_cseq_ST_st54_fsm_49, ap_sig_cseq_ST_st55_fsm_50)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_51) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_50))) then 
            acc_weight_returnSquareB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st28_fsm_27, tmp_3_fu_1284_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and (ap_const_lv1_0 = tmp_3_fu_1284_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st28_fsm_27, tmp_3_fu_1284_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and (ap_const_lv1_0 = tmp_3_fu_1284_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_1018 assign process. --
    ap_sig_bdd_1018_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1018 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_1117 assign process. --
    ap_sig_bdd_1117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1117 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_1143 assign process. --
    ap_sig_bdd_1143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1143 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_1152 assign process. --
    ap_sig_bdd_1152_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1152 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_1444 assign process. --
    ap_sig_bdd_1444_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1444 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_1494 assign process. --
    ap_sig_bdd_1494_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1494 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_1505 assign process. --
    ap_sig_bdd_1505_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1505 <= (ap_const_lv1_1 = ap_CS_fsm(180 downto 180));
    end process;


    -- ap_sig_bdd_1516 assign process. --
    ap_sig_bdd_1516_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1516 <= (ap_const_lv1_1 = ap_CS_fsm(214 downto 214));
    end process;


    -- ap_sig_bdd_1523 assign process. --
    ap_sig_bdd_1523_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1523 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_1535 assign process. --
    ap_sig_bdd_1535_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1535 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_1547 assign process. --
    ap_sig_bdd_1547_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1547 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_1559 assign process. --
    ap_sig_bdd_1559_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1559 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    -- ap_sig_bdd_1664 assign process. --
    ap_sig_bdd_1664_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1664 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_1672 assign process. --
    ap_sig_bdd_1672_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1672 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_1699 assign process. --
    ap_sig_bdd_1699_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1699 <= (ap_const_lv1_1 = ap_CS_fsm(219 downto 219));
    end process;


    -- ap_sig_bdd_1770 assign process. --
    ap_sig_bdd_1770_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1770 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_1786 assign process. --
    ap_sig_bdd_1786_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1786 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_1808 assign process. --
    ap_sig_bdd_1808_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1808 <= (ap_const_lv1_1 = ap_CS_fsm(216 downto 216));
    end process;


    -- ap_sig_bdd_1836 assign process. --
    ap_sig_bdd_1836_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1836 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    -- ap_sig_bdd_1857 assign process. --
    ap_sig_bdd_1857_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1857 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_1864 assign process. --
    ap_sig_bdd_1864_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1864 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_1939 assign process. --
    ap_sig_bdd_1939_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1939 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_1951 assign process. --
    ap_sig_bdd_1951_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1951 <= (ap_const_lv1_1 = ap_CS_fsm(100 downto 100));
    end process;


    -- ap_sig_bdd_1958 assign process. --
    ap_sig_bdd_1958_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1958 <= (ap_const_lv1_1 = ap_CS_fsm(105 downto 105));
    end process;


    -- ap_sig_bdd_1965 assign process. --
    ap_sig_bdd_1965_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1965 <= (ap_const_lv1_1 = ap_CS_fsm(109 downto 109));
    end process;


    -- ap_sig_bdd_1972 assign process. --
    ap_sig_bdd_1972_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1972 <= (ap_const_lv1_1 = ap_CS_fsm(144 downto 144));
    end process;


    -- ap_sig_bdd_1979 assign process. --
    ap_sig_bdd_1979_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1979 <= (ap_const_lv1_1 = ap_CS_fsm(148 downto 148));
    end process;


    -- ap_sig_bdd_2003 assign process. --
    ap_sig_bdd_2003_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2003 <= (ap_const_lv1_1 = ap_CS_fsm(95 downto 95));
    end process;


    -- ap_sig_bdd_2010 assign process. --
    ap_sig_bdd_2010_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2010 <= (ap_const_lv1_1 = ap_CS_fsm(139 downto 139));
    end process;


    -- ap_sig_bdd_2018 assign process. --
    ap_sig_bdd_2018_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2018 <= (ap_const_lv1_1 = ap_CS_fsm(181 downto 181));
    end process;


    -- ap_sig_bdd_2035 assign process. --
    ap_sig_bdd_2035_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2035 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    -- ap_sig_bdd_2042 assign process. --
    ap_sig_bdd_2042_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2042 <= (ap_const_lv1_1 = ap_CS_fsm(114 downto 114));
    end process;


    -- ap_sig_bdd_2049 assign process. --
    ap_sig_bdd_2049_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2049 <= (ap_const_lv1_1 = ap_CS_fsm(118 downto 118));
    end process;


    -- ap_sig_bdd_2056 assign process. --
    ap_sig_bdd_2056_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2056 <= (ap_const_lv1_1 = ap_CS_fsm(186 downto 186));
    end process;


    -- ap_sig_bdd_2068 assign process. --
    ap_sig_bdd_2068_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2068 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_2076 assign process. --
    ap_sig_bdd_2076_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2076 <= (ap_const_lv1_1 = ap_CS_fsm(153 downto 153));
    end process;


    -- ap_sig_bdd_2295 assign process. --
    ap_sig_bdd_2295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2295 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    -- ap_sig_bdd_2303 assign process. --
    ap_sig_bdd_2303_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2303 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    -- ap_sig_bdd_2311 assign process. --
    ap_sig_bdd_2311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2311 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_2319 assign process. --
    ap_sig_bdd_2319_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2319 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_2327 assign process. --
    ap_sig_bdd_2327_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2327 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    -- ap_sig_bdd_2335 assign process. --
    ap_sig_bdd_2335_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2335 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    -- ap_sig_bdd_2343 assign process. --
    ap_sig_bdd_2343_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2343 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    -- ap_sig_bdd_2351 assign process. --
    ap_sig_bdd_2351_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2351 <= (ap_const_lv1_1 = ap_CS_fsm(73 downto 73));
    end process;


    -- ap_sig_bdd_2359 assign process. --
    ap_sig_bdd_2359_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2359 <= (ap_const_lv1_1 = ap_CS_fsm(74 downto 74));
    end process;


    -- ap_sig_bdd_2367 assign process. --
    ap_sig_bdd_2367_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2367 <= (ap_const_lv1_1 = ap_CS_fsm(75 downto 75));
    end process;


    -- ap_sig_bdd_2375 assign process. --
    ap_sig_bdd_2375_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2375 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_238 assign process. --
    ap_sig_bdd_238_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_238 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_2383 assign process. --
    ap_sig_bdd_2383_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2383 <= (ap_const_lv1_1 = ap_CS_fsm(77 downto 77));
    end process;


    -- ap_sig_bdd_2391 assign process. --
    ap_sig_bdd_2391_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2391 <= (ap_const_lv1_1 = ap_CS_fsm(78 downto 78));
    end process;


    -- ap_sig_bdd_2399 assign process. --
    ap_sig_bdd_2399_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2399 <= (ap_const_lv1_1 = ap_CS_fsm(79 downto 79));
    end process;


    -- ap_sig_bdd_2407 assign process. --
    ap_sig_bdd_2407_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2407 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    -- ap_sig_bdd_2415 assign process. --
    ap_sig_bdd_2415_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2415 <= (ap_const_lv1_1 = ap_CS_fsm(81 downto 81));
    end process;


    -- ap_sig_bdd_2423 assign process. --
    ap_sig_bdd_2423_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2423 <= (ap_const_lv1_1 = ap_CS_fsm(82 downto 82));
    end process;


    -- ap_sig_bdd_2431 assign process. --
    ap_sig_bdd_2431_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2431 <= (ap_const_lv1_1 = ap_CS_fsm(83 downto 83));
    end process;


    -- ap_sig_bdd_2439 assign process. --
    ap_sig_bdd_2439_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2439 <= (ap_const_lv1_1 = ap_CS_fsm(84 downto 84));
    end process;


    -- ap_sig_bdd_2447 assign process. --
    ap_sig_bdd_2447_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2447 <= (ap_const_lv1_1 = ap_CS_fsm(85 downto 85));
    end process;


    -- ap_sig_bdd_2455 assign process. --
    ap_sig_bdd_2455_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2455 <= (ap_const_lv1_1 = ap_CS_fsm(86 downto 86));
    end process;


    -- ap_sig_bdd_2463 assign process. --
    ap_sig_bdd_2463_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2463 <= (ap_const_lv1_1 = ap_CS_fsm(87 downto 87));
    end process;


    -- ap_sig_bdd_2471 assign process. --
    ap_sig_bdd_2471_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2471 <= (ap_const_lv1_1 = ap_CS_fsm(88 downto 88));
    end process;


    -- ap_sig_bdd_2479 assign process. --
    ap_sig_bdd_2479_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2479 <= (ap_const_lv1_1 = ap_CS_fsm(89 downto 89));
    end process;


    -- ap_sig_bdd_2487 assign process. --
    ap_sig_bdd_2487_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2487 <= (ap_const_lv1_1 = ap_CS_fsm(90 downto 90));
    end process;


    -- ap_sig_bdd_2495 assign process. --
    ap_sig_bdd_2495_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2495 <= (ap_const_lv1_1 = ap_CS_fsm(91 downto 91));
    end process;


    -- ap_sig_bdd_2503 assign process. --
    ap_sig_bdd_2503_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2503 <= (ap_const_lv1_1 = ap_CS_fsm(92 downto 92));
    end process;


    -- ap_sig_bdd_2511 assign process. --
    ap_sig_bdd_2511_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2511 <= (ap_const_lv1_1 = ap_CS_fsm(93 downto 93));
    end process;


    -- ap_sig_bdd_2521 assign process. --
    ap_sig_bdd_2521_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2521 <= (ap_const_lv1_1 = ap_CS_fsm(115 downto 115));
    end process;


    -- ap_sig_bdd_2529 assign process. --
    ap_sig_bdd_2529_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2529 <= (ap_const_lv1_1 = ap_CS_fsm(116 downto 116));
    end process;


    -- ap_sig_bdd_2539 assign process. --
    ap_sig_bdd_2539_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2539 <= (ap_const_lv1_1 = ap_CS_fsm(119 downto 119));
    end process;


    -- ap_sig_bdd_2547 assign process. --
    ap_sig_bdd_2547_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2547 <= (ap_const_lv1_1 = ap_CS_fsm(120 downto 120));
    end process;


    -- ap_sig_bdd_2555 assign process. --
    ap_sig_bdd_2555_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2555 <= (ap_const_lv1_1 = ap_CS_fsm(121 downto 121));
    end process;


    -- ap_sig_bdd_2563 assign process. --
    ap_sig_bdd_2563_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2563 <= (ap_const_lv1_1 = ap_CS_fsm(122 downto 122));
    end process;


    -- ap_sig_bdd_2571 assign process. --
    ap_sig_bdd_2571_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2571 <= (ap_const_lv1_1 = ap_CS_fsm(123 downto 123));
    end process;


    -- ap_sig_bdd_2579 assign process. --
    ap_sig_bdd_2579_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2579 <= (ap_const_lv1_1 = ap_CS_fsm(124 downto 124));
    end process;


    -- ap_sig_bdd_2587 assign process. --
    ap_sig_bdd_2587_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2587 <= (ap_const_lv1_1 = ap_CS_fsm(125 downto 125));
    end process;


    -- ap_sig_bdd_2595 assign process. --
    ap_sig_bdd_2595_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2595 <= (ap_const_lv1_1 = ap_CS_fsm(126 downto 126));
    end process;


    -- ap_sig_bdd_2603 assign process. --
    ap_sig_bdd_2603_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2603 <= (ap_const_lv1_1 = ap_CS_fsm(127 downto 127));
    end process;


    -- ap_sig_bdd_2611 assign process. --
    ap_sig_bdd_2611_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2611 <= (ap_const_lv1_1 = ap_CS_fsm(128 downto 128));
    end process;


    -- ap_sig_bdd_2619 assign process. --
    ap_sig_bdd_2619_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2619 <= (ap_const_lv1_1 = ap_CS_fsm(129 downto 129));
    end process;


    -- ap_sig_bdd_2627 assign process. --
    ap_sig_bdd_2627_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2627 <= (ap_const_lv1_1 = ap_CS_fsm(130 downto 130));
    end process;


    -- ap_sig_bdd_2635 assign process. --
    ap_sig_bdd_2635_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2635 <= (ap_const_lv1_1 = ap_CS_fsm(131 downto 131));
    end process;


    -- ap_sig_bdd_2643 assign process. --
    ap_sig_bdd_2643_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2643 <= (ap_const_lv1_1 = ap_CS_fsm(132 downto 132));
    end process;


    -- ap_sig_bdd_2651 assign process. --
    ap_sig_bdd_2651_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2651 <= (ap_const_lv1_1 = ap_CS_fsm(133 downto 133));
    end process;


    -- ap_sig_bdd_2659 assign process. --
    ap_sig_bdd_2659_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2659 <= (ap_const_lv1_1 = ap_CS_fsm(134 downto 134));
    end process;


    -- ap_sig_bdd_2667 assign process. --
    ap_sig_bdd_2667_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2667 <= (ap_const_lv1_1 = ap_CS_fsm(135 downto 135));
    end process;


    -- ap_sig_bdd_2675 assign process. --
    ap_sig_bdd_2675_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2675 <= (ap_const_lv1_1 = ap_CS_fsm(136 downto 136));
    end process;


    -- ap_sig_bdd_2683 assign process. --
    ap_sig_bdd_2683_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2683 <= (ap_const_lv1_1 = ap_CS_fsm(137 downto 137));
    end process;


    -- ap_sig_bdd_2691 assign process. --
    ap_sig_bdd_2691_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2691 <= (ap_const_lv1_1 = ap_CS_fsm(138 downto 138));
    end process;


    -- ap_sig_bdd_2700 assign process. --
    ap_sig_bdd_2700_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2700 <= (ap_const_lv1_1 = ap_CS_fsm(140 downto 140));
    end process;


    -- ap_sig_bdd_2708 assign process. --
    ap_sig_bdd_2708_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2708 <= (ap_const_lv1_1 = ap_CS_fsm(141 downto 141));
    end process;


    -- ap_sig_bdd_2716 assign process. --
    ap_sig_bdd_2716_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2716 <= (ap_const_lv1_1 = ap_CS_fsm(142 downto 142));
    end process;


    -- ap_sig_bdd_2726 assign process. --
    ap_sig_bdd_2726_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2726 <= (ap_const_lv1_1 = ap_CS_fsm(145 downto 145));
    end process;


    -- ap_sig_bdd_2734 assign process. --
    ap_sig_bdd_2734_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2734 <= (ap_const_lv1_1 = ap_CS_fsm(146 downto 146));
    end process;


    -- ap_sig_bdd_2744 assign process. --
    ap_sig_bdd_2744_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2744 <= (ap_const_lv1_1 = ap_CS_fsm(187 downto 187));
    end process;


    -- ap_sig_bdd_2752 assign process. --
    ap_sig_bdd_2752_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2752 <= (ap_const_lv1_1 = ap_CS_fsm(188 downto 188));
    end process;


    -- ap_sig_bdd_2760 assign process. --
    ap_sig_bdd_2760_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2760 <= (ap_const_lv1_1 = ap_CS_fsm(189 downto 189));
    end process;


    -- ap_sig_bdd_2768 assign process. --
    ap_sig_bdd_2768_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2768 <= (ap_const_lv1_1 = ap_CS_fsm(190 downto 190));
    end process;


    -- ap_sig_bdd_2776 assign process. --
    ap_sig_bdd_2776_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2776 <= (ap_const_lv1_1 = ap_CS_fsm(191 downto 191));
    end process;


    -- ap_sig_bdd_2784 assign process. --
    ap_sig_bdd_2784_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2784 <= (ap_const_lv1_1 = ap_CS_fsm(192 downto 192));
    end process;


    -- ap_sig_bdd_2792 assign process. --
    ap_sig_bdd_2792_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2792 <= (ap_const_lv1_1 = ap_CS_fsm(193 downto 193));
    end process;


    -- ap_sig_bdd_2800 assign process. --
    ap_sig_bdd_2800_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2800 <= (ap_const_lv1_1 = ap_CS_fsm(194 downto 194));
    end process;


    -- ap_sig_bdd_2808 assign process. --
    ap_sig_bdd_2808_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2808 <= (ap_const_lv1_1 = ap_CS_fsm(195 downto 195));
    end process;


    -- ap_sig_bdd_2816 assign process. --
    ap_sig_bdd_2816_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2816 <= (ap_const_lv1_1 = ap_CS_fsm(196 downto 196));
    end process;


    -- ap_sig_bdd_2824 assign process. --
    ap_sig_bdd_2824_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2824 <= (ap_const_lv1_1 = ap_CS_fsm(197 downto 197));
    end process;


    -- ap_sig_bdd_2832 assign process. --
    ap_sig_bdd_2832_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2832 <= (ap_const_lv1_1 = ap_CS_fsm(198 downto 198));
    end process;


    -- ap_sig_bdd_2840 assign process. --
    ap_sig_bdd_2840_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2840 <= (ap_const_lv1_1 = ap_CS_fsm(199 downto 199));
    end process;


    -- ap_sig_bdd_2848 assign process. --
    ap_sig_bdd_2848_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2848 <= (ap_const_lv1_1 = ap_CS_fsm(200 downto 200));
    end process;


    -- ap_sig_bdd_2856 assign process. --
    ap_sig_bdd_2856_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2856 <= (ap_const_lv1_1 = ap_CS_fsm(201 downto 201));
    end process;


    -- ap_sig_bdd_2864 assign process. --
    ap_sig_bdd_2864_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2864 <= (ap_const_lv1_1 = ap_CS_fsm(202 downto 202));
    end process;


    -- ap_sig_bdd_2872 assign process. --
    ap_sig_bdd_2872_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2872 <= (ap_const_lv1_1 = ap_CS_fsm(203 downto 203));
    end process;


    -- ap_sig_bdd_2880 assign process. --
    ap_sig_bdd_2880_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2880 <= (ap_const_lv1_1 = ap_CS_fsm(204 downto 204));
    end process;


    -- ap_sig_bdd_2888 assign process. --
    ap_sig_bdd_2888_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2888 <= (ap_const_lv1_1 = ap_CS_fsm(205 downto 205));
    end process;


    -- ap_sig_bdd_2896 assign process. --
    ap_sig_bdd_2896_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2896 <= (ap_const_lv1_1 = ap_CS_fsm(206 downto 206));
    end process;


    -- ap_sig_bdd_2904 assign process. --
    ap_sig_bdd_2904_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2904 <= (ap_const_lv1_1 = ap_CS_fsm(207 downto 207));
    end process;


    -- ap_sig_bdd_2912 assign process. --
    ap_sig_bdd_2912_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2912 <= (ap_const_lv1_1 = ap_CS_fsm(208 downto 208));
    end process;


    -- ap_sig_bdd_2920 assign process. --
    ap_sig_bdd_2920_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2920 <= (ap_const_lv1_1 = ap_CS_fsm(209 downto 209));
    end process;


    -- ap_sig_bdd_2928 assign process. --
    ap_sig_bdd_2928_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2928 <= (ap_const_lv1_1 = ap_CS_fsm(210 downto 210));
    end process;


    -- ap_sig_bdd_2936 assign process. --
    ap_sig_bdd_2936_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2936 <= (ap_const_lv1_1 = ap_CS_fsm(211 downto 211));
    end process;


    -- ap_sig_bdd_2944 assign process. --
    ap_sig_bdd_2944_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2944 <= (ap_const_lv1_1 = ap_CS_fsm(212 downto 212));
    end process;


    -- ap_sig_bdd_2952 assign process. --
    ap_sig_bdd_2952_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2952 <= (ap_const_lv1_1 = ap_CS_fsm(213 downto 213));
    end process;


    -- ap_sig_bdd_426 assign process. --
    ap_sig_bdd_426_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_426 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_435 assign process. --
    ap_sig_bdd_435_assign_proc : process(gmem32_RVALID, exitcond2_reg_1790)
    begin
                ap_sig_bdd_435 <= ((gmem32_RVALID = ap_const_logic_0) and (exitcond2_reg_1790 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_451 assign process. --
    ap_sig_bdd_451_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_451 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_458 assign process. --
    ap_sig_bdd_458_assign_proc : process(gmem32_RVALID, exitcond3_reg_1814)
    begin
                ap_sig_bdd_458 <= ((gmem32_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond3_reg_1814));
    end process;


    -- ap_sig_bdd_474 assign process. --
    ap_sig_bdd_474_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_474 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    -- ap_sig_bdd_586 assign process. --
    ap_sig_bdd_586_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_586 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_602 assign process. --
    ap_sig_bdd_602_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_602 <= (ap_const_lv1_1 = ap_CS_fsm(99 downto 99));
    end process;


    -- ap_sig_bdd_610 assign process. --
    ap_sig_bdd_610_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_610 <= (ap_const_lv1_1 = ap_CS_fsm(104 downto 104));
    end process;


    -- ap_sig_bdd_618 assign process. --
    ap_sig_bdd_618_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_618 <= (ap_const_lv1_1 = ap_CS_fsm(143 downto 143));
    end process;


    -- ap_sig_bdd_626 assign process. --
    ap_sig_bdd_626_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_626 <= (ap_const_lv1_1 = ap_CS_fsm(185 downto 185));
    end process;


    -- ap_sig_bdd_635 assign process. --
    ap_sig_bdd_635_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_635 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_674 assign process. --
    ap_sig_bdd_674_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_674 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    -- ap_sig_bdd_684 assign process. --
    ap_sig_bdd_684_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_684 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_696 assign process. --
    ap_sig_bdd_696_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_696 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    -- ap_sig_bdd_708 assign process. --
    ap_sig_bdd_708_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_708 <= (ap_const_lv1_1 = ap_CS_fsm(108 downto 108));
    end process;


    -- ap_sig_bdd_716 assign process. --
    ap_sig_bdd_716_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_716 <= (ap_const_lv1_1 = ap_CS_fsm(117 downto 117));
    end process;


    -- ap_sig_bdd_724 assign process. --
    ap_sig_bdd_724_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_724 <= (ap_const_lv1_1 = ap_CS_fsm(152 downto 152));
    end process;


    -- ap_sig_bdd_752 assign process. --
    ap_sig_bdd_752_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_752 <= (ap_const_lv1_1 = ap_CS_fsm(94 downto 94));
    end process;


    -- ap_sig_bdd_761 assign process. --
    ap_sig_bdd_761_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_761 <= (ap_const_lv1_1 = ap_CS_fsm(215 downto 215));
    end process;


    -- ap_sig_bdd_784 assign process. --
    ap_sig_bdd_784_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_784 <= (ap_const_lv1_1 = ap_CS_fsm(147 downto 147));
    end process;


    -- ap_sig_bdd_803 assign process. --
    ap_sig_bdd_803_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_803 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_827 assign process. --
    ap_sig_bdd_827_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_827 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    -- ap_sig_bdd_853 assign process. --
    ap_sig_bdd_853_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_853 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_872 assign process. --
    ap_sig_bdd_872_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_872 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    -- ap_sig_bdd_895 assign process. --
    ap_sig_bdd_895_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_895 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    -- ap_sig_bdd_920 assign process. --
    ap_sig_bdd_920_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_920 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_945 assign process. --
    ap_sig_bdd_945_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_945 <= (ap_const_lv1_1 = ap_CS_fsm(113 downto 113));
    end process;


    -- ap_sig_bdd_969 assign process. --
    ap_sig_bdd_969_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_969 <= (ap_const_lv1_1 = ap_CS_fsm(156 downto 156));
    end process;


    -- ap_sig_bdd_990 assign process. --
    ap_sig_bdd_990_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_990 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_999 assign process. --
    ap_sig_bdd_999_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_999 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_34 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_34_assign_proc : process(ap_sig_bdd_426)
    begin
        if (ap_sig_bdd_426) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_48 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_48_assign_proc : process(ap_sig_bdd_451)
    begin
        if (ap_sig_bdd_451) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_52 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_52_assign_proc : process(ap_sig_bdd_474)
    begin
        if (ap_sig_bdd_474) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg1_fsm_53 assign process. --
    ap_sig_cseq_ST_pp2_stg1_fsm_53_assign_proc : process(ap_sig_bdd_696)
    begin
        if (ap_sig_bdd_696) then 
            ap_sig_cseq_ST_pp2_stg1_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg1_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_56 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_56_assign_proc : process(ap_sig_bdd_1444)
    begin
        if (ap_sig_bdd_1444) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg1_fsm_57 assign process. --
    ap_sig_cseq_ST_pp3_stg1_fsm_57_assign_proc : process(ap_sig_bdd_803)
    begin
        if (ap_sig_bdd_803) then 
            ap_sig_cseq_ST_pp3_stg1_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg1_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg2_fsm_58 assign process. --
    ap_sig_cseq_ST_pp3_stg2_fsm_58_assign_proc : process(ap_sig_bdd_827)
    begin
        if (ap_sig_bdd_827) then 
            ap_sig_cseq_ST_pp3_stg2_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg2_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg3_fsm_59 assign process. --
    ap_sig_cseq_ST_pp3_stg3_fsm_59_assign_proc : process(ap_sig_bdd_895)
    begin
        if (ap_sig_bdd_895) then 
            ap_sig_cseq_ST_pp3_stg3_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg3_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg4_fsm_60 assign process. --
    ap_sig_cseq_ST_pp3_stg4_fsm_60_assign_proc : process(ap_sig_bdd_853)
    begin
        if (ap_sig_bdd_853) then 
            ap_sig_cseq_ST_pp3_stg4_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg4_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg5_fsm_61 assign process. --
    ap_sig_cseq_ST_pp3_stg5_fsm_61_assign_proc : process(ap_sig_bdd_920)
    begin
        if (ap_sig_bdd_920) then 
            ap_sig_cseq_ST_pp3_stg5_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg5_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg6_fsm_62 assign process. --
    ap_sig_cseq_ST_pp3_stg6_fsm_62_assign_proc : process(ap_sig_bdd_872)
    begin
        if (ap_sig_bdd_872) then 
            ap_sig_cseq_ST_pp3_stg6_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg6_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg7_fsm_63 assign process. --
    ap_sig_cseq_ST_pp3_stg7_fsm_63_assign_proc : process(ap_sig_bdd_1494)
    begin
        if (ap_sig_bdd_1494) then 
            ap_sig_cseq_ST_pp3_stg7_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg7_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg8_fsm_64 assign process. --
    ap_sig_cseq_ST_pp3_stg8_fsm_64_assign_proc : process(ap_sig_bdd_1559)
    begin
        if (ap_sig_bdd_1559) then 
            ap_sig_cseq_ST_pp3_stg8_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg8_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_1939)
    begin
        if (ap_sig_bdd_1939) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st128_fsm_54 assign process. --
    ap_sig_cseq_ST_st128_fsm_54_assign_proc : process(ap_sig_bdd_1836)
    begin
        if (ap_sig_bdd_1836) then 
            ap_sig_cseq_ST_st128_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st128_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st129_fsm_55 assign process. --
    ap_sig_cseq_ST_st129_fsm_55_assign_proc : process(ap_sig_bdd_674)
    begin
        if (ap_sig_bdd_674) then 
            ap_sig_cseq_ST_st129_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st129_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st147_fsm_65 assign process. --
    ap_sig_cseq_ST_st147_fsm_65_assign_proc : process(ap_sig_bdd_2035)
    begin
        if (ap_sig_bdd_2035) then 
            ap_sig_cseq_ST_st147_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st147_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st148_fsm_66 assign process. --
    ap_sig_cseq_ST_st148_fsm_66_assign_proc : process(ap_sig_bdd_2295)
    begin
        if (ap_sig_bdd_2295) then 
            ap_sig_cseq_ST_st148_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st148_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st149_fsm_67 assign process. --
    ap_sig_cseq_ST_st149_fsm_67_assign_proc : process(ap_sig_bdd_2303)
    begin
        if (ap_sig_bdd_2303) then 
            ap_sig_cseq_ST_st149_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st149_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st150_fsm_68 assign process. --
    ap_sig_cseq_ST_st150_fsm_68_assign_proc : process(ap_sig_bdd_2311)
    begin
        if (ap_sig_bdd_2311) then 
            ap_sig_cseq_ST_st150_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st150_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st151_fsm_69 assign process. --
    ap_sig_cseq_ST_st151_fsm_69_assign_proc : process(ap_sig_bdd_2319)
    begin
        if (ap_sig_bdd_2319) then 
            ap_sig_cseq_ST_st151_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st151_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st152_fsm_70 assign process. --
    ap_sig_cseq_ST_st152_fsm_70_assign_proc : process(ap_sig_bdd_2327)
    begin
        if (ap_sig_bdd_2327) then 
            ap_sig_cseq_ST_st152_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st152_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st153_fsm_71 assign process. --
    ap_sig_cseq_ST_st153_fsm_71_assign_proc : process(ap_sig_bdd_2335)
    begin
        if (ap_sig_bdd_2335) then 
            ap_sig_cseq_ST_st153_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st153_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st154_fsm_72 assign process. --
    ap_sig_cseq_ST_st154_fsm_72_assign_proc : process(ap_sig_bdd_2343)
    begin
        if (ap_sig_bdd_2343) then 
            ap_sig_cseq_ST_st154_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st154_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st155_fsm_73 assign process. --
    ap_sig_cseq_ST_st155_fsm_73_assign_proc : process(ap_sig_bdd_2351)
    begin
        if (ap_sig_bdd_2351) then 
            ap_sig_cseq_ST_st155_fsm_73 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st155_fsm_73 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st156_fsm_74 assign process. --
    ap_sig_cseq_ST_st156_fsm_74_assign_proc : process(ap_sig_bdd_2359)
    begin
        if (ap_sig_bdd_2359) then 
            ap_sig_cseq_ST_st156_fsm_74 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st156_fsm_74 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st157_fsm_75 assign process. --
    ap_sig_cseq_ST_st157_fsm_75_assign_proc : process(ap_sig_bdd_2367)
    begin
        if (ap_sig_bdd_2367) then 
            ap_sig_cseq_ST_st157_fsm_75 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st157_fsm_75 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st158_fsm_76 assign process. --
    ap_sig_cseq_ST_st158_fsm_76_assign_proc : process(ap_sig_bdd_2375)
    begin
        if (ap_sig_bdd_2375) then 
            ap_sig_cseq_ST_st158_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st158_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st159_fsm_77 assign process. --
    ap_sig_cseq_ST_st159_fsm_77_assign_proc : process(ap_sig_bdd_2383)
    begin
        if (ap_sig_bdd_2383) then 
            ap_sig_cseq_ST_st159_fsm_77 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st159_fsm_77 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st160_fsm_78 assign process. --
    ap_sig_cseq_ST_st160_fsm_78_assign_proc : process(ap_sig_bdd_2391)
    begin
        if (ap_sig_bdd_2391) then 
            ap_sig_cseq_ST_st160_fsm_78 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st160_fsm_78 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st161_fsm_79 assign process. --
    ap_sig_cseq_ST_st161_fsm_79_assign_proc : process(ap_sig_bdd_2399)
    begin
        if (ap_sig_bdd_2399) then 
            ap_sig_cseq_ST_st161_fsm_79 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st161_fsm_79 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st162_fsm_80 assign process. --
    ap_sig_cseq_ST_st162_fsm_80_assign_proc : process(ap_sig_bdd_2407)
    begin
        if (ap_sig_bdd_2407) then 
            ap_sig_cseq_ST_st162_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st162_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st163_fsm_81 assign process. --
    ap_sig_cseq_ST_st163_fsm_81_assign_proc : process(ap_sig_bdd_2415)
    begin
        if (ap_sig_bdd_2415) then 
            ap_sig_cseq_ST_st163_fsm_81 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st163_fsm_81 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st164_fsm_82 assign process. --
    ap_sig_cseq_ST_st164_fsm_82_assign_proc : process(ap_sig_bdd_2423)
    begin
        if (ap_sig_bdd_2423) then 
            ap_sig_cseq_ST_st164_fsm_82 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st164_fsm_82 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st165_fsm_83 assign process. --
    ap_sig_cseq_ST_st165_fsm_83_assign_proc : process(ap_sig_bdd_2431)
    begin
        if (ap_sig_bdd_2431) then 
            ap_sig_cseq_ST_st165_fsm_83 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st165_fsm_83 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st166_fsm_84 assign process. --
    ap_sig_cseq_ST_st166_fsm_84_assign_proc : process(ap_sig_bdd_2439)
    begin
        if (ap_sig_bdd_2439) then 
            ap_sig_cseq_ST_st166_fsm_84 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st166_fsm_84 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st167_fsm_85 assign process. --
    ap_sig_cseq_ST_st167_fsm_85_assign_proc : process(ap_sig_bdd_2447)
    begin
        if (ap_sig_bdd_2447) then 
            ap_sig_cseq_ST_st167_fsm_85 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st167_fsm_85 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st168_fsm_86 assign process. --
    ap_sig_cseq_ST_st168_fsm_86_assign_proc : process(ap_sig_bdd_2455)
    begin
        if (ap_sig_bdd_2455) then 
            ap_sig_cseq_ST_st168_fsm_86 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st168_fsm_86 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st169_fsm_87 assign process. --
    ap_sig_cseq_ST_st169_fsm_87_assign_proc : process(ap_sig_bdd_2463)
    begin
        if (ap_sig_bdd_2463) then 
            ap_sig_cseq_ST_st169_fsm_87 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st169_fsm_87 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st170_fsm_88 assign process. --
    ap_sig_cseq_ST_st170_fsm_88_assign_proc : process(ap_sig_bdd_2471)
    begin
        if (ap_sig_bdd_2471) then 
            ap_sig_cseq_ST_st170_fsm_88 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st170_fsm_88 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st171_fsm_89 assign process. --
    ap_sig_cseq_ST_st171_fsm_89_assign_proc : process(ap_sig_bdd_2479)
    begin
        if (ap_sig_bdd_2479) then 
            ap_sig_cseq_ST_st171_fsm_89 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st171_fsm_89 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st172_fsm_90 assign process. --
    ap_sig_cseq_ST_st172_fsm_90_assign_proc : process(ap_sig_bdd_2487)
    begin
        if (ap_sig_bdd_2487) then 
            ap_sig_cseq_ST_st172_fsm_90 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st172_fsm_90 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st173_fsm_91 assign process. --
    ap_sig_cseq_ST_st173_fsm_91_assign_proc : process(ap_sig_bdd_2495)
    begin
        if (ap_sig_bdd_2495) then 
            ap_sig_cseq_ST_st173_fsm_91 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st173_fsm_91 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st174_fsm_92 assign process. --
    ap_sig_cseq_ST_st174_fsm_92_assign_proc : process(ap_sig_bdd_2503)
    begin
        if (ap_sig_bdd_2503) then 
            ap_sig_cseq_ST_st174_fsm_92 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st174_fsm_92 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st175_fsm_93 assign process. --
    ap_sig_cseq_ST_st175_fsm_93_assign_proc : process(ap_sig_bdd_2511)
    begin
        if (ap_sig_bdd_2511) then 
            ap_sig_cseq_ST_st175_fsm_93 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st175_fsm_93 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st176_fsm_94 assign process. --
    ap_sig_cseq_ST_st176_fsm_94_assign_proc : process(ap_sig_bdd_752)
    begin
        if (ap_sig_bdd_752) then 
            ap_sig_cseq_ST_st176_fsm_94 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st176_fsm_94 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st177_fsm_95 assign process. --
    ap_sig_cseq_ST_st177_fsm_95_assign_proc : process(ap_sig_bdd_2003)
    begin
        if (ap_sig_bdd_2003) then 
            ap_sig_cseq_ST_st177_fsm_95 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st177_fsm_95 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st181_fsm_99 assign process. --
    ap_sig_cseq_ST_st181_fsm_99_assign_proc : process(ap_sig_bdd_602)
    begin
        if (ap_sig_bdd_602) then 
            ap_sig_cseq_ST_st181_fsm_99 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st181_fsm_99 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st182_fsm_100 assign process. --
    ap_sig_cseq_ST_st182_fsm_100_assign_proc : process(ap_sig_bdd_1951)
    begin
        if (ap_sig_bdd_1951) then 
            ap_sig_cseq_ST_st182_fsm_100 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st182_fsm_100 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st186_fsm_104 assign process. --
    ap_sig_cseq_ST_st186_fsm_104_assign_proc : process(ap_sig_bdd_610)
    begin
        if (ap_sig_bdd_610) then 
            ap_sig_cseq_ST_st186_fsm_104 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st186_fsm_104 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st187_fsm_105 assign process. --
    ap_sig_cseq_ST_st187_fsm_105_assign_proc : process(ap_sig_bdd_1958)
    begin
        if (ap_sig_bdd_1958) then 
            ap_sig_cseq_ST_st187_fsm_105 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st187_fsm_105 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_684)
    begin
        if (ap_sig_bdd_684) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st190_fsm_108 assign process. --
    ap_sig_cseq_ST_st190_fsm_108_assign_proc : process(ap_sig_bdd_708)
    begin
        if (ap_sig_bdd_708) then 
            ap_sig_cseq_ST_st190_fsm_108 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st190_fsm_108 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st191_fsm_109 assign process. --
    ap_sig_cseq_ST_st191_fsm_109_assign_proc : process(ap_sig_bdd_1965)
    begin
        if (ap_sig_bdd_1965) then 
            ap_sig_cseq_ST_st191_fsm_109 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st191_fsm_109 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st195_fsm_113 assign process. --
    ap_sig_cseq_ST_st195_fsm_113_assign_proc : process(ap_sig_bdd_945)
    begin
        if (ap_sig_bdd_945) then 
            ap_sig_cseq_ST_st195_fsm_113 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st195_fsm_113 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st196_fsm_114 assign process. --
    ap_sig_cseq_ST_st196_fsm_114_assign_proc : process(ap_sig_bdd_2042)
    begin
        if (ap_sig_bdd_2042) then 
            ap_sig_cseq_ST_st196_fsm_114 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st196_fsm_114 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st197_fsm_115 assign process. --
    ap_sig_cseq_ST_st197_fsm_115_assign_proc : process(ap_sig_bdd_2521)
    begin
        if (ap_sig_bdd_2521) then 
            ap_sig_cseq_ST_st197_fsm_115 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st197_fsm_115 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st198_fsm_116 assign process. --
    ap_sig_cseq_ST_st198_fsm_116_assign_proc : process(ap_sig_bdd_2529)
    begin
        if (ap_sig_bdd_2529) then 
            ap_sig_cseq_ST_st198_fsm_116 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st198_fsm_116 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st199_fsm_117 assign process. --
    ap_sig_cseq_ST_st199_fsm_117_assign_proc : process(ap_sig_bdd_716)
    begin
        if (ap_sig_bdd_716) then 
            ap_sig_cseq_ST_st199_fsm_117 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st199_fsm_117 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_1664)
    begin
        if (ap_sig_bdd_1664) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_238)
    begin
        if (ap_sig_bdd_238) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st200_fsm_118 assign process. --
    ap_sig_cseq_ST_st200_fsm_118_assign_proc : process(ap_sig_bdd_2049)
    begin
        if (ap_sig_bdd_2049) then 
            ap_sig_cseq_ST_st200_fsm_118 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st200_fsm_118 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st201_fsm_119 assign process. --
    ap_sig_cseq_ST_st201_fsm_119_assign_proc : process(ap_sig_bdd_2539)
    begin
        if (ap_sig_bdd_2539) then 
            ap_sig_cseq_ST_st201_fsm_119 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st201_fsm_119 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st202_fsm_120 assign process. --
    ap_sig_cseq_ST_st202_fsm_120_assign_proc : process(ap_sig_bdd_2547)
    begin
        if (ap_sig_bdd_2547) then 
            ap_sig_cseq_ST_st202_fsm_120 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st202_fsm_120 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st203_fsm_121 assign process. --
    ap_sig_cseq_ST_st203_fsm_121_assign_proc : process(ap_sig_bdd_2555)
    begin
        if (ap_sig_bdd_2555) then 
            ap_sig_cseq_ST_st203_fsm_121 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st203_fsm_121 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st204_fsm_122 assign process. --
    ap_sig_cseq_ST_st204_fsm_122_assign_proc : process(ap_sig_bdd_2563)
    begin
        if (ap_sig_bdd_2563) then 
            ap_sig_cseq_ST_st204_fsm_122 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st204_fsm_122 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st205_fsm_123 assign process. --
    ap_sig_cseq_ST_st205_fsm_123_assign_proc : process(ap_sig_bdd_2571)
    begin
        if (ap_sig_bdd_2571) then 
            ap_sig_cseq_ST_st205_fsm_123 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st205_fsm_123 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st206_fsm_124 assign process. --
    ap_sig_cseq_ST_st206_fsm_124_assign_proc : process(ap_sig_bdd_2579)
    begin
        if (ap_sig_bdd_2579) then 
            ap_sig_cseq_ST_st206_fsm_124 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st206_fsm_124 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st207_fsm_125 assign process. --
    ap_sig_cseq_ST_st207_fsm_125_assign_proc : process(ap_sig_bdd_2587)
    begin
        if (ap_sig_bdd_2587) then 
            ap_sig_cseq_ST_st207_fsm_125 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st207_fsm_125 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st208_fsm_126 assign process. --
    ap_sig_cseq_ST_st208_fsm_126_assign_proc : process(ap_sig_bdd_2595)
    begin
        if (ap_sig_bdd_2595) then 
            ap_sig_cseq_ST_st208_fsm_126 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st208_fsm_126 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st209_fsm_127 assign process. --
    ap_sig_cseq_ST_st209_fsm_127_assign_proc : process(ap_sig_bdd_2603)
    begin
        if (ap_sig_bdd_2603) then 
            ap_sig_cseq_ST_st209_fsm_127 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st209_fsm_127 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_2068)
    begin
        if (ap_sig_bdd_2068) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st210_fsm_128 assign process. --
    ap_sig_cseq_ST_st210_fsm_128_assign_proc : process(ap_sig_bdd_2611)
    begin
        if (ap_sig_bdd_2611) then 
            ap_sig_cseq_ST_st210_fsm_128 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st210_fsm_128 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st211_fsm_129 assign process. --
    ap_sig_cseq_ST_st211_fsm_129_assign_proc : process(ap_sig_bdd_2619)
    begin
        if (ap_sig_bdd_2619) then 
            ap_sig_cseq_ST_st211_fsm_129 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st211_fsm_129 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st212_fsm_130 assign process. --
    ap_sig_cseq_ST_st212_fsm_130_assign_proc : process(ap_sig_bdd_2627)
    begin
        if (ap_sig_bdd_2627) then 
            ap_sig_cseq_ST_st212_fsm_130 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st212_fsm_130 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st213_fsm_131 assign process. --
    ap_sig_cseq_ST_st213_fsm_131_assign_proc : process(ap_sig_bdd_2635)
    begin
        if (ap_sig_bdd_2635) then 
            ap_sig_cseq_ST_st213_fsm_131 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st213_fsm_131 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st214_fsm_132 assign process. --
    ap_sig_cseq_ST_st214_fsm_132_assign_proc : process(ap_sig_bdd_2643)
    begin
        if (ap_sig_bdd_2643) then 
            ap_sig_cseq_ST_st214_fsm_132 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st214_fsm_132 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st215_fsm_133 assign process. --
    ap_sig_cseq_ST_st215_fsm_133_assign_proc : process(ap_sig_bdd_2651)
    begin
        if (ap_sig_bdd_2651) then 
            ap_sig_cseq_ST_st215_fsm_133 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st215_fsm_133 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st216_fsm_134 assign process. --
    ap_sig_cseq_ST_st216_fsm_134_assign_proc : process(ap_sig_bdd_2659)
    begin
        if (ap_sig_bdd_2659) then 
            ap_sig_cseq_ST_st216_fsm_134 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st216_fsm_134 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st217_fsm_135 assign process. --
    ap_sig_cseq_ST_st217_fsm_135_assign_proc : process(ap_sig_bdd_2667)
    begin
        if (ap_sig_bdd_2667) then 
            ap_sig_cseq_ST_st217_fsm_135 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st217_fsm_135 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st218_fsm_136 assign process. --
    ap_sig_cseq_ST_st218_fsm_136_assign_proc : process(ap_sig_bdd_2675)
    begin
        if (ap_sig_bdd_2675) then 
            ap_sig_cseq_ST_st218_fsm_136 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st218_fsm_136 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st219_fsm_137 assign process. --
    ap_sig_cseq_ST_st219_fsm_137_assign_proc : process(ap_sig_bdd_2683)
    begin
        if (ap_sig_bdd_2683) then 
            ap_sig_cseq_ST_st219_fsm_137 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st219_fsm_137 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st220_fsm_138 assign process. --
    ap_sig_cseq_ST_st220_fsm_138_assign_proc : process(ap_sig_bdd_2691)
    begin
        if (ap_sig_bdd_2691) then 
            ap_sig_cseq_ST_st220_fsm_138 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st220_fsm_138 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st221_fsm_139 assign process. --
    ap_sig_cseq_ST_st221_fsm_139_assign_proc : process(ap_sig_bdd_2010)
    begin
        if (ap_sig_bdd_2010) then 
            ap_sig_cseq_ST_st221_fsm_139 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st221_fsm_139 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st222_fsm_140 assign process. --
    ap_sig_cseq_ST_st222_fsm_140_assign_proc : process(ap_sig_bdd_2700)
    begin
        if (ap_sig_bdd_2700) then 
            ap_sig_cseq_ST_st222_fsm_140 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st222_fsm_140 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st223_fsm_141 assign process. --
    ap_sig_cseq_ST_st223_fsm_141_assign_proc : process(ap_sig_bdd_2708)
    begin
        if (ap_sig_bdd_2708) then 
            ap_sig_cseq_ST_st223_fsm_141 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st223_fsm_141 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st224_fsm_142 assign process. --
    ap_sig_cseq_ST_st224_fsm_142_assign_proc : process(ap_sig_bdd_2716)
    begin
        if (ap_sig_bdd_2716) then 
            ap_sig_cseq_ST_st224_fsm_142 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st224_fsm_142 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st225_fsm_143 assign process. --
    ap_sig_cseq_ST_st225_fsm_143_assign_proc : process(ap_sig_bdd_618)
    begin
        if (ap_sig_bdd_618) then 
            ap_sig_cseq_ST_st225_fsm_143 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st225_fsm_143 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st226_fsm_144 assign process. --
    ap_sig_cseq_ST_st226_fsm_144_assign_proc : process(ap_sig_bdd_1972)
    begin
        if (ap_sig_bdd_1972) then 
            ap_sig_cseq_ST_st226_fsm_144 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st226_fsm_144 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st227_fsm_145 assign process. --
    ap_sig_cseq_ST_st227_fsm_145_assign_proc : process(ap_sig_bdd_2726)
    begin
        if (ap_sig_bdd_2726) then 
            ap_sig_cseq_ST_st227_fsm_145 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st227_fsm_145 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st228_fsm_146 assign process. --
    ap_sig_cseq_ST_st228_fsm_146_assign_proc : process(ap_sig_bdd_2734)
    begin
        if (ap_sig_bdd_2734) then 
            ap_sig_cseq_ST_st228_fsm_146 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st228_fsm_146 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st229_fsm_147 assign process. --
    ap_sig_cseq_ST_st229_fsm_147_assign_proc : process(ap_sig_bdd_784)
    begin
        if (ap_sig_bdd_784) then 
            ap_sig_cseq_ST_st229_fsm_147 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st229_fsm_147 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st230_fsm_148 assign process. --
    ap_sig_cseq_ST_st230_fsm_148_assign_proc : process(ap_sig_bdd_1979)
    begin
        if (ap_sig_bdd_1979) then 
            ap_sig_cseq_ST_st230_fsm_148 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st230_fsm_148 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st234_fsm_152 assign process. --
    ap_sig_cseq_ST_st234_fsm_152_assign_proc : process(ap_sig_bdd_724)
    begin
        if (ap_sig_bdd_724) then 
            ap_sig_cseq_ST_st234_fsm_152 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st234_fsm_152 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st235_fsm_153 assign process. --
    ap_sig_cseq_ST_st235_fsm_153_assign_proc : process(ap_sig_bdd_2076)
    begin
        if (ap_sig_bdd_2076) then 
            ap_sig_cseq_ST_st235_fsm_153 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st235_fsm_153 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st238_fsm_156 assign process. --
    ap_sig_cseq_ST_st238_fsm_156_assign_proc : process(ap_sig_bdd_969)
    begin
        if (ap_sig_bdd_969) then 
            ap_sig_cseq_ST_st238_fsm_156 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st238_fsm_156 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st262_fsm_180 assign process. --
    ap_sig_cseq_ST_st262_fsm_180_assign_proc : process(ap_sig_bdd_1505)
    begin
        if (ap_sig_bdd_1505) then 
            ap_sig_cseq_ST_st262_fsm_180 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st262_fsm_180 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st263_fsm_181 assign process. --
    ap_sig_cseq_ST_st263_fsm_181_assign_proc : process(ap_sig_bdd_2018)
    begin
        if (ap_sig_bdd_2018) then 
            ap_sig_cseq_ST_st263_fsm_181 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st263_fsm_181 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st267_fsm_185 assign process. --
    ap_sig_cseq_ST_st267_fsm_185_assign_proc : process(ap_sig_bdd_626)
    begin
        if (ap_sig_bdd_626) then 
            ap_sig_cseq_ST_st267_fsm_185 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st267_fsm_185 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st268_fsm_186 assign process. --
    ap_sig_cseq_ST_st268_fsm_186_assign_proc : process(ap_sig_bdd_2056)
    begin
        if (ap_sig_bdd_2056) then 
            ap_sig_cseq_ST_st268_fsm_186 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st268_fsm_186 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st269_fsm_187 assign process. --
    ap_sig_cseq_ST_st269_fsm_187_assign_proc : process(ap_sig_bdd_2744)
    begin
        if (ap_sig_bdd_2744) then 
            ap_sig_cseq_ST_st269_fsm_187 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st269_fsm_187 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st270_fsm_188 assign process. --
    ap_sig_cseq_ST_st270_fsm_188_assign_proc : process(ap_sig_bdd_2752)
    begin
        if (ap_sig_bdd_2752) then 
            ap_sig_cseq_ST_st270_fsm_188 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st270_fsm_188 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st271_fsm_189 assign process. --
    ap_sig_cseq_ST_st271_fsm_189_assign_proc : process(ap_sig_bdd_2760)
    begin
        if (ap_sig_bdd_2760) then 
            ap_sig_cseq_ST_st271_fsm_189 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st271_fsm_189 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st272_fsm_190 assign process. --
    ap_sig_cseq_ST_st272_fsm_190_assign_proc : process(ap_sig_bdd_2768)
    begin
        if (ap_sig_bdd_2768) then 
            ap_sig_cseq_ST_st272_fsm_190 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st272_fsm_190 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st273_fsm_191 assign process. --
    ap_sig_cseq_ST_st273_fsm_191_assign_proc : process(ap_sig_bdd_2776)
    begin
        if (ap_sig_bdd_2776) then 
            ap_sig_cseq_ST_st273_fsm_191 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st273_fsm_191 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st274_fsm_192 assign process. --
    ap_sig_cseq_ST_st274_fsm_192_assign_proc : process(ap_sig_bdd_2784)
    begin
        if (ap_sig_bdd_2784) then 
            ap_sig_cseq_ST_st274_fsm_192 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st274_fsm_192 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st275_fsm_193 assign process. --
    ap_sig_cseq_ST_st275_fsm_193_assign_proc : process(ap_sig_bdd_2792)
    begin
        if (ap_sig_bdd_2792) then 
            ap_sig_cseq_ST_st275_fsm_193 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st275_fsm_193 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st276_fsm_194 assign process. --
    ap_sig_cseq_ST_st276_fsm_194_assign_proc : process(ap_sig_bdd_2800)
    begin
        if (ap_sig_bdd_2800) then 
            ap_sig_cseq_ST_st276_fsm_194 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st276_fsm_194 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st277_fsm_195 assign process. --
    ap_sig_cseq_ST_st277_fsm_195_assign_proc : process(ap_sig_bdd_2808)
    begin
        if (ap_sig_bdd_2808) then 
            ap_sig_cseq_ST_st277_fsm_195 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st277_fsm_195 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st278_fsm_196 assign process. --
    ap_sig_cseq_ST_st278_fsm_196_assign_proc : process(ap_sig_bdd_2816)
    begin
        if (ap_sig_bdd_2816) then 
            ap_sig_cseq_ST_st278_fsm_196 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st278_fsm_196 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st279_fsm_197 assign process. --
    ap_sig_cseq_ST_st279_fsm_197_assign_proc : process(ap_sig_bdd_2824)
    begin
        if (ap_sig_bdd_2824) then 
            ap_sig_cseq_ST_st279_fsm_197 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st279_fsm_197 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_1018)
    begin
        if (ap_sig_bdd_1018) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st280_fsm_198 assign process. --
    ap_sig_cseq_ST_st280_fsm_198_assign_proc : process(ap_sig_bdd_2832)
    begin
        if (ap_sig_bdd_2832) then 
            ap_sig_cseq_ST_st280_fsm_198 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st280_fsm_198 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st281_fsm_199 assign process. --
    ap_sig_cseq_ST_st281_fsm_199_assign_proc : process(ap_sig_bdd_2840)
    begin
        if (ap_sig_bdd_2840) then 
            ap_sig_cseq_ST_st281_fsm_199 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st281_fsm_199 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st282_fsm_200 assign process. --
    ap_sig_cseq_ST_st282_fsm_200_assign_proc : process(ap_sig_bdd_2848)
    begin
        if (ap_sig_bdd_2848) then 
            ap_sig_cseq_ST_st282_fsm_200 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st282_fsm_200 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st283_fsm_201 assign process. --
    ap_sig_cseq_ST_st283_fsm_201_assign_proc : process(ap_sig_bdd_2856)
    begin
        if (ap_sig_bdd_2856) then 
            ap_sig_cseq_ST_st283_fsm_201 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st283_fsm_201 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st284_fsm_202 assign process. --
    ap_sig_cseq_ST_st284_fsm_202_assign_proc : process(ap_sig_bdd_2864)
    begin
        if (ap_sig_bdd_2864) then 
            ap_sig_cseq_ST_st284_fsm_202 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st284_fsm_202 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st285_fsm_203 assign process. --
    ap_sig_cseq_ST_st285_fsm_203_assign_proc : process(ap_sig_bdd_2872)
    begin
        if (ap_sig_bdd_2872) then 
            ap_sig_cseq_ST_st285_fsm_203 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st285_fsm_203 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st286_fsm_204 assign process. --
    ap_sig_cseq_ST_st286_fsm_204_assign_proc : process(ap_sig_bdd_2880)
    begin
        if (ap_sig_bdd_2880) then 
            ap_sig_cseq_ST_st286_fsm_204 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st286_fsm_204 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st287_fsm_205 assign process. --
    ap_sig_cseq_ST_st287_fsm_205_assign_proc : process(ap_sig_bdd_2888)
    begin
        if (ap_sig_bdd_2888) then 
            ap_sig_cseq_ST_st287_fsm_205 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st287_fsm_205 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st288_fsm_206 assign process. --
    ap_sig_cseq_ST_st288_fsm_206_assign_proc : process(ap_sig_bdd_2896)
    begin
        if (ap_sig_bdd_2896) then 
            ap_sig_cseq_ST_st288_fsm_206 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st288_fsm_206 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st289_fsm_207 assign process. --
    ap_sig_cseq_ST_st289_fsm_207_assign_proc : process(ap_sig_bdd_2904)
    begin
        if (ap_sig_bdd_2904) then 
            ap_sig_cseq_ST_st289_fsm_207 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st289_fsm_207 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_1117)
    begin
        if (ap_sig_bdd_1117) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st290_fsm_208 assign process. --
    ap_sig_cseq_ST_st290_fsm_208_assign_proc : process(ap_sig_bdd_2912)
    begin
        if (ap_sig_bdd_2912) then 
            ap_sig_cseq_ST_st290_fsm_208 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st290_fsm_208 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st291_fsm_209 assign process. --
    ap_sig_cseq_ST_st291_fsm_209_assign_proc : process(ap_sig_bdd_2920)
    begin
        if (ap_sig_bdd_2920) then 
            ap_sig_cseq_ST_st291_fsm_209 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st291_fsm_209 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st292_fsm_210 assign process. --
    ap_sig_cseq_ST_st292_fsm_210_assign_proc : process(ap_sig_bdd_2928)
    begin
        if (ap_sig_bdd_2928) then 
            ap_sig_cseq_ST_st292_fsm_210 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st292_fsm_210 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st293_fsm_211 assign process. --
    ap_sig_cseq_ST_st293_fsm_211_assign_proc : process(ap_sig_bdd_2936)
    begin
        if (ap_sig_bdd_2936) then 
            ap_sig_cseq_ST_st293_fsm_211 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st293_fsm_211 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st294_fsm_212 assign process. --
    ap_sig_cseq_ST_st294_fsm_212_assign_proc : process(ap_sig_bdd_2944)
    begin
        if (ap_sig_bdd_2944) then 
            ap_sig_cseq_ST_st294_fsm_212 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st294_fsm_212 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st295_fsm_213 assign process. --
    ap_sig_cseq_ST_st295_fsm_213_assign_proc : process(ap_sig_bdd_2952)
    begin
        if (ap_sig_bdd_2952) then 
            ap_sig_cseq_ST_st295_fsm_213 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st295_fsm_213 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st296_fsm_214 assign process. --
    ap_sig_cseq_ST_st296_fsm_214_assign_proc : process(ap_sig_bdd_1516)
    begin
        if (ap_sig_bdd_1516) then 
            ap_sig_cseq_ST_st296_fsm_214 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st296_fsm_214 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st297_fsm_215 assign process. --
    ap_sig_cseq_ST_st297_fsm_215_assign_proc : process(ap_sig_bdd_761)
    begin
        if (ap_sig_bdd_761) then 
            ap_sig_cseq_ST_st297_fsm_215 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st297_fsm_215 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st298_fsm_216 assign process. --
    ap_sig_cseq_ST_st298_fsm_216_assign_proc : process(ap_sig_bdd_1808)
    begin
        if (ap_sig_bdd_1808) then 
            ap_sig_cseq_ST_st298_fsm_216 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st298_fsm_216 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_1770)
    begin
        if (ap_sig_bdd_1770) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_1672)
    begin
        if (ap_sig_bdd_1672) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st301_fsm_219 assign process. --
    ap_sig_cseq_ST_st301_fsm_219_assign_proc : process(ap_sig_bdd_1699)
    begin
        if (ap_sig_bdd_1699) then 
            ap_sig_cseq_ST_st301_fsm_219 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st301_fsm_219 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_1523)
    begin
        if (ap_sig_bdd_1523) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_35 assign process. --
    ap_sig_cseq_ST_st38_fsm_35_assign_proc : process(ap_sig_bdd_1143)
    begin
        if (ap_sig_bdd_1143) then 
            ap_sig_cseq_ST_st38_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_41 assign process. --
    ap_sig_cseq_ST_st44_fsm_41_assign_proc : process(ap_sig_bdd_1152)
    begin
        if (ap_sig_bdd_1152) then 
            ap_sig_cseq_ST_st44_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_42 assign process. --
    ap_sig_cseq_ST_st45_fsm_42_assign_proc : process(ap_sig_bdd_1786)
    begin
        if (ap_sig_bdd_1786) then 
            ap_sig_cseq_ST_st45_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_47 assign process. --
    ap_sig_cseq_ST_st50_fsm_47_assign_proc : process(ap_sig_bdd_1535)
    begin
        if (ap_sig_bdd_1535) then 
            ap_sig_cseq_ST_st50_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st54_fsm_49 assign process. --
    ap_sig_cseq_ST_st54_fsm_49_assign_proc : process(ap_sig_bdd_1857)
    begin
        if (ap_sig_bdd_1857) then 
            ap_sig_cseq_ST_st54_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st55_fsm_50 assign process. --
    ap_sig_cseq_ST_st55_fsm_50_assign_proc : process(ap_sig_bdd_1864)
    begin
        if (ap_sig_bdd_1864) then 
            ap_sig_cseq_ST_st55_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st56_fsm_51 assign process. --
    ap_sig_cseq_ST_st56_fsm_51_assign_proc : process(ap_sig_bdd_1547)
    begin
        if (ap_sig_bdd_1547) then 
            ap_sig_cseq_ST_st56_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_586)
    begin
        if (ap_sig_bdd_586) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_990)
    begin
        if (ap_sig_bdd_990) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_999)
    begin
        if (ap_sig_bdd_999) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_635)
    begin
        if (ap_sig_bdd_635) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem32_ARREADY assign process. --
    ap_sig_ioackin_gmem32_ARREADY_assign_proc : process(gmem32_ARREADY, ap_reg_ioackin_gmem32_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) then 
            ap_sig_ioackin_gmem32_ARREADY <= gmem32_ARREADY;
        else 
            ap_sig_ioackin_gmem32_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem32_AWREADY assign process. --
    ap_sig_ioackin_gmem32_AWREADY_assign_proc : process(gmem32_AWREADY, ap_reg_ioackin_gmem32_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_AWREADY)) then 
            ap_sig_ioackin_gmem32_AWREADY <= gmem32_AWREADY;
        else 
            ap_sig_ioackin_gmem32_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem32_WREADY assign process. --
    ap_sig_ioackin_gmem32_WREADY_assign_proc : process(gmem32_WREADY, ap_reg_ioackin_gmem32_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_WREADY)) then 
            ap_sig_ioackin_gmem32_WREADY <= gmem32_WREADY;
        else 
            ap_sig_ioackin_gmem32_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- bramA_address0 assign process. --
    bramA_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it0, tmp_7_fu_1325_p1, tmp_13_fu_1396_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            bramA_address0 <= tmp_7_fu_1325_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            bramA_address0 <= tmp_13_fu_1396_p1(8 - 1 downto 0);
        else 
            bramA_address0 <= "XXXXXXXX";
        end if; 
    end process;

    bramA_address1 <= tmp_14_fu_1402_p1(8 - 1 downto 0);

    -- bramA_ce0 assign process. --
    bramA_ce0_assign_proc : process(ap_sig_bdd_435, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            bramA_ce0 <= ap_const_logic_1;
        else 
            bramA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- bramA_ce1 assign process. --
    bramA_ce1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            bramA_ce1 <= ap_const_logic_1;
        else 
            bramA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bramA_d0 <= reg_1079;

    -- bramA_we0 assign process. --
    bramA_we0_assign_proc : process(ap_sig_bdd_435, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond2_reg_1790_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1790_pp0_it1)))) then 
            bramA_we0 <= ap_const_logic_1;
        else 
            bramA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- bramB_address0 assign process. --
    bramB_address0_assign_proc : process(ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp2_stg1_fsm_53, tmp_14_reg_1837, tmp_10_fu_1376_p1, tmp_13_fu_1396_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            bramB_address0 <= tmp_10_fu_1376_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            bramB_address0 <= tmp_14_reg_1837(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            bramB_address0 <= tmp_13_fu_1396_p1(8 - 1 downto 0);
        else 
            bramB_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- bramB_ce0 assign process. --
    bramB_ce0_assign_proc : process(ap_sig_bdd_458, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp2_stg1_fsm_53)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            bramB_ce0 <= ap_const_logic_1;
        else 
            bramB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bramB_d0 <= reg_1079;

    -- bramB_we0 assign process. --
    bramB_we0_assign_proc : process(ap_sig_bdd_458, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond3_reg_1814_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_1814_pp1_it1)))) then 
            bramB_we0 <= ap_const_logic_1;
        else 
            bramB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    column_index_fu_1330_p2 <= std_logic_vector(unsigned(column_index_0_in_reg_843) + unsigned(ap_const_lv32_1));
    correlation_accel_v1_gmem32_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    exitcond2_fu_1314_p2 <= "1" when (indvar_phi_fu_835_p4 = tmp_6_reg_1545) else "0";
    exitcond3_fu_1365_p2 <= "1" when (indvar8_phi_fu_856_p4 = tmp_6_reg_1545) else "0";
    exitcond_fu_1424_p2 <= "1" when (i2_phi_fu_964_p4 = ap_const_lv3_6) else "0";
    exitcond_i_fu_1221_p2 <= "1" when (i_i_reg_786 = ap_const_lv8_FC) else "0";

    -- gmem32_ARADDR assign process. --
    gmem32_ARADDR_assign_proc : process(gmem32_addr_reg_1784, gmem32_addr_1_reg_1808, ap_reg_ioackin_gmem32_ARREADY, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st45_fsm_42)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_42)) then 
                gmem32_ARADDR <= gmem32_addr_1_reg_1808;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
                gmem32_ARADDR <= gmem32_addr_reg_1784;
            else 
                gmem32_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem32_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gmem32_ARBURST <= ap_const_lv2_0;
    gmem32_ARCACHE <= ap_const_lv4_0;
    gmem32_ARID <= ap_const_lv1_0;
    gmem32_ARLEN <= p_add_i32_shr_reg_1551;
    gmem32_ARLOCK <= ap_const_lv2_0;
    gmem32_ARPROT <= ap_const_lv3_0;
    gmem32_ARQOS <= ap_const_lv4_0;
    gmem32_ARREGION <= ap_const_lv4_0;
    gmem32_ARSIZE <= ap_const_lv3_0;
    gmem32_ARUSER <= ap_const_lv1_0;

    -- gmem32_ARVALID assign process. --
    gmem32_ARVALID_assign_proc : process(ap_reg_ioackin_gmem32_ARREADY, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st45_fsm_42)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_42)))) then 
            gmem32_ARVALID <= ap_const_logic_1;
        else 
            gmem32_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem32_AWADDR <= gmem32_addr_2_reg_2067;
    gmem32_AWBURST <= ap_const_lv2_0;
    gmem32_AWCACHE <= ap_const_lv4_0;
    gmem32_AWID <= ap_const_lv1_0;
    gmem32_AWLEN <= ap_const_lv32_1;
    gmem32_AWLOCK <= ap_const_lv2_0;
    gmem32_AWPROT <= ap_const_lv3_0;
    gmem32_AWQOS <= ap_const_lv4_0;
    gmem32_AWREGION <= ap_const_lv4_0;
    gmem32_AWSIZE <= ap_const_lv3_0;
    gmem32_AWUSER <= ap_const_lv1_0;

    -- gmem32_AWVALID assign process. --
    gmem32_AWVALID_assign_proc : process(ap_sig_cseq_ST_st297_fsm_215, ap_reg_ioackin_gmem32_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st297_fsm_215) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_AWREADY))) then 
            gmem32_AWVALID <= ap_const_logic_1;
        else 
            gmem32_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem32_BREADY assign process. --
    gmem32_BREADY_assign_proc : process(gmem32_BVALID, ap_sig_cseq_ST_st301_fsm_219)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st301_fsm_219) and not((gmem32_BVALID = ap_const_logic_0)))) then 
            gmem32_BREADY <= ap_const_logic_1;
        else 
            gmem32_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem32_RREADY assign process. --
    gmem32_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_34, exitcond2_reg_1790, ap_sig_bdd_435, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_48, exitcond3_reg_1814, ap_sig_bdd_458, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and (exitcond2_reg_1790 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_435 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and (ap_const_lv1_0 = exitcond3_reg_1814) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_458 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            gmem32_RREADY <= ap_const_logic_1;
        else 
            gmem32_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem32_WDATA <= reg_1085;
    gmem32_WID <= ap_const_lv1_0;
    gmem32_WLAST <= ap_const_logic_0;
    gmem32_WSTRB <= ap_const_lv4_F;
    gmem32_WUSER <= ap_const_lv1_0;

    -- gmem32_WVALID assign process. --
    gmem32_WVALID_assign_proc : process(ap_reg_ioackin_gmem32_WREADY, ap_sig_cseq_ST_st298_fsm_216)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st298_fsm_216) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_WREADY))) then 
            gmem32_WVALID <= ap_const_logic_1;
        else 
            gmem32_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1002_ce <= ap_const_logic_1;

    -- grp_fu_1002_p0 assign process. --
    grp_fu_1002_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1114, reg_1179, lnReturnA_reg_1925, lnReturnB_reg_1934, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st177_fsm_95, ap_sig_cseq_ST_st221_fsm_139)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100)) then 
            grp_fu_1002_p0 <= reg_1114;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st177_fsm_95) or (ap_const_logic_1 = ap_sig_cseq_ST_st221_fsm_139))) then 
            grp_fu_1002_p0 <= reg_1179;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_1002_p0 <= lnReturnB_reg_1934;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it25))) then 
            grp_fu_1002_p0 <= lnReturnA_reg_1925;
        else 
            grp_fu_1002_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1002_p1 assign process. --
    grp_fu_1002_p1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, sum_weight_returnB_reg_936, ap_reg_ppstg_reg_1058_pp2_it24, ap_reg_ppstg_reg_1058_pp2_it25, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1179, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st177_fsm_95, ap_sig_cseq_ST_st221_fsm_139)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st221_fsm_139)) then 
            grp_fu_1002_p1 <= reg_1179;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100)) then 
            grp_fu_1002_p1 <= sum_weight_returnB_reg_936;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st177_fsm_95)) then 
            grp_fu_1002_p1 <= ap_const_lv32_40000000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_1002_p1 <= ap_reg_ppstg_reg_1058_pp2_it25;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it25))) then 
            grp_fu_1002_p1 <= ap_reg_ppstg_reg_1058_pp2_it24;
        else 
            grp_fu_1002_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1006_ce <= ap_const_logic_1;

    -- grp_fu_1006_p0 assign process. --
    grp_fu_1006_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, ap_reg_ppiten_pp2_it28, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1085, reg_1179, lnReturnA_reg_1925, tmp_24_reg_1943, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st177_fsm_95, ap_sig_cseq_ST_st221_fsm_139)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100)) then 
            grp_fu_1006_p0 <= reg_1179;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st177_fsm_95) or (ap_const_logic_1 = ap_sig_cseq_ST_st221_fsm_139))) then 
            grp_fu_1006_p0 <= reg_1085;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it28))) then 
            grp_fu_1006_p0 <= tmp_24_reg_1943;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_1006_p0 <= lnReturnA_reg_1925;
        else 
            grp_fu_1006_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1006_p1 assign process. --
    grp_fu_1006_p1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, ap_reg_ppiten_pp2_it28, sum_weight_returnA_reg_912, sum_weight_returnB_reg_936, ap_reg_ppstg_reg_1058_pp2_it27, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1179, lnReturnB_reg_1934, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st177_fsm_95, ap_sig_cseq_ST_st221_fsm_139)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st221_fsm_139)) then 
            grp_fu_1006_p1 <= reg_1179;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100)) then 
            grp_fu_1006_p1 <= sum_weight_returnA_reg_912;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st177_fsm_95)) then 
            grp_fu_1006_p1 <= sum_weight_returnB_reg_936;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it28))) then 
            grp_fu_1006_p1 <= ap_reg_ppstg_reg_1058_pp2_it27;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_1006_p1 <= lnReturnB_reg_1934;
        else 
            grp_fu_1006_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1010_ce <= ap_const_logic_1;

    -- grp_fu_1010_p0 assign process. --
    grp_fu_1010_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it27, ap_reg_ppiten_pp2_it28, reg_1048, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1133)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it28))) then 
            grp_fu_1010_p0 <= reg_1133;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it27) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_1010_p0 <= reg_1048;
        else 
            grp_fu_1010_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1010_p1 <= ap_reg_ppstg_reg_1058_pp2_it27;

    -- grp_fu_1020_ce assign process. --
    grp_fu_1020_ce_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, tmp_12_reg_1823, ap_sig_cseq_ST_st225_fsm_143, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st199_fsm_117, ap_reg_ppstg_tmp_12_reg_1823_pp2_it15, ap_sig_cseq_ST_st176_fsm_94, ap_sig_cseq_ST_st297_fsm_215, ap_sig_ioackin_gmem32_AWREADY, ap_sig_cseq_ST_st229_fsm_147, ap_reg_ppstg_tmp_12_reg_1823_pp2_it1, ap_reg_ppstg_tmp_12_reg_1823_pp2_it2, ap_reg_ppstg_tmp_12_reg_1823_pp2_it3, ap_reg_ppstg_tmp_12_reg_1823_pp2_it4, ap_reg_ppstg_tmp_12_reg_1823_pp2_it5, ap_reg_ppstg_tmp_12_reg_1823_pp2_it6, ap_reg_ppstg_tmp_12_reg_1823_pp2_it7, ap_reg_ppstg_tmp_12_reg_1823_pp2_it8, ap_reg_ppstg_tmp_12_reg_1823_pp2_it9, ap_reg_ppstg_tmp_12_reg_1823_pp2_it10, ap_reg_ppstg_tmp_12_reg_1823_pp2_it11, ap_reg_ppstg_tmp_12_reg_1823_pp2_it12, ap_reg_ppstg_tmp_12_reg_1823_pp2_it13, ap_reg_ppstg_tmp_12_reg_1823_pp2_it14, ap_sig_cseq_ST_st296_fsm_214, ap_sig_cseq_ST_st226_fsm_144, ap_sig_cseq_ST_st221_fsm_139, ap_sig_cseq_ST_st147_fsm_65, ap_sig_cseq_ST_st196_fsm_114, ap_sig_cseq_ST_st200_fsm_118, ap_sig_cseq_ST_st268_fsm_186, ap_sig_cseq_ST_st148_fsm_66, ap_sig_cseq_ST_st149_fsm_67, ap_sig_cseq_ST_st150_fsm_68, ap_sig_cseq_ST_st151_fsm_69, ap_sig_cseq_ST_st152_fsm_70, ap_sig_cseq_ST_st153_fsm_71, ap_sig_cseq_ST_st154_fsm_72, ap_sig_cseq_ST_st155_fsm_73, ap_sig_cseq_ST_st156_fsm_74, ap_sig_cseq_ST_st157_fsm_75, ap_sig_cseq_ST_st158_fsm_76, ap_sig_cseq_ST_st159_fsm_77, ap_sig_cseq_ST_st160_fsm_78, ap_sig_cseq_ST_st161_fsm_79, ap_sig_cseq_ST_st162_fsm_80, ap_sig_cseq_ST_st163_fsm_81, ap_sig_cseq_ST_st164_fsm_82, ap_sig_cseq_ST_st165_fsm_83, ap_sig_cseq_ST_st166_fsm_84, ap_sig_cseq_ST_st167_fsm_85, ap_sig_cseq_ST_st168_fsm_86, ap_sig_cseq_ST_st169_fsm_87, ap_sig_cseq_ST_st170_fsm_88, ap_sig_cseq_ST_st171_fsm_89, ap_sig_cseq_ST_st172_fsm_90, ap_sig_cseq_ST_st173_fsm_91, ap_sig_cseq_ST_st174_fsm_92, ap_sig_cseq_ST_st175_fsm_93, ap_sig_cseq_ST_st197_fsm_115, ap_sig_cseq_ST_st198_fsm_116, ap_sig_cseq_ST_st201_fsm_119, ap_sig_cseq_ST_st202_fsm_120, ap_sig_cseq_ST_st203_fsm_121, ap_sig_cseq_ST_st204_fsm_122, ap_sig_cseq_ST_st205_fsm_123, ap_sig_cseq_ST_st206_fsm_124, ap_sig_cseq_ST_st207_fsm_125, ap_sig_cseq_ST_st208_fsm_126, ap_sig_cseq_ST_st209_fsm_127, ap_sig_cseq_ST_st210_fsm_128, ap_sig_cseq_ST_st211_fsm_129, ap_sig_cseq_ST_st212_fsm_130, ap_sig_cseq_ST_st213_fsm_131, ap_sig_cseq_ST_st214_fsm_132, ap_sig_cseq_ST_st215_fsm_133, ap_sig_cseq_ST_st216_fsm_134, ap_sig_cseq_ST_st217_fsm_135, ap_sig_cseq_ST_st218_fsm_136, ap_sig_cseq_ST_st219_fsm_137, ap_sig_cseq_ST_st220_fsm_138, ap_sig_cseq_ST_st222_fsm_140, ap_sig_cseq_ST_st223_fsm_141, ap_sig_cseq_ST_st224_fsm_142, ap_sig_cseq_ST_st227_fsm_145, ap_sig_cseq_ST_st228_fsm_146, ap_sig_cseq_ST_st269_fsm_187, ap_sig_cseq_ST_st270_fsm_188, ap_sig_cseq_ST_st271_fsm_189, ap_sig_cseq_ST_st272_fsm_190, ap_sig_cseq_ST_st273_fsm_191, ap_sig_cseq_ST_st274_fsm_192, ap_sig_cseq_ST_st275_fsm_193, ap_sig_cseq_ST_st276_fsm_194, ap_sig_cseq_ST_st277_fsm_195, ap_sig_cseq_ST_st278_fsm_196, ap_sig_cseq_ST_st279_fsm_197, ap_sig_cseq_ST_st280_fsm_198, ap_sig_cseq_ST_st281_fsm_199, ap_sig_cseq_ST_st282_fsm_200, ap_sig_cseq_ST_st283_fsm_201, ap_sig_cseq_ST_st284_fsm_202, ap_sig_cseq_ST_st285_fsm_203, ap_sig_cseq_ST_st286_fsm_204, ap_sig_cseq_ST_st287_fsm_205, ap_sig_cseq_ST_st288_fsm_206, ap_sig_cseq_ST_st289_fsm_207, ap_sig_cseq_ST_st290_fsm_208, ap_sig_cseq_ST_st291_fsm_209, ap_sig_cseq_ST_st292_fsm_210, ap_sig_cseq_ST_st293_fsm_211, ap_sig_cseq_ST_st294_fsm_212, ap_sig_cseq_ST_st295_fsm_213)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st225_fsm_143) or (ap_const_logic_1 = ap_sig_cseq_ST_st199_fsm_117) or (ap_const_logic_1 = ap_sig_cseq_ST_st176_fsm_94) or ((ap_const_logic_1 = ap_sig_cseq_ST_st297_fsm_215) and not((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY))) or (ap_const_logic_1 = ap_sig_cseq_ST_st229_fsm_147) or (ap_const_logic_1 = ap_sig_cseq_ST_st296_fsm_214) or (ap_const_logic_1 = ap_sig_cseq_ST_st226_fsm_144) or (ap_const_logic_1 = ap_sig_cseq_ST_st221_fsm_139) or (ap_const_logic_1 = ap_sig_cseq_ST_st147_fsm_65) or (ap_const_logic_1 = ap_sig_cseq_ST_st196_fsm_114) or (ap_const_logic_1 = ap_sig_cseq_ST_st200_fsm_118) or (ap_const_logic_1 = ap_sig_cseq_ST_st268_fsm_186) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (not((ap_const_lv1_0 = tmp_12_reg_1823)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it15)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it1)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it2)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it3)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it4)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it5)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it6)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it7)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it8)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it9)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it10)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it11)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it12)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it13)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it14)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it15)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it1)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it2)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it3)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it4)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it5)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it6)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it7)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it8)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it9)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it10)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it11)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it12)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it13)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it14)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st148_fsm_66) or (ap_const_logic_1 = ap_sig_cseq_ST_st149_fsm_67) or (ap_const_logic_1 = ap_sig_cseq_ST_st150_fsm_68) or (ap_const_logic_1 = ap_sig_cseq_ST_st151_fsm_69) or (ap_const_logic_1 = ap_sig_cseq_ST_st152_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st153_fsm_71) or (ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_72) or (ap_const_logic_1 = ap_sig_cseq_ST_st155_fsm_73) or (ap_const_logic_1 = ap_sig_cseq_ST_st156_fsm_74) or (ap_const_logic_1 = ap_sig_cseq_ST_st157_fsm_75) or (ap_const_logic_1 = ap_sig_cseq_ST_st158_fsm_76) or (ap_const_logic_1 = ap_sig_cseq_ST_st159_fsm_77) or (ap_const_logic_1 = ap_sig_cseq_ST_st160_fsm_78) or (ap_const_logic_1 = ap_sig_cseq_ST_st161_fsm_79) or (ap_const_logic_1 = ap_sig_cseq_ST_st162_fsm_80) or (ap_const_logic_1 = ap_sig_cseq_ST_st163_fsm_81) or (ap_const_logic_1 = ap_sig_cseq_ST_st164_fsm_82) or (ap_const_logic_1 = ap_sig_cseq_ST_st165_fsm_83) or (ap_const_logic_1 = ap_sig_cseq_ST_st166_fsm_84) or (ap_const_logic_1 = ap_sig_cseq_ST_st167_fsm_85) or (ap_const_logic_1 = ap_sig_cseq_ST_st168_fsm_86) or (ap_const_logic_1 = ap_sig_cseq_ST_st169_fsm_87) or (ap_const_logic_1 = ap_sig_cseq_ST_st170_fsm_88) or (ap_const_logic_1 = ap_sig_cseq_ST_st171_fsm_89) or (ap_const_logic_1 = ap_sig_cseq_ST_st172_fsm_90) or (ap_const_logic_1 = ap_sig_cseq_ST_st173_fsm_91) or (ap_const_logic_1 = ap_sig_cseq_ST_st174_fsm_92) or (ap_const_logic_1 = ap_sig_cseq_ST_st175_fsm_93) or (ap_const_logic_1 = ap_sig_cseq_ST_st197_fsm_115) or (ap_const_logic_1 = ap_sig_cseq_ST_st198_fsm_116) or (ap_const_logic_1 = ap_sig_cseq_ST_st201_fsm_119) or (ap_const_logic_1 = ap_sig_cseq_ST_st202_fsm_120) or (ap_const_logic_1 = ap_sig_cseq_ST_st203_fsm_121) or (ap_const_logic_1 = ap_sig_cseq_ST_st204_fsm_122) or (ap_const_logic_1 = ap_sig_cseq_ST_st205_fsm_123) or (ap_const_logic_1 = ap_sig_cseq_ST_st206_fsm_124) or (ap_const_logic_1 = ap_sig_cseq_ST_st207_fsm_125) or (ap_const_logic_1 = ap_sig_cseq_ST_st208_fsm_126) or (ap_const_logic_1 = ap_sig_cseq_ST_st209_fsm_127) or (ap_const_logic_1 = ap_sig_cseq_ST_st210_fsm_128) or (ap_const_logic_1 = ap_sig_cseq_ST_st211_fsm_129) or (ap_const_logic_1 = ap_sig_cseq_ST_st212_fsm_130) or (ap_const_logic_1 = ap_sig_cseq_ST_st213_fsm_131) or (ap_const_logic_1 = ap_sig_cseq_ST_st214_fsm_132) or (ap_const_logic_1 = ap_sig_cseq_ST_st215_fsm_133) or (ap_const_logic_1 = ap_sig_cseq_ST_st216_fsm_134) or (ap_const_logic_1 = ap_sig_cseq_ST_st217_fsm_135) or (ap_const_logic_1 = ap_sig_cseq_ST_st218_fsm_136) or (ap_const_logic_1 = ap_sig_cseq_ST_st219_fsm_137) or (ap_const_logic_1 = ap_sig_cseq_ST_st220_fsm_138) or (ap_const_logic_1 = ap_sig_cseq_ST_st222_fsm_140) or (ap_const_logic_1 = ap_sig_cseq_ST_st223_fsm_141) or (ap_const_logic_1 = ap_sig_cseq_ST_st224_fsm_142) or (ap_const_logic_1 = ap_sig_cseq_ST_st227_fsm_145) or (ap_const_logic_1 = ap_sig_cseq_ST_st228_fsm_146) or (ap_const_logic_1 = ap_sig_cseq_ST_st269_fsm_187) or (ap_const_logic_1 = ap_sig_cseq_ST_st270_fsm_188) or (ap_const_logic_1 = ap_sig_cseq_ST_st271_fsm_189) or (ap_const_logic_1 = ap_sig_cseq_ST_st272_fsm_190) or (ap_const_logic_1 = ap_sig_cseq_ST_st273_fsm_191) or (ap_const_logic_1 = ap_sig_cseq_ST_st274_fsm_192) or (ap_const_logic_1 = ap_sig_cseq_ST_st275_fsm_193) or (ap_const_logic_1 = ap_sig_cseq_ST_st276_fsm_194) or (ap_const_logic_1 = ap_sig_cseq_ST_st277_fsm_195) or (ap_const_logic_1 = ap_sig_cseq_ST_st278_fsm_196) or (ap_const_logic_1 = ap_sig_cseq_ST_st279_fsm_197) or (ap_const_logic_1 = ap_sig_cseq_ST_st280_fsm_198) or (ap_const_logic_1 = ap_sig_cseq_ST_st281_fsm_199) or (ap_const_logic_1 = ap_sig_cseq_ST_st282_fsm_200) or (ap_const_logic_1 = ap_sig_cseq_ST_st283_fsm_201) or (ap_const_logic_1 = ap_sig_cseq_ST_st284_fsm_202) or (ap_const_logic_1 = ap_sig_cseq_ST_st285_fsm_203) or (ap_const_logic_1 = ap_sig_cseq_ST_st286_fsm_204) or (ap_const_logic_1 = ap_sig_cseq_ST_st287_fsm_205) or (ap_const_logic_1 = ap_sig_cseq_ST_st288_fsm_206) or (ap_const_logic_1 = ap_sig_cseq_ST_st289_fsm_207) or (ap_const_logic_1 = ap_sig_cseq_ST_st290_fsm_208) or (ap_const_logic_1 = ap_sig_cseq_ST_st291_fsm_209) or (ap_const_logic_1 = ap_sig_cseq_ST_st292_fsm_210) or (ap_const_logic_1 = ap_sig_cseq_ST_st293_fsm_211) or (ap_const_logic_1 = ap_sig_cseq_ST_st294_fsm_212) or (ap_const_logic_1 = ap_sig_cseq_ST_st295_fsm_213))) then 
            grp_fu_1020_ce <= ap_const_logic_1;
        else 
            grp_fu_1020_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_1020_p0 assign process. --
    grp_fu_1020_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it1, sum_returnA_reg_876, reg_1069, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1188, bramA_load_reg_1853, bramB_load_reg_1863, ap_sig_cseq_ST_st147_fsm_65, ap_sig_cseq_ST_st196_fsm_114, ap_sig_cseq_ST_st200_fsm_118, ap_sig_cseq_ST_st268_fsm_186)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st200_fsm_118)) then 
            grp_fu_1020_p0 <= reg_1069;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st196_fsm_114) or (ap_const_logic_1 = ap_sig_cseq_ST_st268_fsm_186))) then 
            grp_fu_1020_p0 <= reg_1188;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st147_fsm_65)) then 
            grp_fu_1020_p0 <= sum_returnA_reg_876;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_1020_p0 <= bramB_load_reg_1863;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            grp_fu_1020_p0 <= bramA_load_reg_1853;
        else 
            grp_fu_1020_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1020_p1 assign process. --
    grp_fu_1020_p1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it1, reg_1048, reg_1058, ap_sig_cseq_ST_pp2_stg1_fsm_53, tmp_2_reg_1539, bramA_load_1_reg_1858, bramB_load_1_reg_1878, ap_sig_cseq_ST_st147_fsm_65, ap_sig_cseq_ST_st196_fsm_114, ap_sig_cseq_ST_st200_fsm_118, ap_sig_cseq_ST_st268_fsm_186)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st268_fsm_186)) then 
            grp_fu_1020_p1 <= reg_1048;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st196_fsm_114) or (ap_const_logic_1 = ap_sig_cseq_ST_st200_fsm_118))) then 
            grp_fu_1020_p1 <= reg_1058;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st147_fsm_65)) then 
            grp_fu_1020_p1 <= tmp_2_reg_1539;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_1020_p1 <= bramB_load_1_reg_1878;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            grp_fu_1020_p1 <= bramA_load_1_reg_1858;
        else 
            grp_fu_1020_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1025_ce <= ap_const_logic_1;

    -- grp_fu_1025_p0 assign process. --
    grp_fu_1025_p0_assign_proc : process(sum_returnB_reg_888, reg_1165, ap_sig_cseq_ST_st147_fsm_65, ap_sig_cseq_ST_st196_fsm_114)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st196_fsm_114)) then 
            grp_fu_1025_p0 <= reg_1165;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st147_fsm_65)) then 
            grp_fu_1025_p0 <= sum_returnB_reg_888;
        else 
            grp_fu_1025_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1025_p1 assign process. --
    grp_fu_1025_p1_assign_proc : process(reg_1058, tmp_2_reg_1539, ap_sig_cseq_ST_st147_fsm_65, ap_sig_cseq_ST_st196_fsm_114)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st196_fsm_114)) then 
            grp_fu_1025_p1 <= reg_1058;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st147_fsm_65)) then 
            grp_fu_1025_p1 <= tmp_2_reg_1539;
        else 
            grp_fu_1025_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1030_ce <= ap_const_logic_1;
    grp_fu_1030_p0 <= tmp_1_reg_1523;
    grp_fu_1033_ce <= ap_const_logic_1;
    grp_fu_1033_p0 <= ap_const_lv32_0;
    grp_fu_1033_p1 <= reg_1069;
    grp_fu_1038_ce <= ap_const_logic_1;
    grp_fu_1038_p0 <= ap_const_lv32_0;
    grp_fu_1038_p1 <= reg_1165;
    grp_fu_1043_ce <= ap_const_logic_1;
    grp_fu_1043_p0 <= ap_const_lv32_0;

    -- grp_fu_1043_p1 assign process. --
    grp_fu_1043_p1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it16, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1085, reg_1095)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it16)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                grp_fu_1043_p1 <= reg_1095;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52)) then 
                grp_fu_1043_p1 <= reg_1085;
            else 
                grp_fu_1043_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_1043_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1341_ce <= ap_const_logic_1;
    grp_fu_1341_p0 <= column_index_fu_1330_p2;
    grp_fu_1341_p1 <= number_of_days;
    grp_fu_1407_ce <= ap_const_logic_1;
    grp_fu_1407_p0 <= i1_phi_fu_868_p4;
    grp_fu_1407_p1 <= ap_const_lv31_6(4 - 1 downto 0);
    grp_fu_972_ce <= ap_const_logic_1;

    -- grp_fu_972_opcode assign process. --
    grp_fu_972_opcode_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_reg_ppstg_tmp_12_reg_1823_pp2_it24, ap_reg_ppiten_pp3_it0, exitcond_reg_1968, ap_sig_cseq_ST_pp3_stg2_fsm_58, ap_sig_cseq_ST_pp3_stg4_fsm_60, ap_sig_cseq_ST_pp3_stg6_fsm_62, ap_sig_cseq_ST_pp3_stg3_fsm_59, ap_sig_cseq_ST_pp3_stg5_fsm_61, ap_reg_ppstg_tmp_12_reg_1823_pp2_it25, ap_sig_cseq_ST_pp3_stg7_fsm_63, ap_sig_cseq_ST_pp3_stg8_fsm_64, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st187_fsm_105, ap_sig_cseq_ST_st191_fsm_109, ap_sig_cseq_ST_st226_fsm_144, ap_sig_cseq_ST_st230_fsm_148)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100) or (ap_const_logic_1 = ap_sig_cseq_ST_st187_fsm_105) or (ap_const_logic_1 = ap_sig_cseq_ST_st191_fsm_109))) then 
            grp_fu_972_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61)) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st226_fsm_144) or (ap_const_logic_1 = ap_sig_cseq_ST_st230_fsm_148) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it24))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it25))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_62)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg7_fsm_63)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg8_fsm_64)))) then 
            grp_fu_972_opcode <= ap_const_lv2_0;
        else 
            grp_fu_972_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_972_p0 assign process. --
    grp_fu_972_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, sum_weight_returnSquareA_reg_900, sum_weight_returnA_returnB_reg_948, reg_1069, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1085, reg_1095, reg_1101, ap_reg_ppiten_pp3_it0, reg_1107, ap_sig_cseq_ST_pp3_stg2_fsm_58, ap_sig_cseq_ST_pp3_stg4_fsm_60, ap_sig_cseq_ST_pp3_stg6_fsm_62, ap_sig_cseq_ST_pp3_stg3_fsm_59, ap_sig_cseq_ST_pp3_stg5_fsm_61, weight_rom_load_1_reg_1529, ap_sig_cseq_ST_pp3_stg7_fsm_63, ap_sig_cseq_ST_pp3_stg8_fsm_64, sum_returnA_phi_fu_880_p4, sum_returnB_phi_fu_892_p4, sum_weight_returnSquareA_phi_fu_904_p4, sum_weight_returnA_phi_fu_916_p4, sum_weight_returnSquareB_phi_fu_928_p4, sum_weight_returnB_phi_fu_940_p4, sum_weight_returnA_returnB_phi_fu_952_p4, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st187_fsm_105, ap_sig_cseq_ST_st191_fsm_109, ap_sig_cseq_ST_st226_fsm_144, ap_sig_cseq_ST_st230_fsm_148)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st230_fsm_148)) then 
            grp_fu_972_p0 <= reg_1095;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st226_fsm_144)) then 
            grp_fu_972_p0 <= reg_1085;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st191_fsm_109)) then 
            grp_fu_972_p0 <= reg_1069;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st187_fsm_105)) then 
            grp_fu_972_p0 <= sum_weight_returnSquareA_reg_900;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100)) then 
            grp_fu_972_p0 <= sum_weight_returnA_returnB_reg_948;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg8_fsm_64))) then 
            grp_fu_972_p0 <= sum_weight_returnA_returnB_phi_fu_952_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg7_fsm_63))) then 
            grp_fu_972_p0 <= sum_weight_returnB_phi_fu_940_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_62))) then 
            grp_fu_972_p0 <= sum_weight_returnSquareB_phi_fu_928_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61))) then 
            grp_fu_972_p0 <= sum_weight_returnA_phi_fu_916_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60))) then 
            grp_fu_972_p0 <= sum_weight_returnSquareA_phi_fu_904_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59))) then 
            grp_fu_972_p0 <= sum_returnB_phi_fu_892_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58))) then 
            grp_fu_972_p0 <= sum_returnA_phi_fu_880_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_972_p0 <= reg_1107;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it25))) then 
            grp_fu_972_p0 <= reg_1101;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_972_p0 <= weight_rom_load_1_reg_1529;
        else 
            grp_fu_972_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_972_p1 assign process. --
    grp_fu_972_p1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, reg_1048, reg_1058, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1101, ap_reg_ppiten_pp3_it0, reg_1107, ap_sig_cseq_ST_pp3_stg2_fsm_58, reg_1120, ap_sig_cseq_ST_pp3_stg4_fsm_60, reg_1127, ap_sig_cseq_ST_pp3_stg6_fsm_62, reg_1133, reg_1139, ap_sig_cseq_ST_pp3_stg3_fsm_59, reg_1145, reg_1151, ap_sig_cseq_ST_pp3_stg5_fsm_61, reg_1158, lnReturnA_reg_1925, lnReturnB_reg_1934, ap_sig_cseq_ST_pp3_stg7_fsm_63, ap_sig_cseq_ST_pp3_stg8_fsm_64, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st187_fsm_105, ap_sig_cseq_ST_st191_fsm_109, ap_sig_cseq_ST_st226_fsm_144, ap_sig_cseq_ST_st230_fsm_148)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st191_fsm_109)) then 
            grp_fu_972_p1 <= reg_1145;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st187_fsm_105) or (ap_const_logic_1 = ap_sig_cseq_ST_st226_fsm_144))) then 
            grp_fu_972_p1 <= reg_1048;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100) or (ap_const_logic_1 = ap_sig_cseq_ST_st230_fsm_148))) then 
            grp_fu_972_p1 <= reg_1133;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg8_fsm_64))) then 
            grp_fu_972_p1 <= reg_1158;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg7_fsm_63))) then 
            grp_fu_972_p1 <= reg_1127;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_62))) then 
            grp_fu_972_p1 <= reg_1151;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61))) then 
            grp_fu_972_p1 <= reg_1120;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60))) then 
            grp_fu_972_p1 <= reg_1139;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59))) then 
            grp_fu_972_p1 <= reg_1107;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58))) then 
            grp_fu_972_p1 <= reg_1101;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_972_p1 <= lnReturnB_reg_1934;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it25))) then 
            grp_fu_972_p1 <= lnReturnA_reg_1925;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_972_p1 <= reg_1058;
        else 
            grp_fu_972_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_976_ce <= ap_const_logic_1;

    -- grp_fu_976_opcode assign process. --
    grp_fu_976_opcode_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it27, ap_reg_ppiten_pp2_it28, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_reg_ppstg_tmp_12_reg_1823_pp2_it27, ap_sig_cseq_ST_st187_fsm_105, ap_sig_cseq_ST_st226_fsm_144)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st187_fsm_105)) then 
            grp_fu_976_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st226_fsm_144) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it27) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it27))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it28) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_12_reg_1823_pp2_it27))))) then 
            grp_fu_976_opcode <= ap_const_lv2_0;
        else 
            grp_fu_976_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_976_p0 assign process. --
    grp_fu_976_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it27, ap_reg_ppiten_pp2_it28, sum_weight_returnSquareB_reg_924, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1120, reg_1127, reg_1179, ap_sig_cseq_ST_st187_fsm_105, ap_sig_cseq_ST_st226_fsm_144)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st226_fsm_144)) then 
            grp_fu_976_p0 <= reg_1179;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st187_fsm_105)) then 
            grp_fu_976_p0 <= sum_weight_returnSquareB_reg_924;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it28))) then 
            grp_fu_976_p0 <= reg_1127;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it27) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_976_p0 <= reg_1120;
        else 
            grp_fu_976_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_976_p1 assign process. --
    grp_fu_976_p1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it27, ap_reg_ppiten_pp2_it28, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1114, tmp_29_reg_1948, ap_sig_cseq_ST_st187_fsm_105, ap_sig_cseq_ST_st226_fsm_144)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it28))) then 
            grp_fu_976_p1 <= tmp_29_reg_1948;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st187_fsm_105) or (ap_const_logic_1 = ap_sig_cseq_ST_st226_fsm_144) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it27) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            grp_fu_976_p1 <= reg_1114;
        else 
            grp_fu_976_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_980_ce <= ap_const_logic_1;

    -- grp_fu_980_p0 assign process. --
    grp_fu_980_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it30, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1139, reg_1151)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it30)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                grp_fu_980_p0 <= reg_1151;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52)) then 
                grp_fu_980_p0 <= reg_1139;
            else 
                grp_fu_980_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_980_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_980_p1 assign process. --
    grp_fu_980_p1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it30, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1145, tmp_22_reg_1953)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it30)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)) then 
                grp_fu_980_p1 <= reg_1145;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52)) then 
                grp_fu_980_p1 <= tmp_22_reg_1953;
            else 
                grp_fu_980_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_980_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_984_ce <= ap_const_logic_1;
    grp_fu_984_p0 <= reg_1158;
    grp_fu_984_p1 <= tmp_32_reg_1958;
    grp_fu_996_ce <= ap_const_logic_1;

    -- grp_fu_996_p0 assign process. --
    grp_fu_996_p0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, reg_1048, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1085, lnReturnA_reg_1925, lnReturnB_reg_1934, volatilityA_reg_2057, tmp_i_reg_774, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st177_fsm_95, ap_sig_cseq_ST_st221_fsm_139, ap_sig_cseq_ST_st263_fsm_181)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st263_fsm_181)) then 
            grp_fu_996_p0 <= volatilityA_reg_2057;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100)) then 
            grp_fu_996_p0 <= reg_1048;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st177_fsm_95) or (ap_const_logic_1 = ap_sig_cseq_ST_st221_fsm_139))) then 
            grp_fu_996_p0 <= reg_1085;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_996_p0 <= lnReturnB_reg_1934;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it25))) then 
            grp_fu_996_p0 <= lnReturnA_reg_1925;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_996_p0 <= tmp_i_reg_774;
        else 
            grp_fu_996_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_996_p1 assign process. --
    grp_fu_996_p1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it25, sum_weight_returnA_reg_912, ap_sig_cseq_ST_pp2_stg1_fsm_53, reg_1085, lnReturnA_reg_1925, lnReturnB_reg_1934, volatilityB_reg_2062, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st182_fsm_100, ap_sig_cseq_ST_st177_fsm_95, ap_sig_cseq_ST_st221_fsm_139, ap_sig_cseq_ST_st263_fsm_181)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st263_fsm_181)) then 
            grp_fu_996_p1 <= volatilityB_reg_2062;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st221_fsm_139)) then 
            grp_fu_996_p1 <= reg_1085;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_100)) then 
            grp_fu_996_p1 <= sum_weight_returnA_reg_912;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st177_fsm_95)) then 
            grp_fu_996_p1 <= ap_const_lv32_40000000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it25) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            grp_fu_996_p1 <= lnReturnB_reg_1934;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it25))) then 
            grp_fu_996_p1 <= lnReturnA_reg_1925;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_996_p1 <= ap_const_lv32_3F70A3D7;
        else 
            grp_fu_996_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i1_cast_fu_1381_p1 <= std_logic_vector(resize(unsigned(i1_phi_fu_868_p4),32));
    i1_i_cast_fu_1238_p1 <= std_logic_vector(resize(unsigned(i1_i_reg_798),32));

    -- i1_phi_fu_868_p4 assign process. --
    i1_phi_fu_868_p4_assign_proc : process(i1_reg_864, ap_sig_cseq_ST_pp2_stg0_fsm_52, ap_reg_ppiten_pp2_it1, tmp_12_reg_1823, i_reg_1827)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_const_lv1_0 = tmp_12_reg_1823)))) then 
            i1_phi_fu_868_p4 <= i_reg_1827;
        else 
            i1_phi_fu_868_p4 <= i1_reg_864;
        end if; 
    end process;


    -- i2_phi_fu_964_p4 assign process. --
    i2_phi_fu_964_p4_assign_proc : process(i2_reg_960, ap_reg_ppiten_pp3_it1, exitcond_reg_1968, ap_sig_cseq_ST_pp3_stg0_fsm_56, i_1_reg_1972)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_1968) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_56))) then 
            i2_phi_fu_964_p4 <= i_1_reg_1972;
        else 
            i2_phi_fu_964_p4 <= i2_reg_960;
        end if; 
    end process;

    i_1_fu_1430_p2 <= std_logic_vector(unsigned(i2_phi_fu_964_p4) + unsigned(ap_const_lv3_1));
    i_2_fu_1232_p2 <= std_logic_vector(unsigned(i_i_reg_786) + unsigned(ap_const_lv8_1));
    i_3_fu_1252_p2 <= std_logic_vector(unsigned(i1_i_reg_798) + unsigned(ap_const_lv31_1));
    i_fu_1390_p2 <= std_logic_vector(unsigned(i1_phi_fu_868_p4) + unsigned(ap_const_lv31_1));

    -- indvar8_phi_fu_856_p4 assign process. --
    indvar8_phi_fu_856_p4_assign_proc : process(indvar8_reg_852, ap_sig_cseq_ST_pp1_stg0_fsm_48, exitcond3_reg_1814, ap_reg_ppiten_pp1_it1, indvar_next9_reg_1818)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_48) and (ap_const_lv1_0 = exitcond3_reg_1814) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            indvar8_phi_fu_856_p4 <= indvar_next9_reg_1818;
        else 
            indvar8_phi_fu_856_p4 <= indvar8_reg_852;
        end if; 
    end process;

    indvar_next9_fu_1370_p2 <= std_logic_vector(unsigned(indvar8_phi_fu_856_p4) + unsigned(ap_const_lv30_1));
    indvar_next_fu_1319_p2 <= std_logic_vector(unsigned(indvar_phi_fu_835_p4) + unsigned(ap_const_lv30_1));

    -- indvar_phi_fu_835_p4 assign process. --
    indvar_phi_fu_835_p4_assign_proc : process(indvar_reg_831, ap_sig_cseq_ST_pp0_stg0_fsm_34, exitcond2_reg_1790, ap_reg_ppiten_pp0_it1, indvar_next_reg_1794)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_34) and (exitcond2_reg_1790 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_835_p4 <= indvar_next_reg_1794;
        else 
            indvar_phi_fu_835_p4 <= indvar_reg_831;
        end if; 
    end process;

    next_mul_fu_1275_p1 <= number_of_days;
    next_mul_fu_1275_p2 <= std_logic_vector(unsigned(phi_mul_reg_820) + unsigned(next_mul_fu_1275_p1));
        out_correlation4_sum_cast_fu_1454_p1 <= std_logic_vector(resize(signed(out_correlation4_sum_fu_1449_p2),64));

    out_correlation4_sum_fu_1449_p2 <= std_logic_vector(unsigned(tmp_59_cast_reg_1491) + unsigned(tmp_53_cast_fu_1445_p1));
    p_add_i32_shr_fu_1271_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_1268_p1),32));
    row_index_1_fu_1289_p2 <= std_logic_vector(unsigned(row_index_reg_809) + unsigned(ap_const_lv31_1));
    row_index_cast_fu_1280_p1 <= std_logic_vector(resize(unsigned(row_index_reg_809),32));

    -- sum_returnA_phi_fu_880_p4 assign process. --
    sum_returnA_phi_fu_880_p4_assign_proc : process(sum_returnA_reg_876, ap_reg_ppiten_pp3_it1, ap_sig_cseq_ST_pp3_stg2_fsm_58, ap_reg_ppstg_exitcond_reg_1968_pp3_it1, sum_returnA_1_reg_2022)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_58) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
            sum_returnA_phi_fu_880_p4 <= sum_returnA_1_reg_2022;
        else 
            sum_returnA_phi_fu_880_p4 <= sum_returnA_reg_876;
        end if; 
    end process;


    -- sum_returnB_phi_fu_892_p4 assign process. --
    sum_returnB_phi_fu_892_p4_assign_proc : process(sum_returnB_reg_888, ap_reg_ppiten_pp3_it1, ap_sig_cseq_ST_pp3_stg3_fsm_59, ap_reg_ppstg_exitcond_reg_1968_pp3_it1, sum_returnB_1_reg_2027)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_59) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
            sum_returnB_phi_fu_892_p4 <= sum_returnB_1_reg_2027;
        else 
            sum_returnB_phi_fu_892_p4 <= sum_returnB_reg_888;
        end if; 
    end process;


    -- sum_weight_returnA_phi_fu_916_p4 assign process. --
    sum_weight_returnA_phi_fu_916_p4_assign_proc : process(sum_weight_returnA_reg_912, ap_reg_ppiten_pp3_it1, ap_sig_cseq_ST_pp3_stg5_fsm_61, ap_reg_ppstg_exitcond_reg_1968_pp3_it1, sum_weight_returnA_1_reg_2037)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg5_fsm_61) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
            sum_weight_returnA_phi_fu_916_p4 <= sum_weight_returnA_1_reg_2037;
        else 
            sum_weight_returnA_phi_fu_916_p4 <= sum_weight_returnA_reg_912;
        end if; 
    end process;

    sum_weight_returnA_returnB_phi_fu_952_p4 <= sum_weight_returnA_returnB_reg_948;

    -- sum_weight_returnB_phi_fu_940_p4 assign process. --
    sum_weight_returnB_phi_fu_940_p4_assign_proc : process(sum_weight_returnB_reg_936, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_reg_1968_pp3_it1, sum_weight_returnB_1_reg_2047, ap_sig_cseq_ST_pp3_stg7_fsm_63)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg7_fsm_63))) then 
            sum_weight_returnB_phi_fu_940_p4 <= sum_weight_returnB_1_reg_2047;
        else 
            sum_weight_returnB_phi_fu_940_p4 <= sum_weight_returnB_reg_936;
        end if; 
    end process;


    -- sum_weight_returnSquareA_phi_fu_904_p4 assign process. --
    sum_weight_returnSquareA_phi_fu_904_p4_assign_proc : process(sum_weight_returnSquareA_reg_900, ap_reg_ppiten_pp3_it1, ap_sig_cseq_ST_pp3_stg4_fsm_60, ap_reg_ppstg_exitcond_reg_1968_pp3_it1, sum_weight_returnSquareA_1_reg_2032)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_60) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
            sum_weight_returnSquareA_phi_fu_904_p4 <= sum_weight_returnSquareA_1_reg_2032;
        else 
            sum_weight_returnSquareA_phi_fu_904_p4 <= sum_weight_returnSquareA_reg_900;
        end if; 
    end process;


    -- sum_weight_returnSquareB_phi_fu_928_p4 assign process. --
    sum_weight_returnSquareB_phi_fu_928_p4_assign_proc : process(sum_weight_returnSquareB_reg_924, ap_reg_ppiten_pp3_it1, ap_sig_cseq_ST_pp3_stg6_fsm_62, ap_reg_ppstg_exitcond_reg_1968_pp3_it1, sum_weight_returnSquareB_1_reg_2042)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg6_fsm_62) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1968_pp3_it1))) then 
            sum_weight_returnSquareB_phi_fu_928_p4 <= sum_weight_returnSquareB_1_reg_2042;
        else 
            sum_weight_returnSquareB_phi_fu_928_p4 <= sum_weight_returnSquareB_reg_924;
        end if; 
    end process;

    tmp_10_fu_1376_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar8_reg_852_pp1_it1),64));
        tmp_11_fu_1295_p1 <= std_logic_vector(resize(signed(phi_mul_reg_820),33));

    tmp_12_fu_1385_p2 <= "1" when (signed(i1_cast_fu_1381_p1) < signed(tmp_1_reg_1523)) else "0";
    tmp_13_fu_1396_p1 <= std_logic_vector(resize(unsigned(i1_phi_fu_868_p4),64));
    tmp_14_fu_1402_p1 <= std_logic_vector(resize(unsigned(i_fu_1390_p2),64));
    tmp_18_fu_1413_p1 <= std_logic_vector(resize(unsigned(grp_fu_1407_p2),64));
    tmp_1_fu_1258_p0 <= number_of_days;
    tmp_1_fu_1258_p2 <= std_logic_vector(signed(tmp_1_fu_1258_p0) + signed(ap_const_lv32_FFFFFFFF));
    tmp_3_fu_1284_p2 <= "1" when (signed(row_index_cast_fu_1280_p1) < signed(tmp_reg_1534)) else "0";
    tmp_4_fu_1193_p4 <= out_correlation(31 downto 2);
        tmp_53_cast_fu_1445_p1 <= std_logic_vector(resize(signed(counter),33));

    tmp_53_fu_1299_p2 <= std_logic_vector(unsigned(tmp_60_cast_reg_1496) + unsigned(tmp_11_fu_1295_p1));
    tmp_54_fu_1464_p2 <= std_logic_vector(unsigned(counter) + unsigned(ap_const_lv32_1));
    tmp_55_fu_1436_p1 <= std_logic_vector(resize(unsigned(i2_phi_fu_964_p4),64));
    tmp_56_i_fu_1227_p1 <= std_logic_vector(resize(unsigned(i_i_reg_786),64));
    tmp_57_i_fu_1242_p1 <= number_of_days;
    tmp_57_i_fu_1242_p2 <= "1" when (signed(i1_i_cast_fu_1238_p1) < signed(tmp_57_i_fu_1242_p1)) else "0";
    tmp_58_i_fu_1247_p1 <= std_logic_vector(resize(unsigned(i1_i_reg_798),64));
    tmp_59_cast_fu_1203_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_1193_p4),33));
        tmp_59_fu_1304_p1 <= std_logic_vector(resize(signed(tmp_53_fu_1299_p2),64));

    tmp_5_fu_1207_p4 <= in_indices(31 downto 2);
    tmp_60_cast_fu_1217_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_1207_p4),33));
        tmp_60_fu_1346_p1 <= std_logic_vector(resize(signed(grp_fu_1341_p2),33));

    tmp_61_fu_1350_p2 <= std_logic_vector(unsigned(tmp_60_cast_reg_1496) + unsigned(tmp_60_fu_1346_p1));
        tmp_62_fu_1355_p1 <= std_logic_vector(resize(signed(tmp_61_fu_1350_p2),64));

    tmp_6_fu_1268_p0 <= number_of_days;
    tmp_6_fu_1268_p1 <= tmp_6_fu_1268_p0(30 - 1 downto 0);
    tmp_7_fu_1325_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_831_pp0_it1),64));
    tmp_8_fu_1336_p2 <= "1" when (signed(column_index_fu_1330_p2) < signed(number_of_indices)) else "0";
    tmp_fu_1263_p2 <= std_logic_vector(unsigned(number_of_indices) + unsigned(ap_const_lv32_FFFFFFFF));

    -- weight_rom_address0 assign process. --
    weight_rom_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, tmp_14_reg_1837, tmp_56_i_fu_1227_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            weight_rom_address0 <= tmp_56_i_fu_1227_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53))) then 
            weight_rom_address0 <= tmp_14_reg_1837(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            weight_rom_address0 <= ap_const_lv8_0;
        else 
            weight_rom_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- weight_rom_address1 assign process. --
    weight_rom_address1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st19_fsm_18, tmp_58_i_fu_1247_p1, ap_sig_cseq_ST_st128_fsm_54)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_address1 <= ap_const_lv8_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st128_fsm_54))) then 
            weight_rom_address1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            weight_rom_address1 <= tmp_58_i_fu_1247_p1(8 - 1 downto 0);
        else 
            weight_rom_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- weight_rom_ce0 assign process. --
    weight_rom_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_pp2_stg1_fsm_53, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg1_fsm_53)))) then 
            weight_rom_ce0 <= ap_const_logic_1;
        else 
            weight_rom_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_ce1 assign process. --
    weight_rom_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st128_fsm_54)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st128_fsm_54))) then 
            weight_rom_ce1 <= ap_const_logic_1;
        else 
            weight_rom_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_d0 assign process. --
    weight_rom_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, reg_1048, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            weight_rom_d0 <= reg_1048;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_d0 <= ap_const_lv32_3F800000;
        else 
            weight_rom_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_rom_d1 assign process. --
    weight_rom_d1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, reg_1069, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            weight_rom_d1 <= reg_1069;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_d1 <= ap_const_lv32_3F800000;
        else 
            weight_rom_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_rom_we0 assign process. --
    weight_rom_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            weight_rom_we0 <= ap_const_logic_1;
        else 
            weight_rom_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_we1 assign process. --
    weight_rom_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            weight_rom_we1 <= ap_const_logic_1;
        else 
            weight_rom_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
