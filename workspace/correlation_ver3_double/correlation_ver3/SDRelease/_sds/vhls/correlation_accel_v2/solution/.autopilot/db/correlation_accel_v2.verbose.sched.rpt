

================================================================
== Vivado HLS Report for 'correlation_accel_v2'
================================================================
* Date:           Wed Nov  2 16:50:09 2016

* Version:        2014.4 (Build 1071461 on Tue Nov 18 16:42:57 PM 2014)
* Project:        correlation_accel_v2
* Solution:       solution
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |   8.50|      9.65|        1.06|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+
        |                                     |       Latency      | Iteration|  Initiation Interval  |      Trip      |          |
        |              Loop Name              |  min |     max     |  Latency |  achieved |   target  |      Count     | Pipelined|
        +-------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+
        |- INIT_WEIGHT_ROM                    |  1250|         1250|         5|          -|          -|             250|    no    |
        |- COMP_SUM_OF_WEIGHT                 |     0|  17179869160|         8|          -|          -| 0 ~ 2147483645 |    no    |
        |- ACCUMULATION_LOOP_FIRST_INDEX      |     ?|            ?|        43|          1|          1|               ?|    yes   |
        |- LAST_ACCUM_LOOP_FIRST_INDEX        |    33|           33|         9|          5|          5|               6|    yes   |
        |- Loop 5                             |     ?|            ?|         ?|          -|          -| 0 ~ 2147483646 |    no    |
        | + ACCUMULATION_LOOP_FLOATING_INDEX  |     ?|            ?|        43|          1|          1|               ?|    yes   |
        +-------------------------------------+------+-------------+----------+-----------+-----------+----------------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 43
  * Pipeline-1: initiation interval (II) = 5, depth = 9
  * Pipeline-2: initiation interval (II) = 1, depth = 43


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 288
* Pipeline: 3
  Pipeline-0: II = 1, D = 43, States = { 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 }
  Pipeline-1: II = 5, D = 9, States = { 60 61 62 63 64 65 66 67 68 }
  Pipeline-2: II = 1, D = 43, States = { 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond_i)
	7  / (exitcond_i)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	2  / true
7 --> 
	8  / (tmp_78_i)
	15  / (!tmp_78_i)
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	7  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	60  / (tmp_6)
	18  / (!tmp_6)
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	17  / true
60 --> 
	69  / (exitcond2)
	61  / (!exitcond2)
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	60  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	122  / true
122 --> 
	123  / true
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	126  / (tmp_29)
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	171  / (tmp_34)
	129  / (!tmp_34)
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	138  / true
138 --> 
	139  / true
139 --> 
	140  / true
140 --> 
	141  / true
141 --> 
	142  / true
142 --> 
	143  / true
143 --> 
	144  / true
144 --> 
	145  / true
145 --> 
	146  / true
146 --> 
	147  / true
147 --> 
	148  / true
148 --> 
	149  / true
149 --> 
	150  / true
150 --> 
	151  / true
151 --> 
	152  / true
152 --> 
	153  / true
153 --> 
	154  / true
154 --> 
	155  / true
155 --> 
	156  / true
156 --> 
	157  / true
157 --> 
	158  / true
158 --> 
	159  / true
159 --> 
	160  / true
160 --> 
	161  / true
161 --> 
	162  / true
162 --> 
	163  / true
163 --> 
	164  / true
164 --> 
	165  / true
165 --> 
	166  / true
166 --> 
	167  / true
167 --> 
	168  / true
168 --> 
	169  / true
169 --> 
	170  / true
170 --> 
	128  / true
171 --> 
	172  / true
172 --> 
	173  / true
173 --> 
	174  / true
174 --> 
	175  / true
175 --> 
	176  / true
176 --> 
	177  / true
177 --> 
	178  / true
178 --> 
	179  / true
179 --> 
	180  / true
180 --> 
	181  / true
181 --> 
	182  / true
182 --> 
	183  / true
183 --> 
	184  / true
184 --> 
	185  / true
185 --> 
	186  / true
186 --> 
	187  / true
187 --> 
	188  / true
188 --> 
	189  / true
189 --> 
	190  / true
190 --> 
	191  / true
191 --> 
	192  / true
192 --> 
	193  / true
193 --> 
	194  / true
194 --> 
	195  / true
195 --> 
	196  / true
196 --> 
	197  / true
197 --> 
	198  / true
198 --> 
	199  / true
199 --> 
	200  / true
200 --> 
	201  / true
201 --> 
	202  / true
202 --> 
	203  / true
203 --> 
	204  / true
204 --> 
	205  / true
205 --> 
	206  / true
206 --> 
	207  / true
207 --> 
	208  / true
208 --> 
	209  / true
209 --> 
	210  / true
210 --> 
	211  / true
211 --> 
	212  / true
212 --> 
	213  / true
213 --> 
	214  / true
214 --> 
	215  / true
215 --> 
	216  / true
216 --> 
	217  / true
217 --> 
	218  / true
218 --> 
	219  / true
219 --> 
	220  / true
220 --> 
	221  / true
221 --> 
	222  / true
222 --> 
	223  / true
223 --> 
	224  / true
224 --> 
	225  / true
225 --> 
	226  / true
226 --> 
	227  / true
227 --> 
	228  / true
228 --> 
	229  / true
229 --> 
	230  / true
230 --> 
	231  / true
231 --> 
	232  / true
232 --> 
	233  / true
233 --> 
	234  / true
234 --> 
	235  / true
235 --> 
	236  / true
236 --> 
	237  / true
237 --> 
	238  / true
238 --> 
	239  / true
239 --> 
	240  / true
240 --> 
	241  / true
241 --> 
	242  / true
242 --> 
	243  / true
243 --> 
	244  / true
244 --> 
	245  / true
245 --> 
	246  / true
246 --> 
	247  / true
247 --> 
	248  / true
248 --> 
	249  / true
249 --> 
	250  / true
250 --> 
	251  / true
251 --> 
	252  / true
252 --> 
	253  / true
253 --> 
	254  / true
254 --> 
	255  / true
255 --> 
	256  / true
256 --> 
	257  / true
257 --> 
	258  / true
258 --> 
	259  / true
259 --> 
	260  / true
260 --> 
	261  / true
261 --> 
	262  / true
262 --> 
	263  / true
263 --> 
	264  / true
264 --> 
	265  / true
265 --> 
	266  / true
266 --> 
	267  / true
267 --> 
	268  / true
268 --> 
	269  / true
269 --> 
	270  / true
270 --> 
	271  / true
271 --> 
	272  / true
272 --> 
	273  / true
273 --> 
	274  / true
274 --> 
	275  / true
275 --> 
	276  / true
276 --> 
	277  / true
277 --> 
	278  / true
278 --> 
	279  / true
279 --> 
	280  / true
280 --> 
	281  / true
281 --> 
	282  / true
282 --> 
	283  / true
283 --> 
	284  / true
284 --> 
	285  / true
285 --> 
	286  / true
286 --> 
	287  / true
287 --> 
	288  / true
288 --> 
	125  / true
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: number_of_indices_read [1/1] 0.00ns
:0  %number_of_indices_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %number_of_indices)

ST_1: number_of_days_read [1/1] 0.00ns
:1  %number_of_days_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %number_of_days)

ST_1: stg_291 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i32 %number_of_days), !map !7

ST_1: stg_292 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(i32 %number_of_indices), !map !13

ST_1: stg_293 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap(i32* %in_indices_data_V), !map !17

ST_1: stg_294 [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap(i4* %in_indices_keep_V), !map !23

ST_1: stg_295 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecBitsMap(i4* %in_indices_strb_V), !map !27

ST_1: stg_296 [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecBitsMap(i1* %in_indices_user_V), !map !31

ST_1: stg_297 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecBitsMap(i1* %in_indices_last_V), !map !35

ST_1: stg_298 [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecBitsMap(i1* %in_indices_id_V), !map !39

ST_1: stg_299 [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecBitsMap(i1* %in_indices_dest_V), !map !43

ST_1: stg_300 [1/1] 0.00ns
:11  call void (...)* @_ssdm_op_SpecBitsMap(i32* %out_correlation_data_V), !map !47

ST_1: stg_301 [1/1] 0.00ns
:12  call void (...)* @_ssdm_op_SpecBitsMap(i4* %out_correlation_keep_V), !map !53

ST_1: stg_302 [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecBitsMap(i4* %out_correlation_strb_V), !map !57

ST_1: stg_303 [1/1] 0.00ns
:14  call void (...)* @_ssdm_op_SpecBitsMap(i1* %out_correlation_user_V), !map !61

ST_1: stg_304 [1/1] 0.00ns
:15  call void (...)* @_ssdm_op_SpecBitsMap(i1* %out_correlation_last_V), !map !65

ST_1: stg_305 [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap(i1* %out_correlation_id_V), !map !69

ST_1: stg_306 [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecBitsMap(i1* %out_correlation_dest_V), !map !73

ST_1: stg_307 [1/1] 0.00ns
:18  call void (...)* @_ssdm_op_SpecTopModule([21 x i8]* @str) nounwind

ST_1: tmp1_keep_V [1/1] 0.00ns
:19  %tmp1_keep_V = alloca i4, align 1

ST_1: tmp1_strb_V [1/1] 0.00ns
:20  %tmp1_strb_V = alloca i4, align 1

ST_1: tmp1_user_V [1/1] 0.00ns
:21  %tmp1_user_V = alloca i1, align 1

ST_1: tmp1_last_V [1/1] 0.00ns
:22  %tmp1_last_V = alloca i1, align 1

ST_1: tmp1_id_V [1/1] 0.00ns
:23  %tmp1_id_V = alloca i1, align 1

ST_1: tmp1_dest_V [1/1] 0.00ns
:24  %tmp1_dest_V = alloca i1, align 1

ST_1: acc_return [1/1] 0.00ns
:25  %acc_return = alloca [6 x float], align 16

ST_1: acc_weight_returnSquare [1/1] 0.00ns
:26  %acc_weight_returnSquare = alloca [6 x float], align 16

ST_1: acc_weight_return [1/1] 0.00ns
:27  %acc_weight_return = alloca [6 x float], align 16

ST_1: acc_weight_returnA_returnB [1/1] 0.00ns
:28  %acc_weight_returnA_returnB = alloca [6 x float], align 16

ST_1: stg_318 [1/1] 0.00ns
:29  call void (...)* @_ssdm_op_SpecLatency(i32 1, i32 65535, [1 x i8]* @p_str) nounwind

ST_1: stg_319 [1/1] 0.00ns
:30  call void (...)* @_ssdm_op_SpecInterface(i32* %out_correlation_data_V, i4* %out_correlation_keep_V, i4* %out_correlation_strb_V, i1* %out_correlation_user_V, i1* %out_correlation_last_V, i1* %out_correlation_id_V, i1* %out_correlation_dest_V, [5 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str)

ST_1: stg_320 [1/1] 0.00ns
:31  call void (...)* @_ssdm_op_SpecInterface(i32* %in_indices_data_V, i4* %in_indices_keep_V, i4* %in_indices_strb_V, i1* %in_indices_user_V, i1* %in_indices_last_V, i1* %in_indices_id_V, i1* %in_indices_dest_V, [5 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str)

ST_1: stg_321 [1/1] 0.00ns
:32  call void (...)* @_ssdm_op_SpecInterface(i32 0, [11 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind

ST_1: stg_322 [1/1] 2.39ns
:33  store float 1.000000e+00, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_1: stg_323 [1/1] 2.39ns
:34  store float 1.000000e+00, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 1), align 4

ST_1: stg_324 [1/1] 1.57ns
:35  br label %1


 <State 2>: 5.70ns
ST_2: tmp_i [1/1] 0.00ns
:0  %tmp_i = phi float [ 1.000000e+00, %0 ], [ %tmp_i_3, %2 ]

ST_2: i_i [1/1] 0.00ns
:1  %i_i = phi i8 [ 2, %0 ], [ %i_3, %2 ]

ST_2: exitcond_i [1/1] 2.00ns
:2  %exitcond_i = icmp eq i8 %i_i, -4

ST_2: empty [1/1] 0.00ns
:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 250, i64 250, i64 250)

ST_2: stg_329 [1/1] 1.57ns
:4  br i1 %exitcond_i, label %.preheader.i, label %2

ST_2: tmp_i_3 [4/4] 5.70ns
:1  %tmp_i_3 = fmul float %tmp_i, 0x3FEE147AE0000000


 <State 3>: 5.70ns
ST_3: tmp_i_3 [3/4] 5.70ns
:1  %tmp_i_3 = fmul float %tmp_i, 0x3FEE147AE0000000


 <State 4>: 5.70ns
ST_4: tmp_i_3 [2/4] 5.70ns
:1  %tmp_i_3 = fmul float %tmp_i, 0x3FEE147AE0000000


 <State 5>: 5.70ns
ST_5: tmp_i_3 [1/4] 5.70ns
:1  %tmp_i_3 = fmul float %tmp_i, 0x3FEE147AE0000000


 <State 6>: 2.39ns
ST_6: stg_334 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([16 x i8]* @p_str11) nounwind

ST_6: tmp_79_i [1/1] 0.00ns
:2  %tmp_79_i = zext i8 %i_i to i64

ST_6: weight_rom_addr_2 [1/1] 0.00ns
:3  %weight_rom_addr_2 = getelementptr [252 x float]* @weight_rom, i64 0, i64 %tmp_79_i

ST_6: stg_337 [1/1] 2.39ns
:4  store float %tmp_i_3, float* %weight_rom_addr_2, align 4

ST_6: i_3 [1/1] 1.72ns
:5  %i_3 = add i8 %i_i, 1

ST_6: stg_339 [1/1] 0.00ns
:6  br label %1


 <State 7>: 2.52ns
ST_7: i1_i [1/1] 0.00ns
.preheader.i:0  %i1_i = phi i31 [ %i_4, %3 ], [ 2, %1 ]

ST_7: i1_i_cast [1/1] 0.00ns
.preheader.i:1  %i1_i_cast = zext i31 %i1_i to i32

ST_7: tmp_78_i [1/1] 2.52ns
.preheader.i:2  %tmp_78_i = icmp slt i32 %i1_i_cast, %number_of_days_read

ST_7: empty_4 [1/1] 0.00ns
.preheader.i:3  %empty_4 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 2147483645, i64 0)

ST_7: stg_344 [1/1] 0.00ns
.preheader.i:4  br i1 %tmp_78_i, label %3, label %weight_rom_init.exit

ST_7: tmp_80_i [1/1] 0.00ns
:1  %tmp_80_i = zext i31 %i1_i to i64

ST_7: weight_rom_addr_3 [1/1] 0.00ns
:2  %weight_rom_addr_3 = getelementptr [252 x float]* @weight_rom, i64 0, i64 %tmp_80_i

ST_7: weight_rom_load [2/2] 2.39ns
:3  %weight_rom_load = load float* %weight_rom_addr_3, align 4

ST_7: weight_rom_load_1 [2/2] 2.39ns
:4  %weight_rom_load_1 = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_7: i_4 [1/1] 2.44ns
:7  %i_4 = add i31 %i1_i, 1

ST_7: acc_return_addr [1/1] 0.00ns
weight_rom_init.exit:1  %acc_return_addr = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 0

ST_7: stg_351 [1/1] 2.39ns
weight_rom_init.exit:2  store float 0.000000e+00, float* %acc_return_addr, align 16

ST_7: acc_weight_returnSquare_addr [1/1] 0.00ns
weight_rom_init.exit:3  %acc_weight_returnSquare_addr = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 0

ST_7: stg_353 [1/1] 2.39ns
weight_rom_init.exit:4  store float 0.000000e+00, float* %acc_weight_returnSquare_addr, align 16

ST_7: acc_weight_return_addr [1/1] 0.00ns
weight_rom_init.exit:5  %acc_weight_return_addr = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 0

ST_7: stg_355 [1/1] 2.39ns
weight_rom_init.exit:6  store float 0.000000e+00, float* %acc_weight_return_addr, align 16

ST_7: acc_return_addr_3 [1/1] 0.00ns
weight_rom_init.exit:7  %acc_return_addr_3 = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 1

ST_7: stg_357 [1/1] 2.39ns
weight_rom_init.exit:8  store float 0.000000e+00, float* %acc_return_addr_3, align 4

ST_7: acc_weight_returnSquare_addr_3 [1/1] 0.00ns
weight_rom_init.exit:9  %acc_weight_returnSquare_addr_3 = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 1

ST_7: stg_359 [1/1] 2.39ns
weight_rom_init.exit:10  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_3, align 4

ST_7: acc_weight_return_addr_3 [1/1] 0.00ns
weight_rom_init.exit:11  %acc_weight_return_addr_3 = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 1

ST_7: stg_361 [1/1] 2.39ns
weight_rom_init.exit:12  store float 0.000000e+00, float* %acc_weight_return_addr_3, align 4


 <State 8>: 2.39ns
ST_8: weight_rom_load [1/2] 2.39ns
:3  %weight_rom_load = load float* %weight_rom_addr_3, align 4

ST_8: weight_rom_load_1 [1/2] 2.39ns
:4  %weight_rom_load_1 = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16


 <State 9>: 7.26ns
ST_9: tmp_81_i [5/5] 7.26ns
:5  %tmp_81_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 10>: 7.26ns
ST_10: tmp_81_i [4/5] 7.26ns
:5  %tmp_81_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 11>: 7.26ns
ST_11: tmp_81_i [3/5] 7.26ns
:5  %tmp_81_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 12>: 7.26ns
ST_12: tmp_81_i [2/5] 7.26ns
:5  %tmp_81_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 13>: 7.26ns
ST_13: tmp_81_i [1/5] 7.26ns
:5  %tmp_81_i = fadd float %weight_rom_load_1, %weight_rom_load


 <State 14>: 2.39ns
ST_14: stg_369 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([19 x i8]* @p_str12) nounwind

ST_14: stg_370 [1/1] 2.39ns
:6  store float %tmp_81_i, float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_14: stg_371 [1/1] 0.00ns
:8  br label %.preheader.i


 <State 15>: 2.39ns
ST_15: sum_weight [2/2] 2.39ns
weight_rom_init.exit:0  %sum_weight = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_15: acc_return_addr_4 [1/1] 0.00ns
weight_rom_init.exit:13  %acc_return_addr_4 = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 2

ST_15: stg_374 [1/1] 2.39ns
weight_rom_init.exit:14  store float 0.000000e+00, float* %acc_return_addr_4, align 8

ST_15: acc_weight_returnSquare_addr_4 [1/1] 0.00ns
weight_rom_init.exit:15  %acc_weight_returnSquare_addr_4 = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 2

ST_15: stg_376 [1/1] 2.39ns
weight_rom_init.exit:16  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_4, align 8

ST_15: acc_weight_return_addr_4 [1/1] 0.00ns
weight_rom_init.exit:17  %acc_weight_return_addr_4 = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 2

ST_15: stg_378 [1/1] 2.39ns
weight_rom_init.exit:18  store float 0.000000e+00, float* %acc_weight_return_addr_4, align 8

ST_15: acc_return_addr_6 [1/1] 0.00ns
weight_rom_init.exit:19  %acc_return_addr_6 = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 3

ST_15: stg_380 [1/1] 2.39ns
weight_rom_init.exit:20  store float 0.000000e+00, float* %acc_return_addr_6, align 4

ST_15: acc_weight_returnSquare_addr_6 [1/1] 0.00ns
weight_rom_init.exit:21  %acc_weight_returnSquare_addr_6 = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 3

ST_15: stg_382 [1/1] 2.39ns
weight_rom_init.exit:22  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_6, align 4

ST_15: acc_weight_return_addr_6 [1/1] 0.00ns
weight_rom_init.exit:23  %acc_weight_return_addr_6 = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 3

ST_15: stg_384 [1/1] 2.39ns
weight_rom_init.exit:24  store float 0.000000e+00, float* %acc_weight_return_addr_6, align 4


 <State 16>: 2.44ns
ST_16: sum_weight [1/2] 2.39ns
weight_rom_init.exit:0  %sum_weight = load float* getelementptr inbounds ([252 x float]* @weight_rom, i64 0, i64 0), align 16

ST_16: acc_return_addr_7 [1/1] 0.00ns
weight_rom_init.exit:25  %acc_return_addr_7 = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 4

ST_16: stg_387 [1/1] 2.39ns
weight_rom_init.exit:26  store float 0.000000e+00, float* %acc_return_addr_7, align 16

ST_16: acc_weight_returnSquare_addr_7 [1/1] 0.00ns
weight_rom_init.exit:27  %acc_weight_returnSquare_addr_7 = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 4

ST_16: stg_389 [1/1] 2.39ns
weight_rom_init.exit:28  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_7, align 16

ST_16: acc_weight_return_addr_7 [1/1] 0.00ns
weight_rom_init.exit:29  %acc_weight_return_addr_7 = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 4

ST_16: stg_391 [1/1] 2.39ns
weight_rom_init.exit:30  store float 0.000000e+00, float* %acc_weight_return_addr_7, align 16

ST_16: acc_return_addr_8 [1/1] 0.00ns
weight_rom_init.exit:31  %acc_return_addr_8 = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 5

ST_16: stg_393 [1/1] 2.39ns
weight_rom_init.exit:32  store float 0.000000e+00, float* %acc_return_addr_8, align 4

ST_16: acc_weight_returnSquare_addr_8 [1/1] 0.00ns
weight_rom_init.exit:33  %acc_weight_returnSquare_addr_8 = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 5

ST_16: stg_395 [1/1] 2.39ns
weight_rom_init.exit:34  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_8, align 4

ST_16: acc_weight_return_addr_8 [1/1] 0.00ns
weight_rom_init.exit:35  %acc_weight_return_addr_8 = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 5

ST_16: stg_397 [1/1] 2.39ns
weight_rom_init.exit:36  store float 0.000000e+00, float* %acc_weight_return_addr_8, align 4

ST_16: empty_5 [1/1] 0.00ns
weight_rom_init.exit:37  %empty_5 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %in_indices_data_V, i4* %in_indices_keep_V, i4* %in_indices_strb_V, i1* %in_indices_user_V, i1* %in_indices_last_V, i1* %in_indices_id_V, i1* %in_indices_dest_V)

ST_16: in_indices_data_V_val [1/1] 0.00ns
weight_rom_init.exit:38  %in_indices_data_V_val = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_5, 0

ST_16: tmp1_keep_V_1 [1/1] 0.00ns
weight_rom_init.exit:39  %tmp1_keep_V_1 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_5, 1

ST_16: tmp1_strb_V_1 [1/1] 0.00ns
weight_rom_init.exit:40  %tmp1_strb_V_1 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_5, 2

ST_16: tmp1_user_V_1 [1/1] 0.00ns
weight_rom_init.exit:41  %tmp1_user_V_1 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_5, 3

ST_16: tmp1_last_V_1 [1/1] 0.00ns
weight_rom_init.exit:42  %tmp1_last_V_1 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_5, 4

ST_16: tmp1_id_V_1 [1/1] 0.00ns
weight_rom_init.exit:43  %tmp1_id_V_1 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_5, 5

ST_16: tmp1_dest_V_1 [1/1] 0.00ns
weight_rom_init.exit:44  %tmp1_dest_V_1 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_5, 6

ST_16: tmp [1/1] 0.00ns
weight_rom_init.exit:45  %tmp = bitcast i32 %in_indices_data_V_val to float

ST_16: stg_407 [1/1] 1.57ns
weight_rom_init.exit:46  store volatile i4 %tmp1_keep_V_1, i4* %tmp1_keep_V, align 4

ST_16: stg_408 [1/1] 1.57ns
weight_rom_init.exit:47  store volatile i4 %tmp1_strb_V_1, i4* %tmp1_strb_V, align 1

ST_16: stg_409 [1/1] 1.57ns
weight_rom_init.exit:48  store volatile i1 %tmp1_user_V_1, i1* %tmp1_user_V, align 2

ST_16: stg_410 [1/1] 1.57ns
weight_rom_init.exit:49  store volatile i1 %tmp1_last_V_1, i1* %tmp1_last_V, align 1

ST_16: stg_411 [1/1] 1.57ns
weight_rom_init.exit:50  store volatile i1 %tmp1_id_V_1, i1* %tmp1_id_V, align 4

ST_16: stg_412 [1/1] 1.57ns
weight_rom_init.exit:51  store volatile i1 %tmp1_dest_V_1, i1* %tmp1_dest_V, align 1

ST_16: tmp_1 [1/1] 2.44ns
weight_rom_init.exit:52  %tmp_1 = add nsw i32 %number_of_days_read, -1

ST_16: stg_414 [1/1] 1.57ns
weight_rom_init.exit:53  br label %4


 <State 17>: 4.62ns
ST_17: tmp_4 [1/1] 0.00ns
:0  %tmp_4 = phi float [ %tmp, %weight_rom_init.exit ], [ %tmp_4_tmp_5, %5 ]

ST_17: tmp_5 [1/1] 0.00ns
:1  %tmp_5 = phi float [ undef, %weight_rom_init.exit ], [ %tmp_16, %5 ]

ST_17: i1 [1/1] 0.00ns
:2  %i1 = phi i32 [ 1, %weight_rom_init.exit ], [ %i_1, %5 ]

ST_17: tmp_6 [1/1] 2.52ns
:3  %tmp_6 = icmp sgt i32 %i1, %tmp_1

ST_17: stg_419 [1/1] 1.57ns
:4  br i1 %tmp_6, label %.preheader148, label %5

ST_17: tmp_32 [1/1] 0.00ns
:0  %tmp_32 = trunc i32 %i1 to i31

ST_17: tmp_7 [1/1] 2.52ns
:4  %tmp_7 = icmp eq i32 %i1, 1

ST_17: empty_6 [1/1] 0.00ns
:5  %empty_6 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %in_indices_data_V, i4* %in_indices_keep_V, i4* %in_indices_strb_V, i1* %in_indices_user_V, i1* %in_indices_last_V, i1* %in_indices_id_V, i1* %in_indices_dest_V)

ST_17: in_indices_data_V_val7 [1/1] 0.00ns
:6  %in_indices_data_V_val7 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_6, 0

ST_17: in_indices_keep_V_val8 [1/1] 0.00ns
:7  %in_indices_keep_V_val8 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_6, 1

ST_17: in_indices_strb_V_val9 [1/1] 0.00ns
:8  %in_indices_strb_V_val9 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_6, 2

ST_17: in_indices_user_V_val [1/1] 0.00ns
:9  %in_indices_user_V_val = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_6, 3

ST_17: in_indices_last_V_val [1/1] 0.00ns
:10  %in_indices_last_V_val = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_6, 4

ST_17: in_indices_id_V_val [1/1] 0.00ns
:11  %in_indices_id_V_val = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_6, 5

ST_17: in_indices_dest_V_val [1/1] 0.00ns
:12  %in_indices_dest_V_val = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_6, 6

ST_17: stg_430 [1/1] 1.57ns
:13  store volatile i4 %in_indices_keep_V_val8, i4* %tmp1_keep_V, align 4

ST_17: stg_431 [1/1] 1.57ns
:14  store volatile i4 %in_indices_strb_V_val9, i4* %tmp1_strb_V, align 1

ST_17: stg_432 [1/1] 1.57ns
:15  store volatile i1 %in_indices_user_V_val, i1* %tmp1_user_V, align 2

ST_17: stg_433 [1/1] 1.57ns
:16  store volatile i1 %in_indices_last_V_val, i1* %tmp1_last_V, align 1

ST_17: stg_434 [1/1] 1.57ns
:17  store volatile i1 %in_indices_id_V_val, i1* %tmp1_id_V, align 4

ST_17: stg_435 [1/1] 1.57ns
:18  store volatile i1 %in_indices_dest_V_val, i1* %tmp1_dest_V, align 1

ST_17: tmp_4_tmp_5 [1/1] 1.37ns
:19  %tmp_4_tmp_5 = select i1 %tmp_7, float %tmp_4, float %tmp_5

ST_17: tmp_16 [1/1] 0.00ns
:20  %tmp_16 = bitcast i32 %in_indices_data_V_val7 to float

ST_17: tmp_19 [1/1] 0.00ns
:23  %tmp_19 = zext i32 %i1 to i64

ST_17: weight_rom_addr [1/1] 0.00ns
:24  %weight_rom_addr = getelementptr inbounds [252 x float]* @weight_rom, i64 0, i64 %tmp_19

ST_17: weight [2/2] 2.39ns
:25  %weight = load float* %weight_rom_addr, align 4

ST_17: channel [36/36] 4.62ns
:26  %channel = urem i32 %i1, 6

ST_17: i_1 [1/1] 2.44ns
:48  %i_1 = add nsw i32 %i1, 1


 <State 18>: 6.08ns
ST_18: tmp_18 [16/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_18: weight [1/2] 2.39ns
:25  %weight = load float* %weight_rom_addr, align 4

ST_18: channel [35/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 19>: 6.08ns
ST_19: tmp_18 [15/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_19: channel [34/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 20>: 6.08ns
ST_20: tmp_18 [14/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_20: channel [33/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 21>: 6.08ns
ST_21: tmp_18 [13/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_21: channel [32/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 22>: 6.08ns
ST_22: tmp_18 [12/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_22: channel [31/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 23>: 6.08ns
ST_23: tmp_18 [11/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_23: channel [30/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 24>: 6.08ns
ST_24: tmp_18 [10/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_24: channel [29/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 25>: 6.08ns
ST_25: tmp_18 [9/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_25: channel [28/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 26>: 6.08ns
ST_26: tmp_18 [8/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_26: channel [27/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 27>: 6.08ns
ST_27: tmp_18 [7/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_27: channel [26/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 28>: 6.08ns
ST_28: tmp_18 [6/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_28: channel [25/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 29>: 6.08ns
ST_29: tmp_18 [5/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_29: channel [24/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 30>: 6.08ns
ST_30: tmp_18 [4/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_30: channel [23/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 31>: 6.08ns
ST_31: tmp_18 [3/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_31: channel [22/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 32>: 6.08ns
ST_32: tmp_18 [2/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_32: channel [21/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 33>: 6.08ns
ST_33: tmp_18 [1/16] 6.08ns
:21  %tmp_18 = fdiv float %tmp_4_tmp_5, %tmp_16

ST_33: channel [20/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 34>: 7.09ns
ST_34: lnReturn [13/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_34: channel [19/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 35>: 7.09ns
ST_35: lnReturn [12/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_35: channel [18/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 36>: 7.09ns
ST_36: lnReturn [11/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_36: channel [17/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 37>: 7.09ns
ST_37: lnReturn [10/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_37: channel [16/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 38>: 7.09ns
ST_38: lnReturn [9/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_38: channel [15/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 39>: 7.09ns
ST_39: lnReturn [8/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_39: channel [14/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 40>: 7.09ns
ST_40: lnReturn [7/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_40: channel [13/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 41>: 7.09ns
ST_41: lnReturn [6/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_41: channel [12/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 42>: 7.09ns
ST_42: lnReturn [5/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_42: channel [11/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 43>: 7.09ns
ST_43: lnReturn [4/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_43: channel [10/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 44>: 7.09ns
ST_44: lnReturn [3/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_44: channel [9/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 45>: 7.09ns
ST_45: lnReturn [2/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_45: channel [8/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 46>: 7.09ns
ST_46: lnReturn [1/13] 7.09ns
:22  %lnReturn = call float @llvm.log.f32(float %tmp_18)

ST_46: channel [7/36] 4.62ns
:26  %channel = urem i32 %i1, 6


 <State 47>: 5.70ns
ST_47: channel [6/36] 4.62ns
:26  %channel = urem i32 %i1, 6

ST_47: tmp_22 [4/4] 5.70ns
:32  %tmp_22 = fmul float %lnReturn, %lnReturn

ST_47: tmp_27 [1/1] 2.44ns
:43  %tmp_27 = add i31 %tmp_32, -1

ST_47: tmp_28 [1/1] 0.00ns
:44  %tmp_28 = zext i31 %tmp_27 to i64

ST_47: lnReturnA_addr [1/1] 0.00ns
:45  %lnReturnA_addr = getelementptr inbounds [252 x float]* @lnReturnA, i64 0, i64 %tmp_28

ST_47: stg_507 [1/1] 2.39ns
:46  store float %lnReturn, float* %lnReturnA_addr, align 4


 <State 48>: 5.70ns
ST_48: channel [5/36] 4.62ns
:26  %channel = urem i32 %i1, 6

ST_48: tmp_22 [3/4] 5.70ns
:32  %tmp_22 = fmul float %lnReturn, %lnReturn


 <State 49>: 5.70ns
ST_49: channel [4/36] 4.62ns
:26  %channel = urem i32 %i1, 6

ST_49: tmp_22 [2/4] 5.70ns
:32  %tmp_22 = fmul float %lnReturn, %lnReturn

ST_49: tmp_25 [4/4] 5.70ns
:38  %tmp_25 = fmul float %lnReturn, %weight


 <State 50>: 5.70ns
ST_50: channel [3/36] 4.62ns
:26  %channel = urem i32 %i1, 6

ST_50: tmp_22 [1/4] 5.70ns
:32  %tmp_22 = fmul float %lnReturn, %lnReturn

ST_50: tmp_25 [3/4] 5.70ns
:38  %tmp_25 = fmul float %lnReturn, %weight


 <State 51>: 5.70ns
ST_51: channel [2/36] 4.62ns
:26  %channel = urem i32 %i1, 6

ST_51: tmp_23 [4/4] 5.70ns
:33  %tmp_23 = fmul float %tmp_22, %weight

ST_51: tmp_25 [2/4] 5.70ns
:38  %tmp_25 = fmul float %lnReturn, %weight


 <State 52>: 7.01ns
ST_52: channel [1/36] 4.62ns
:26  %channel = urem i32 %i1, 6

ST_52: tmp_20 [1/1] 0.00ns
:27  %tmp_20 = zext i32 %channel to i64

ST_52: acc_return_addr_2 [1/1] 0.00ns
:28  %acc_return_addr_2 = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 %tmp_20

ST_52: acc_return_load_1 [2/2] 2.39ns
:29  %acc_return_load_1 = load float* %acc_return_addr_2, align 4

ST_52: tmp_23 [3/4] 5.70ns
:33  %tmp_23 = fmul float %tmp_22, %weight

ST_52: acc_weight_returnSquare_addr_2 [1/1] 0.00ns
:34  %acc_weight_returnSquare_addr_2 = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 %tmp_20

ST_52: tmp_25 [1/4] 5.70ns
:38  %tmp_25 = fmul float %lnReturn, %weight

ST_52: acc_weight_return_addr_2 [1/1] 0.00ns
:39  %acc_weight_return_addr_2 = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 %tmp_20

ST_52: acc_weight_return_load_1 [2/2] 2.39ns
:40  %acc_weight_return_load_1 = load float* %acc_weight_return_addr_2, align 4


 <State 53>: 9.65ns
ST_53: acc_return_load_1 [1/2] 2.39ns
:29  %acc_return_load_1 = load float* %acc_return_addr_2, align 4

ST_53: tmp_21 [5/5] 7.26ns
:30  %tmp_21 = fadd float %acc_return_load_1, %lnReturn

ST_53: tmp_23 [2/4] 5.70ns
:33  %tmp_23 = fmul float %tmp_22, %weight

ST_53: acc_weight_return_load_1 [1/2] 2.39ns
:40  %acc_weight_return_load_1 = load float* %acc_weight_return_addr_2, align 4

ST_53: tmp_26 [5/5] 7.26ns
:41  %tmp_26 = fadd float %acc_weight_return_load_1, %tmp_25


 <State 54>: 7.26ns
ST_54: tmp_21 [4/5] 7.26ns
:30  %tmp_21 = fadd float %acc_return_load_1, %lnReturn

ST_54: tmp_23 [1/4] 5.70ns
:33  %tmp_23 = fmul float %tmp_22, %weight

ST_54: acc_weight_returnSquare_load_1 [2/2] 2.39ns
:35  %acc_weight_returnSquare_load_1 = load float* %acc_weight_returnSquare_addr_2, align 4

ST_54: tmp_26 [4/5] 7.26ns
:41  %tmp_26 = fadd float %acc_weight_return_load_1, %tmp_25


 <State 55>: 9.65ns
ST_55: tmp_21 [3/5] 7.26ns
:30  %tmp_21 = fadd float %acc_return_load_1, %lnReturn

ST_55: acc_weight_returnSquare_load_1 [1/2] 2.39ns
:35  %acc_weight_returnSquare_load_1 = load float* %acc_weight_returnSquare_addr_2, align 4

ST_55: tmp_24 [5/5] 7.26ns
:36  %tmp_24 = fadd float %acc_weight_returnSquare_load_1, %tmp_23

ST_55: tmp_26 [3/5] 7.26ns
:41  %tmp_26 = fadd float %acc_weight_return_load_1, %tmp_25


 <State 56>: 7.26ns
ST_56: tmp_21 [2/5] 7.26ns
:30  %tmp_21 = fadd float %acc_return_load_1, %lnReturn

ST_56: tmp_24 [4/5] 7.26ns
:36  %tmp_24 = fadd float %acc_weight_returnSquare_load_1, %tmp_23

ST_56: tmp_26 [2/5] 7.26ns
:41  %tmp_26 = fadd float %acc_weight_return_load_1, %tmp_25


 <State 57>: 9.65ns
ST_57: tmp_21 [1/5] 7.26ns
:30  %tmp_21 = fadd float %acc_return_load_1, %lnReturn

ST_57: stg_545 [1/1] 2.39ns
:31  store float %tmp_21, float* %acc_return_addr_2, align 4

ST_57: tmp_24 [3/5] 7.26ns
:36  %tmp_24 = fadd float %acc_weight_returnSquare_load_1, %tmp_23

ST_57: tmp_26 [1/5] 7.26ns
:41  %tmp_26 = fadd float %acc_weight_return_load_1, %tmp_25

ST_57: stg_548 [1/1] 2.39ns
:42  store float %tmp_26, float* %acc_weight_return_addr_2, align 4


 <State 58>: 7.26ns
ST_58: tmp_24 [2/5] 7.26ns
:36  %tmp_24 = fadd float %acc_weight_returnSquare_load_1, %tmp_23


 <State 59>: 9.65ns
ST_59: stg_550 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([30 x i8]* @p_str5) nounwind

ST_59: tmp_2 [1/1] 0.00ns
:2  %tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([30 x i8]* @p_str5)

ST_59: stg_552 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_59: tmp_24 [1/5] 7.26ns
:36  %tmp_24 = fadd float %acc_weight_returnSquare_load_1, %tmp_23

ST_59: stg_554 [1/1] 2.39ns
:37  store float %tmp_24, float* %acc_weight_returnSquare_addr_2, align 4

ST_59: empty_7 [1/1] 0.00ns
:47  %empty_7 = call i32 (...)* @_ssdm_op_SpecRegionEnd([30 x i8]* @p_str5, i32 %tmp_2)

ST_59: stg_556 [1/1] 0.00ns
:49  br label %4


 <State 60>: 2.39ns
ST_60: sum_returnA [1/1] 0.00ns
.preheader148:0  %sum_returnA = phi float [ %sum_returnA_1, %6 ], [ 0.000000e+00, %4 ]

ST_60: sum_weight_returnSquareA [1/1] 0.00ns
.preheader148:1  %sum_weight_returnSquareA = phi float [ %sum_weight_returnSquareA_1, %6 ], [ 0.000000e+00, %4 ]

ST_60: sum_weight_returnA [1/1] 0.00ns
.preheader148:2  %sum_weight_returnA = phi float [ %sum_weight_returnA_1, %6 ], [ 0.000000e+00, %4 ]

ST_60: i2 [1/1] 0.00ns
.preheader148:3  %i2 = phi i3 [ %i, %6 ], [ 0, %4 ]

ST_60: exitcond2 [1/1] 1.62ns
.preheader148:4  %exitcond2 = icmp eq i3 %i2, -2

ST_60: i [1/1] 0.80ns
.preheader148:5  %i = add i3 %i2, 1

ST_60: stg_563 [1/1] 0.00ns
.preheader148:6  br i1 %exitcond2, label %.preheader147.preheader, label %6

ST_60: tmp_15 [1/1] 0.00ns
:4  %tmp_15 = zext i3 %i2 to i64

ST_60: acc_return_addr_1 [1/1] 0.00ns
:5  %acc_return_addr_1 = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 %tmp_15

ST_60: acc_return_load [2/2] 2.39ns
:6  %acc_return_load = load float* %acc_return_addr_1, align 4


 <State 61>: 2.39ns
ST_61: acc_return_load [1/2] 2.39ns
:6  %acc_return_load = load float* %acc_return_addr_1, align 4

ST_61: acc_weight_returnSquare_addr_1 [1/1] 0.00ns
:8  %acc_weight_returnSquare_addr_1 = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 %tmp_15

ST_61: acc_weight_returnSquare_load [2/2] 2.39ns
:9  %acc_weight_returnSquare_load = load float* %acc_weight_returnSquare_addr_1, align 4

ST_61: acc_weight_return_addr_1 [1/1] 0.00ns
:11  %acc_weight_return_addr_1 = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 %tmp_15

ST_61: acc_weight_return_load [2/2] 2.39ns
:12  %acc_weight_return_load = load float* %acc_weight_return_addr_1, align 4


 <State 62>: 7.26ns
ST_62: sum_returnA_1 [5/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_return_load

ST_62: acc_weight_returnSquare_load [1/2] 2.39ns
:9  %acc_weight_returnSquare_load = load float* %acc_weight_returnSquare_addr_1, align 4

ST_62: acc_weight_return_load [1/2] 2.39ns
:12  %acc_weight_return_load = load float* %acc_weight_return_addr_1, align 4


 <State 63>: 7.26ns
ST_63: sum_returnA_1 [4/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_return_load

ST_63: sum_weight_returnSquareA_1 [5/5] 7.26ns
:10  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquare_load


 <State 64>: 7.26ns
ST_64: sum_returnA_1 [3/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_return_load

ST_64: sum_weight_returnSquareA_1 [4/5] 7.26ns
:10  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquare_load

ST_64: sum_weight_returnA_1 [5/5] 7.26ns
:13  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_return_load


 <State 65>: 7.26ns
ST_65: sum_returnA_1 [2/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_return_load

ST_65: sum_weight_returnSquareA_1 [3/5] 7.26ns
:10  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquare_load

ST_65: sum_weight_returnA_1 [4/5] 7.26ns
:13  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_return_load


 <State 66>: 7.26ns
ST_66: sum_returnA_1 [1/5] 7.26ns
:7  %sum_returnA_1 = fadd float %sum_returnA, %acc_return_load

ST_66: sum_weight_returnSquareA_1 [2/5] 7.26ns
:10  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquare_load

ST_66: sum_weight_returnA_1 [3/5] 7.26ns
:13  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_return_load


 <State 67>: 7.26ns
ST_67: sum_weight_returnSquareA_1 [1/5] 7.26ns
:10  %sum_weight_returnSquareA_1 = fadd float %sum_weight_returnSquareA, %acc_weight_returnSquare_load

ST_67: sum_weight_returnA_1 [2/5] 7.26ns
:13  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_return_load


 <State 68>: 7.26ns
ST_68: empty_8 [1/1] 0.00ns
:0  %empty_8 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 6, i64 6, i64 6)

ST_68: stg_589 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([28 x i8]* @p_str6) nounwind

ST_68: tmp_14 [1/1] 0.00ns
:2  %tmp_14 = call i32 (...)* @_ssdm_op_SpecRegionBegin([28 x i8]* @p_str6)

ST_68: stg_591 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 5, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_68: sum_weight_returnA_1 [1/5] 7.26ns
:13  %sum_weight_returnA_1 = fadd float %sum_weight_returnA, %acc_weight_return_load

ST_68: empty_9 [1/1] 0.00ns
:14  %empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([28 x i8]* @p_str6, i32 %tmp_14)

ST_68: stg_594 [1/1] 0.00ns
:15  br label %.preheader148


 <State 69>: 6.41ns
ST_69: tmp_17 [1/1] 0.00ns
.preheader147.preheader:0  %tmp_17 = alloca float, align 4

ST_69: tmp_3 [6/6] 6.41ns
.preheader147.preheader:1  %tmp_3 = sitofp i32 %tmp_1 to float

ST_69: stg_597 [1/1] 1.57ns
.preheader147.preheader:16  store float %tmp_5, float* %tmp_17, align 4


 <State 70>: 6.41ns
ST_70: tmp_3 [5/6] 6.41ns
.preheader147.preheader:1  %tmp_3 = sitofp i32 %tmp_1 to float


 <State 71>: 6.41ns
ST_71: tmp_3 [4/6] 6.41ns
.preheader147.preheader:1  %tmp_3 = sitofp i32 %tmp_1 to float


 <State 72>: 6.41ns
ST_72: tmp_3 [3/6] 6.41ns
.preheader147.preheader:1  %tmp_3 = sitofp i32 %tmp_1 to float


 <State 73>: 6.41ns
ST_73: tmp_3 [2/6] 6.41ns
.preheader147.preheader:1  %tmp_3 = sitofp i32 %tmp_1 to float


 <State 74>: 6.41ns
ST_74: tmp_3 [1/6] 6.41ns
.preheader147.preheader:1  %tmp_3 = sitofp i32 %tmp_1 to float


 <State 75>: 6.08ns
ST_75: meanReturnA [16/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 76>: 6.08ns
ST_76: meanReturnA [15/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 77>: 6.08ns
ST_77: meanReturnA [14/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 78>: 6.08ns
ST_78: meanReturnA [13/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 79>: 6.08ns
ST_79: meanReturnA [12/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 80>: 6.08ns
ST_80: meanReturnA [11/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 81>: 6.08ns
ST_81: meanReturnA [10/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 82>: 6.08ns
ST_82: meanReturnA [9/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 83>: 6.08ns
ST_83: meanReturnA [8/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 84>: 6.08ns
ST_84: meanReturnA [7/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 85>: 6.08ns
ST_85: meanReturnA [6/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 86>: 6.08ns
ST_86: meanReturnA [5/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 87>: 6.08ns
ST_87: meanReturnA [4/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 88>: 6.08ns
ST_88: meanReturnA [3/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 89>: 6.08ns
ST_89: meanReturnA [2/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 90>: 6.08ns
ST_90: meanReturnA [1/16] 6.08ns
.preheader147.preheader:2  %meanReturnA = fdiv float %sum_returnA, %tmp_3


 <State 91>: 5.70ns
ST_91: tmp_s [4/4] 5.70ns
.preheader147.preheader:3  %tmp_s = fmul float %meanReturnA, 2.000000e+00


 <State 92>: 5.70ns
ST_92: tmp_s [3/4] 5.70ns
.preheader147.preheader:3  %tmp_s = fmul float %meanReturnA, 2.000000e+00


 <State 93>: 5.70ns
ST_93: tmp_s [2/4] 5.70ns
.preheader147.preheader:3  %tmp_s = fmul float %meanReturnA, 2.000000e+00


 <State 94>: 5.70ns
ST_94: tmp_s [1/4] 5.70ns
.preheader147.preheader:3  %tmp_s = fmul float %meanReturnA, 2.000000e+00


 <State 95>: 5.70ns
ST_95: tmp_8 [4/4] 5.70ns
.preheader147.preheader:4  %tmp_8 = fmul float %tmp_s, %sum_weight_returnA


 <State 96>: 5.70ns
ST_96: tmp_8 [3/4] 5.70ns
.preheader147.preheader:4  %tmp_8 = fmul float %tmp_s, %sum_weight_returnA


 <State 97>: 5.70ns
ST_97: tmp_8 [2/4] 5.70ns
.preheader147.preheader:4  %tmp_8 = fmul float %tmp_s, %sum_weight_returnA


 <State 98>: 5.70ns
ST_98: tmp_8 [1/4] 5.70ns
.preheader147.preheader:4  %tmp_8 = fmul float %tmp_s, %sum_weight_returnA


 <State 99>: 7.26ns
ST_99: tmp_9 [5/5] 7.26ns
.preheader147.preheader:5  %tmp_9 = fsub float %sum_weight_returnSquareA, %tmp_8


 <State 100>: 7.26ns
ST_100: tmp_9 [4/5] 7.26ns
.preheader147.preheader:5  %tmp_9 = fsub float %sum_weight_returnSquareA, %tmp_8


 <State 101>: 7.26ns
ST_101: tmp_9 [3/5] 7.26ns
.preheader147.preheader:5  %tmp_9 = fsub float %sum_weight_returnSquareA, %tmp_8


 <State 102>: 7.26ns
ST_102: tmp_9 [2/5] 7.26ns
.preheader147.preheader:5  %tmp_9 = fsub float %sum_weight_returnSquareA, %tmp_8


 <State 103>: 7.26ns
ST_103: tmp_9 [1/5] 7.26ns
.preheader147.preheader:5  %tmp_9 = fsub float %sum_weight_returnSquareA, %tmp_8


 <State 104>: 6.08ns
ST_104: tmp_10 [16/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 105>: 6.08ns
ST_105: tmp_10 [15/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 106>: 6.08ns
ST_106: tmp_10 [14/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 107>: 6.08ns
ST_107: tmp_10 [13/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 108>: 6.08ns
ST_108: tmp_10 [12/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 109>: 6.08ns
ST_109: tmp_10 [11/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 110>: 6.08ns
ST_110: tmp_10 [10/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 111>: 6.08ns
ST_111: tmp_10 [9/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 112>: 6.08ns
ST_112: tmp_10 [8/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 113>: 6.08ns
ST_113: tmp_10 [7/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 114>: 6.08ns
ST_114: tmp_10 [6/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 115>: 6.08ns
ST_115: tmp_10 [5/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight


 <State 116>: 6.08ns
ST_116: tmp_10 [4/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight

ST_116: tmp_11 [4/4] 5.70ns
.preheader147.preheader:7  %tmp_11 = fmul float %meanReturnA, %meanReturnA


 <State 117>: 6.08ns
ST_117: tmp_10 [3/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight

ST_117: tmp_11 [3/4] 5.70ns
.preheader147.preheader:7  %tmp_11 = fmul float %meanReturnA, %meanReturnA


 <State 118>: 6.08ns
ST_118: tmp_10 [2/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight

ST_118: tmp_11 [2/4] 5.70ns
.preheader147.preheader:7  %tmp_11 = fmul float %meanReturnA, %meanReturnA


 <State 119>: 6.08ns
ST_119: tmp_10 [1/16] 6.08ns
.preheader147.preheader:6  %tmp_10 = fdiv float %tmp_9, %sum_weight

ST_119: tmp_11 [1/4] 5.70ns
.preheader147.preheader:7  %tmp_11 = fmul float %meanReturnA, %meanReturnA


 <State 120>: 7.26ns
ST_120: tmp_12 [5/5] 7.26ns
.preheader147.preheader:8  %tmp_12 = fadd float %tmp_10, %tmp_11


 <State 121>: 7.26ns
ST_121: tmp_12 [4/5] 7.26ns
.preheader147.preheader:8  %tmp_12 = fadd float %tmp_10, %tmp_11


 <State 122>: 7.26ns
ST_122: tmp_12 [3/5] 7.26ns
.preheader147.preheader:8  %tmp_12 = fadd float %tmp_10, %tmp_11


 <State 123>: 7.26ns
ST_123: tmp_12 [2/5] 7.26ns
.preheader147.preheader:8  %tmp_12 = fadd float %tmp_10, %tmp_11


 <State 124>: 7.26ns
ST_124: tmp_12 [1/5] 7.26ns
.preheader147.preheader:8  %tmp_12 = fadd float %tmp_10, %tmp_11

ST_124: tmp_13 [1/1] 2.44ns
.preheader147.preheader:9  %tmp_13 = add nsw i32 %number_of_indices_read, -1

ST_124: acc_weight_returnA_returnB_add [1/1] 0.00ns
.preheader147.preheader:10  %acc_weight_returnA_returnB_add = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 0

ST_124: acc_weight_returnA_returnB_add_1 [1/1] 0.00ns
.preheader147.preheader:11  %acc_weight_returnA_returnB_add_1 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 1

ST_124: acc_weight_returnA_returnB_add_2 [1/1] 0.00ns
.preheader147.preheader:12  %acc_weight_returnA_returnB_add_2 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 2

ST_124: acc_weight_returnA_returnB_add_3 [1/1] 0.00ns
.preheader147.preheader:13  %acc_weight_returnA_returnB_add_3 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 3

ST_124: acc_weight_returnA_returnB_add_4 [1/1] 0.00ns
.preheader147.preheader:14  %acc_weight_returnA_returnB_add_4 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 4

ST_124: acc_weight_returnA_returnB_add_5 [1/1] 0.00ns
.preheader147.preheader:15  %acc_weight_returnA_returnB_add_5 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 5

ST_124: stg_664 [1/1] 1.57ns
.preheader147.preheader:17  br label %.preheader147


 <State 125>: 2.52ns
ST_125: column_index [1/1] 0.00ns
.preheader147:0  %column_index = phi i31 [ %column_index_1, %.preheader.0 ], [ 1, %.preheader147.preheader ]

ST_125: column_index_cast [1/1] 0.00ns
.preheader147:1  %column_index_cast = zext i31 %column_index to i32

ST_125: tmp_29 [1/1] 2.52ns
.preheader147:2  %tmp_29 = icmp slt i32 %column_index_cast, %number_of_indices_read

ST_125: stg_668 [1/1] 0.00ns
.preheader147:3  br i1 %tmp_29, label %7, label %10

ST_125: stg_669 [1/1] 2.39ns
:2  store float 0.000000e+00, float* %acc_return_addr, align 16

ST_125: stg_670 [1/1] 2.39ns
:3  store float 0.000000e+00, float* %acc_weight_returnSquare_addr, align 16

ST_125: stg_671 [1/1] 2.39ns
:4  store float 0.000000e+00, float* %acc_weight_return_addr, align 16

ST_125: stg_672 [1/1] 2.39ns
:5  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add, align 16

ST_125: stg_673 [1/1] 2.39ns
:6  store float 0.000000e+00, float* %acc_return_addr_3, align 4

ST_125: stg_674 [1/1] 2.39ns
:7  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_3, align 4

ST_125: stg_675 [1/1] 2.39ns
:8  store float 0.000000e+00, float* %acc_weight_return_addr_3, align 4

ST_125: stg_676 [1/1] 2.39ns
:9  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_1, align 4

ST_125: stg_677 [1/1] 0.00ns
:0  ret void


 <State 126>: 2.39ns
ST_126: stg_678 [1/1] 2.39ns
:10  store float 0.000000e+00, float* %acc_return_addr_4, align 8

ST_126: stg_679 [1/1] 2.39ns
:11  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_4, align 8

ST_126: stg_680 [1/1] 2.39ns
:12  store float 0.000000e+00, float* %acc_weight_return_addr_4, align 8

ST_126: stg_681 [1/1] 2.39ns
:13  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_2, align 8

ST_126: stg_682 [1/1] 2.39ns
:14  store float 0.000000e+00, float* %acc_return_addr_6, align 4

ST_126: stg_683 [1/1] 2.39ns
:15  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_6, align 4

ST_126: stg_684 [1/1] 2.39ns
:16  store float 0.000000e+00, float* %acc_weight_return_addr_6, align 4

ST_126: stg_685 [1/1] 2.39ns
:17  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_3, align 4


 <State 127>: 2.39ns
ST_127: empty_10 [1/1] 0.00ns
:0  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 2147483646, i64 0)

ST_127: tmp_30 [1/1] 0.00ns
:1  %tmp_30 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str7)

ST_127: stg_688 [1/1] 2.39ns
:18  store float 0.000000e+00, float* %acc_return_addr_7, align 16

ST_127: stg_689 [1/1] 2.39ns
:19  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_7, align 16

ST_127: stg_690 [1/1] 2.39ns
:20  store float 0.000000e+00, float* %acc_weight_return_addr_7, align 16

ST_127: stg_691 [1/1] 2.39ns
:21  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_4, align 16

ST_127: stg_692 [1/1] 2.39ns
:22  store float 0.000000e+00, float* %acc_return_addr_8, align 4

ST_127: stg_693 [1/1] 2.39ns
:23  store float 0.000000e+00, float* %acc_weight_returnSquare_addr_8, align 4

ST_127: stg_694 [1/1] 2.39ns
:24  store float 0.000000e+00, float* %acc_weight_return_addr_8, align 4

ST_127: stg_695 [1/1] 2.39ns
:25  store float 0.000000e+00, float* %acc_weight_returnA_returnB_add_5, align 4

ST_127: empty_11 [1/1] 0.00ns
:26  %empty_11 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %in_indices_data_V, i4* %in_indices_keep_V, i4* %in_indices_strb_V, i1* %in_indices_user_V, i1* %in_indices_last_V, i1* %in_indices_id_V, i1* %in_indices_dest_V)

ST_127: in_indices_data_V_val1 [1/1] 0.00ns
:27  %in_indices_data_V_val1 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_11, 0

ST_127: tmp1_keep_V_2 [1/1] 0.00ns
:28  %tmp1_keep_V_2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_11, 1

ST_127: tmp1_strb_V_2 [1/1] 0.00ns
:29  %tmp1_strb_V_2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_11, 2

ST_127: tmp1_user_V_2 [1/1] 0.00ns
:30  %tmp1_user_V_2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_11, 3

ST_127: tmp1_last_V_2 [1/1] 0.00ns
:31  %tmp1_last_V_2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_11, 4

ST_127: tmp1_id_V_2 [1/1] 0.00ns
:32  %tmp1_id_V_2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_11, 5

ST_127: tmp1_dest_V_2 [1/1] 0.00ns
:33  %tmp1_dest_V_2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_11, 6

ST_127: tmp_31 [1/1] 0.00ns
:34  %tmp_31 = bitcast i32 %in_indices_data_V_val1 to float

ST_127: stg_705 [1/1] 1.57ns
:35  store volatile i4 %tmp1_keep_V_2, i4* %tmp1_keep_V, align 4

ST_127: stg_706 [1/1] 1.57ns
:36  store volatile i4 %tmp1_strb_V_2, i4* %tmp1_strb_V, align 1

ST_127: stg_707 [1/1] 1.57ns
:37  store volatile i1 %tmp1_user_V_2, i1* %tmp1_user_V, align 2

ST_127: stg_708 [1/1] 1.57ns
:38  store volatile i1 %tmp1_last_V_2, i1* %tmp1_last_V, align 1

ST_127: stg_709 [1/1] 1.57ns
:39  store volatile i1 %tmp1_id_V_2, i1* %tmp1_id_V, align 4

ST_127: stg_710 [1/1] 1.57ns
:40  store volatile i1 %tmp1_dest_V_2, i1* %tmp1_dest_V, align 1

ST_127: stg_711 [1/1] 1.57ns
:41  br label %8


 <State 128>: 4.62ns
ST_128: tmp_33 [1/1] 0.00ns
:0  %tmp_33 = phi float [ %tmp_31, %7 ], [ %tmp_34_tmp_s, %9 ]

ST_128: i4 [1/1] 0.00ns
:1  %i4 = phi i32 [ 1, %7 ], [ %i_2, %9 ]

ST_128: tmp_34 [1/1] 2.52ns
:2  %tmp_34 = icmp sgt i32 %i4, %tmp_1

ST_128: stg_715 [1/1] 0.00ns
:3  br i1 %tmp_34, label %.preheader.0, label %9

ST_128: tmp_17_load [1/1] 0.00ns
:0  %tmp_17_load = load float* %tmp_17, align 4

ST_128: tmp_66 [1/1] 0.00ns
:1  %tmp_66 = trunc i32 %i4 to i31

ST_128: tmp_39 [1/1] 2.52ns
:5  %tmp_39 = icmp eq i32 %i4, 1

ST_128: empty_12 [1/1] 0.00ns
:6  %empty_12 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %in_indices_data_V, i4* %in_indices_keep_V, i4* %in_indices_strb_V, i1* %in_indices_user_V, i1* %in_indices_last_V, i1* %in_indices_id_V, i1* %in_indices_dest_V)

ST_128: in_indices_data_V_val2 [1/1] 0.00ns
:7  %in_indices_data_V_val2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_12, 0

ST_128: in_indices_keep_V_val [1/1] 0.00ns
:8  %in_indices_keep_V_val = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_12, 1

ST_128: in_indices_strb_V_val [1/1] 0.00ns
:9  %in_indices_strb_V_val = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_12, 2

ST_128: in_indices_user_V_val2 [1/1] 0.00ns
:10  %in_indices_user_V_val2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_12, 3

ST_128: in_indices_last_V_val2 [1/1] 0.00ns
:11  %in_indices_last_V_val2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_12, 4

ST_128: in_indices_id_V_val2 [1/1] 0.00ns
:12  %in_indices_id_V_val2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_12, 5

ST_128: in_indices_dest_V_val2 [1/1] 0.00ns
:13  %in_indices_dest_V_val2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_12, 6

ST_128: stg_727 [1/1] 1.57ns
:14  store volatile i4 %in_indices_keep_V_val, i4* %tmp1_keep_V, align 4

ST_128: stg_728 [1/1] 1.57ns
:15  store volatile i4 %in_indices_strb_V_val, i4* %tmp1_strb_V, align 1

ST_128: stg_729 [1/1] 1.57ns
:16  store volatile i1 %in_indices_user_V_val2, i1* %tmp1_user_V, align 2

ST_128: stg_730 [1/1] 1.57ns
:17  store volatile i1 %in_indices_last_V_val2, i1* %tmp1_last_V, align 1

ST_128: stg_731 [1/1] 1.57ns
:18  store volatile i1 %in_indices_id_V_val2, i1* %tmp1_id_V, align 4

ST_128: stg_732 [1/1] 1.57ns
:19  store volatile i1 %in_indices_dest_V_val2, i1* %tmp1_dest_V, align 1

ST_128: tmp_34_tmp_s [1/1] 1.37ns
:20  %tmp_34_tmp_s = select i1 %tmp_39, float %tmp_33, float %tmp_17_load

ST_128: tmp_51 [1/1] 0.00ns
:21  %tmp_51 = bitcast i32 %in_indices_data_V_val2 to float

ST_128: tmp_53 [1/1] 0.00ns
:24  %tmp_53 = zext i32 %i4 to i64

ST_128: weight_rom_addr_1 [1/1] 0.00ns
:25  %weight_rom_addr_1 = getelementptr inbounds [252 x float]* @weight_rom, i64 0, i64 %tmp_53

ST_128: weight_1 [2/2] 2.39ns
:26  %weight_1 = load float* %weight_rom_addr_1, align 4

ST_128: channel_1 [36/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_128: i_2 [1/1] 2.44ns
:55  %i_2 = add nsw i32 %i4, 1

ST_128: stg_740 [1/1] 1.57ns
:56  store float %tmp_51, float* %tmp_17, align 4


 <State 129>: 6.08ns
ST_129: tmp_52 [16/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_129: weight_1 [1/2] 2.39ns
:26  %weight_1 = load float* %weight_rom_addr_1, align 4

ST_129: channel_1 [35/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 130>: 6.08ns
ST_130: tmp_52 [15/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_130: channel_1 [34/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 131>: 6.08ns
ST_131: tmp_52 [14/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_131: channel_1 [33/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 132>: 6.08ns
ST_132: tmp_52 [13/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_132: channel_1 [32/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 133>: 6.08ns
ST_133: tmp_52 [12/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_133: channel_1 [31/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 134>: 6.08ns
ST_134: tmp_52 [11/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_134: channel_1 [30/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 135>: 6.08ns
ST_135: tmp_52 [10/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_135: channel_1 [29/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 136>: 6.08ns
ST_136: tmp_52 [9/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_136: channel_1 [28/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 137>: 6.08ns
ST_137: tmp_52 [8/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_137: channel_1 [27/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 138>: 6.08ns
ST_138: tmp_52 [7/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_138: channel_1 [26/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 139>: 6.08ns
ST_139: tmp_52 [6/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_139: channel_1 [25/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 140>: 6.08ns
ST_140: tmp_52 [5/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_140: channel_1 [24/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 141>: 6.08ns
ST_141: tmp_52 [4/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_141: channel_1 [23/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 142>: 6.08ns
ST_142: tmp_52 [3/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_142: channel_1 [22/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 143>: 6.08ns
ST_143: tmp_52 [2/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_143: channel_1 [21/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 144>: 6.08ns
ST_144: tmp_52 [1/16] 6.08ns
:22  %tmp_52 = fdiv float %tmp_34_tmp_s, %tmp_51

ST_144: channel_1 [20/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 145>: 7.09ns
ST_145: lnReturn_1 [13/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_145: channel_1 [19/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 146>: 7.09ns
ST_146: lnReturn_1 [12/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_146: channel_1 [18/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 147>: 7.09ns
ST_147: lnReturn_1 [11/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_147: channel_1 [17/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 148>: 7.09ns
ST_148: lnReturn_1 [10/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_148: channel_1 [16/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 149>: 7.09ns
ST_149: lnReturn_1 [9/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_149: channel_1 [15/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 150>: 7.09ns
ST_150: lnReturn_1 [8/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_150: channel_1 [14/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 151>: 7.09ns
ST_151: lnReturn_1 [7/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_151: channel_1 [13/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 152>: 7.09ns
ST_152: lnReturn_1 [6/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_152: channel_1 [12/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 153>: 7.09ns
ST_153: lnReturn_1 [5/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_153: channel_1 [11/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 154>: 7.09ns
ST_154: lnReturn_1 [4/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_154: channel_1 [10/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 155>: 7.09ns
ST_155: lnReturn_1 [3/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_155: channel_1 [9/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6


 <State 156>: 7.09ns
ST_156: lnReturn_1 [2/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_156: channel_1 [8/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_156: tmp_61 [1/1] 2.44ns
:44  %tmp_61 = add i31 %tmp_66, -1

ST_156: tmp_62 [1/1] 0.00ns
:45  %tmp_62 = zext i31 %tmp_61 to i64

ST_156: lnReturnA_addr_1 [1/1] 0.00ns
:46  %lnReturnA_addr_1 = getelementptr inbounds [252 x float]* @lnReturnA, i64 0, i64 %tmp_62

ST_156: lnReturnA_load [2/2] 2.39ns
:47  %lnReturnA_load = load float* %lnReturnA_addr_1, align 4


 <State 157>: 7.09ns
ST_157: lnReturn_1 [1/13] 7.09ns
:23  %lnReturn_1 = call float @llvm.log.f32(float %tmp_52)

ST_157: channel_1 [7/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_157: lnReturnA_load [1/2] 2.39ns
:47  %lnReturnA_load = load float* %lnReturnA_addr_1, align 4


 <State 158>: 5.70ns
ST_158: channel_1 [6/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_158: tmp_56 [4/4] 5.70ns
:33  %tmp_56 = fmul float %lnReturn_1, %lnReturn_1

ST_158: tmp_63 [4/4] 5.70ns
:48  %tmp_63 = fmul float %lnReturnA_load, %lnReturn_1


 <State 159>: 5.70ns
ST_159: channel_1 [5/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_159: tmp_56 [3/4] 5.70ns
:33  %tmp_56 = fmul float %lnReturn_1, %lnReturn_1

ST_159: tmp_63 [3/4] 5.70ns
:48  %tmp_63 = fmul float %lnReturnA_load, %lnReturn_1


 <State 160>: 5.70ns
ST_160: channel_1 [4/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_160: tmp_56 [2/4] 5.70ns
:33  %tmp_56 = fmul float %lnReturn_1, %lnReturn_1

ST_160: tmp_59 [4/4] 5.70ns
:39  %tmp_59 = fmul float %lnReturn_1, %weight_1

ST_160: tmp_63 [2/4] 5.70ns
:48  %tmp_63 = fmul float %lnReturnA_load, %lnReturn_1


 <State 161>: 5.70ns
ST_161: channel_1 [3/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_161: tmp_56 [1/4] 5.70ns
:33  %tmp_56 = fmul float %lnReturn_1, %lnReturn_1

ST_161: tmp_59 [3/4] 5.70ns
:39  %tmp_59 = fmul float %lnReturn_1, %weight_1

ST_161: tmp_63 [1/4] 5.70ns
:48  %tmp_63 = fmul float %lnReturnA_load, %lnReturn_1


 <State 162>: 5.70ns
ST_162: channel_1 [2/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_162: tmp_57 [4/4] 5.70ns
:34  %tmp_57 = fmul float %tmp_56, %weight_1

ST_162: tmp_59 [2/4] 5.70ns
:39  %tmp_59 = fmul float %lnReturn_1, %weight_1

ST_162: tmp_64 [4/4] 5.70ns
:49  %tmp_64 = fmul float %tmp_63, %weight_1


 <State 163>: 7.01ns
ST_163: channel_1 [1/36] 4.62ns
:27  %channel_1 = urem i32 %i4, 6

ST_163: tmp_54 [1/1] 0.00ns
:28  %tmp_54 = zext i32 %channel_1 to i64

ST_163: acc_return_addr_5 [1/1] 0.00ns
:29  %acc_return_addr_5 = getelementptr inbounds [6 x float]* %acc_return, i64 0, i64 %tmp_54

ST_163: acc_return_load_3 [2/2] 2.39ns
:30  %acc_return_load_3 = load float* %acc_return_addr_5, align 4

ST_163: tmp_57 [3/4] 5.70ns
:34  %tmp_57 = fmul float %tmp_56, %weight_1

ST_163: acc_weight_returnSquare_addr_5 [1/1] 0.00ns
:35  %acc_weight_returnSquare_addr_5 = getelementptr inbounds [6 x float]* %acc_weight_returnSquare, i64 0, i64 %tmp_54

ST_163: tmp_59 [1/4] 5.70ns
:39  %tmp_59 = fmul float %lnReturn_1, %weight_1

ST_163: acc_weight_return_addr_5 [1/1] 0.00ns
:40  %acc_weight_return_addr_5 = getelementptr inbounds [6 x float]* %acc_weight_return, i64 0, i64 %tmp_54

ST_163: acc_weight_return_load_3 [2/2] 2.39ns
:41  %acc_weight_return_load_3 = load float* %acc_weight_return_addr_5, align 4

ST_163: tmp_64 [3/4] 5.70ns
:49  %tmp_64 = fmul float %tmp_63, %weight_1

ST_163: acc_weight_returnA_returnB_add_6 [1/1] 0.00ns
:50  %acc_weight_returnA_returnB_add_6 = getelementptr inbounds [6 x float]* %acc_weight_returnA_returnB, i64 0, i64 %tmp_54


 <State 164>: 9.65ns
ST_164: acc_return_load_3 [1/2] 2.39ns
:30  %acc_return_load_3 = load float* %acc_return_addr_5, align 4

ST_164: tmp_55 [5/5] 7.26ns
:31  %tmp_55 = fadd float %acc_return_load_3, %lnReturn_1

ST_164: tmp_57 [2/4] 5.70ns
:34  %tmp_57 = fmul float %tmp_56, %weight_1

ST_164: acc_weight_return_load_3 [1/2] 2.39ns
:41  %acc_weight_return_load_3 = load float* %acc_weight_return_addr_5, align 4

ST_164: tmp_60 [5/5] 7.26ns
:42  %tmp_60 = fadd float %acc_weight_return_load_3, %tmp_59

ST_164: tmp_64 [2/4] 5.70ns
:49  %tmp_64 = fmul float %tmp_63, %weight_1


 <State 165>: 7.26ns
ST_165: tmp_55 [4/5] 7.26ns
:31  %tmp_55 = fadd float %acc_return_load_3, %lnReturn_1

ST_165: tmp_57 [1/4] 5.70ns
:34  %tmp_57 = fmul float %tmp_56, %weight_1

ST_165: acc_weight_returnSquare_load_3 [2/2] 2.39ns
:36  %acc_weight_returnSquare_load_3 = load float* %acc_weight_returnSquare_addr_5, align 4

ST_165: tmp_60 [4/5] 7.26ns
:42  %tmp_60 = fadd float %acc_weight_return_load_3, %tmp_59

ST_165: tmp_64 [1/4] 5.70ns
:49  %tmp_64 = fmul float %tmp_63, %weight_1

ST_165: acc_weight_returnA_returnB_loa [2/2] 2.39ns
:51  %acc_weight_returnA_returnB_loa = load float* %acc_weight_returnA_returnB_add_6, align 4


 <State 166>: 9.65ns
ST_166: tmp_55 [3/5] 7.26ns
:31  %tmp_55 = fadd float %acc_return_load_3, %lnReturn_1

ST_166: acc_weight_returnSquare_load_3 [1/2] 2.39ns
:36  %acc_weight_returnSquare_load_3 = load float* %acc_weight_returnSquare_addr_5, align 4

ST_166: tmp_58 [5/5] 7.26ns
:37  %tmp_58 = fadd float %acc_weight_returnSquare_load_3, %tmp_57

ST_166: tmp_60 [3/5] 7.26ns
:42  %tmp_60 = fadd float %acc_weight_return_load_3, %tmp_59

ST_166: acc_weight_returnA_returnB_loa [1/2] 2.39ns
:51  %acc_weight_returnA_returnB_loa = load float* %acc_weight_returnA_returnB_add_6, align 4

ST_166: tmp_65 [5/5] 7.26ns
:52  %tmp_65 = fadd float %acc_weight_returnA_returnB_loa, %tmp_64


 <State 167>: 7.26ns
ST_167: tmp_55 [2/5] 7.26ns
:31  %tmp_55 = fadd float %acc_return_load_3, %lnReturn_1

ST_167: tmp_58 [4/5] 7.26ns
:37  %tmp_58 = fadd float %acc_weight_returnSquare_load_3, %tmp_57

ST_167: tmp_60 [2/5] 7.26ns
:42  %tmp_60 = fadd float %acc_weight_return_load_3, %tmp_59

ST_167: tmp_65 [4/5] 7.26ns
:52  %tmp_65 = fadd float %acc_weight_returnA_returnB_loa, %tmp_64


 <State 168>: 9.65ns
ST_168: tmp_55 [1/5] 7.26ns
:31  %tmp_55 = fadd float %acc_return_load_3, %lnReturn_1

ST_168: stg_857 [1/1] 2.39ns
:32  store float %tmp_55, float* %acc_return_addr_5, align 4

ST_168: tmp_58 [3/5] 7.26ns
:37  %tmp_58 = fadd float %acc_weight_returnSquare_load_3, %tmp_57

ST_168: tmp_60 [1/5] 7.26ns
:42  %tmp_60 = fadd float %acc_weight_return_load_3, %tmp_59

ST_168: stg_860 [1/1] 2.39ns
:43  store float %tmp_60, float* %acc_weight_return_addr_5, align 4

ST_168: tmp_65 [3/5] 7.26ns
:52  %tmp_65 = fadd float %acc_weight_returnA_returnB_loa, %tmp_64


 <State 169>: 7.26ns
ST_169: tmp_58 [2/5] 7.26ns
:37  %tmp_58 = fadd float %acc_weight_returnSquare_load_3, %tmp_57

ST_169: tmp_65 [2/5] 7.26ns
:52  %tmp_65 = fadd float %acc_weight_returnA_returnB_loa, %tmp_64


 <State 170>: 9.65ns
ST_170: stg_864 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecLoopName([33 x i8]* @p_str9) nounwind

ST_170: tmp_50 [1/1] 0.00ns
:3  %tmp_50 = call i32 (...)* @_ssdm_op_SpecRegionBegin([33 x i8]* @p_str9)

ST_170: stg_866 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_170: tmp_58 [1/5] 7.26ns
:37  %tmp_58 = fadd float %acc_weight_returnSquare_load_3, %tmp_57

ST_170: stg_868 [1/1] 2.39ns
:38  store float %tmp_58, float* %acc_weight_returnSquare_addr_5, align 4

ST_170: tmp_65 [1/5] 7.26ns
:52  %tmp_65 = fadd float %acc_weight_returnA_returnB_loa, %tmp_64

ST_170: stg_870 [1/1] 2.39ns
:53  store float %tmp_65, float* %acc_weight_returnA_returnB_add_6, align 4

ST_170: empty_13 [1/1] 0.00ns
:54  %empty_13 = call i32 (...)* @_ssdm_op_SpecRegionEnd([33 x i8]* @p_str9, i32 %tmp_50)

ST_170: stg_872 [1/1] 0.00ns
:57  br label %8


 <State 171>: 2.52ns
ST_171: acc_return_load_2 [2/2] 2.39ns
.preheader.0:0  %acc_return_load_2 = load float* %acc_return_addr, align 16

ST_171: tmp_49 [1/1] 2.52ns
.preheader.0:68  %tmp_49 = icmp eq i32 %column_index_cast, %tmp_13

ST_171: column_index_1 [1/1] 2.44ns
.preheader.0:71  %column_index_1 = add i31 %column_index, 1


 <State 172>: 2.39ns
ST_172: acc_return_load_2 [1/2] 2.39ns
.preheader.0:0  %acc_return_load_2 = load float* %acc_return_addr, align 16


 <State 173>: 7.26ns
ST_173: sum_return_1 [5/5] 7.26ns
.preheader.0:1  %sum_return_1 = fadd float %acc_return_load_2, 0.000000e+00


 <State 174>: 7.26ns
ST_174: sum_return_1 [4/5] 7.26ns
.preheader.0:1  %sum_return_1 = fadd float %acc_return_load_2, 0.000000e+00


 <State 175>: 7.26ns
ST_175: sum_return_1 [3/5] 7.26ns
.preheader.0:1  %sum_return_1 = fadd float %acc_return_load_2, 0.000000e+00


 <State 176>: 7.26ns
ST_176: sum_return_1 [2/5] 7.26ns
.preheader.0:1  %sum_return_1 = fadd float %acc_return_load_2, 0.000000e+00

ST_176: acc_return_load_4 [2/2] 2.39ns
.preheader.0:8  %acc_return_load_4 = load float* %acc_return_addr_3, align 4


 <State 177>: 7.26ns
ST_177: sum_return_1 [1/5] 7.26ns
.preheader.0:1  %sum_return_1 = fadd float %acc_return_load_2, 0.000000e+00

ST_177: acc_return_load_4 [1/2] 2.39ns
.preheader.0:8  %acc_return_load_4 = load float* %acc_return_addr_3, align 4


 <State 178>: 7.26ns
ST_178: sum_return_1_1 [5/5] 7.26ns
.preheader.0:9  %sum_return_1_1 = fadd float %sum_return_1, %acc_return_load_4


 <State 179>: 7.26ns
ST_179: sum_return_1_1 [4/5] 7.26ns
.preheader.0:9  %sum_return_1_1 = fadd float %sum_return_1, %acc_return_load_4


 <State 180>: 7.26ns
ST_180: sum_return_1_1 [3/5] 7.26ns
.preheader.0:9  %sum_return_1_1 = fadd float %sum_return_1, %acc_return_load_4


 <State 181>: 7.26ns
ST_181: sum_return_1_1 [2/5] 7.26ns
.preheader.0:9  %sum_return_1_1 = fadd float %sum_return_1, %acc_return_load_4

ST_181: acc_return_load_5 [2/2] 2.39ns
.preheader.0:16  %acc_return_load_5 = load float* %acc_return_addr_4, align 8


 <State 182>: 7.26ns
ST_182: acc_weight_return_load_2 [2/2] 2.39ns
.preheader.0:4  %acc_weight_return_load_2 = load float* %acc_weight_return_addr, align 16

ST_182: sum_return_1_1 [1/5] 7.26ns
.preheader.0:9  %sum_return_1_1 = fadd float %sum_return_1, %acc_return_load_4

ST_182: acc_return_load_5 [1/2] 2.39ns
.preheader.0:16  %acc_return_load_5 = load float* %acc_return_addr_4, align 8


 <State 183>: 7.26ns
ST_183: acc_weight_return_load_2 [1/2] 2.39ns
.preheader.0:4  %acc_weight_return_load_2 = load float* %acc_weight_return_addr, align 16

ST_183: sum_return_1_2 [5/5] 7.26ns
.preheader.0:17  %sum_return_1_2 = fadd float %sum_return_1_1, %acc_return_load_5


 <State 184>: 7.26ns
ST_184: sum_weight_return_1 [5/5] 7.26ns
.preheader.0:5  %sum_weight_return_1 = fadd float %acc_weight_return_load_2, 0.000000e+00

ST_184: sum_return_1_2 [4/5] 7.26ns
.preheader.0:17  %sum_return_1_2 = fadd float %sum_return_1_1, %acc_return_load_5


 <State 185>: 7.26ns
ST_185: sum_weight_return_1 [4/5] 7.26ns
.preheader.0:5  %sum_weight_return_1 = fadd float %acc_weight_return_load_2, 0.000000e+00

ST_185: sum_return_1_2 [3/5] 7.26ns
.preheader.0:17  %sum_return_1_2 = fadd float %sum_return_1_1, %acc_return_load_5


 <State 186>: 7.26ns
ST_186: sum_weight_return_1 [3/5] 7.26ns
.preheader.0:5  %sum_weight_return_1 = fadd float %acc_weight_return_load_2, 0.000000e+00

ST_186: acc_weight_returnA_returnB_loa_1 [2/2] 2.39ns
.preheader.0:6  %acc_weight_returnA_returnB_loa_1 = load float* %acc_weight_returnA_returnB_add, align 16

ST_186: sum_return_1_2 [2/5] 7.26ns
.preheader.0:17  %sum_return_1_2 = fadd float %sum_return_1_1, %acc_return_load_5

ST_186: acc_return_load_6 [2/2] 2.39ns
.preheader.0:24  %acc_return_load_6 = load float* %acc_return_addr_6, align 4


 <State 187>: 7.26ns
ST_187: sum_weight_return_1 [2/5] 7.26ns
.preheader.0:5  %sum_weight_return_1 = fadd float %acc_weight_return_load_2, 0.000000e+00

ST_187: acc_weight_returnA_returnB_loa_1 [1/2] 2.39ns
.preheader.0:6  %acc_weight_returnA_returnB_loa_1 = load float* %acc_weight_returnA_returnB_add, align 16

ST_187: acc_weight_return_load_4 [2/2] 2.39ns
.preheader.0:12  %acc_weight_return_load_4 = load float* %acc_weight_return_addr_3, align 4

ST_187: sum_return_1_2 [1/5] 7.26ns
.preheader.0:17  %sum_return_1_2 = fadd float %sum_return_1_1, %acc_return_load_5

ST_187: acc_return_load_6 [1/2] 2.39ns
.preheader.0:24  %acc_return_load_6 = load float* %acc_return_addr_6, align 4


 <State 188>: 7.26ns
ST_188: sum_weight_return_1 [1/5] 7.26ns
.preheader.0:5  %sum_weight_return_1 = fadd float %acc_weight_return_load_2, 0.000000e+00

ST_188: sum_weight_returnA_returnB_1 [5/5] 7.26ns
.preheader.0:7  %sum_weight_returnA_returnB_1 = fadd float %acc_weight_returnA_returnB_loa_1, 0.000000e+00

ST_188: acc_weight_return_load_4 [1/2] 2.39ns
.preheader.0:12  %acc_weight_return_load_4 = load float* %acc_weight_return_addr_3, align 4

ST_188: sum_return_1_3 [5/5] 7.26ns
.preheader.0:25  %sum_return_1_3 = fadd float %sum_return_1_2, %acc_return_load_6


 <State 189>: 7.26ns
ST_189: sum_weight_returnA_returnB_1 [4/5] 7.26ns
.preheader.0:7  %sum_weight_returnA_returnB_1 = fadd float %acc_weight_returnA_returnB_loa_1, 0.000000e+00

ST_189: sum_weight_return_1_1 [5/5] 7.26ns
.preheader.0:13  %sum_weight_return_1_1 = fadd float %sum_weight_return_1, %acc_weight_return_load_4

ST_189: sum_return_1_3 [4/5] 7.26ns
.preheader.0:25  %sum_return_1_3 = fadd float %sum_return_1_2, %acc_return_load_6


 <State 190>: 7.26ns
ST_190: sum_weight_returnA_returnB_1 [3/5] 7.26ns
.preheader.0:7  %sum_weight_returnA_returnB_1 = fadd float %acc_weight_returnA_returnB_loa_1, 0.000000e+00

ST_190: sum_weight_return_1_1 [4/5] 7.26ns
.preheader.0:13  %sum_weight_return_1_1 = fadd float %sum_weight_return_1, %acc_weight_return_load_4

ST_190: sum_return_1_3 [3/5] 7.26ns
.preheader.0:25  %sum_return_1_3 = fadd float %sum_return_1_2, %acc_return_load_6


 <State 191>: 7.26ns
ST_191: sum_weight_returnA_returnB_1 [2/5] 7.26ns
.preheader.0:7  %sum_weight_returnA_returnB_1 = fadd float %acc_weight_returnA_returnB_loa_1, 0.000000e+00

ST_191: sum_weight_return_1_1 [3/5] 7.26ns
.preheader.0:13  %sum_weight_return_1_1 = fadd float %sum_weight_return_1, %acc_weight_return_load_4

ST_191: acc_weight_returnA_returnB_loa_2 [2/2] 2.39ns
.preheader.0:14  %acc_weight_returnA_returnB_loa_2 = load float* %acc_weight_returnA_returnB_add_1, align 4

ST_191: sum_return_1_3 [2/5] 7.26ns
.preheader.0:25  %sum_return_1_3 = fadd float %sum_return_1_2, %acc_return_load_6

ST_191: acc_return_load_7 [2/2] 2.39ns
.preheader.0:32  %acc_return_load_7 = load float* %acc_return_addr_7, align 16


 <State 192>: 7.26ns
ST_192: sum_weight_returnA_returnB_1 [1/5] 7.26ns
.preheader.0:7  %sum_weight_returnA_returnB_1 = fadd float %acc_weight_returnA_returnB_loa_1, 0.000000e+00

ST_192: sum_weight_return_1_1 [2/5] 7.26ns
.preheader.0:13  %sum_weight_return_1_1 = fadd float %sum_weight_return_1, %acc_weight_return_load_4

ST_192: acc_weight_returnA_returnB_loa_2 [1/2] 2.39ns
.preheader.0:14  %acc_weight_returnA_returnB_loa_2 = load float* %acc_weight_returnA_returnB_add_1, align 4

ST_192: acc_weight_return_load_5 [2/2] 2.39ns
.preheader.0:20  %acc_weight_return_load_5 = load float* %acc_weight_return_addr_4, align 8

ST_192: sum_return_1_3 [1/5] 7.26ns
.preheader.0:25  %sum_return_1_3 = fadd float %sum_return_1_2, %acc_return_load_6

ST_192: acc_return_load_7 [1/2] 2.39ns
.preheader.0:32  %acc_return_load_7 = load float* %acc_return_addr_7, align 16


 <State 193>: 7.26ns
ST_193: sum_weight_return_1_1 [1/5] 7.26ns
.preheader.0:13  %sum_weight_return_1_1 = fadd float %sum_weight_return_1, %acc_weight_return_load_4

ST_193: sum_weight_returnA_returnB_1_1 [5/5] 7.26ns
.preheader.0:15  %sum_weight_returnA_returnB_1_1 = fadd float %sum_weight_returnA_returnB_1, %acc_weight_returnA_returnB_loa_2

ST_193: acc_weight_return_load_5 [1/2] 2.39ns
.preheader.0:20  %acc_weight_return_load_5 = load float* %acc_weight_return_addr_4, align 8

ST_193: sum_return_1_4 [5/5] 7.26ns
.preheader.0:33  %sum_return_1_4 = fadd float %sum_return_1_3, %acc_return_load_7


 <State 194>: 7.26ns
ST_194: sum_weight_returnA_returnB_1_1 [4/5] 7.26ns
.preheader.0:15  %sum_weight_returnA_returnB_1_1 = fadd float %sum_weight_returnA_returnB_1, %acc_weight_returnA_returnB_loa_2

ST_194: sum_weight_return_1_2 [5/5] 7.26ns
.preheader.0:21  %sum_weight_return_1_2 = fadd float %sum_weight_return_1_1, %acc_weight_return_load_5

ST_194: sum_return_1_4 [4/5] 7.26ns
.preheader.0:33  %sum_return_1_4 = fadd float %sum_return_1_3, %acc_return_load_7


 <State 195>: 7.26ns
ST_195: acc_weight_returnSquare_load_2 [2/2] 2.39ns
.preheader.0:2  %acc_weight_returnSquare_load_2 = load float* %acc_weight_returnSquare_addr, align 16

ST_195: sum_weight_returnA_returnB_1_1 [3/5] 7.26ns
.preheader.0:15  %sum_weight_returnA_returnB_1_1 = fadd float %sum_weight_returnA_returnB_1, %acc_weight_returnA_returnB_loa_2

ST_195: sum_weight_return_1_2 [4/5] 7.26ns
.preheader.0:21  %sum_weight_return_1_2 = fadd float %sum_weight_return_1_1, %acc_weight_return_load_5

ST_195: sum_return_1_4 [3/5] 7.26ns
.preheader.0:33  %sum_return_1_4 = fadd float %sum_return_1_3, %acc_return_load_7


 <State 196>: 7.26ns
ST_196: acc_weight_returnSquare_load_2 [1/2] 2.39ns
.preheader.0:2  %acc_weight_returnSquare_load_2 = load float* %acc_weight_returnSquare_addr, align 16

ST_196: sum_weight_returnA_returnB_1_1 [2/5] 7.26ns
.preheader.0:15  %sum_weight_returnA_returnB_1_1 = fadd float %sum_weight_returnA_returnB_1, %acc_weight_returnA_returnB_loa_2

ST_196: sum_weight_return_1_2 [3/5] 7.26ns
.preheader.0:21  %sum_weight_return_1_2 = fadd float %sum_weight_return_1_1, %acc_weight_return_load_5

ST_196: acc_weight_returnA_returnB_loa_3 [2/2] 2.39ns
.preheader.0:22  %acc_weight_returnA_returnB_loa_3 = load float* %acc_weight_returnA_returnB_add_2, align 8

ST_196: sum_return_1_4 [2/5] 7.26ns
.preheader.0:33  %sum_return_1_4 = fadd float %sum_return_1_3, %acc_return_load_7

ST_196: acc_return_load_8 [2/2] 2.39ns
.preheader.0:40  %acc_return_load_8 = load float* %acc_return_addr_8, align 4


 <State 197>: 7.26ns
ST_197: sum_weight_returnSquare_1 [5/5] 7.26ns
.preheader.0:3  %sum_weight_returnSquare_1 = fadd float %acc_weight_returnSquare_load_2, 0.000000e+00

ST_197: sum_weight_returnA_returnB_1_1 [1/5] 7.26ns
.preheader.0:15  %sum_weight_returnA_returnB_1_1 = fadd float %sum_weight_returnA_returnB_1, %acc_weight_returnA_returnB_loa_2

ST_197: sum_weight_return_1_2 [2/5] 7.26ns
.preheader.0:21  %sum_weight_return_1_2 = fadd float %sum_weight_return_1_1, %acc_weight_return_load_5

ST_197: acc_weight_returnA_returnB_loa_3 [1/2] 2.39ns
.preheader.0:22  %acc_weight_returnA_returnB_loa_3 = load float* %acc_weight_returnA_returnB_add_2, align 8

ST_197: acc_weight_return_load_6 [2/2] 2.39ns
.preheader.0:28  %acc_weight_return_load_6 = load float* %acc_weight_return_addr_6, align 4

ST_197: sum_return_1_4 [1/5] 7.26ns
.preheader.0:33  %sum_return_1_4 = fadd float %sum_return_1_3, %acc_return_load_7

ST_197: acc_return_load_8 [1/2] 2.39ns
.preheader.0:40  %acc_return_load_8 = load float* %acc_return_addr_8, align 4


 <State 198>: 7.26ns
ST_198: sum_weight_returnSquare_1 [4/5] 7.26ns
.preheader.0:3  %sum_weight_returnSquare_1 = fadd float %acc_weight_returnSquare_load_2, 0.000000e+00

ST_198: sum_weight_return_1_2 [1/5] 7.26ns
.preheader.0:21  %sum_weight_return_1_2 = fadd float %sum_weight_return_1_1, %acc_weight_return_load_5

ST_198: sum_weight_returnA_returnB_1_2 [5/5] 7.26ns
.preheader.0:23  %sum_weight_returnA_returnB_1_2 = fadd float %sum_weight_returnA_returnB_1_1, %acc_weight_returnA_returnB_loa_3

ST_198: acc_weight_return_load_6 [1/2] 2.39ns
.preheader.0:28  %acc_weight_return_load_6 = load float* %acc_weight_return_addr_6, align 4

ST_198: sum_return_1_5 [5/5] 7.26ns
.preheader.0:41  %sum_return_1_5 = fadd float %sum_return_1_4, %acc_return_load_8


 <State 199>: 7.26ns
ST_199: sum_weight_returnSquare_1 [3/5] 7.26ns
.preheader.0:3  %sum_weight_returnSquare_1 = fadd float %acc_weight_returnSquare_load_2, 0.000000e+00

ST_199: sum_weight_returnA_returnB_1_2 [4/5] 7.26ns
.preheader.0:23  %sum_weight_returnA_returnB_1_2 = fadd float %sum_weight_returnA_returnB_1_1, %acc_weight_returnA_returnB_loa_3

ST_199: sum_weight_return_1_3 [5/5] 7.26ns
.preheader.0:29  %sum_weight_return_1_3 = fadd float %sum_weight_return_1_2, %acc_weight_return_load_6

ST_199: sum_return_1_5 [4/5] 7.26ns
.preheader.0:41  %sum_return_1_5 = fadd float %sum_return_1_4, %acc_return_load_8


 <State 200>: 7.26ns
ST_200: sum_weight_returnSquare_1 [2/5] 7.26ns
.preheader.0:3  %sum_weight_returnSquare_1 = fadd float %acc_weight_returnSquare_load_2, 0.000000e+00

ST_200: acc_weight_returnSquare_load_4 [2/2] 2.39ns
.preheader.0:10  %acc_weight_returnSquare_load_4 = load float* %acc_weight_returnSquare_addr_3, align 4

ST_200: sum_weight_returnA_returnB_1_2 [3/5] 7.26ns
.preheader.0:23  %sum_weight_returnA_returnB_1_2 = fadd float %sum_weight_returnA_returnB_1_1, %acc_weight_returnA_returnB_loa_3

ST_200: sum_weight_return_1_3 [4/5] 7.26ns
.preheader.0:29  %sum_weight_return_1_3 = fadd float %sum_weight_return_1_2, %acc_weight_return_load_6

ST_200: sum_return_1_5 [3/5] 7.26ns
.preheader.0:41  %sum_return_1_5 = fadd float %sum_return_1_4, %acc_return_load_8


 <State 201>: 7.26ns
ST_201: sum_weight_returnSquare_1 [1/5] 7.26ns
.preheader.0:3  %sum_weight_returnSquare_1 = fadd float %acc_weight_returnSquare_load_2, 0.000000e+00

ST_201: acc_weight_returnSquare_load_4 [1/2] 2.39ns
.preheader.0:10  %acc_weight_returnSquare_load_4 = load float* %acc_weight_returnSquare_addr_3, align 4

ST_201: sum_weight_returnA_returnB_1_2 [2/5] 7.26ns
.preheader.0:23  %sum_weight_returnA_returnB_1_2 = fadd float %sum_weight_returnA_returnB_1_1, %acc_weight_returnA_returnB_loa_3

ST_201: sum_weight_return_1_3 [3/5] 7.26ns
.preheader.0:29  %sum_weight_return_1_3 = fadd float %sum_weight_return_1_2, %acc_weight_return_load_6

ST_201: acc_weight_returnA_returnB_loa_4 [2/2] 2.39ns
.preheader.0:30  %acc_weight_returnA_returnB_loa_4 = load float* %acc_weight_returnA_returnB_add_3, align 4

ST_201: sum_return_1_5 [2/5] 7.26ns
.preheader.0:41  %sum_return_1_5 = fadd float %sum_return_1_4, %acc_return_load_8


 <State 202>: 7.26ns
ST_202: sum_weight_returnSquare_1_1 [5/5] 7.26ns
.preheader.0:11  %sum_weight_returnSquare_1_1 = fadd float %sum_weight_returnSquare_1, %acc_weight_returnSquare_load_4

ST_202: sum_weight_returnA_returnB_1_2 [1/5] 7.26ns
.preheader.0:23  %sum_weight_returnA_returnB_1_2 = fadd float %sum_weight_returnA_returnB_1_1, %acc_weight_returnA_returnB_loa_3

ST_202: sum_weight_return_1_3 [2/5] 7.26ns
.preheader.0:29  %sum_weight_return_1_3 = fadd float %sum_weight_return_1_2, %acc_weight_return_load_6

ST_202: acc_weight_returnA_returnB_loa_4 [1/2] 2.39ns
.preheader.0:30  %acc_weight_returnA_returnB_loa_4 = load float* %acc_weight_returnA_returnB_add_3, align 4

ST_202: acc_weight_return_load_7 [2/2] 2.39ns
.preheader.0:36  %acc_weight_return_load_7 = load float* %acc_weight_return_addr_7, align 16

ST_202: sum_return_1_5 [1/5] 7.26ns
.preheader.0:41  %sum_return_1_5 = fadd float %sum_return_1_4, %acc_return_load_8


 <State 203>: 7.26ns
ST_203: sum_weight_returnSquare_1_1 [4/5] 7.26ns
.preheader.0:11  %sum_weight_returnSquare_1_1 = fadd float %sum_weight_returnSquare_1, %acc_weight_returnSquare_load_4

ST_203: sum_weight_return_1_3 [1/5] 7.26ns
.preheader.0:29  %sum_weight_return_1_3 = fadd float %sum_weight_return_1_2, %acc_weight_return_load_6

ST_203: sum_weight_returnA_returnB_1_3 [5/5] 7.26ns
.preheader.0:31  %sum_weight_returnA_returnB_1_3 = fadd float %sum_weight_returnA_returnB_1_2, %acc_weight_returnA_returnB_loa_4

ST_203: acc_weight_return_load_7 [1/2] 2.39ns
.preheader.0:36  %acc_weight_return_load_7 = load float* %acc_weight_return_addr_7, align 16

ST_203: meanReturnB [16/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 204>: 7.26ns
ST_204: sum_weight_returnSquare_1_1 [3/5] 7.26ns
.preheader.0:11  %sum_weight_returnSquare_1_1 = fadd float %sum_weight_returnSquare_1, %acc_weight_returnSquare_load_4

ST_204: sum_weight_returnA_returnB_1_3 [4/5] 7.26ns
.preheader.0:31  %sum_weight_returnA_returnB_1_3 = fadd float %sum_weight_returnA_returnB_1_2, %acc_weight_returnA_returnB_loa_4

ST_204: sum_weight_return_1_4 [5/5] 7.26ns
.preheader.0:37  %sum_weight_return_1_4 = fadd float %sum_weight_return_1_3, %acc_weight_return_load_7

ST_204: meanReturnB [15/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 205>: 7.26ns
ST_205: sum_weight_returnSquare_1_1 [2/5] 7.26ns
.preheader.0:11  %sum_weight_returnSquare_1_1 = fadd float %sum_weight_returnSquare_1, %acc_weight_returnSquare_load_4

ST_205: acc_weight_returnSquare_load_5 [2/2] 2.39ns
.preheader.0:18  %acc_weight_returnSquare_load_5 = load float* %acc_weight_returnSquare_addr_4, align 8

ST_205: sum_weight_returnA_returnB_1_3 [3/5] 7.26ns
.preheader.0:31  %sum_weight_returnA_returnB_1_3 = fadd float %sum_weight_returnA_returnB_1_2, %acc_weight_returnA_returnB_loa_4

ST_205: sum_weight_return_1_4 [4/5] 7.26ns
.preheader.0:37  %sum_weight_return_1_4 = fadd float %sum_weight_return_1_3, %acc_weight_return_load_7

ST_205: meanReturnB [14/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 206>: 7.26ns
ST_206: sum_weight_returnSquare_1_1 [1/5] 7.26ns
.preheader.0:11  %sum_weight_returnSquare_1_1 = fadd float %sum_weight_returnSquare_1, %acc_weight_returnSquare_load_4

ST_206: acc_weight_returnSquare_load_5 [1/2] 2.39ns
.preheader.0:18  %acc_weight_returnSquare_load_5 = load float* %acc_weight_returnSquare_addr_4, align 8

ST_206: sum_weight_returnA_returnB_1_3 [2/5] 7.26ns
.preheader.0:31  %sum_weight_returnA_returnB_1_3 = fadd float %sum_weight_returnA_returnB_1_2, %acc_weight_returnA_returnB_loa_4

ST_206: sum_weight_return_1_4 [3/5] 7.26ns
.preheader.0:37  %sum_weight_return_1_4 = fadd float %sum_weight_return_1_3, %acc_weight_return_load_7

ST_206: acc_weight_returnA_returnB_loa_5 [2/2] 2.39ns
.preheader.0:38  %acc_weight_returnA_returnB_loa_5 = load float* %acc_weight_returnA_returnB_add_4, align 16

ST_206: meanReturnB [13/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 207>: 7.26ns
ST_207: sum_weight_returnSquare_1_2 [5/5] 7.26ns
.preheader.0:19  %sum_weight_returnSquare_1_2 = fadd float %sum_weight_returnSquare_1_1, %acc_weight_returnSquare_load_5

ST_207: sum_weight_returnA_returnB_1_3 [1/5] 7.26ns
.preheader.0:31  %sum_weight_returnA_returnB_1_3 = fadd float %sum_weight_returnA_returnB_1_2, %acc_weight_returnA_returnB_loa_4

ST_207: sum_weight_return_1_4 [2/5] 7.26ns
.preheader.0:37  %sum_weight_return_1_4 = fadd float %sum_weight_return_1_3, %acc_weight_return_load_7

ST_207: acc_weight_returnA_returnB_loa_5 [1/2] 2.39ns
.preheader.0:38  %acc_weight_returnA_returnB_loa_5 = load float* %acc_weight_returnA_returnB_add_4, align 16

ST_207: acc_weight_return_load_8 [2/2] 2.39ns
.preheader.0:44  %acc_weight_return_load_8 = load float* %acc_weight_return_addr_8, align 4

ST_207: meanReturnB [12/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 208>: 7.26ns
ST_208: sum_weight_returnSquare_1_2 [4/5] 7.26ns
.preheader.0:19  %sum_weight_returnSquare_1_2 = fadd float %sum_weight_returnSquare_1_1, %acc_weight_returnSquare_load_5

ST_208: sum_weight_return_1_4 [1/5] 7.26ns
.preheader.0:37  %sum_weight_return_1_4 = fadd float %sum_weight_return_1_3, %acc_weight_return_load_7

ST_208: sum_weight_returnA_returnB_1_4 [5/5] 7.26ns
.preheader.0:39  %sum_weight_returnA_returnB_1_4 = fadd float %sum_weight_returnA_returnB_1_3, %acc_weight_returnA_returnB_loa_5

ST_208: acc_weight_return_load_8 [1/2] 2.39ns
.preheader.0:44  %acc_weight_return_load_8 = load float* %acc_weight_return_addr_8, align 4

ST_208: meanReturnB [11/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 209>: 7.26ns
ST_209: sum_weight_returnSquare_1_2 [3/5] 7.26ns
.preheader.0:19  %sum_weight_returnSquare_1_2 = fadd float %sum_weight_returnSquare_1_1, %acc_weight_returnSquare_load_5

ST_209: sum_weight_returnA_returnB_1_4 [4/5] 7.26ns
.preheader.0:39  %sum_weight_returnA_returnB_1_4 = fadd float %sum_weight_returnA_returnB_1_3, %acc_weight_returnA_returnB_loa_5

ST_209: sum_weight_return_1_5 [5/5] 7.26ns
.preheader.0:45  %sum_weight_return_1_5 = fadd float %sum_weight_return_1_4, %acc_weight_return_load_8

ST_209: meanReturnB [10/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 210>: 7.26ns
ST_210: sum_weight_returnSquare_1_2 [2/5] 7.26ns
.preheader.0:19  %sum_weight_returnSquare_1_2 = fadd float %sum_weight_returnSquare_1_1, %acc_weight_returnSquare_load_5

ST_210: acc_weight_returnSquare_load_6 [2/2] 2.39ns
.preheader.0:26  %acc_weight_returnSquare_load_6 = load float* %acc_weight_returnSquare_addr_6, align 4

ST_210: sum_weight_returnA_returnB_1_4 [3/5] 7.26ns
.preheader.0:39  %sum_weight_returnA_returnB_1_4 = fadd float %sum_weight_returnA_returnB_1_3, %acc_weight_returnA_returnB_loa_5

ST_210: sum_weight_return_1_5 [4/5] 7.26ns
.preheader.0:45  %sum_weight_return_1_5 = fadd float %sum_weight_return_1_4, %acc_weight_return_load_8

ST_210: meanReturnB [9/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 211>: 7.26ns
ST_211: sum_weight_returnSquare_1_2 [1/5] 7.26ns
.preheader.0:19  %sum_weight_returnSquare_1_2 = fadd float %sum_weight_returnSquare_1_1, %acc_weight_returnSquare_load_5

ST_211: acc_weight_returnSquare_load_6 [1/2] 2.39ns
.preheader.0:26  %acc_weight_returnSquare_load_6 = load float* %acc_weight_returnSquare_addr_6, align 4

ST_211: sum_weight_returnA_returnB_1_4 [2/5] 7.26ns
.preheader.0:39  %sum_weight_returnA_returnB_1_4 = fadd float %sum_weight_returnA_returnB_1_3, %acc_weight_returnA_returnB_loa_5

ST_211: sum_weight_return_1_5 [3/5] 7.26ns
.preheader.0:45  %sum_weight_return_1_5 = fadd float %sum_weight_return_1_4, %acc_weight_return_load_8

ST_211: acc_weight_returnA_returnB_loa_6 [2/2] 2.39ns
.preheader.0:46  %acc_weight_returnA_returnB_loa_6 = load float* %acc_weight_returnA_returnB_add_5, align 4

ST_211: meanReturnB [8/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 212>: 7.26ns
ST_212: sum_weight_returnSquare_1_3 [5/5] 7.26ns
.preheader.0:27  %sum_weight_returnSquare_1_3 = fadd float %sum_weight_returnSquare_1_2, %acc_weight_returnSquare_load_6

ST_212: sum_weight_returnA_returnB_1_4 [1/5] 7.26ns
.preheader.0:39  %sum_weight_returnA_returnB_1_4 = fadd float %sum_weight_returnA_returnB_1_3, %acc_weight_returnA_returnB_loa_5

ST_212: sum_weight_return_1_5 [2/5] 7.26ns
.preheader.0:45  %sum_weight_return_1_5 = fadd float %sum_weight_return_1_4, %acc_weight_return_load_8

ST_212: acc_weight_returnA_returnB_loa_6 [1/2] 2.39ns
.preheader.0:46  %acc_weight_returnA_returnB_loa_6 = load float* %acc_weight_returnA_returnB_add_5, align 4

ST_212: meanReturnB [7/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 213>: 7.26ns
ST_213: sum_weight_returnSquare_1_3 [4/5] 7.26ns
.preheader.0:27  %sum_weight_returnSquare_1_3 = fadd float %sum_weight_returnSquare_1_2, %acc_weight_returnSquare_load_6

ST_213: sum_weight_return_1_5 [1/5] 7.26ns
.preheader.0:45  %sum_weight_return_1_5 = fadd float %sum_weight_return_1_4, %acc_weight_return_load_8

ST_213: sum_weight_returnA_returnB_1_5 [5/5] 7.26ns
.preheader.0:47  %sum_weight_returnA_returnB_1_5 = fadd float %sum_weight_returnA_returnB_1_4, %acc_weight_returnA_returnB_loa_6

ST_213: meanReturnB [6/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3


 <State 214>: 7.26ns
ST_214: sum_weight_returnSquare_1_3 [3/5] 7.26ns
.preheader.0:27  %sum_weight_returnSquare_1_3 = fadd float %sum_weight_returnSquare_1_2, %acc_weight_returnSquare_load_6

ST_214: sum_weight_returnA_returnB_1_5 [4/5] 7.26ns
.preheader.0:47  %sum_weight_returnA_returnB_1_5 = fadd float %sum_weight_returnA_returnB_1_4, %acc_weight_returnA_returnB_loa_6

ST_214: meanReturnB [5/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3

ST_214: tmp_42 [4/4] 5.70ns
.preheader.0:57  %tmp_42 = fmul float %meanReturnA, %sum_weight_return_1_5


 <State 215>: 7.26ns
ST_215: sum_weight_returnSquare_1_3 [2/5] 7.26ns
.preheader.0:27  %sum_weight_returnSquare_1_3 = fadd float %sum_weight_returnSquare_1_2, %acc_weight_returnSquare_load_6

ST_215: acc_weight_returnSquare_load_7 [2/2] 2.39ns
.preheader.0:34  %acc_weight_returnSquare_load_7 = load float* %acc_weight_returnSquare_addr_7, align 16

ST_215: sum_weight_returnA_returnB_1_5 [3/5] 7.26ns
.preheader.0:47  %sum_weight_returnA_returnB_1_5 = fadd float %sum_weight_returnA_returnB_1_4, %acc_weight_returnA_returnB_loa_6

ST_215: meanReturnB [4/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3

ST_215: tmp_42 [3/4] 5.70ns
.preheader.0:57  %tmp_42 = fmul float %meanReturnA, %sum_weight_return_1_5


 <State 216>: 7.26ns
ST_216: sum_weight_returnSquare_1_3 [1/5] 7.26ns
.preheader.0:27  %sum_weight_returnSquare_1_3 = fadd float %sum_weight_returnSquare_1_2, %acc_weight_returnSquare_load_6

ST_216: acc_weight_returnSquare_load_7 [1/2] 2.39ns
.preheader.0:34  %acc_weight_returnSquare_load_7 = load float* %acc_weight_returnSquare_addr_7, align 16

ST_216: sum_weight_returnA_returnB_1_5 [2/5] 7.26ns
.preheader.0:47  %sum_weight_returnA_returnB_1_5 = fadd float %sum_weight_returnA_returnB_1_4, %acc_weight_returnA_returnB_loa_6

ST_216: meanReturnB [3/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3

ST_216: tmp_42 [2/4] 5.70ns
.preheader.0:57  %tmp_42 = fmul float %meanReturnA, %sum_weight_return_1_5


 <State 217>: 7.26ns
ST_217: sum_weight_returnSquare_1_4 [5/5] 7.26ns
.preheader.0:35  %sum_weight_returnSquare_1_4 = fadd float %sum_weight_returnSquare_1_3, %acc_weight_returnSquare_load_7

ST_217: sum_weight_returnA_returnB_1_5 [1/5] 7.26ns
.preheader.0:47  %sum_weight_returnA_returnB_1_5 = fadd float %sum_weight_returnA_returnB_1_4, %acc_weight_returnA_returnB_loa_6

ST_217: meanReturnB [2/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3

ST_217: tmp_42 [1/4] 5.70ns
.preheader.0:57  %tmp_42 = fmul float %meanReturnA, %sum_weight_return_1_5


 <State 218>: 7.26ns
ST_218: sum_weight_returnSquare_1_4 [4/5] 7.26ns
.preheader.0:35  %sum_weight_returnSquare_1_4 = fadd float %sum_weight_returnSquare_1_3, %acc_weight_returnSquare_load_7

ST_218: meanReturnB [1/16] 6.08ns
.preheader.0:48  %meanReturnB = fdiv float %sum_return_1_5, %tmp_3

ST_218: tmp_43 [5/5] 7.26ns
.preheader.0:58  %tmp_43 = fsub float %sum_weight_returnA_returnB_1_5, %tmp_42


 <State 219>: 7.26ns
ST_219: sum_weight_returnSquare_1_4 [3/5] 7.26ns
.preheader.0:35  %sum_weight_returnSquare_1_4 = fadd float %sum_weight_returnSquare_1_3, %acc_weight_returnSquare_load_7

ST_219: tmp_35 [4/4] 5.70ns
.preheader.0:50  %tmp_35 = fmul float %meanReturnB, 2.000000e+00

ST_219: tmp_43 [4/5] 7.26ns
.preheader.0:58  %tmp_43 = fsub float %sum_weight_returnA_returnB_1_5, %tmp_42

ST_219: tmp_44 [4/4] 5.70ns
.preheader.0:59  %tmp_44 = fmul float %meanReturnB, %sum_weight_returnA


 <State 220>: 7.26ns
ST_220: sum_weight_returnSquare_1_4 [2/5] 7.26ns
.preheader.0:35  %sum_weight_returnSquare_1_4 = fadd float %sum_weight_returnSquare_1_3, %acc_weight_returnSquare_load_7

ST_220: acc_weight_returnSquare_load_8 [2/2] 2.39ns
.preheader.0:42  %acc_weight_returnSquare_load_8 = load float* %acc_weight_returnSquare_addr_8, align 4

ST_220: tmp_35 [3/4] 5.70ns
.preheader.0:50  %tmp_35 = fmul float %meanReturnB, 2.000000e+00

ST_220: tmp_43 [3/5] 7.26ns
.preheader.0:58  %tmp_43 = fsub float %sum_weight_returnA_returnB_1_5, %tmp_42

ST_220: tmp_44 [3/4] 5.70ns
.preheader.0:59  %tmp_44 = fmul float %meanReturnB, %sum_weight_returnA


 <State 221>: 7.26ns
ST_221: sum_weight_returnSquare_1_4 [1/5] 7.26ns
.preheader.0:35  %sum_weight_returnSquare_1_4 = fadd float %sum_weight_returnSquare_1_3, %acc_weight_returnSquare_load_7

ST_221: acc_weight_returnSquare_load_8 [1/2] 2.39ns
.preheader.0:42  %acc_weight_returnSquare_load_8 = load float* %acc_weight_returnSquare_addr_8, align 4

ST_221: tmp_35 [2/4] 5.70ns
.preheader.0:50  %tmp_35 = fmul float %meanReturnB, 2.000000e+00

ST_221: tmp_43 [2/5] 7.26ns
.preheader.0:58  %tmp_43 = fsub float %sum_weight_returnA_returnB_1_5, %tmp_42

ST_221: tmp_44 [2/4] 5.70ns
.preheader.0:59  %tmp_44 = fmul float %meanReturnB, %sum_weight_returnA


 <State 222>: 7.26ns
ST_222: sum_weight_returnSquare_1_5 [5/5] 7.26ns
.preheader.0:43  %sum_weight_returnSquare_1_5 = fadd float %sum_weight_returnSquare_1_4, %acc_weight_returnSquare_load_8

ST_222: tmp_35 [1/4] 5.70ns
.preheader.0:50  %tmp_35 = fmul float %meanReturnB, 2.000000e+00

ST_222: tmp_43 [1/5] 7.26ns
.preheader.0:58  %tmp_43 = fsub float %sum_weight_returnA_returnB_1_5, %tmp_42

ST_222: tmp_44 [1/4] 5.70ns
.preheader.0:59  %tmp_44 = fmul float %meanReturnB, %sum_weight_returnA


 <State 223>: 7.26ns
ST_223: sum_weight_returnSquare_1_5 [4/5] 7.26ns
.preheader.0:43  %sum_weight_returnSquare_1_5 = fadd float %sum_weight_returnSquare_1_4, %acc_weight_returnSquare_load_8

ST_223: tmp_36 [4/4] 5.70ns
.preheader.0:51  %tmp_36 = fmul float %tmp_35, %sum_weight_return_1_5

ST_223: tmp_45 [5/5] 7.26ns
.preheader.0:60  %tmp_45 = fsub float %tmp_43, %tmp_44


 <State 224>: 7.26ns
ST_224: sum_weight_returnSquare_1_5 [3/5] 7.26ns
.preheader.0:43  %sum_weight_returnSquare_1_5 = fadd float %sum_weight_returnSquare_1_4, %acc_weight_returnSquare_load_8

ST_224: tmp_36 [3/4] 5.70ns
.preheader.0:51  %tmp_36 = fmul float %tmp_35, %sum_weight_return_1_5

ST_224: tmp_45 [4/5] 7.26ns
.preheader.0:60  %tmp_45 = fsub float %tmp_43, %tmp_44


 <State 225>: 7.26ns
ST_225: sum_weight_returnSquare_1_5 [2/5] 7.26ns
.preheader.0:43  %sum_weight_returnSquare_1_5 = fadd float %sum_weight_returnSquare_1_4, %acc_weight_returnSquare_load_8

ST_225: tmp_36 [2/4] 5.70ns
.preheader.0:51  %tmp_36 = fmul float %tmp_35, %sum_weight_return_1_5

ST_225: tmp_45 [3/5] 7.26ns
.preheader.0:60  %tmp_45 = fsub float %tmp_43, %tmp_44


 <State 226>: 7.26ns
ST_226: sum_weight_returnSquare_1_5 [1/5] 7.26ns
.preheader.0:43  %sum_weight_returnSquare_1_5 = fadd float %sum_weight_returnSquare_1_4, %acc_weight_returnSquare_load_8

ST_226: tmp_36 [1/4] 5.70ns
.preheader.0:51  %tmp_36 = fmul float %tmp_35, %sum_weight_return_1_5

ST_226: tmp_45 [2/5] 7.26ns
.preheader.0:60  %tmp_45 = fsub float %tmp_43, %tmp_44


 <State 227>: 7.26ns
ST_227: tmp_37 [5/5] 7.26ns
.preheader.0:52  %tmp_37 = fsub float %sum_weight_returnSquare_1_5, %tmp_36

ST_227: tmp_45 [1/5] 7.26ns
.preheader.0:60  %tmp_45 = fsub float %tmp_43, %tmp_44


 <State 228>: 7.26ns
ST_228: tmp_37 [4/5] 7.26ns
.preheader.0:52  %tmp_37 = fsub float %sum_weight_returnSquare_1_5, %tmp_36

ST_228: tmp_46 [16/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 229>: 7.26ns
ST_229: tmp_37 [3/5] 7.26ns
.preheader.0:52  %tmp_37 = fsub float %sum_weight_returnSquare_1_5, %tmp_36

ST_229: tmp_46 [15/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 230>: 7.26ns
ST_230: tmp_37 [2/5] 7.26ns
.preheader.0:52  %tmp_37 = fsub float %sum_weight_returnSquare_1_5, %tmp_36

ST_230: tmp_46 [14/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 231>: 7.26ns
ST_231: tmp_37 [1/5] 7.26ns
.preheader.0:52  %tmp_37 = fsub float %sum_weight_returnSquare_1_5, %tmp_36

ST_231: tmp_46 [13/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 232>: 6.08ns
ST_232: tmp_38 [16/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_232: tmp_46 [12/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 233>: 6.08ns
ST_233: tmp_38 [15/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_233: tmp_46 [11/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 234>: 6.08ns
ST_234: tmp_38 [14/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_234: tmp_46 [10/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 235>: 6.08ns
ST_235: tmp_38 [13/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_235: tmp_46 [9/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 236>: 6.08ns
ST_236: tmp_38 [12/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_236: tmp_46 [8/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 237>: 6.08ns
ST_237: tmp_38 [11/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_237: tmp_46 [7/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 238>: 6.08ns
ST_238: tmp_38 [10/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_238: tmp_46 [6/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 239>: 6.08ns
ST_239: tmp_38 [9/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_239: tmp_46 [5/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight


 <State 240>: 6.08ns
ST_240: tmp_38 [8/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_240: tmp_46 [4/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight

ST_240: tmp_47 [4/4] 5.70ns
.preheader.0:62  %tmp_47 = fmul float %meanReturnA, %meanReturnB


 <State 241>: 6.08ns
ST_241: tmp_38 [7/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_241: tmp_46 [3/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight

ST_241: tmp_47 [3/4] 5.70ns
.preheader.0:62  %tmp_47 = fmul float %meanReturnA, %meanReturnB


 <State 242>: 6.08ns
ST_242: tmp_38 [6/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_242: tmp_46 [2/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight

ST_242: tmp_47 [2/4] 5.70ns
.preheader.0:62  %tmp_47 = fmul float %meanReturnA, %meanReturnB


 <State 243>: 6.08ns
ST_243: tmp_38 [5/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_243: tmp_46 [1/16] 6.08ns
.preheader.0:61  %tmp_46 = fdiv float %tmp_45, %sum_weight

ST_243: tmp_47 [1/4] 5.70ns
.preheader.0:62  %tmp_47 = fmul float %meanReturnA, %meanReturnB


 <State 244>: 7.26ns
ST_244: tmp_38 [4/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_244: tmp_40 [4/4] 5.70ns
.preheader.0:54  %tmp_40 = fmul float %meanReturnB, %meanReturnB

ST_244: covariance [5/5] 7.26ns
.preheader.0:63  %covariance = fadd float %tmp_46, %tmp_47


 <State 245>: 7.26ns
ST_245: tmp_38 [3/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_245: tmp_40 [3/4] 5.70ns
.preheader.0:54  %tmp_40 = fmul float %meanReturnB, %meanReturnB

ST_245: covariance [4/5] 7.26ns
.preheader.0:63  %covariance = fadd float %tmp_46, %tmp_47


 <State 246>: 7.26ns
ST_246: tmp_38 [2/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_246: tmp_40 [2/4] 5.70ns
.preheader.0:54  %tmp_40 = fmul float %meanReturnB, %meanReturnB

ST_246: covariance [3/5] 7.26ns
.preheader.0:63  %covariance = fadd float %tmp_46, %tmp_47


 <State 247>: 7.26ns
ST_247: tmp_38 [1/16] 6.08ns
.preheader.0:53  %tmp_38 = fdiv float %tmp_37, %sum_weight

ST_247: tmp_40 [1/4] 5.70ns
.preheader.0:54  %tmp_40 = fmul float %meanReturnB, %meanReturnB

ST_247: covariance [2/5] 7.26ns
.preheader.0:63  %covariance = fadd float %tmp_46, %tmp_47


 <State 248>: 7.26ns
ST_248: tmp_41 [5/5] 7.26ns
.preheader.0:55  %tmp_41 = fadd float %tmp_38, %tmp_40

ST_248: covariance [1/5] 7.26ns
.preheader.0:63  %covariance = fadd float %tmp_46, %tmp_47


 <State 249>: 7.26ns
ST_249: tmp_41 [4/5] 7.26ns
.preheader.0:55  %tmp_41 = fadd float %tmp_38, %tmp_40


 <State 250>: 7.26ns
ST_250: tmp_41 [3/5] 7.26ns
.preheader.0:55  %tmp_41 = fadd float %tmp_38, %tmp_40


 <State 251>: 7.26ns
ST_251: tmp_41 [2/5] 7.26ns
.preheader.0:55  %tmp_41 = fadd float %tmp_38, %tmp_40


 <State 252>: 7.26ns
ST_252: tmp_41 [1/5] 7.26ns
.preheader.0:55  %tmp_41 = fadd float %tmp_38, %tmp_40


 <State 253>: 6.24ns
ST_253: volatilityA [16/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_253: volatilityB [16/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 254>: 6.24ns
ST_254: volatilityA [15/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_254: volatilityB [15/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 255>: 6.24ns
ST_255: volatilityA [14/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_255: volatilityB [14/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 256>: 6.24ns
ST_256: volatilityA [13/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_256: volatilityB [13/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 257>: 6.24ns
ST_257: volatilityA [12/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_257: volatilityB [12/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 258>: 6.24ns
ST_258: volatilityA [11/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_258: volatilityB [11/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 259>: 6.24ns
ST_259: volatilityA [10/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_259: volatilityB [10/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 260>: 6.24ns
ST_260: volatilityA [9/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_260: volatilityB [9/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 261>: 6.24ns
ST_261: volatilityA [8/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_261: volatilityB [8/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 262>: 6.24ns
ST_262: volatilityA [7/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_262: volatilityB [7/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 263>: 6.24ns
ST_263: volatilityA [6/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_263: volatilityB [6/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 264>: 6.24ns
ST_264: volatilityA [5/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_264: volatilityB [5/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 265>: 6.24ns
ST_265: volatilityA [4/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_265: volatilityB [4/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 266>: 6.24ns
ST_266: volatilityA [3/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_266: volatilityB [3/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 267>: 6.24ns
ST_267: volatilityA [2/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_267: volatilityB [2/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 268>: 6.24ns
ST_268: volatilityA [1/16] 6.24ns
.preheader.0:49  %volatilityA = call float @llvm.sqrt.f32(float %tmp_12)

ST_268: volatilityB [1/16] 6.24ns
.preheader.0:56  %volatilityB = call float @llvm.sqrt.f32(float %tmp_41)


 <State 269>: 5.70ns
ST_269: tmp_48 [4/4] 5.70ns
.preheader.0:64  %tmp_48 = fmul float %volatilityA, %volatilityB


 <State 270>: 5.70ns
ST_270: tmp_48 [3/4] 5.70ns
.preheader.0:64  %tmp_48 = fmul float %volatilityA, %volatilityB


 <State 271>: 5.70ns
ST_271: tmp_48 [2/4] 5.70ns
.preheader.0:64  %tmp_48 = fmul float %volatilityA, %volatilityB


 <State 272>: 5.70ns
ST_272: tmp_48 [1/4] 5.70ns
.preheader.0:64  %tmp_48 = fmul float %volatilityA, %volatilityB


 <State 273>: 6.08ns
ST_273: corr_temp [16/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 274>: 6.08ns
ST_274: corr_temp [15/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 275>: 6.08ns
ST_275: corr_temp [14/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 276>: 6.08ns
ST_276: corr_temp [13/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 277>: 6.08ns
ST_277: corr_temp [12/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 278>: 6.08ns
ST_278: corr_temp [11/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 279>: 6.08ns
ST_279: corr_temp [10/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 280>: 6.08ns
ST_280: corr_temp [9/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 281>: 6.08ns
ST_281: corr_temp [8/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 282>: 6.08ns
ST_282: corr_temp [7/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 283>: 6.08ns
ST_283: corr_temp [6/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 284>: 6.08ns
ST_284: corr_temp [5/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 285>: 6.08ns
ST_285: corr_temp [4/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 286>: 6.08ns
ST_286: corr_temp [3/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 287>: 6.08ns
ST_287: corr_temp [2/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48


 <State 288>: 6.08ns
ST_288: corr_temp [1/16] 6.08ns
.preheader.0:65  %corr_temp = fdiv float %covariance, %tmp_48

ST_288: stg_1192 [1/1] 0.00ns
.preheader.0:66  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_288: val_assign [1/1] 0.00ns
.preheader.0:67  %val_assign = bitcast float %corr_temp to i32

ST_288: stg_1194 [1/1] 0.00ns
.preheader.0:69  call void @_ssdm_op_Write.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %out_correlation_data_V, i4* %out_correlation_keep_V, i4* %out_correlation_strb_V, i1* %out_correlation_user_V, i1* %out_correlation_last_V, i1* %out_correlation_id_V, i1* %out_correlation_dest_V, i32 %val_assign, i4 -1, i4 1, i1 false, i1 %tmp_49, i1 false, i1 false)

ST_288: empty_14 [1/1] 0.00ns
.preheader.0:70  %empty_14 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str7, i32 %tmp_30)

ST_288: stg_1196 [1/1] 0.00ns
.preheader.0:72  br label %.preheader147



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139
	State 140
	State 141
	State 142
	State 143
	State 144
	State 145
	State 146
	State 147
	State 148
	State 149
	State 150
	State 151
	State 152
	State 153
	State 154
	State 155
	State 156
	State 157
	State 158
	State 159
	State 160
	State 161
	State 162
	State 163
	State 164
	State 165
	State 166
	State 167
	State 168
	State 169
	State 170
	State 171
	State 172
	State 173
	State 174
	State 175
	State 176
	State 177
	State 178
	State 179
	State 180
	State 181
	State 182
	State 183
	State 184
	State 185
	State 186
	State 187
	State 188
	State 189
	State 190
	State 191
	State 192
	State 193
	State 194
	State 195
	State 196
	State 197
	State 198
	State 199
	State 200
	State 201
	State 202
	State 203
	State 204
	State 205
	State 206
	State 207
	State 208
	State 209
	State 210
	State 211
	State 212
	State 213
	State 214
	State 215
	State 216
	State 217
	State 218
	State 219
	State 220
	State 221
	State 222
	State 223
	State 224
	State 225
	State 226
	State 227
	State 228
	State 229
	State 230
	State 231
	State 232
	State 233
	State 234
	State 235
	State 236
	State 237
	State 238
	State 239
	State 240
	State 241
	State 242
	State 243
	State 244
	State 245
	State 246
	State 247
	State 248
	State 249
	State 250
	State 251
	State 252
	State 253
	State 254
	State 255
	State 256
	State 257
	State 258
	State 259
	State 260
	State 261
	State 262
	State 263
	State 264
	State 265
	State 266
	State 267
	State 268
	State 269
	State 270
	State 271
	State 272
	State 273
	State 274
	State 275
	State 276
	State 277
	State 278
	State 279
	State 280
	State 281
	State 282
	State 283
	State 284
	State 285
	State 286
	State 287
	State 288


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
