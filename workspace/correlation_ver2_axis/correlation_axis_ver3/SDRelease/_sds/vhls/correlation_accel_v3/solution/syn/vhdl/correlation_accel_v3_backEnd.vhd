-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlation_accel_v3_backEnd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NUMBER_OF_DAYS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_DAYS_empty_n : IN STD_LOGIC;
    NUMBER_OF_DAYS_read : OUT STD_LOGIC;
    NUMBER_OF_INDICES_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES_empty_n : IN STD_LOGIC;
    NUMBER_OF_INDICES_read : OUT STD_LOGIC;
    sum_weight_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_in_V_empty_n : IN STD_LOGIC;
    sum_weight_in_V_read : OUT STD_LOGIC;
    sum_return_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_return_in_V_empty_n : IN STD_LOGIC;
    sum_return_in_V_read : OUT STD_LOGIC;
    sum_weight_returnSquare_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquare_in_V_empty_n : IN STD_LOGIC;
    sum_weight_returnSquare_in_V_read : OUT STD_LOGIC;
    sum_weight_return_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_return_in_V_empty_n : IN STD_LOGIC;
    sum_weight_return_in_V_read : OUT STD_LOGIC;
    sum_weight_returnA_returnB_in_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_returnB_in_s_empty_n : IN STD_LOGIC;
    sum_weight_returnA_returnB_in_s_read : OUT STD_LOGIC;
    sum_returnA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_returnA_in_V_empty_n : IN STD_LOGIC;
    sum_returnA_in_V_read : OUT STD_LOGIC;
    sum_weight_returnSquareA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquareA_in_V_empty_n : IN STD_LOGIC;
    sum_weight_returnSquareA_in_V_read : OUT STD_LOGIC;
    sum_weight_returnA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_in_V_empty_n : IN STD_LOGIC;
    sum_weight_returnA_in_V_read : OUT STD_LOGIC;
    out_correlation_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_correlation_TVALID : OUT STD_LOGIC;
    out_correlation_TREADY : IN STD_LOGIC;
    out_correlation_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_correlation_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_correlation_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_correlation_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_correlation_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_correlation_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of correlation_accel_v3_backEnd is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (93 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (93 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (93 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (93 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (93 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (93 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (93 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (93 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (93 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (93 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_176 : BOOLEAN;
    signal ap_sig_cseq_ST_st53_fsm_52 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_195 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_202 : BOOLEAN;
    signal ap_sig_cseq_ST_st78_fsm_77 : STD_LOGIC;
    signal ap_sig_bdd_211 : BOOLEAN;
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_226 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal ap_sig_cseq_ST_st58_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_241 : BOOLEAN;
    signal reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_250 : BOOLEAN;
    signal ap_sig_cseq_ST_st59_fsm_58 : STD_LOGIC;
    signal ap_sig_bdd_257 : BOOLEAN;
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal NUMBER_OF_INDICES_read_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_272 : BOOLEAN;
    signal tmp_i_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_24_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_284 : BOOLEAN;
    signal tmp_1_i_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_295 : BOOLEAN;
    signal tmp_2_i_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_324 : BOOLEAN;
    signal tmp_10_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal column_index_fu_355_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal column_index_reg_438 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_25_i_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_i_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st54_fsm_53 : STD_LOGIC;
    signal ap_sig_bdd_353 : BOOLEAN;
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal volatilityA_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st74_fsm_73 : STD_LOGIC;
    signal ap_sig_bdd_362 : BOOLEAN;
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal volatilityB_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_i_reg_222 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st94_fsm_93 : STD_LOGIC;
    signal ap_sig_bdd_374 : BOOLEAN;
    signal ap_sig_ioackin_out_correlation_TREADY : STD_LOGIC;
    signal ap_reg_ioackin_out_correlation_TREADY : STD_LOGIC := '0';
    signal grp_fu_234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_411 : BOOLEAN;
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_418 : BOOLEAN;
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_bdd_425 : BOOLEAN;
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_439 : BOOLEAN;
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_446 : BOOLEAN;
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_453 : BOOLEAN;
    signal ap_sig_cseq_ST_st75_fsm_74 : STD_LOGIC;
    signal ap_sig_bdd_461 : BOOLEAN;
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_475 : BOOLEAN;
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_482 : BOOLEAN;
    signal ap_sig_cseq_ST_st79_fsm_78 : STD_LOGIC;
    signal ap_sig_bdd_489 : BOOLEAN;
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_501 : BOOLEAN;
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_cast_i_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_234_ce : STD_LOGIC;
    signal grp_fu_238_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_238_ce : STD_LOGIC;
    signal grp_fu_242_ce : STD_LOGIC;
    signal grp_fu_247_ce : STD_LOGIC;
    signal grp_fu_252_ce : STD_LOGIC;
    signal grp_fu_256_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_829 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_837 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_845 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_853 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_864 : BOOLEAN;
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_872 : BOOLEAN;
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_883 : BOOLEAN;
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_894 : BOOLEAN;
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_902 : BOOLEAN;
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_bdd_912 : BOOLEAN;
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_920 : BOOLEAN;
    signal ap_sig_cseq_ST_st60_fsm_59 : STD_LOGIC;
    signal ap_sig_bdd_930 : BOOLEAN;
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_938 : BOOLEAN;
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_946 : BOOLEAN;
    signal ap_sig_cseq_ST_st63_fsm_62 : STD_LOGIC;
    signal ap_sig_bdd_954 : BOOLEAN;
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_962 : BOOLEAN;
    signal ap_sig_cseq_ST_st65_fsm_64 : STD_LOGIC;
    signal ap_sig_bdd_970 : BOOLEAN;
    signal ap_sig_cseq_ST_st66_fsm_65 : STD_LOGIC;
    signal ap_sig_bdd_978 : BOOLEAN;
    signal ap_sig_cseq_ST_st67_fsm_66 : STD_LOGIC;
    signal ap_sig_bdd_986 : BOOLEAN;
    signal ap_sig_cseq_ST_st68_fsm_67 : STD_LOGIC;
    signal ap_sig_bdd_994 : BOOLEAN;
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_1002 : BOOLEAN;
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_1010 : BOOLEAN;
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_bdd_1018 : BOOLEAN;
    signal ap_sig_cseq_ST_st72_fsm_71 : STD_LOGIC;
    signal ap_sig_bdd_1026 : BOOLEAN;
    signal ap_sig_cseq_ST_st73_fsm_72 : STD_LOGIC;
    signal ap_sig_bdd_1034 : BOOLEAN;
    signal ap_sig_cseq_ST_st76_fsm_75 : STD_LOGIC;
    signal ap_sig_bdd_1044 : BOOLEAN;
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_1052 : BOOLEAN;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_264_ce : STD_LOGIC;
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_ce : STD_LOGIC;
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (93 downto 0);

    component correlation_accel_v3_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v3_fsqrt_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    correlation_accel_v3_faddfsub_32ns_32ns_32_5_full_dsp_U37 : component correlation_accel_v3_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_234_p0,
        din1 => grp_fu_234_p1,
        opcode => grp_fu_234_opcode,
        ce => grp_fu_234_ce,
        dout => grp_fu_234_p2);

    correlation_accel_v3_faddfsub_32ns_32ns_32_5_full_dsp_U38 : component correlation_accel_v3_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => grp_fu_238_p1,
        opcode => grp_fu_238_opcode,
        ce => grp_fu_238_ce,
        dout => grp_fu_238_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp_U39 : component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_242_p0,
        din1 => grp_fu_242_p1,
        ce => grp_fu_242_ce,
        dout => grp_fu_242_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp_U40 : component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        din1 => grp_fu_247_p1,
        ce => grp_fu_247_ce,
        dout => grp_fu_247_p2);

    correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp_U41 : component correlation_accel_v3_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_252_p0,
        din1 => grp_fu_252_p1,
        ce => grp_fu_252_ce,
        dout => grp_fu_252_p2);

    correlation_accel_v3_fdiv_32ns_32ns_32_16_U42 : component correlation_accel_v3_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_256_p0,
        din1 => grp_fu_256_p1,
        ce => grp_fu_256_ce,
        dout => grp_fu_256_p2);

    correlation_accel_v3_fdiv_32ns_32ns_32_16_U43 : component correlation_accel_v3_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_260_p0,
        din1 => grp_fu_260_p1,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p2);

    correlation_accel_v3_sitofp_32ns_32_6_U44 : component correlation_accel_v3_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_264_p0,
        ce => grp_fu_264_ce,
        dout => grp_fu_264_p1);

    correlation_accel_v3_fsqrt_32ns_32ns_32_16_U45 : component correlation_accel_v3_fsqrt_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_267_p0,
        din1 => grp_fu_267_p1,
        ce => grp_fu_267_ce,
        dout => grp_fu_267_p2);

    correlation_accel_v3_fsqrt_32ns_32ns_32_16_U46 : component correlation_accel_v3_fsqrt_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_272_p0,
        din1 => grp_fu_272_p1,
        ce => grp_fu_272_ce,
        dout => grp_fu_272_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (tmp_2_i_fu_345_p2 = ap_const_lv1_0) and not(ap_sig_bdd_324))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_out_correlation_TREADY assign process. --
    ap_reg_ioackin_out_correlation_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_out_correlation_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and not(((ap_const_logic_0 = ap_sig_ioackin_out_correlation_TREADY)))))) then 
                    ap_reg_ioackin_out_correlation_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and (ap_const_logic_1 = out_correlation_TREADY)))) then 
                    ap_reg_ioackin_out_correlation_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- column_index_i_reg_222 assign process. --
    column_index_i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and not(((ap_const_logic_0 = ap_sig_ioackin_out_correlation_TREADY))))) then 
                column_index_i_reg_222 <= column_index_reg_438;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                column_index_i_reg_222 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_272))) then
                NUMBER_OF_INDICES_read_reg_366 <= NUMBER_OF_INDICES_dout;
                tmp_i_reg_372 <= tmp_i_fu_330_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then
                column_index_reg_438 <= column_index_fu_355_p2;
                tmp_10_reg_397 <= sum_return_in_V_dout;
                tmp_11_reg_402 <= sum_weight_returnSquare_in_V_dout;
                tmp_12_reg_407 <= sum_weight_return_in_V_dout;
                tmp_13_reg_413 <= sum_weight_returnA_returnB_in_s_dout;
                tmp_14_reg_418 <= sum_returnA_in_V_dout;
                tmp_15_reg_423 <= sum_weight_returnSquareA_in_V_dout;
                tmp_16_reg_428 <= sum_weight_returnA_in_V_dout;
                tmp_32_i_reg_433 <= tmp_32_i_fu_350_p2;
                tmp_reg_391 <= sum_weight_in_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52))) then
                reg_277 <= grp_fu_256_p2;
                reg_285 <= grp_fu_260_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77))) then
                reg_294 <= grp_fu_242_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then
                reg_301 <= grp_fu_247_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27))) then
                reg_307 <= grp_fu_252_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57))) then
                reg_312 <= grp_fu_234_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58))) then
                reg_319 <= grp_fu_234_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then
                reg_324 <= grp_fu_238_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_1_i_reg_383 <= tmp_1_i_fu_336_p2;
                tmp_i_24_reg_377 <= grp_fu_264_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then
                tmp_25_i_reg_443 <= grp_fu_242_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then
                tmp_27_i_reg_448 <= grp_fu_256_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73)) then
                volatilityA_reg_453 <= grp_fu_267_p2;
                volatilityB_reg_458 <= grp_fu_272_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_272, tmp_2_i_fu_345_p2, ap_sig_bdd_324, ap_sig_ioackin_out_correlation_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_272)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (((tmp_2_i_fu_345_p2 = ap_const_lv1_0) and not(ap_sig_bdd_324))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_out_correlation_TREADY)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st94_fsm_93;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- NUMBER_OF_DAYS_read assign process. --
    NUMBER_OF_DAYS_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_272)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_272))) then 
            NUMBER_OF_DAYS_read <= ap_const_logic_1;
        else 
            NUMBER_OF_DAYS_read <= ap_const_logic_0;
        end if; 
    end process;


    -- NUMBER_OF_INDICES_read assign process. --
    NUMBER_OF_INDICES_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_272)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_272))) then 
            NUMBER_OF_INDICES_read <= ap_const_logic_1;
        else 
            NUMBER_OF_INDICES_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (tmp_2_i_fu_345_p2 = ap_const_lv1_0) and not(ap_sig_bdd_324)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (tmp_2_i_fu_345_p2 = ap_const_lv1_0) and not(ap_sig_bdd_324))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1002 assign process. --
    ap_sig_bdd_1002_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1002 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_1010 assign process. --
    ap_sig_bdd_1010_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1010 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_1018 assign process. --
    ap_sig_bdd_1018_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1018 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    -- ap_sig_bdd_1026 assign process. --
    ap_sig_bdd_1026_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1026 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    -- ap_sig_bdd_1034 assign process. --
    ap_sig_bdd_1034_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1034 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    -- ap_sig_bdd_1044 assign process. --
    ap_sig_bdd_1044_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1044 <= (ap_const_lv1_1 = ap_CS_fsm(75 downto 75));
    end process;


    -- ap_sig_bdd_1052 assign process. --
    ap_sig_bdd_1052_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1052 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_176 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    -- ap_sig_bdd_195 assign process. --
    ap_sig_bdd_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_195 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_202 assign process. --
    ap_sig_bdd_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_202 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_211 <= (ap_const_lv1_1 = ap_CS_fsm(77 downto 77));
    end process;


    -- ap_sig_bdd_226 assign process. --
    ap_sig_bdd_226_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_226 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_241 assign process. --
    ap_sig_bdd_241_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_241 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_250 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_257 assign process. --
    ap_sig_bdd_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_257 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    -- ap_sig_bdd_272 assign process. --
    ap_sig_bdd_272_assign_proc : process(ap_start, ap_done_reg, NUMBER_OF_DAYS_empty_n, NUMBER_OF_INDICES_empty_n)
    begin
                ap_sig_bdd_272 <= ((NUMBER_OF_INDICES_empty_n = ap_const_logic_0) or (NUMBER_OF_DAYS_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_284 assign process. --
    ap_sig_bdd_284_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_284 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_295 assign process. --
    ap_sig_bdd_295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_295 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_324 assign process. --
    ap_sig_bdd_324_assign_proc : process(sum_weight_in_V_empty_n, sum_return_in_V_empty_n, sum_weight_returnSquare_in_V_empty_n, sum_weight_return_in_V_empty_n, sum_weight_returnA_returnB_in_s_empty_n, sum_returnA_in_V_empty_n, sum_weight_returnSquareA_in_V_empty_n, sum_weight_returnA_in_V_empty_n, tmp_2_i_fu_345_p2)
    begin
                ap_sig_bdd_324 <= (((sum_weight_in_V_empty_n = ap_const_logic_0) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0))) or (not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and (sum_return_in_V_empty_n = ap_const_logic_0)) or (not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and (sum_weight_returnSquare_in_V_empty_n = ap_const_logic_0)) or (not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and (sum_weight_return_in_V_empty_n = ap_const_logic_0)) or (not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and (sum_weight_returnA_returnB_in_s_empty_n = ap_const_logic_0)) or (not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and (sum_returnA_in_V_empty_n = ap_const_logic_0)) or (not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and (sum_weight_returnSquareA_in_V_empty_n = ap_const_logic_0)) or (not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and (sum_weight_returnA_in_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_353 assign process. --
    ap_sig_bdd_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_353 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    -- ap_sig_bdd_362 assign process. --
    ap_sig_bdd_362_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_362 <= (ap_const_lv1_1 = ap_CS_fsm(73 downto 73));
    end process;


    -- ap_sig_bdd_374 assign process. --
    ap_sig_bdd_374_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_374 <= (ap_const_lv1_1 = ap_CS_fsm(93 downto 93));
    end process;


    -- ap_sig_bdd_411 assign process. --
    ap_sig_bdd_411_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_411 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_418 assign process. --
    ap_sig_bdd_418_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_418 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_425 assign process. --
    ap_sig_bdd_425_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_425 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    -- ap_sig_bdd_439 assign process. --
    ap_sig_bdd_439_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_439 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_446 assign process. --
    ap_sig_bdd_446_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_446 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_453 assign process. --
    ap_sig_bdd_453_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_453 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_461 assign process. --
    ap_sig_bdd_461_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_461 <= (ap_const_lv1_1 = ap_CS_fsm(74 downto 74));
    end process;


    -- ap_sig_bdd_475 assign process. --
    ap_sig_bdd_475_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_475 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_482 assign process. --
    ap_sig_bdd_482_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_482 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_489 assign process. --
    ap_sig_bdd_489_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_489 <= (ap_const_lv1_1 = ap_CS_fsm(78 downto 78));
    end process;


    -- ap_sig_bdd_501 assign process. --
    ap_sig_bdd_501_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_501 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_829 assign process. --
    ap_sig_bdd_829_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_829 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_837 assign process. --
    ap_sig_bdd_837_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_837 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_845 assign process. --
    ap_sig_bdd_845_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_845 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_853 assign process. --
    ap_sig_bdd_853_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_853 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_864 assign process. --
    ap_sig_bdd_864_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_864 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_872 assign process. --
    ap_sig_bdd_872_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_872 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_883 assign process. --
    ap_sig_bdd_883_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_883 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_894 assign process. --
    ap_sig_bdd_894_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_894 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_902 assign process. --
    ap_sig_bdd_902_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_902 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_912 assign process. --
    ap_sig_bdd_912_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_912 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    -- ap_sig_bdd_920 assign process. --
    ap_sig_bdd_920_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_920 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_930 assign process. --
    ap_sig_bdd_930_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_930 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    -- ap_sig_bdd_938 assign process. --
    ap_sig_bdd_938_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_938 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_946 assign process. --
    ap_sig_bdd_946_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_946 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_954 assign process. --
    ap_sig_bdd_954_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_954 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    -- ap_sig_bdd_962 assign process. --
    ap_sig_bdd_962_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_962 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_970 assign process. --
    ap_sig_bdd_970_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_970 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    -- ap_sig_bdd_978 assign process. --
    ap_sig_bdd_978_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_978 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    -- ap_sig_bdd_986 assign process. --
    ap_sig_bdd_986_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_986 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    -- ap_sig_bdd_994 assign process. --
    ap_sig_bdd_994_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_994 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_176)
    begin
        if (ap_sig_bdd_176) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_439)
    begin
        if (ap_sig_bdd_439) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_864)
    begin
        if (ap_sig_bdd_864) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_872)
    begin
        if (ap_sig_bdd_872) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_195)
    begin
        if (ap_sig_bdd_195) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_411)
    begin
        if (ap_sig_bdd_411) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_501)
    begin
        if (ap_sig_bdd_501) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_446)
    begin
        if (ap_sig_bdd_446) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_883)
    begin
        if (ap_sig_bdd_883) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_202)
    begin
        if (ap_sig_bdd_202) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_226)
    begin
        if (ap_sig_bdd_226) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_418)
    begin
        if (ap_sig_bdd_418) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_894)
    begin
        if (ap_sig_bdd_894) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_902)
    begin
        if (ap_sig_bdd_902) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_250)
    begin
        if (ap_sig_bdd_250) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_482)
    begin
        if (ap_sig_bdd_482) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_829)
    begin
        if (ap_sig_bdd_829) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_837)
    begin
        if (ap_sig_bdd_837) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_453)
    begin
        if (ap_sig_bdd_453) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st53_fsm_52 assign process. --
    ap_sig_cseq_ST_st53_fsm_52_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st54_fsm_53 assign process. --
    ap_sig_cseq_ST_st54_fsm_53_assign_proc : process(ap_sig_bdd_353)
    begin
        if (ap_sig_bdd_353) then 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st55_fsm_54 assign process. --
    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_bdd_425)
    begin
        if (ap_sig_bdd_425) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st56_fsm_55 assign process. --
    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_bdd_912)
    begin
        if (ap_sig_bdd_912) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_56 assign process. --
    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_bdd_920)
    begin
        if (ap_sig_bdd_920) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st58_fsm_57 assign process. --
    ap_sig_cseq_ST_st58_fsm_57_assign_proc : process(ap_sig_bdd_241)
    begin
        if (ap_sig_bdd_241) then 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st59_fsm_58 assign process. --
    ap_sig_cseq_ST_st59_fsm_58_assign_proc : process(ap_sig_bdd_257)
    begin
        if (ap_sig_bdd_257) then 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_845)
    begin
        if (ap_sig_bdd_845) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st60_fsm_59 assign process. --
    ap_sig_cseq_ST_st60_fsm_59_assign_proc : process(ap_sig_bdd_930)
    begin
        if (ap_sig_bdd_930) then 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st61_fsm_60 assign process. --
    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_bdd_938)
    begin
        if (ap_sig_bdd_938) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st62_fsm_61 assign process. --
    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_bdd_946)
    begin
        if (ap_sig_bdd_946) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st63_fsm_62 assign process. --
    ap_sig_cseq_ST_st63_fsm_62_assign_proc : process(ap_sig_bdd_954)
    begin
        if (ap_sig_bdd_954) then 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st64_fsm_63 assign process. --
    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_bdd_962)
    begin
        if (ap_sig_bdd_962) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st65_fsm_64 assign process. --
    ap_sig_cseq_ST_st65_fsm_64_assign_proc : process(ap_sig_bdd_970)
    begin
        if (ap_sig_bdd_970) then 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st66_fsm_65 assign process. --
    ap_sig_cseq_ST_st66_fsm_65_assign_proc : process(ap_sig_bdd_978)
    begin
        if (ap_sig_bdd_978) then 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st67_fsm_66 assign process. --
    ap_sig_cseq_ST_st67_fsm_66_assign_proc : process(ap_sig_bdd_986)
    begin
        if (ap_sig_bdd_986) then 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st68_fsm_67 assign process. --
    ap_sig_cseq_ST_st68_fsm_67_assign_proc : process(ap_sig_bdd_994)
    begin
        if (ap_sig_bdd_994) then 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_68 assign process. --
    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_bdd_1002)
    begin
        if (ap_sig_bdd_1002) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_853)
    begin
        if (ap_sig_bdd_853) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st70_fsm_69 assign process. --
    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_bdd_1010)
    begin
        if (ap_sig_bdd_1010) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st71_fsm_70 assign process. --
    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_bdd_1018)
    begin
        if (ap_sig_bdd_1018) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st72_fsm_71 assign process. --
    ap_sig_cseq_ST_st72_fsm_71_assign_proc : process(ap_sig_bdd_1026)
    begin
        if (ap_sig_bdd_1026) then 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st73_fsm_72 assign process. --
    ap_sig_cseq_ST_st73_fsm_72_assign_proc : process(ap_sig_bdd_1034)
    begin
        if (ap_sig_bdd_1034) then 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st74_fsm_73 assign process. --
    ap_sig_cseq_ST_st74_fsm_73_assign_proc : process(ap_sig_bdd_362)
    begin
        if (ap_sig_bdd_362) then 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st75_fsm_74 assign process. --
    ap_sig_cseq_ST_st75_fsm_74_assign_proc : process(ap_sig_bdd_461)
    begin
        if (ap_sig_bdd_461) then 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st76_fsm_75 assign process. --
    ap_sig_cseq_ST_st76_fsm_75_assign_proc : process(ap_sig_bdd_1044)
    begin
        if (ap_sig_bdd_1044) then 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st77_fsm_76 assign process. --
    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_bdd_1052)
    begin
        if (ap_sig_bdd_1052) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st78_fsm_77 assign process. --
    ap_sig_cseq_ST_st78_fsm_77_assign_proc : process(ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st79_fsm_78 assign process. --
    ap_sig_cseq_ST_st79_fsm_78_assign_proc : process(ap_sig_bdd_489)
    begin
        if (ap_sig_bdd_489) then 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_284)
    begin
        if (ap_sig_bdd_284) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_295)
    begin
        if (ap_sig_bdd_295) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st94_fsm_93 assign process. --
    ap_sig_cseq_ST_st94_fsm_93_assign_proc : process(ap_sig_bdd_374)
    begin
        if (ap_sig_bdd_374) then 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_475)
    begin
        if (ap_sig_bdd_475) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_out_correlation_TREADY assign process. --
    ap_sig_ioackin_out_correlation_TREADY_assign_proc : process(out_correlation_TREADY, ap_reg_ioackin_out_correlation_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_correlation_TREADY)) then 
            ap_sig_ioackin_out_correlation_TREADY <= out_correlation_TREADY;
        else 
            ap_sig_ioackin_out_correlation_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    column_index_cast_i_fu_341_p1 <= std_logic_vector(resize(unsigned(column_index_i_reg_222),32));
    column_index_fu_355_p2 <= std_logic_vector(unsigned(column_index_i_reg_222) + unsigned(ap_const_lv31_1));
    grp_fu_234_ce <= ap_const_logic_1;

    -- grp_fu_234_opcode assign process. --
    grp_fu_234_opcode_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st54_fsm_53, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st55_fsm_54)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            grp_fu_234_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then 
            grp_fu_234_opcode <= ap_const_lv2_0;
        else 
            grp_fu_234_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_234_p0 assign process. --
    grp_fu_234_p0_assign_proc : process(reg_277, reg_312, ap_sig_cseq_ST_st33_fsm_32, tmp_13_reg_413, tmp_15_reg_423, tmp_27_i_reg_448, ap_sig_cseq_ST_st54_fsm_53, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st55_fsm_54)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
            grp_fu_234_p0 <= tmp_27_i_reg_448;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
            grp_fu_234_p0 <= reg_277;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_234_p0 <= reg_312;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_234_p0 <= tmp_15_reg_423;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_234_p0 <= tmp_13_reg_413;
        else 
            grp_fu_234_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_234_p1 assign process. --
    grp_fu_234_p1_assign_proc : process(reg_294, reg_307, ap_sig_cseq_ST_st33_fsm_32, tmp_25_i_reg_443, ap_sig_cseq_ST_st54_fsm_53, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st55_fsm_54)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_234_p1 <= tmp_25_i_reg_443;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53))) then 
            grp_fu_234_p1 <= reg_294;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then 
            grp_fu_234_p1 <= reg_307;
        else 
            grp_fu_234_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_238_ce <= ap_const_logic_1;

    -- grp_fu_238_opcode assign process. --
    grp_fu_238_opcode_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st54_fsm_53)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_238_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
            grp_fu_238_opcode <= ap_const_lv2_0;
        else 
            grp_fu_238_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_238_p0 assign process. --
    grp_fu_238_p0_assign_proc : process(reg_285, ap_sig_cseq_ST_st33_fsm_32, tmp_11_reg_402, ap_sig_cseq_ST_st54_fsm_53)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
            grp_fu_238_p0 <= reg_285;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_238_p0 <= tmp_11_reg_402;
        else 
            grp_fu_238_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_238_p1 <= reg_301;
    grp_fu_242_ce <= ap_const_logic_1;

    -- grp_fu_242_p0 assign process. --
    grp_fu_242_p0_assign_proc : process(reg_277, reg_285, reg_294, volatilityA_reg_453, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74)) then 
            grp_fu_242_p0 <= volatilityA_reg_453;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            grp_fu_242_p0 <= reg_285;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_242_p0 <= reg_294;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49))) then 
            grp_fu_242_p0 <= reg_277;
        else 
            grp_fu_242_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_242_p1 assign process. --
    grp_fu_242_p1_assign_proc : process(reg_277, tmp_16_reg_428, volatilityB_reg_458, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74)) then 
            grp_fu_242_p1 <= volatilityB_reg_458;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_242_p1 <= reg_277;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            grp_fu_242_p1 <= tmp_16_reg_428;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_242_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_242_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_247_ce <= ap_const_logic_1;

    -- grp_fu_247_p0 assign process. --
    grp_fu_247_p0_assign_proc : process(reg_285, reg_301, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_247_p0 <= reg_301;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49))) then 
            grp_fu_247_p0 <= reg_285;
        else 
            grp_fu_247_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_247_p1 assign process. --
    grp_fu_247_p1_assign_proc : process(reg_285, tmp_12_reg_407, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_247_p1 <= reg_285;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_247_p1 <= tmp_12_reg_407;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_247_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_247_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_252_ce <= ap_const_logic_1;
    grp_fu_252_p0 <= reg_277;

    -- grp_fu_252_p1 assign process. --
    grp_fu_252_p1_assign_proc : process(reg_285, tmp_12_reg_407, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_252_p1 <= reg_285;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_252_p1 <= tmp_12_reg_407;
        else 
            grp_fu_252_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_256_ce assign process. --
    grp_fu_256_ce_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st78_fsm_77, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st58_fsm_57, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st59_fsm_58, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st74_fsm_73, ap_sig_cseq_ST_st94_fsm_93, ap_sig_ioackin_out_correlation_TREADY, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st55_fsm_54, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st75_fsm_74, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st36_fsm_35, ap_sig_cseq_ST_st56_fsm_55, ap_sig_cseq_ST_st57_fsm_56, ap_sig_cseq_ST_st60_fsm_59, ap_sig_cseq_ST_st61_fsm_60, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st63_fsm_62, ap_sig_cseq_ST_st64_fsm_63, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st66_fsm_65, ap_sig_cseq_ST_st67_fsm_66, ap_sig_cseq_ST_st68_fsm_67, ap_sig_cseq_ST_st69_fsm_68, ap_sig_cseq_ST_st70_fsm_69, ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st72_fsm_71, ap_sig_cseq_ST_st73_fsm_72, ap_sig_cseq_ST_st76_fsm_75, ap_sig_cseq_ST_st77_fsm_76)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77) or (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and ((ap_const_logic_0 = ap_sig_ioackin_out_correlation_TREADY))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) or (ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) or (ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63) or (ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65) or (ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66) or (ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67) or (ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) or (ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72) or (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75) or (ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76))) then 
            grp_fu_256_ce <= ap_const_logic_0;
        else 
            grp_fu_256_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fu_256_p0 assign process. --
    grp_fu_256_p0_assign_proc : process(reg_312, ap_sig_cseq_ST_st38_fsm_37, reg_319, tmp_14_reg_418, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st79_fsm_78)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            grp_fu_256_p0 <= reg_312;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78))) then 
            grp_fu_256_p0 <= reg_319;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_256_p0 <= tmp_14_reg_418;
        else 
            grp_fu_256_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_256_p1 assign process. --
    grp_fu_256_p1_assign_proc : process(reg_294, ap_sig_cseq_ST_st38_fsm_37, tmp_i_24_reg_377, tmp_reg_391, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st79_fsm_78)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78)) then 
            grp_fu_256_p1 <= reg_294;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            grp_fu_256_p1 <= tmp_reg_391;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_256_p1 <= tmp_i_24_reg_377;
        else 
            grp_fu_256_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_260_ce <= ap_const_logic_1;

    -- grp_fu_260_p0 assign process. --
    grp_fu_260_p0_assign_proc : process(ap_sig_cseq_ST_st38_fsm_37, reg_324, tmp_10_reg_397, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            grp_fu_260_p0 <= reg_324;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_260_p0 <= tmp_10_reg_397;
        else 
            grp_fu_260_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_260_p1 assign process. --
    grp_fu_260_p1_assign_proc : process(ap_sig_cseq_ST_st38_fsm_37, tmp_i_24_reg_377, tmp_reg_391, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            grp_fu_260_p1 <= tmp_reg_391;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_260_p1 <= tmp_i_24_reg_377;
        else 
            grp_fu_260_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_264_ce <= ap_const_logic_1;
    grp_fu_264_p0 <= tmp_i_reg_372;
    grp_fu_267_ce <= ap_const_logic_1;
    grp_fu_267_p0 <= ap_const_lv32_0;
    grp_fu_267_p1 <= reg_312;
    grp_fu_272_ce <= ap_const_logic_1;
    grp_fu_272_p0 <= ap_const_lv32_0;
    grp_fu_272_p1 <= reg_324;
    out_correlation_TDATA <= grp_fu_256_p2;
    out_correlation_TDEST <= ap_const_lv1_0;
    out_correlation_TID <= ap_const_lv1_0;
    out_correlation_TKEEP <= ap_const_lv4_F;
    out_correlation_TLAST <= tmp_32_i_reg_433;
    out_correlation_TSTRB <= ap_const_lv4_1;
    out_correlation_TUSER <= ap_const_lv1_0;

    -- out_correlation_TVALID assign process. --
    out_correlation_TVALID_assign_proc : process(ap_sig_cseq_ST_st94_fsm_93, ap_reg_ioackin_out_correlation_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and (ap_const_logic_0 = ap_reg_ioackin_out_correlation_TREADY)))) then 
            out_correlation_TVALID <= ap_const_logic_1;
        else 
            out_correlation_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_returnA_in_V_read assign process. --
    sum_returnA_in_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then 
            sum_returnA_in_V_read <= ap_const_logic_1;
        else 
            sum_returnA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_return_in_V_read assign process. --
    sum_return_in_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then 
            sum_return_in_V_read <= ap_const_logic_1;
        else 
            sum_return_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_in_V_read assign process. --
    sum_weight_in_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then 
            sum_weight_in_V_read <= ap_const_logic_1;
        else 
            sum_weight_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnA_in_V_read assign process. --
    sum_weight_returnA_in_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then 
            sum_weight_returnA_in_V_read <= ap_const_logic_1;
        else 
            sum_weight_returnA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnA_returnB_in_s_read assign process. --
    sum_weight_returnA_returnB_in_s_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then 
            sum_weight_returnA_returnB_in_s_read <= ap_const_logic_1;
        else 
            sum_weight_returnA_returnB_in_s_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnSquareA_in_V_read assign process. --
    sum_weight_returnSquareA_in_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then 
            sum_weight_returnSquareA_in_V_read <= ap_const_logic_1;
        else 
            sum_weight_returnSquareA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnSquare_in_V_read assign process. --
    sum_weight_returnSquare_in_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then 
            sum_weight_returnSquare_in_V_read <= ap_const_logic_1;
        else 
            sum_weight_returnSquare_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_return_in_V_read assign process. --
    sum_weight_return_in_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_2_i_fu_345_p2, ap_sig_bdd_324)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_2_i_fu_345_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_324))) then 
            sum_weight_return_in_V_read <= ap_const_logic_1;
        else 
            sum_weight_return_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_i_fu_336_p2 <= std_logic_vector(unsigned(NUMBER_OF_INDICES_read_reg_366) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_2_i_fu_345_p2 <= "1" when (signed(column_index_cast_i_fu_341_p1) < signed(NUMBER_OF_INDICES_read_reg_366)) else "0";
    tmp_32_i_fu_350_p2 <= "1" when (column_index_cast_i_fu_341_p1 = tmp_1_i_reg_383) else "0";
    tmp_i_fu_330_p2 <= std_logic_vector(unsigned(NUMBER_OF_DAYS_dout) + unsigned(ap_const_lv32_FFFFFFFF));
end behav;
