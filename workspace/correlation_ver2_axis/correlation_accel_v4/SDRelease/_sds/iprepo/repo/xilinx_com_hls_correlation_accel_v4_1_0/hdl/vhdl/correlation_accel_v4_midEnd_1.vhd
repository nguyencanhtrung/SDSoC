-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlation_accel_v4_midEnd_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NUMBER_OF_DAYS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_DAYS_empty_n : IN STD_LOGIC;
    NUMBER_OF_DAYS_read : OUT STD_LOGIC;
    NUMBER_OF_INDICES_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES_empty_n : IN STD_LOGIC;
    NUMBER_OF_INDICES_read : OUT STD_LOGIC;
    ln_returnA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ln_returnA_in_V_empty_n : IN STD_LOGIC;
    ln_returnA_in_V_read : OUT STD_LOGIC;
    weight_returnSquareA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnSquareA_in_V_empty_n : IN STD_LOGIC;
    weight_returnSquareA_in_V_read : OUT STD_LOGIC;
    weight_returnA_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnA_in_V_empty_n : IN STD_LOGIC;
    weight_returnA_in_V_read : OUT STD_LOGIC;
    sum_weight_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_in_V_empty_n : IN STD_LOGIC;
    sum_weight_in_V_read : OUT STD_LOGIC;
    ln_returnB_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ln_returnB_in_V_empty_n : IN STD_LOGIC;
    ln_returnB_in_V_read : OUT STD_LOGIC;
    weight_returnSquareB_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnSquareB_in_V_empty_n : IN STD_LOGIC;
    weight_returnSquareB_in_V_read : OUT STD_LOGIC;
    weight_returnB_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnB_in_V_empty_n : IN STD_LOGIC;
    weight_returnB_in_V_read : OUT STD_LOGIC;
    weight_returnA_returnB_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_returnA_returnB_in_V_empty_n : IN STD_LOGIC;
    weight_returnA_returnB_in_V_read : OUT STD_LOGIC;
    sum_weight_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_out_V_full_n : IN STD_LOGIC;
    sum_weight_out_V_write : OUT STD_LOGIC;
    sum_return_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_return_out_V_full_n : IN STD_LOGIC;
    sum_return_out_V_write : OUT STD_LOGIC;
    sum_weight_returnSquare_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquare_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnSquare_out_V_write : OUT STD_LOGIC;
    sum_weight_return_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_return_out_V_full_n : IN STD_LOGIC;
    sum_weight_return_out_V_write : OUT STD_LOGIC;
    sum_weight_returnA_returnB_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_returnB_out_full_n : IN STD_LOGIC;
    sum_weight_returnA_returnB_out_write : OUT STD_LOGIC;
    sum_returnA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_returnA_out_V_full_n : IN STD_LOGIC;
    sum_returnA_out_V_write : OUT STD_LOGIC;
    sum_weight_returnSquareA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquareA_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnSquareA_out_V_write : OUT STD_LOGIC;
    sum_weight_returnA_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_out_V_full_n : IN STD_LOGIC;
    sum_weight_returnA_out_V_write : OUT STD_LOGIC );
end;


architecture behav of correlation_accel_v4_midEnd_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_pp0_stg0_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_pp1_stg0_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_pp1_stg1_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_pp1_stg2_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_pp1_stg3_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_pp1_stg4_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st57_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_31 : BOOLEAN;
    signal tmp_10_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it34 : STD_LOGIC := '0';
    signal tmp_9_i_reg_1352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_219 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it40 : STD_LOGIC := '0';
    signal tmp_11_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_reg_893 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg1_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_298 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal exitcond_i_reg_1443 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_weight_returnSquareA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg2_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_325 : BOOLEAN;
    signal acc_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg3_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_346 : BOOLEAN;
    signal acc_weight_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_984 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_990 : STD_LOGIC_VECTOR (31 downto 0);
    signal NUMBER_OF_INDICES_read_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_372 : BOOLEAN;
    signal NUMBER_OF_DAYS_read_reg_1124 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_bound_fu_1048_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal upper_bound_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_384 : BOOLEAN;
    signal tmp_i_9_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_9_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_addr_gep_fu_310_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_reg_1139 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_gep_fu_317_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_reg_1144 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_gep_fu_324_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_reg_1149 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_gep_fu_331_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_reg_1154 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_gep_fu_338_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_reg_1159 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_gep_fu_345_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_reg_1164 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_gep_fu_352_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_reg_1169 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_8_gep_fu_359_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_8_reg_1174 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_8_gep_fu_366_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_8_reg_1179 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_8_gep_fu_373_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_8_reg_1184 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_8_gep_fu_380_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_8_reg_1189 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_8_gep_fu_387_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_8_reg_1194 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_8_gep_fu_394_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_8_reg_1199 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_8_gep_fu_401_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_8_reg_1204 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_9_gep_fu_408_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_9_reg_1209 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_9_gep_fu_415_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_9_reg_1214 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_9_gep_fu_422_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_9_reg_1219 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_9_gep_fu_429_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_9_reg_1224 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_9_gep_fu_436_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_9_reg_1229 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_9_gep_fu_443_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_9_reg_1234 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_9_gep_fu_450_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_9_reg_1239 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_10_gep_fu_457_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_10_reg_1244 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_10_gep_fu_464_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_10_reg_1249 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_10_gep_fu_471_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_10_reg_1254 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_10_gep_fu_478_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_10_reg_1259 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_10_gep_fu_485_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_10_reg_1264 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_10_gep_fu_492_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_10_reg_1269 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_10_gep_fu_499_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_10_reg_1274 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_11_gep_fu_506_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_11_reg_1279 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_11_gep_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_11_reg_1284 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_11_gep_fu_520_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_11_reg_1289 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_11_gep_fu_527_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_11_reg_1294 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_11_gep_fu_534_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_11_reg_1299 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_11_gep_fu_541_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_11_reg_1304 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_11_gep_fu_548_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_11_reg_1309 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_12_gep_fu_555_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_12_reg_1314 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_12_gep_fu_562_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_12_reg_1319 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_12_gep_fu_569_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_12_reg_1324 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_12_gep_fu_576_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_12_reg_1329 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_12_gep_fu_583_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_12_reg_1334 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_12_gep_fu_590_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_12_reg_1339 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_12_gep_fu_597_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_12_reg_1344 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_i_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1077_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_1361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_34_reg_1361_pp0_it36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_34_reg_1361_pp0_it37 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_34_reg_1361_pp0_it38 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_34_reg_1361_pp0_it39 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_addr_13_reg_1401 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_13_reg_1407 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_13_reg_1413 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_13_reg_1419 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_13_reg_1425 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_13_reg_1431 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_13_reg_1437 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_i_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_631 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1100_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1447 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_43_i_fu_1106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_i_reg_1452 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnA_reg_1496 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA_reg_1501 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnB_reg_1511 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareB_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnB_reg_1521 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg4_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_677 : BOOLEAN;
    signal column_index_fu_1112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st57_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_688 : BOOLEAN;
    signal ap_sig_bdd_705 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_713 : BOOLEAN;
    signal acc_returnA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_ce0 : STD_LOGIC;
    signal acc_returnA_we0 : STD_LOGIC;
    signal acc_returnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_ce1 : STD_LOGIC;
    signal acc_returnA_we1 : STD_LOGIC;
    signal acc_returnA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_ce0 : STD_LOGIC;
    signal acc_weight_returnSquareA_we0 : STD_LOGIC;
    signal acc_weight_returnSquareA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_ce1 : STD_LOGIC;
    signal acc_weight_returnSquareA_we1 : STD_LOGIC;
    signal acc_weight_returnSquareA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_ce0 : STD_LOGIC;
    signal acc_weight_returnA_we0 : STD_LOGIC;
    signal acc_weight_returnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_ce1 : STD_LOGIC;
    signal acc_weight_returnA_we1 : STD_LOGIC;
    signal acc_weight_returnA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_ce0 : STD_LOGIC;
    signal acc_returnB_we0 : STD_LOGIC;
    signal acc_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_ce1 : STD_LOGIC;
    signal acc_returnB_we1 : STD_LOGIC;
    signal acc_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_ce0 : STD_LOGIC;
    signal acc_weight_returnSquareB_we0 : STD_LOGIC;
    signal acc_weight_returnSquareB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_ce1 : STD_LOGIC;
    signal acc_weight_returnSquareB_we1 : STD_LOGIC;
    signal acc_weight_returnSquareB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_i_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_i_phi_fu_794_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_phi_fu_820_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_phi_fu_833_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_phi_fu_846_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_phi_fu_859_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_phi_fu_872_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_phi_fu_885_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_i_phi_fu_897_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_i_fu_1083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_870 : BOOLEAN;
    signal tmp_1_i_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_880 : BOOLEAN;
    signal grp_fu_923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_929_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_917_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_905_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_911_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_917_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_917_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_923_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_923_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_929_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_929_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_935_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_941_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_941_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_i_fu_1009_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_i_fu_1014_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_1024_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_i_fu_1034_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_1001_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_i_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1044_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1071_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1071_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1071_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_905_ce : STD_LOGIC;
    signal grp_fu_911_ce : STD_LOGIC;
    signal grp_fu_917_ce : STD_LOGIC;
    signal grp_fu_923_ce : STD_LOGIC;
    signal grp_fu_929_ce : STD_LOGIC;
    signal grp_fu_935_ce : STD_LOGIC;
    signal grp_fu_941_ce : STD_LOGIC;
    signal grp_fu_1071_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v4_srem_32ns_4ns_32_36 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v4_midEnd_acc_returnA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    acc_returnA_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_returnA_address0,
        ce0 => acc_returnA_ce0,
        we0 => acc_returnA_we0,
        d0 => acc_returnA_d0,
        q0 => acc_returnA_q0,
        address1 => acc_returnA_address1,
        ce1 => acc_returnA_ce1,
        we1 => acc_returnA_we1,
        d1 => acc_returnA_d1);

    acc_weight_returnSquareA_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnSquareA_address0,
        ce0 => acc_weight_returnSquareA_ce0,
        we0 => acc_weight_returnSquareA_we0,
        d0 => acc_weight_returnSquareA_d0,
        q0 => acc_weight_returnSquareA_q0,
        address1 => acc_weight_returnSquareA_address1,
        ce1 => acc_weight_returnSquareA_ce1,
        we1 => acc_weight_returnSquareA_we1,
        d1 => acc_weight_returnSquareA_d1);

    acc_weight_returnA_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnA_address0,
        ce0 => acc_weight_returnA_ce0,
        we0 => acc_weight_returnA_we0,
        d0 => acc_weight_returnA_d0,
        q0 => acc_weight_returnA_q0,
        address1 => acc_weight_returnA_address1,
        ce1 => acc_weight_returnA_ce1,
        we1 => acc_weight_returnA_we1,
        d1 => acc_weight_returnA_d1);

    acc_returnB_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_returnB_address0,
        ce0 => acc_returnB_ce0,
        we0 => acc_returnB_we0,
        d0 => acc_returnB_d0,
        q0 => acc_returnB_q0,
        address1 => acc_returnB_address1,
        ce1 => acc_returnB_ce1,
        we1 => acc_returnB_we1,
        d1 => acc_returnB_d1);

    acc_weight_returnSquareB_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnSquareB_address0,
        ce0 => acc_weight_returnSquareB_ce0,
        we0 => acc_weight_returnSquareB_we0,
        d0 => acc_weight_returnSquareB_d0,
        q0 => acc_weight_returnSquareB_q0,
        address1 => acc_weight_returnSquareB_address1,
        ce1 => acc_weight_returnSquareB_ce1,
        we1 => acc_weight_returnSquareB_we1,
        d1 => acc_weight_returnSquareB_d1);

    acc_weight_returnB_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnB_address0,
        ce0 => acc_weight_returnB_ce0,
        we0 => acc_weight_returnB_we0,
        d0 => acc_weight_returnB_d0,
        q0 => acc_weight_returnB_q0,
        address1 => acc_weight_returnB_address1,
        ce1 => acc_weight_returnB_ce1,
        we1 => acc_weight_returnB_we1,
        d1 => acc_weight_returnB_d1);

    acc_weight_returnA_returnB_U : component correlation_accel_v4_midEnd_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_weight_returnA_returnB_address0,
        ce0 => acc_weight_returnA_returnB_ce0,
        we0 => acc_weight_returnA_returnB_we0,
        d0 => acc_weight_returnA_returnB_d0,
        q0 => acc_weight_returnA_returnB_q0,
        address1 => acc_weight_returnA_returnB_address1,
        ce1 => acc_weight_returnA_returnB_ce1,
        we1 => acc_weight_returnA_returnB_we1,
        d1 => acc_weight_returnA_returnB_d1);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U72 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_905_p0,
        din1 => grp_fu_905_p1,
        ce => grp_fu_905_ce,
        dout => grp_fu_905_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U73 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_911_p0,
        din1 => grp_fu_911_p1,
        ce => grp_fu_911_ce,
        dout => grp_fu_911_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U74 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_917_p0,
        din1 => grp_fu_917_p1,
        ce => grp_fu_917_ce,
        dout => grp_fu_917_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U75 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_923_p0,
        din1 => grp_fu_923_p1,
        ce => grp_fu_923_ce,
        dout => grp_fu_923_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U76 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_929_p0,
        din1 => grp_fu_929_p1,
        ce => grp_fu_929_ce,
        dout => grp_fu_929_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U77 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_935_p0,
        din1 => grp_fu_935_p1,
        ce => grp_fu_935_ce,
        dout => grp_fu_935_p2);

    correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp_U78 : component correlation_accel_v4_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_941_p0,
        din1 => grp_fu_941_p1,
        ce => grp_fu_941_ce,
        dout => grp_fu_941_p2);

    correlation_accel_v4_srem_32ns_4ns_32_36_U79 : component correlation_accel_v4_srem_32ns_4ns_32_36
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1071_p0,
        din1 => grp_fu_1071_p1,
        ce => grp_fu_1071_ce,
        dout => grp_fu_1071_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_i_fu_1061_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = tmp_9_i_fu_1066_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it26 assign process. --
    ap_reg_ppiten_pp0_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it27 assign process. --
    ap_reg_ppiten_pp0_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it28 assign process. --
    ap_reg_ppiten_pp0_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it29 assign process. --
    ap_reg_ppiten_pp0_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it30 assign process. --
    ap_reg_ppiten_pp0_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it31 assign process. --
    ap_reg_ppiten_pp0_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it32 assign process. --
    ap_reg_ppiten_pp0_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it33 assign process. --
    ap_reg_ppiten_pp0_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it34 assign process. --
    ap_reg_ppiten_pp0_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it35 assign process. --
    ap_reg_ppiten_pp0_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it35 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it35 <= ap_reg_ppiten_pp0_it34;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it36 assign process. --
    ap_reg_ppiten_pp0_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it36 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it36 <= ap_reg_ppiten_pp0_it35;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it37 assign process. --
    ap_reg_ppiten_pp0_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it37 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it37 <= ap_reg_ppiten_pp0_it36;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it38 assign process. --
    ap_reg_ppiten_pp0_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it38 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it38 <= ap_reg_ppiten_pp0_it37;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it39 assign process. --
    ap_reg_ppiten_pp0_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it39 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it39 <= ap_reg_ppiten_pp0_it38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it40 assign process. --
    ap_reg_ppiten_pp0_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it40 <= ap_reg_ppiten_pp0_it39;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and not((ap_const_lv1_0 = exitcond_i_fu_1094_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_i_reg_1443) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10) and not((ap_const_lv1_0 = exitcond_i_reg_1443))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- column_index_i_reg_765 assign process. --
    column_index_i_reg_765_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
                column_index_i_reg_765 <= column_index_fu_1112_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                column_index_i_reg_765 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- i1_i_reg_790 assign process. --
    i1_i_reg_790_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                i1_i_reg_790 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (tmp_9_i_reg_1352 = ap_const_lv1_0))) then 
                i1_i_reg_790 <= i_reg_1356;
            end if; 
        end if;
    end process;

    -- i2_i_reg_893 assign process. --
    i2_i_reg_893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                i2_i_reg_893 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_i_reg_1443) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
                i2_i_reg_893 <= i_2_reg_1447;
            end if; 
        end if;
    end process;

    -- tmp_10_reg_777 assign process. --
    tmp_10_reg_777_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                tmp_10_reg_777 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39))) then 
                tmp_10_reg_777 <= ap_reg_ppstg_tmp_34_reg_1361_pp0_it39;
            end if; 
        end if;
    end process;

    -- tmp_11_reg_802 assign process. --
    tmp_11_reg_802_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                tmp_11_reg_802 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
                tmp_11_reg_802 <= grp_fu_905_p2;
            end if; 
        end if;
    end process;

    -- tmp_12_reg_815 assign process. --
    tmp_12_reg_815_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                tmp_12_reg_815 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
                tmp_12_reg_815 <= sum_weight_returnB_reg_1521;
            end if; 
        end if;
    end process;

    -- tmp_13_reg_828 assign process. --
    tmp_13_reg_828_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                tmp_13_reg_828 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
                tmp_13_reg_828 <= sum_weight_returnSquareB_reg_1516;
            end if; 
        end if;
    end process;

    -- tmp_14_reg_841 assign process. --
    tmp_14_reg_841_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                tmp_14_reg_841 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then 
                tmp_14_reg_841 <= sum_returnB_reg_1511;
            end if; 
        end if;
    end process;

    -- tmp_15_reg_854 assign process. --
    tmp_15_reg_854_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                tmp_15_reg_854 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then 
                tmp_15_reg_854 <= sum_weight_returnA_reg_1506;
            end if; 
        end if;
    end process;

    -- tmp_16_reg_867 assign process. --
    tmp_16_reg_867_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                tmp_16_reg_867 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then 
                tmp_16_reg_867 <= sum_weight_returnSquareA_reg_1501;
            end if; 
        end if;
    end process;

    -- tmp_17_reg_880 assign process. --
    tmp_17_reg_880_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)))) then 
                tmp_17_reg_880 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then 
                tmp_17_reg_880 <= sum_returnA_reg_1496;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_372))) then
                NUMBER_OF_DAYS_read_reg_1124 <= NUMBER_OF_DAYS_dout;
                NUMBER_OF_INDICES_read_reg_1118 <= NUMBER_OF_INDICES_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then
                acc_returnA_addr_13_reg_1401 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
                acc_returnB_addr_13_reg_1419 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
                acc_weight_returnA_addr_13_reg_1413 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
                acc_weight_returnA_returnB_add_13_reg_1437 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
                acc_weight_returnB_addr_13_reg_1431 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
                acc_weight_returnSquareA_addr_13_reg_1407 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
                acc_weight_returnSquareB_addr_13_reg_1425 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
                tmp_35_reg_1366 <= ln_returnA_in_V_dout;
                tmp_36_reg_1371 <= weight_returnA_in_V_dout;
                tmp_37_reg_1376 <= weight_returnSquareA_in_V_dout;
                tmp_38_reg_1381 <= ln_returnB_in_V_dout;
                tmp_39_reg_1386 <= weight_returnB_in_V_dout;
                tmp_40_reg_1391 <= weight_returnSquareB_in_V_dout;
                tmp_41_reg_1396 <= weight_returnA_returnB_in_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) then
                ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it36 <= acc_returnA_addr_13_reg_1401;
                ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it37 <= ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it36;
                ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it38 <= ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it37;
                ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it39 <= ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it38;
                ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it36 <= acc_returnB_addr_13_reg_1419;
                ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it37 <= ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it36;
                ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it38 <= ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it37;
                ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it39 <= ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it38;
                ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it36 <= acc_weight_returnA_addr_13_reg_1413;
                ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it37 <= ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it36;
                ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it38 <= ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it37;
                ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it39 <= ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it38;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it36 <= acc_weight_returnA_returnB_add_13_reg_1437;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it37 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it36;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it38 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it37;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it39 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it38;
                ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it36 <= acc_weight_returnB_addr_13_reg_1431;
                ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it37 <= ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it36;
                ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it38 <= ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it37;
                ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it39 <= ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it38;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it36 <= acc_weight_returnSquareA_addr_13_reg_1407;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it37 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it36;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it38 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it37;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it39 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it38;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it36 <= acc_weight_returnSquareB_addr_13_reg_1425;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it37 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it36;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it38 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it37;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it39 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it38;
                ap_reg_ppstg_tmp_34_reg_1361_pp0_it36 <= tmp_34_reg_1361;
                ap_reg_ppstg_tmp_34_reg_1361_pp0_it37 <= ap_reg_ppstg_tmp_34_reg_1361_pp0_it36;
                ap_reg_ppstg_tmp_34_reg_1361_pp0_it38 <= ap_reg_ppstg_tmp_34_reg_1361_pp0_it37;
                ap_reg_ppstg_tmp_34_reg_1361_pp0_it39 <= ap_reg_ppstg_tmp_34_reg_1361_pp0_it38;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it10 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it9;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it11 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it10;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it12 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it11;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it13 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it12;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it14 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it13;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it15 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it14;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it16 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it15;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it17 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it16;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it18 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it17;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it19 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it18;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it2 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it1;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it20 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it19;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it21 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it20;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it22 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it21;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it23 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it22;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it24 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it23;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it25 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it24;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it26 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it25;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it27 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it26;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it28 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it27;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it29 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it28;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it3 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it2;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it30 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it29;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it31 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it30;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it32 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it31;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it33 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it32;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it33;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it4 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it3;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it5 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it4;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it6 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it5;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it7 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it6;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it8 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it7;
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it9 <= ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6)) then
                ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1 <= exitcond_i_reg_1443;
                exitcond_i_reg_1443 <= exitcond_i_fu_1094_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then
                ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it1 <= tmp_9_i_reg_1352;
                tmp_9_i_reg_1352 <= tmp_9_i_fu_1066_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then
                i_2_reg_1447 <= i_2_fu_1100_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = tmp_9_i_fu_1066_p2))) then
                i_reg_1356 <= i_fu_1077_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_lv1_0 = exitcond_i_reg_1443)))) then
                reg_954 <= acc_returnA_q0;
                reg_960 <= acc_weight_returnSquareA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35)) or ((ap_const_lv1_0 = exitcond_i_reg_1443) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8)))) then
                reg_966 <= acc_weight_returnA_q0;
                reg_972 <= acc_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35)) or ((ap_const_lv1_0 = exitcond_i_reg_1443) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9)))) then
                reg_978 <= acc_weight_returnSquareB_q0;
                reg_984 <= acc_weight_returnB_q0;
                reg_990 <= acc_weight_returnA_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then
                sum_returnA_reg_1496 <= grp_fu_905_p2;
                sum_weight_returnSquareA_reg_1501 <= grp_fu_911_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then
                sum_returnB_reg_1511 <= grp_fu_911_p2;
                sum_weight_returnA_reg_1506 <= grp_fu_905_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then
                sum_weight_returnB_reg_1521 <= grp_fu_911_p2;
                sum_weight_returnSquareB_reg_1516 <= grp_fu_905_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then
                tmp_34_reg_1361 <= sum_weight_in_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and (ap_const_lv1_0 = exitcond_i_fu_1094_p2))) then
                tmp_43_i_reg_1452(0) <= tmp_43_i_fu_1106_p1(0);
    tmp_43_i_reg_1452(1) <= tmp_43_i_fu_1106_p1(1);
    tmp_43_i_reg_1452(2) <= tmp_43_i_fu_1106_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                tmp_i_9_reg_1134 <= tmp_i_9_fu_1056_p2;
                upper_bound_reg_1129 <= upper_bound_fu_1048_p3;
            end if;
        end if;
    end process;
    acc_returnB_addr_reg_1139(2 downto 0) <= "000";
    acc_weight_returnSquareB_addr_reg_1144(2 downto 0) <= "000";
    acc_weight_returnB_addr_reg_1149(2 downto 0) <= "000";
    acc_weight_returnA_returnB_add_reg_1154(2 downto 0) <= "000";
    acc_returnA_addr_reg_1159(2 downto 0) <= "000";
    acc_weight_returnSquareA_addr_reg_1164(2 downto 0) <= "000";
    acc_weight_returnA_addr_reg_1169(2 downto 0) <= "000";
    acc_returnB_addr_8_reg_1174(2 downto 0) <= "001";
    acc_weight_returnSquareB_addr_8_reg_1179(2 downto 0) <= "001";
    acc_weight_returnB_addr_8_reg_1184(2 downto 0) <= "001";
    acc_weight_returnA_returnB_add_8_reg_1189(2 downto 0) <= "001";
    acc_returnA_addr_8_reg_1194(2 downto 0) <= "001";
    acc_weight_returnSquareA_addr_8_reg_1199(2 downto 0) <= "001";
    acc_weight_returnA_addr_8_reg_1204(2 downto 0) <= "001";
    acc_returnB_addr_9_reg_1209(2 downto 0) <= "010";
    acc_weight_returnSquareB_addr_9_reg_1214(2 downto 0) <= "010";
    acc_weight_returnB_addr_9_reg_1219(2 downto 0) <= "010";
    acc_weight_returnA_returnB_add_9_reg_1224(2 downto 0) <= "010";
    acc_returnA_addr_9_reg_1229(2 downto 0) <= "010";
    acc_weight_returnSquareA_addr_9_reg_1234(2 downto 0) <= "010";
    acc_weight_returnA_addr_9_reg_1239(2 downto 0) <= "010";
    acc_returnB_addr_10_reg_1244(2 downto 0) <= "011";
    acc_weight_returnSquareB_addr_10_reg_1249(2 downto 0) <= "011";
    acc_weight_returnB_addr_10_reg_1254(2 downto 0) <= "011";
    acc_weight_returnA_returnB_add_10_reg_1259(2 downto 0) <= "011";
    acc_returnA_addr_10_reg_1264(2 downto 0) <= "011";
    acc_weight_returnSquareA_addr_10_reg_1269(2 downto 0) <= "011";
    acc_weight_returnA_addr_10_reg_1274(2 downto 0) <= "011";
    acc_returnB_addr_11_reg_1279(2 downto 0) <= "100";
    acc_weight_returnSquareB_addr_11_reg_1284(2 downto 0) <= "100";
    acc_weight_returnB_addr_11_reg_1289(2 downto 0) <= "100";
    acc_weight_returnA_returnB_add_11_reg_1294(2 downto 0) <= "100";
    acc_returnA_addr_11_reg_1299(2 downto 0) <= "100";
    acc_weight_returnSquareA_addr_11_reg_1304(2 downto 0) <= "100";
    acc_weight_returnA_addr_11_reg_1309(2 downto 0) <= "100";
    acc_returnB_addr_12_reg_1314(2 downto 0) <= "101";
    acc_weight_returnSquareB_addr_12_reg_1319(2 downto 0) <= "101";
    acc_weight_returnB_addr_12_reg_1324(2 downto 0) <= "101";
    acc_weight_returnA_returnB_add_12_reg_1329(2 downto 0) <= "101";
    acc_returnA_addr_12_reg_1334(2 downto 0) <= "101";
    acc_weight_returnSquareA_addr_12_reg_1339(2 downto 0) <= "101";
    acc_weight_returnA_addr_12_reg_1344(2 downto 0) <= "101";
    tmp_43_i_reg_1452(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it39, ap_reg_ppiten_pp0_it40, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_bdd_372, tmp_9_i_fu_1066_p2, exitcond_i_fu_1094_p2, ap_sig_cseq_ST_pp1_stg4_fsm_10, ap_sig_bdd_705, tmp_1_i_fu_1061_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_372)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_1_i_fu_1061_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
            when ap_ST_pp0_stg0_fsm_5 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it39)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it39))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and not((ap_const_lv1_0 = tmp_9_i_fu_1066_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                end if;
            when ap_ST_pp1_stg0_fsm_6 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_i_fu_1094_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st57_fsm_11;
                end if;
            when ap_ST_pp1_stg1_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp1_stg2_fsm_8;
            when ap_ST_pp1_stg2_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp1_stg3_fsm_9;
            when ap_ST_pp1_stg3_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp1_stg4_fsm_10;
            when ap_ST_pp1_stg4_fsm_10 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st57_fsm_11;
                end if;
            when ap_ST_st57_fsm_11 => 
                if (not(ap_sig_bdd_705)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st57_fsm_11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    -- NUMBER_OF_DAYS_read assign process. --
    NUMBER_OF_DAYS_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_372)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_372))) then 
            NUMBER_OF_DAYS_read <= ap_const_logic_1;
        else 
            NUMBER_OF_DAYS_read <= ap_const_logic_0;
        end if; 
    end process;


    -- NUMBER_OF_INDICES_read assign process. --
    NUMBER_OF_INDICES_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_372)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_372))) then 
            NUMBER_OF_INDICES_read <= ap_const_logic_1;
        else 
            NUMBER_OF_INDICES_read <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnA_addr_10_gep_fu_485_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_returnA_addr_11_gep_fu_534_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_returnA_addr_12_gep_fu_583_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_returnA_addr_8_gep_fu_387_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_returnA_addr_9_gep_fu_436_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_returnA_addr_gep_fu_338_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_returnA_address0 assign process. --
    acc_returnA_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, acc_returnA_addr_reg_1159, acc_returnA_addr_9_reg_1229, acc_returnA_addr_11_reg_1299, ap_sig_cseq_ST_pp1_stg0_fsm_6, tmp_43_i_fu_1106_p1, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1083_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_returnA_address0 <= acc_returnA_addr_11_reg_1299;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_returnA_address0 <= acc_returnA_addr_9_reg_1229;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_returnA_address0 <= acc_returnA_addr_reg_1159;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            acc_returnA_address0 <= tmp_43_i_fu_1106_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_returnA_address0 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
        else 
            acc_returnA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_returnA_address1 assign process. --
    acc_returnA_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_returnA_addr_8_reg_1194, acc_returnA_addr_10_reg_1264, acc_returnA_addr_12_reg_1334, ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_returnA_address1 <= ap_reg_ppstg_acc_returnA_addr_13_reg_1401_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_returnA_address1 <= acc_returnA_addr_12_reg_1334;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_returnA_address1 <= acc_returnA_addr_10_reg_1264;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_returnA_address1 <= acc_returnA_addr_8_reg_1194;
        else 
            acc_returnA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_returnA_ce0 assign process. --
    acc_returnA_ce0_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_ce0 <= ap_const_logic_1;
        else 
            acc_returnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnA_ce1 assign process. --
    acc_returnA_ce1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_ce1 <= ap_const_logic_1;
        else 
            acc_returnA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnA_d0 <= ap_const_lv32_0;

    -- acc_returnA_d1 assign process. --
    acc_returnA_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, grp_fu_905_p2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_returnA_d1 <= grp_fu_905_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_d1 <= ap_const_lv32_0;
        else 
            acc_returnA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_returnA_we0 assign process. --
    acc_returnA_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_we0 <= ap_const_logic_1;
        else 
            acc_returnA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnA_we1 assign process. --
    acc_returnA_we1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnA_we1 <= ap_const_logic_1;
        else 
            acc_returnA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnB_addr_10_gep_fu_457_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_returnB_addr_11_gep_fu_506_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_returnB_addr_12_gep_fu_555_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_returnB_addr_8_gep_fu_359_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_returnB_addr_9_gep_fu_408_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_returnB_addr_gep_fu_310_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_returnB_address0 assign process. --
    acc_returnB_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, ap_reg_ppiten_pp1_it0, acc_returnB_addr_reg_1139, acc_returnB_addr_9_reg_1209, acc_returnB_addr_11_reg_1279, tmp_43_i_reg_1452, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1083_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_returnB_address0 <= acc_returnB_addr_11_reg_1279;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_returnB_address0 <= acc_returnB_addr_9_reg_1209;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_returnB_address0 <= acc_returnB_addr_reg_1139;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            acc_returnB_address0 <= tmp_43_i_reg_1452(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_returnB_address0 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
        else 
            acc_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_returnB_address1 assign process. --
    acc_returnB_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_returnB_addr_8_reg_1174, acc_returnB_addr_10_reg_1244, acc_returnB_addr_12_reg_1314, ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_returnB_address1 <= ap_reg_ppstg_acc_returnB_addr_13_reg_1419_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_returnB_address1 <= acc_returnB_addr_12_reg_1314;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_returnB_address1 <= acc_returnB_addr_10_reg_1244;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_returnB_address1 <= acc_returnB_addr_8_reg_1174;
        else 
            acc_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_returnB_ce0 assign process. --
    acc_returnB_ce0_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_ce1 assign process. --
    acc_returnB_ce1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnB_d0 <= ap_const_lv32_0;

    -- acc_returnB_d1 assign process. --
    acc_returnB_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_923_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_returnB_d1 <= grp_fu_923_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_returnB_we0 assign process. --
    acc_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_we0 <= ap_const_logic_1;
        else 
            acc_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_we1 assign process. --
    acc_returnB_we1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_returnB_we1 <= ap_const_logic_1;
        else 
            acc_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_addr_10_gep_fu_499_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_addr_11_gep_fu_548_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_addr_12_gep_fu_597_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_addr_8_gep_fu_401_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_addr_9_gep_fu_450_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_addr_gep_fu_352_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_address0 assign process. --
    acc_weight_returnA_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, ap_reg_ppiten_pp1_it0, acc_weight_returnA_addr_reg_1169, acc_weight_returnA_addr_9_reg_1239, acc_weight_returnA_addr_11_reg_1309, tmp_43_i_reg_1452, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1083_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_11_reg_1309;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_9_reg_1239;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_reg_1169;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            acc_weight_returnA_address0 <= tmp_43_i_reg_1452(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnA_address0 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
        else 
            acc_weight_returnA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_address1 assign process. --
    acc_weight_returnA_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnA_addr_8_reg_1204, acc_weight_returnA_addr_10_reg_1274, acc_weight_returnA_addr_12_reg_1344, ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnA_address1 <= ap_reg_ppstg_acc_weight_returnA_addr_13_reg_1413_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_12_reg_1344;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_10_reg_1274;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_8_reg_1204;
        else 
            acc_weight_returnA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_ce0 assign process. --
    acc_weight_returnA_ce0_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_ce1 assign process. --
    acc_weight_returnA_ce1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_d0 <= ap_const_lv32_0;

    -- acc_weight_returnA_d1 assign process. --
    acc_weight_returnA_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_917_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnA_d1 <= grp_fu_917_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    acc_weight_returnA_returnB_add_10_gep_fu_478_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_11_gep_fu_527_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_12_gep_fu_576_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_8_gep_fu_380_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_9_gep_fu_429_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_gep_fu_331_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_returnB_address0 assign process. --
    acc_weight_returnA_returnB_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, acc_weight_returnA_returnB_add_reg_1154, acc_weight_returnA_returnB_add_9_reg_1224, acc_weight_returnA_returnB_add_11_reg_1294, tmp_43_i_reg_1452, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1083_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_11_reg_1294;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_9_reg_1224;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_reg_1154;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            acc_weight_returnA_returnB_address0 <= tmp_43_i_reg_1452(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnA_returnB_address0 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
        else 
            acc_weight_returnA_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_address1 assign process. --
    acc_weight_returnA_returnB_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnA_returnB_add_8_reg_1189, acc_weight_returnA_returnB_add_10_reg_1259, acc_weight_returnA_returnB_add_12_reg_1329, ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnA_returnB_address1 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_13_reg_1437_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_12_reg_1329;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_10_reg_1259;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_8_reg_1189;
        else 
            acc_weight_returnA_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce0 assign process. --
    acc_weight_returnA_returnB_ce0_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce1 assign process. --
    acc_weight_returnA_returnB_ce1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnA_returnB_d1 assign process. --
    acc_weight_returnA_returnB_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_941_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnA_returnB_d1 <= grp_fu_941_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we0 assign process. --
    acc_weight_returnA_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we1 assign process. --
    acc_weight_returnA_returnB_we1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_we0 assign process. --
    acc_weight_returnA_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_we1 assign process. --
    acc_weight_returnA_we1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnA_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnB_addr_10_gep_fu_471_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnB_addr_11_gep_fu_520_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnB_addr_12_gep_fu_569_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnB_addr_8_gep_fu_373_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnB_addr_9_gep_fu_422_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnB_addr_gep_fu_324_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnB_address0 assign process. --
    acc_weight_returnB_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, acc_weight_returnB_addr_reg_1149, acc_weight_returnB_addr_9_reg_1219, acc_weight_returnB_addr_11_reg_1289, tmp_43_i_reg_1452, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1083_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_11_reg_1289;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_9_reg_1219;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_reg_1149;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            acc_weight_returnB_address0 <= tmp_43_i_reg_1452(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnB_address0 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
        else 
            acc_weight_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnB_address1 assign process. --
    acc_weight_returnB_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnB_addr_8_reg_1184, acc_weight_returnB_addr_10_reg_1254, acc_weight_returnB_addr_12_reg_1324, ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnB_address1 <= ap_reg_ppstg_acc_weight_returnB_addr_13_reg_1431_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_12_reg_1324;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_10_reg_1254;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_8_reg_1184;
        else 
            acc_weight_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnB_ce0 assign process. --
    acc_weight_returnB_ce0_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnB_ce1 assign process. --
    acc_weight_returnB_ce1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnB_d1 assign process. --
    acc_weight_returnB_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_935_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnB_d1 <= grp_fu_935_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnB_we0 assign process. --
    acc_weight_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnB_we1 assign process. --
    acc_weight_returnB_we1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareA_addr_10_gep_fu_492_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_11_gep_fu_541_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_12_gep_fu_590_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_8_gep_fu_394_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_9_gep_fu_443_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_gep_fu_345_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquareA_address0 assign process. --
    acc_weight_returnSquareA_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, acc_weight_returnSquareA_addr_reg_1164, acc_weight_returnSquareA_addr_9_reg_1234, acc_weight_returnSquareA_addr_11_reg_1304, ap_sig_cseq_ST_pp1_stg0_fsm_6, tmp_43_i_fu_1106_p1, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1083_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_11_reg_1304;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_9_reg_1234;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_reg_1164;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            acc_weight_returnSquareA_address0 <= tmp_43_i_fu_1106_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnSquareA_address0 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
        else 
            acc_weight_returnSquareA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_address1 assign process. --
    acc_weight_returnSquareA_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnSquareA_addr_8_reg_1199, acc_weight_returnSquareA_addr_10_reg_1269, acc_weight_returnSquareA_addr_12_reg_1339, ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnSquareA_address1 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_13_reg_1407_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_12_reg_1339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_10_reg_1269;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_8_reg_1199;
        else 
            acc_weight_returnSquareA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_ce0 assign process. --
    acc_weight_returnSquareA_ce0_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareA_ce1 assign process. --
    acc_weight_returnSquareA_ce1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareA_d0 <= ap_const_lv32_0;

    -- acc_weight_returnSquareA_d1 assign process. --
    acc_weight_returnSquareA_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, grp_fu_911_p2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnSquareA_d1 <= grp_fu_911_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquareA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_we0 assign process. --
    acc_weight_returnSquareA_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareA_we1 assign process. --
    acc_weight_returnSquareA_we1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareA_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareB_addr_10_gep_fu_464_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_11_gep_fu_513_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_12_gep_fu_562_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_8_gep_fu_366_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_9_gep_fu_415_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_gep_fu_317_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquareB_address0 assign process. --
    acc_weight_returnSquareB_address0_assign_proc : process(ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, acc_weight_returnSquareB_addr_reg_1144, acc_weight_returnSquareB_addr_9_reg_1214, acc_weight_returnSquareB_addr_11_reg_1284, tmp_43_i_reg_1452, ap_sig_cseq_ST_st5_fsm_4, tmp_26_i_fu_1083_p1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_11_reg_1284;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_9_reg_1214;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_reg_1144;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            acc_weight_returnSquareB_address0 <= tmp_43_i_reg_1452(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it35)) then 
            acc_weight_returnSquareB_address0 <= tmp_26_i_fu_1083_p1(3 - 1 downto 0);
        else 
            acc_weight_returnSquareB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_address1 assign process. --
    acc_weight_returnSquareB_address1_assign_proc : process(ap_reg_ppiten_pp0_it40, acc_weight_returnSquareB_addr_8_reg_1179, acc_weight_returnSquareB_addr_10_reg_1249, acc_weight_returnSquareB_addr_12_reg_1319, ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnSquareB_address1 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_13_reg_1425_pp0_it39;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_12_reg_1319;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_10_reg_1249;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_8_reg_1179;
        else 
            acc_weight_returnSquareB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_ce0 assign process. --
    acc_weight_returnSquareB_ce0_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_ce1 assign process. --
    acc_weight_returnSquareB_ce1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnSquareB_d1 assign process. --
    acc_weight_returnSquareB_d1_assign_proc : process(ap_reg_ppiten_pp0_it40, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, grp_fu_929_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40)) then 
            acc_weight_returnSquareB_d1 <= grp_fu_929_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquareB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_we0 assign process. --
    acc_weight_returnSquareB_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_we1 assign process. --
    acc_weight_returnSquareB_we1_assign_proc : process(ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it40, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it40) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_i_fu_1061_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            acc_weight_returnSquareB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_i_fu_1061_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_1_i_fu_1061_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_1_i_fu_1061_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_219 assign process. --
    ap_sig_bdd_219_assign_proc : process(ln_returnA_in_V_empty_n, weight_returnSquareA_in_V_empty_n, weight_returnA_in_V_empty_n, sum_weight_in_V_empty_n, ln_returnB_in_V_empty_n, weight_returnSquareB_in_V_empty_n, weight_returnB_in_V_empty_n, weight_returnA_returnB_in_V_empty_n, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34)
    begin
                ap_sig_bdd_219 <= (((sum_weight_in_V_empty_n = ap_const_logic_0) and (ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ln_returnA_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (weight_returnA_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (weight_returnSquareA_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ln_returnB_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (weight_returnB_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (weight_returnSquareB_in_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (weight_returnA_returnB_in_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_298 assign process. --
    ap_sig_bdd_298_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_298 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_31 assign process. --
    ap_sig_bdd_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_325 assign process. --
    ap_sig_bdd_325_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_325 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_346 assign process. --
    ap_sig_bdd_346_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_346 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_372 assign process. --
    ap_sig_bdd_372_assign_proc : process(ap_start, ap_done_reg, NUMBER_OF_DAYS_empty_n, NUMBER_OF_INDICES_empty_n)
    begin
                ap_sig_bdd_372 <= ((NUMBER_OF_INDICES_empty_n = ap_const_logic_0) or (NUMBER_OF_DAYS_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_384 assign process. --
    ap_sig_bdd_384_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_384 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_631 assign process. --
    ap_sig_bdd_631_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_631 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_677 assign process. --
    ap_sig_bdd_677_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_677 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_688 assign process. --
    ap_sig_bdd_688_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_688 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_705 assign process. --
    ap_sig_bdd_705_assign_proc : process(sum_weight_out_V_full_n, sum_return_out_V_full_n, sum_weight_returnSquare_out_V_full_n, sum_weight_return_out_V_full_n, sum_weight_returnA_returnB_out_full_n, sum_returnA_out_V_full_n, sum_weight_returnSquareA_out_V_full_n, sum_weight_returnA_out_V_full_n)
    begin
                ap_sig_bdd_705 <= ((sum_weight_out_V_full_n = ap_const_logic_0) or (sum_return_out_V_full_n = ap_const_logic_0) or (sum_weight_returnSquare_out_V_full_n = ap_const_logic_0) or (sum_weight_return_out_V_full_n = ap_const_logic_0) or (sum_weight_returnA_returnB_out_full_n = ap_const_logic_0) or (sum_returnA_out_V_full_n = ap_const_logic_0) or (sum_weight_returnSquareA_out_V_full_n = ap_const_logic_0) or (sum_weight_returnA_out_V_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_713 assign process. --
    ap_sig_bdd_713_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_713 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_870 assign process. --
    ap_sig_bdd_870_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_870 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_880 assign process. --
    ap_sig_bdd_880_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_880 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_5_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_6_assign_proc : process(ap_sig_bdd_631)
    begin
        if (ap_sig_bdd_631) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg1_fsm_7 assign process. --
    ap_sig_cseq_ST_pp1_stg1_fsm_7_assign_proc : process(ap_sig_bdd_298)
    begin
        if (ap_sig_bdd_298) then 
            ap_sig_cseq_ST_pp1_stg1_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg1_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg2_fsm_8 assign process. --
    ap_sig_cseq_ST_pp1_stg2_fsm_8_assign_proc : process(ap_sig_bdd_325)
    begin
        if (ap_sig_bdd_325) then 
            ap_sig_cseq_ST_pp1_stg2_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg2_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg3_fsm_9 assign process. --
    ap_sig_cseq_ST_pp1_stg3_fsm_9_assign_proc : process(ap_sig_bdd_346)
    begin
        if (ap_sig_bdd_346) then 
            ap_sig_cseq_ST_pp1_stg3_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg3_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg4_fsm_10 assign process. --
    ap_sig_cseq_ST_pp1_stg4_fsm_10_assign_proc : process(ap_sig_bdd_677)
    begin
        if (ap_sig_bdd_677) then 
            ap_sig_cseq_ST_pp1_stg4_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg4_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_31)
    begin
        if (ap_sig_bdd_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_384)
    begin
        if (ap_sig_bdd_384) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_870)
    begin
        if (ap_sig_bdd_870) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_880)
    begin
        if (ap_sig_bdd_880) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_11 assign process. --
    ap_sig_cseq_ST_st57_fsm_11_assign_proc : process(ap_sig_bdd_688)
    begin
        if (ap_sig_bdd_688) then 
            ap_sig_cseq_ST_st57_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_713)
    begin
        if (ap_sig_bdd_713) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    column_index_fu_1112_p2 <= std_logic_vector(unsigned(column_index_i_reg_765) + unsigned(ap_const_lv32_1));
    exitcond_i_fu_1094_p2 <= "1" when (i2_i_phi_fu_897_p4 = ap_const_lv3_6) else "0";

    -- grp_fu_1071_ce assign process. --
    grp_fu_1071_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, tmp_9_i_reg_1352, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, tmp_9_i_fu_1066_p2, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it1, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it2, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it3, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it4, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it5, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it6, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it7, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it8, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it9, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it10, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it11, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it12, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it13, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it14, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it15, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it16, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it17, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it18, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it19, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it20, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it21, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it22, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it23, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it24, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it25, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it26, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it27, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it28, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it29, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it30, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it31, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it32, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_9_i_fu_1066_p2) or (tmp_9_i_reg_1352 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it3) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it4) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it6) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it7) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it8) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it9) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it10) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it13) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it14) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it19) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it21) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it22) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it23) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it24) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it25) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it26) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it27) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it28) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it29) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it30) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it31) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it32) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it33)))) then 
            grp_fu_1071_ce <= ap_const_logic_1;
        else 
            grp_fu_1071_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1071_p0 <= i1_i_phi_fu_794_p4;
    grp_fu_1071_p1 <= ap_const_lv32_6(4 - 1 downto 0);

    -- grp_fu_905_ce assign process. --
    grp_fu_905_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, exitcond_i_reg_1443, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and ((ap_const_lv1_0 = exitcond_i_reg_1443) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and ((ap_const_lv1_0 = exitcond_i_reg_1443) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10) and ((ap_const_lv1_0 = exitcond_i_reg_1443) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and ((ap_const_lv1_0 = exitcond_i_reg_1443))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))))) then 
            grp_fu_905_ce <= ap_const_logic_1;
        else 
            grp_fu_905_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_905_p0 assign process. --
    grp_fu_905_p0_assign_proc : process(ap_reg_ppiten_pp0_it36, tmp_11_reg_802, acc_returnA_q0, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_sig_cseq_ST_pp1_stg4_fsm_10, tmp_13_phi_fu_833_p4, tmp_15_phi_fu_859_p4, tmp_17_phi_fu_885_p4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            grp_fu_905_p0 <= tmp_11_reg_802;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            grp_fu_905_p0 <= tmp_13_phi_fu_833_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9))) then 
            grp_fu_905_p0 <= tmp_15_phi_fu_859_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            grp_fu_905_p0 <= tmp_17_phi_fu_885_p4;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_905_p0 <= acc_returnA_q0;
        else 
            grp_fu_905_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_905_p1 assign process. --
    grp_fu_905_p1_assign_proc : process(ap_reg_ppiten_pp0_it36, reg_954, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, reg_966, ap_sig_cseq_ST_pp1_stg2_fsm_8, reg_978, ap_sig_cseq_ST_pp1_stg3_fsm_9, reg_990, tmp_35_reg_1366, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            grp_fu_905_p1 <= reg_990;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            grp_fu_905_p1 <= reg_978;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9))) then 
            grp_fu_905_p1 <= reg_966;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            grp_fu_905_p1 <= reg_954;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_905_p1 <= tmp_35_reg_1366;
        else 
            grp_fu_905_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_911_ce assign process. --
    grp_fu_911_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35, ap_sig_cseq_ST_pp1_stg1_fsm_7, exitcond_i_reg_1443, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39, ap_sig_cseq_ST_pp1_stg0_fsm_6, ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and ((ap_const_lv1_0 = exitcond_i_reg_1443) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and ((ap_const_lv1_0 = exitcond_i_reg_1443) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6) and ((ap_const_lv1_0 = exitcond_i_reg_1443))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_7) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10) and ((ap_const_lv1_0 = exitcond_i_reg_1443))))) then 
            grp_fu_911_ce <= ap_const_logic_1;
        else 
            grp_fu_911_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_911_p0 assign process. --
    grp_fu_911_p0_assign_proc : process(ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp1_it0, acc_weight_returnSquareA_q0, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_sig_cseq_ST_pp1_stg4_fsm_10, tmp_12_phi_fu_820_p4, tmp_14_phi_fu_846_p4, tmp_16_phi_fu_872_p4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            grp_fu_911_p0 <= tmp_12_phi_fu_820_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9))) then 
            grp_fu_911_p0 <= tmp_14_phi_fu_846_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            grp_fu_911_p0 <= tmp_16_phi_fu_872_p4;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_911_p0 <= acc_weight_returnSquareA_q0;
        else 
            grp_fu_911_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_911_p1 assign process. --
    grp_fu_911_p1_assign_proc : process(ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp1_it0, reg_960, ap_sig_cseq_ST_pp1_stg2_fsm_8, reg_972, ap_sig_cseq_ST_pp1_stg3_fsm_9, reg_984, tmp_37_reg_1376, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            grp_fu_911_p1 <= reg_984;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9))) then 
            grp_fu_911_p1 <= reg_972;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8))) then 
            grp_fu_911_p1 <= reg_960;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it36)) then 
            grp_fu_911_p1 <= tmp_37_reg_1376;
        else 
            grp_fu_911_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_917_ce assign process. --
    grp_fu_917_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38)))) then 
            grp_fu_917_ce <= ap_const_logic_1;
        else 
            grp_fu_917_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_917_p0 <= acc_weight_returnA_q0;
    grp_fu_917_p1 <= tmp_36_reg_1371;

    -- grp_fu_923_ce assign process. --
    grp_fu_923_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38)))) then 
            grp_fu_923_ce <= ap_const_logic_1;
        else 
            grp_fu_923_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_923_p0 <= acc_returnB_q0;
    grp_fu_923_p1 <= tmp_38_reg_1381;

    -- grp_fu_929_ce assign process. --
    grp_fu_929_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38)))) then 
            grp_fu_929_ce <= ap_const_logic_1;
        else 
            grp_fu_929_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_929_p0 <= acc_weight_returnSquareB_q0;
    grp_fu_929_p1 <= tmp_40_reg_1391;

    -- grp_fu_935_ce assign process. --
    grp_fu_935_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38)))) then 
            grp_fu_935_ce <= ap_const_logic_1;
        else 
            grp_fu_935_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_935_p0 <= acc_weight_returnB_q0;
    grp_fu_935_p1 <= tmp_39_reg_1386;

    -- grp_fu_941_ce assign process. --
    grp_fu_941_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38, ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it35) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it39) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it36) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it37) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it38)))) then 
            grp_fu_941_ce <= ap_const_logic_1;
        else 
            grp_fu_941_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_941_p0 <= acc_weight_returnA_returnB_q0;
    grp_fu_941_p1 <= tmp_41_reg_1396;

    -- i1_i_phi_fu_794_p4 assign process. --
    i1_i_phi_fu_794_p4_assign_proc : process(i1_i_reg_790, ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_reg_ppiten_pp0_it1, tmp_9_i_reg_1352, i_reg_1356)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_9_i_reg_1352 = ap_const_lv1_0))) then 
            i1_i_phi_fu_794_p4 <= i_reg_1356;
        else 
            i1_i_phi_fu_794_p4 <= i1_i_reg_790;
        end if; 
    end process;


    -- i2_i_phi_fu_897_p4 assign process. --
    i2_i_phi_fu_897_p4_assign_proc : process(i2_i_reg_893, ap_reg_ppiten_pp1_it1, exitcond_i_reg_1443, ap_sig_cseq_ST_pp1_stg0_fsm_6, i_2_reg_1447)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_i_reg_1443) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_6))) then 
            i2_i_phi_fu_897_p4 <= i_2_reg_1447;
        else 
            i2_i_phi_fu_897_p4 <= i2_i_reg_893;
        end if; 
    end process;

    i_2_fu_1100_p2 <= std_logic_vector(unsigned(i2_i_phi_fu_897_p4) + unsigned(ap_const_lv3_1));
    i_fu_1077_p2 <= std_logic_vector(unsigned(i1_i_phi_fu_794_p4) + unsigned(ap_const_lv32_1));

    -- ln_returnA_in_V_read assign process. --
    ln_returnA_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            ln_returnA_in_V_read <= ap_const_logic_1;
        else 
            ln_returnA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ln_returnB_in_V_read assign process. --
    ln_returnB_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            ln_returnB_in_V_read <= ap_const_logic_1;
        else 
            ln_returnB_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_f_i_fu_1034_p4 <= tmp_i_fu_996_p2(31 downto 1);
    p_lshr_i_fu_1014_p4 <= p_neg_i_fu_1009_p2(31 downto 1);
    p_neg_i_fu_1009_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(NUMBER_OF_INDICES_read_reg_1118));
    p_neg_t_i_fu_1028_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_s_fu_1024_p1));
    sum_returnA_out_V_din <= tmp_17_reg_880;

    -- sum_returnA_out_V_write assign process. --
    sum_returnA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_705)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
            sum_returnA_out_V_write <= ap_const_logic_1;
        else 
            sum_returnA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_return_out_V_din <= tmp_14_reg_841;

    -- sum_return_out_V_write assign process. --
    sum_return_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_705)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
            sum_return_out_V_write <= ap_const_logic_1;
        else 
            sum_return_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_in_V_read assign process. --
    sum_weight_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            sum_weight_in_V_read <= ap_const_logic_1;
        else 
            sum_weight_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_out_V_din <= tmp_10_reg_777;

    -- sum_weight_out_V_write assign process. --
    sum_weight_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_705)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
            sum_weight_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnA_out_V_din <= tmp_15_reg_854;

    -- sum_weight_returnA_out_V_write assign process. --
    sum_weight_returnA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_705)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
            sum_weight_returnA_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnA_returnB_out_din <= tmp_11_reg_802;

    -- sum_weight_returnA_returnB_out_write assign process. --
    sum_weight_returnA_returnB_out_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_705)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
            sum_weight_returnA_returnB_out_write <= ap_const_logic_1;
        else 
            sum_weight_returnA_returnB_out_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnSquareA_out_V_din <= tmp_16_reg_867;

    -- sum_weight_returnSquareA_out_V_write assign process. --
    sum_weight_returnSquareA_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_705)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
            sum_weight_returnSquareA_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnSquareA_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_returnSquare_out_V_din <= tmp_13_reg_828;

    -- sum_weight_returnSquare_out_V_write assign process. --
    sum_weight_returnSquare_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_705)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
            sum_weight_returnSquare_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_returnSquare_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_weight_return_out_V_din <= tmp_12_reg_815;

    -- sum_weight_return_out_V_write assign process. --
    sum_weight_return_out_V_write_assign_proc : process(ap_sig_cseq_ST_st57_fsm_11, ap_sig_bdd_705)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_11) and not(ap_sig_bdd_705))) then 
            sum_weight_return_out_V_write <= ap_const_logic_1;
        else 
            sum_weight_return_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- tmp_12_phi_fu_820_p4 assign process. --
    tmp_12_phi_fu_820_p4_assign_proc : process(tmp_12_reg_815, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1, sum_weight_returnB_reg_1521, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            tmp_12_phi_fu_820_p4 <= sum_weight_returnB_reg_1521;
        else 
            tmp_12_phi_fu_820_p4 <= tmp_12_reg_815;
        end if; 
    end process;


    -- tmp_13_phi_fu_833_p4 assign process. --
    tmp_13_phi_fu_833_p4_assign_proc : process(tmp_13_reg_828, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1, sum_weight_returnSquareB_reg_1516, ap_sig_cseq_ST_pp1_stg4_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_10))) then 
            tmp_13_phi_fu_833_p4 <= sum_weight_returnSquareB_reg_1516;
        else 
            tmp_13_phi_fu_833_p4 <= tmp_13_reg_828;
        end if; 
    end process;


    -- tmp_14_phi_fu_846_p4 assign process. --
    tmp_14_phi_fu_846_p4_assign_proc : process(tmp_14_reg_841, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1, sum_returnB_reg_1511)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then 
            tmp_14_phi_fu_846_p4 <= sum_returnB_reg_1511;
        else 
            tmp_14_phi_fu_846_p4 <= tmp_14_reg_841;
        end if; 
    end process;


    -- tmp_15_phi_fu_859_p4 assign process. --
    tmp_15_phi_fu_859_p4_assign_proc : process(tmp_15_reg_854, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg3_fsm_9, ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1, sum_weight_returnA_reg_1506)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then 
            tmp_15_phi_fu_859_p4 <= sum_weight_returnA_reg_1506;
        else 
            tmp_15_phi_fu_859_p4 <= tmp_15_reg_854;
        end if; 
    end process;


    -- tmp_16_phi_fu_872_p4 assign process. --
    tmp_16_phi_fu_872_p4_assign_proc : process(tmp_16_reg_867, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1, sum_weight_returnSquareA_reg_1501)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then 
            tmp_16_phi_fu_872_p4 <= sum_weight_returnSquareA_reg_1501;
        else 
            tmp_16_phi_fu_872_p4 <= tmp_16_reg_867;
        end if; 
    end process;


    -- tmp_17_phi_fu_885_p4 assign process. --
    tmp_17_phi_fu_885_p4_assign_proc : process(tmp_17_reg_880, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg2_fsm_8, ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1, sum_returnA_reg_1496)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1443_pp1_it1))) then 
            tmp_17_phi_fu_885_p4 <= sum_returnA_reg_1496;
        else 
            tmp_17_phi_fu_885_p4 <= tmp_17_reg_880;
        end if; 
    end process;

    tmp_1_i_fu_1061_p2 <= "1" when (signed(column_index_i_reg_765) > signed(upper_bound_reg_1129)) else "0";
    tmp_26_i_fu_1083_p1 <= std_logic_vector(resize(unsigned(grp_fu_1071_p2),64));
    tmp_43_i_fu_1106_p1 <= std_logic_vector(resize(unsigned(i2_i_phi_fu_897_p4),64));
    tmp_9_fu_1044_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_i_fu_1034_p4),32));
    tmp_9_i_fu_1066_p2 <= "1" when (signed(i1_i_phi_fu_794_p4) > signed(tmp_i_9_reg_1134)) else "0";
    tmp_fu_1001_p3 <= tmp_i_fu_996_p2(31 downto 31);
    tmp_i_9_fu_1056_p2 <= std_logic_vector(unsigned(NUMBER_OF_DAYS_read_reg_1124) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_i_fu_996_p2 <= std_logic_vector(unsigned(NUMBER_OF_INDICES_read_reg_1118) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_s_fu_1024_p1 <= std_logic_vector(resize(unsigned(p_lshr_i_fu_1014_p4),32));
    upper_bound_fu_1048_p3 <= 
        p_neg_t_i_fu_1028_p2 when (tmp_fu_1001_p3(0) = '1') else 
        tmp_9_fu_1044_p1;

    -- weight_returnA_in_V_read assign process. --
    weight_returnA_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnA_in_V_read <= ap_const_logic_1;
        else 
            weight_returnA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_returnA_returnB_in_V_read assign process. --
    weight_returnA_returnB_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnA_returnB_in_V_read <= ap_const_logic_1;
        else 
            weight_returnA_returnB_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_returnB_in_V_read assign process. --
    weight_returnB_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnB_in_V_read <= ap_const_logic_1;
        else 
            weight_returnB_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_returnSquareA_in_V_read assign process. --
    weight_returnSquareA_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnSquareA_in_V_read <= ap_const_logic_1;
        else 
            weight_returnSquareA_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_returnSquareB_in_V_read assign process. --
    weight_returnSquareB_in_V_read_assign_proc : process(ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34, ap_sig_bdd_219, ap_reg_ppiten_pp0_it35)
    begin
        if (((ap_reg_ppstg_tmp_9_i_reg_1352_pp0_it34 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and not((ap_sig_bdd_219 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35))))) then 
            weight_returnSquareB_in_V_read <= ap_const_logic_1;
        else 
            weight_returnSquareB_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
