-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlation_accel_v1 is
generic (
    C_M_AXI_GMEM32_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM32_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM32_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM32_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM32_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM32_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem32_AWVALID : OUT STD_LOGIC;
    m_axi_gmem32_AWREADY : IN STD_LOGIC;
    m_axi_gmem32_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ADDR_WIDTH-1 downto 0);
    m_axi_gmem32_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem32_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem32_WVALID : OUT STD_LOGIC;
    m_axi_gmem32_WREADY : IN STD_LOGIC;
    m_axi_gmem32_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH-1 downto 0);
    m_axi_gmem32_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem32_WLAST : OUT STD_LOGIC;
    m_axi_gmem32_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_WUSER_WIDTH-1 downto 0);
    m_axi_gmem32_ARVALID : OUT STD_LOGIC;
    m_axi_gmem32_ARREADY : IN STD_LOGIC;
    m_axi_gmem32_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ADDR_WIDTH-1 downto 0);
    m_axi_gmem32_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem32_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem32_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem32_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem32_RVALID : IN STD_LOGIC;
    m_axi_gmem32_RREADY : OUT STD_LOGIC;
    m_axi_gmem32_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_DATA_WIDTH-1 downto 0);
    m_axi_gmem32_RLAST : IN STD_LOGIC;
    m_axi_gmem32_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_RUSER_WIDTH-1 downto 0);
    m_axi_gmem32_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_BVALID : IN STD_LOGIC;
    m_axi_gmem32_BREADY : OUT STD_LOGIC;
    m_axi_gmem32_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem32_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_ID_WIDTH-1 downto 0);
    m_axi_gmem32_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM32_BUSER_WIDTH-1 downto 0);
    number_of_days : IN STD_LOGIC_VECTOR (31 downto 0);
    number_of_indices : IN STD_LOGIC_VECTOR (31 downto 0);
    in_indices : IN STD_LOGIC_VECTOR (31 downto 0);
    out_correlation : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of correlation_accel_v1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "correlation_accel_v1,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.646000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=68,HLS_SYN_FF=11473,HLS_SYN_LUT=15424}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_pp0_stg0_fsm_27 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st31_fsm_28 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st32_fsm_29 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st33_fsm_30 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st34_fsm_31 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st35_fsm_32 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st36_fsm_33 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st37_fsm_34 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st38_fsm_35 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st39_fsm_36 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_37 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_38 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_39 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_40 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_41 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_42 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_43 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_pp1_stg0_fsm_44 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_45 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_46 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_47 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_pp2_stg0_fsm_48 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_49 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st98_fsm_50 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_51 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg1_fsm_52 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg2_fsm_53 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg3_fsm_54 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg4_fsm_55 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st109_fsm_56 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st110_fsm_57 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st111_fsm_58 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st112_fsm_59 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st113_fsm_60 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st114_fsm_61 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st115_fsm_62 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st116_fsm_63 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st117_fsm_64 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st118_fsm_65 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st119_fsm_66 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st120_fsm_67 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st121_fsm_68 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st122_fsm_69 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st123_fsm_70 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st124_fsm_71 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st125_fsm_72 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st126_fsm_73 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st127_fsm_74 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st128_fsm_75 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st129_fsm_76 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st130_fsm_77 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st131_fsm_78 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st132_fsm_79 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st133_fsm_80 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st134_fsm_81 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st135_fsm_82 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st136_fsm_83 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st137_fsm_84 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st138_fsm_85 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st139_fsm_86 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st140_fsm_87 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st141_fsm_88 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st142_fsm_89 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st143_fsm_90 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st144_fsm_91 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st145_fsm_92 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st146_fsm_93 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st147_fsm_94 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st148_fsm_95 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st149_fsm_96 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st150_fsm_97 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st151_fsm_98 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st152_fsm_99 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st153_fsm_100 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st154_fsm_101 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st155_fsm_102 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st156_fsm_103 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st157_fsm_104 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st158_fsm_105 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st159_fsm_106 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st160_fsm_107 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st161_fsm_108 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st162_fsm_109 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st163_fsm_110 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st164_fsm_111 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st165_fsm_112 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st166_fsm_113 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st167_fsm_114 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st168_fsm_115 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st169_fsm_116 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st170_fsm_117 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st171_fsm_118 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st172_fsm_119 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st173_fsm_120 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st174_fsm_121 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st175_fsm_122 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st176_fsm_123 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st177_fsm_124 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st178_fsm_125 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st179_fsm_126 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st180_fsm_127 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st181_fsm_128 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st182_fsm_129 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st183_fsm_130 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st184_fsm_131 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st185_fsm_132 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st186_fsm_133 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st187_fsm_134 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st188_fsm_135 : STD_LOGIC_VECTOR (145 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st189_fsm_136 : STD_LOGIC_VECTOR (145 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st190_fsm_137 : STD_LOGIC_VECTOR (145 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st191_fsm_138 : STD_LOGIC_VECTOR (145 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st192_fsm_139 : STD_LOGIC_VECTOR (145 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st193_fsm_140 : STD_LOGIC_VECTOR (145 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st194_fsm_141 : STD_LOGIC_VECTOR (145 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st195_fsm_142 : STD_LOGIC_VECTOR (145 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st196_fsm_143 : STD_LOGIC_VECTOR (145 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st197_fsm_144 : STD_LOGIC_VECTOR (145 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st198_fsm_145 : STD_LOGIC_VECTOR (145 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_3F70A3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011100001010001111010111";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv31_6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_164 : BOOLEAN;
    signal weight_rom_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_rom_ce0 : STD_LOGIC;
    signal weight_rom_we0 : STD_LOGIC;
    signal weight_rom_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_rom_ce1 : STD_LOGIC;
    signal weight_rom_we1 : STD_LOGIC;
    signal weight_rom_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramA_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramA_ce0 : STD_LOGIC;
    signal bramA_we0 : STD_LOGIC;
    signal bramA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramA_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramA_ce1 : STD_LOGIC;
    signal bramA_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramB_ce0 : STD_LOGIC;
    signal bramB_we0 : STD_LOGIC;
    signal bramB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bramB_ce1 : STD_LOGIC;
    signal bramB_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_AWVALID : STD_LOGIC;
    signal gmem32_AWREADY : STD_LOGIC;
    signal gmem32_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_WVALID : STD_LOGIC;
    signal gmem32_WREADY : STD_LOGIC;
    signal gmem32_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_WLAST : STD_LOGIC;
    signal gmem32_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_ARVALID : STD_LOGIC;
    signal gmem32_ARREADY : STD_LOGIC;
    signal gmem32_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem32_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem32_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RVALID : STD_LOGIC;
    signal gmem32_RREADY : STD_LOGIC;
    signal gmem32_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem32_RLAST : STD_LOGIC;
    signal gmem32_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_BVALID : STD_LOGIC;
    signal gmem32_BREADY : STD_LOGIC;
    signal gmem32_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem32_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem32_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal correlation_accel_v1_gmem32_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_872 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar_reg_872_pp0_it1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_353 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond4_reg_1900 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_362 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar1_reg_904 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar1_reg_904_pp1_it1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_378 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond2_reg_1949 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_385 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal i1_reg_916 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_401 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it40 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it41 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it42 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it43 : STD_LOGIC := '0';
    signal sum_returnA_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnB_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareB_reg_976 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnB_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_returnB_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_1012 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_546 : BOOLEAN;
    signal tmp_14_reg_1958 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st128_fsm_75 : STD_LOGIC;
    signal ap_sig_bdd_562 : BOOLEAN;
    signal ap_sig_cseq_ST_st132_fsm_79 : STD_LOGIC;
    signal ap_sig_bdd_570 : BOOLEAN;
    signal ap_sig_cseq_ST_st153_fsm_100 : STD_LOGIC;
    signal ap_sig_bdd_578 : BOOLEAN;
    signal ap_sig_cseq_ST_st178_fsm_125 : STD_LOGIC;
    signal ap_sig_bdd_586 : BOOLEAN;
    signal reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_595 : BOOLEAN;
    signal ap_reg_ppstg_reg_1157_pp2_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it13 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it21 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it22 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it23 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it24 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it25 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it26 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it27 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it28 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it29 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it30 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_reg_1157_pp2_it34 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st98_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_642 : BOOLEAN;
    signal grp_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_652 : BOOLEAN;
    signal ap_sig_cseq_ST_pp3_stg1_fsm_52 : STD_LOGIC;
    signal ap_sig_bdd_659 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal exitcond_reg_2097 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_2097_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st124_fsm_71 : STD_LOGIC;
    signal ap_sig_bdd_699 : BOOLEAN;
    signal ap_sig_cseq_ST_st194_fsm_141 : STD_LOGIC;
    signal ap_sig_bdd_708 : BOOLEAN;
    signal ap_sig_ioackin_gmem32_AWREADY : STD_LOGIC;
    signal grp_fu_1118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg2_fsm_53 : STD_LOGIC;
    signal ap_sig_bdd_776 : BOOLEAN;
    signal acc_weight_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg3_fsm_54 : STD_LOGIC;
    signal ap_sig_bdd_791 : BOOLEAN;
    signal acc_weight_returnSquareA_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_weight_returnSquareB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st133_fsm_80 : STD_LOGIC;
    signal ap_sig_bdd_825 : BOOLEAN;
    signal ap_sig_cseq_ST_st138_fsm_85 : STD_LOGIC;
    signal ap_sig_bdd_832 : BOOLEAN;
    signal ap_sig_cseq_ST_st158_fsm_105 : STD_LOGIC;
    signal ap_sig_bdd_840 : BOOLEAN;
    signal reg_1264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st137_fsm_84 : STD_LOGIC;
    signal ap_sig_bdd_849 : BOOLEAN;
    signal ap_sig_cseq_ST_st159_fsm_106 : STD_LOGIC;
    signal ap_sig_bdd_856 : BOOLEAN;
    signal grp_fu_1030_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1269 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_cast_fu_1285_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_61_cast_reg_1601 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_62_cast_fu_1299_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_62_cast_reg_1606 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_2_fu_1314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_880 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_889 : BOOLEAN;
    signal tmp_59_i_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1334_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_1628 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_1340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1633 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_rom_load_1_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_908 : BOOLEAN;
    signal grp_fu_1124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1649 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1350_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_reg_1655 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_add_i32_shr_fu_1353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_add_i32_shr_reg_1661 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_addr_gep_fu_257_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_reg_1666 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_gep_fu_264_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_reg_1671 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_gep_fu_271_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_reg_1676 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_gep_fu_278_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_reg_1681 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_gep_fu_285_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_reg_1686 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_gep_fu_292_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_reg_1691 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_gep_fu_299_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_reg_1696 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_6_gep_fu_306_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_6_reg_1701 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_6_gep_fu_313_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_6_reg_1706 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_6_gep_fu_320_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_6_reg_1711 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_6_gep_fu_327_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_6_reg_1716 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_6_gep_fu_334_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_6_reg_1721 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_6_gep_fu_341_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_6_reg_1726 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_1_gep_fu_348_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_1_reg_1731 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_7_gep_fu_355_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_7_reg_1736 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_7_gep_fu_362_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_7_reg_1741 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_7_gep_fu_369_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_7_reg_1746 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_7_gep_fu_376_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_7_reg_1751 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_7_gep_fu_383_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_7_reg_1756 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_7_gep_fu_390_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_7_reg_1761 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_gep_fu_397_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_2_reg_1766 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_3_gep_fu_404_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_3_reg_1771 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_3_gep_fu_411_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_3_reg_1776 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_3_gep_fu_418_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_3_reg_1781 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_3_gep_fu_425_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_3_reg_1786 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_3_gep_fu_432_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_3_reg_1791 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_3_gep_fu_439_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_3_reg_1796 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_gep_fu_446_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_3_reg_1801 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_4_gep_fu_453_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_4_reg_1806 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_4_gep_fu_460_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_4_reg_1811 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_4_gep_fu_467_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_4_reg_1816 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_4_gep_fu_474_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_4_reg_1821 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_4_gep_fu_481_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_4_reg_1826 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_4_gep_fu_488_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_4_reg_1831 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_gep_fu_495_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_4_reg_1836 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_5_gep_fu_502_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_addr_5_reg_1841 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_5_gep_fu_509_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_5_reg_1846 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_5_gep_fu_516_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_5_reg_1851 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_5_gep_fu_523_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_5_reg_1856 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_5_gep_fu_530_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_5_reg_1861 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_5_gep_fu_537_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_addr_5_reg_1866 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_gep_fu_544_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_add_5_reg_1871 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_mul_fu_1357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1876 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_1007 : BOOLEAN;
    signal row_index_cast_fu_1362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_index_cast_reg_1881 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_index_1_fu_1371_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_index_1_reg_1889 : STD_LOGIC_VECTOR (30 downto 0);
    signal gmem32_addr_reg_1894 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond4_reg_1900_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_1401_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_reg_1904 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_61_fu_1412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_reg_1909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_1033 : BOOLEAN;
    signal counter_2_fu_1429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_2_reg_1914 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_1042 : BOOLEAN;
    signal column_index_fu_1435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_reg_1919 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_1051 : BOOLEAN;
    signal indvars_iv_next_fu_1446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next3_fu_1452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1938 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_1067 : BOOLEAN;
    signal gmem32_addr_1_reg_1943 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_1076 : BOOLEAN;
    signal exitcond2_fu_1480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_1949_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_1485_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next1_reg_1953 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_14_fu_1500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it40 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it41 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1958_pp2_it42 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1505_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_1962 : STD_LOGIC_VECTOR (30 downto 0);
    signal bramA_load_reg_1992 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramA_load_1_reg_1997 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_load_reg_2002 : STD_LOGIC_VECTOR (31 downto 0);
    signal bramB_load_1_reg_2007 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnA_reg_2012 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_lnReturnA_reg_2012_pp2_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_lnReturnA_reg_2012_pp2_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_lnReturnA_reg_2012_pp2_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_lnReturnA_reg_2012_pp2_it34 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lnReturnB_reg_2021 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_lnReturnB_reg_2021_pp2_it31 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_lnReturnB_reg_2021_pp2_it32 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_lnReturnB_reg_2021_pp2_it33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppstg_lnReturnB_reg_2021_pp2_it34 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_addr_1_reg_2030 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it35 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_addr_1_reg_2036 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it35 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_addr_1_reg_2042 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it35 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it40 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it41 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it42 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_addr_1_reg_2048 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it35 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it40 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it41 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it42 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_addr_1_reg_2054 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it35 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_2060 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_addr_1_reg_2065 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it35 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1092_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_2071 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_add_6_reg_2076 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it35 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it36 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it37 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it38 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it39 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it40 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it41 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it42 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1096_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_2082 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_2087 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_2092 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_1541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_1336 : BOOLEAN;
    signal i_1_fu_1547_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_2101 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_57_fu_1553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_reg_2106 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_returnB_1_reg_2150 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA_1_reg_2155 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_1_reg_2160 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareB_1_reg_2165 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnB_1_reg_2170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp3_stg4_fsm_55 : STD_LOGIC;
    signal ap_sig_bdd_1375 : BOOLEAN;
    signal gmem32_addr_2_reg_2180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st109_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_1386 : BOOLEAN;
    signal tmp_56_fu_1578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_reg_2185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_reg_2190 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_2195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st154_fsm_101 : STD_LOGIC;
    signal ap_sig_bdd_1397 : BOOLEAN;
    signal grp_fu_1127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal volatilityA_reg_2200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st174_fsm_121 : STD_LOGIC;
    signal ap_sig_bdd_1406 : BOOLEAN;
    signal grp_fu_1132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal volatilityB_reg_2205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_1415 : BOOLEAN;
    signal ap_sig_cseq_ST_st46_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_1427 : BOOLEAN;
    signal ap_sig_cseq_ST_st52_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_1439 : BOOLEAN;
    signal acc_returnA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_ce0 : STD_LOGIC;
    signal acc_returnA_we0 : STD_LOGIC;
    signal acc_returnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnA_ce1 : STD_LOGIC;
    signal acc_returnA_we1 : STD_LOGIC;
    signal acc_returnA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_ce0 : STD_LOGIC;
    signal acc_returnB_we0 : STD_LOGIC;
    signal acc_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_returnB_ce1 : STD_LOGIC;
    signal acc_returnB_we1 : STD_LOGIC;
    signal acc_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_ce0 : STD_LOGIC;
    signal acc_weight_returnSquareA_we0 : STD_LOGIC;
    signal acc_weight_returnSquareA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareA_ce1 : STD_LOGIC;
    signal acc_weight_returnSquareA_we1 : STD_LOGIC;
    signal acc_weight_returnSquareA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_ce0 : STD_LOGIC;
    signal acc_weight_returnA_we0 : STD_LOGIC;
    signal acc_weight_returnA_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_ce1 : STD_LOGIC;
    signal acc_weight_returnA_we1 : STD_LOGIC;
    signal acc_weight_returnA_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_ce0 : STD_LOGIC;
    signal acc_weight_returnSquareB_we0 : STD_LOGIC;
    signal acc_weight_returnSquareB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnSquareB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnSquareB_ce1 : STD_LOGIC;
    signal acc_weight_returnSquareB_we1 : STD_LOGIC;
    signal acc_weight_returnSquareB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we0 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_weight_returnA_returnB_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_weight_returnA_returnB_ce1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_we1 : STD_LOGIC;
    signal acc_weight_returnA_returnB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_791 : STD_LOGIC_VECTOR (7 downto 0);
    signal i1_i_reg_803 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_1547 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_1555 : BOOLEAN;
    signal exitcond_i_fu_1303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv2_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_index_reg_838 : STD_LOGIC_VECTOR (30 downto 0);
    signal counter_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_876_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal column_index_0_in_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st198_fsm_145 : STD_LOGIC;
    signal ap_sig_bdd_1586 : BOOLEAN;
    signal counter_1_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar1_phi_fu_908_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal i1_phi_fu_920_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_returnA_phi_fu_932_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnB_phi_fu_944_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA_phi_fu_956_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_phi_fu_968_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareB_phi_fu_980_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnB_phi_fu_992_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_returnB_phi_fu_1004_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_phi_fu_1016_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_58_i_fu_1309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_i_fu_1329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_1530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_1386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_1470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_correlation4_sum_cast_fu_1568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem32_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem32_ARREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_1650 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_1666 : BOOLEAN;
    signal ap_reg_ioackin_gmem32_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem32_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem32_WREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st195_fsm_142 : STD_LOGIC;
    signal ap_sig_bdd_1688 : BOOLEAN;
    signal ap_sig_cseq_ST_st97_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_1713 : BOOLEAN;
    signal ap_sig_cseq_ST_st50_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_1733 : BOOLEAN;
    signal ap_sig_cseq_ST_st51_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_1740 : BOOLEAN;
    signal grp_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1054_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1042_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1024_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1024_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_1784 : BOOLEAN;
    signal ap_sig_cseq_ST_st129_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_1793 : BOOLEAN;
    signal ap_sig_cseq_ST_st134_fsm_81 : STD_LOGIC;
    signal ap_sig_bdd_1800 : BOOLEAN;
    signal ap_sig_cseq_ST_st155_fsm_102 : STD_LOGIC;
    signal ap_sig_bdd_1807 : BOOLEAN;
    signal grp_fu_1030_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1036_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1036_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1042_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1042_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1048_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1048_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1054_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1054_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1060_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1060_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1074_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1074_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st125_fsm_72 : STD_LOGIC;
    signal ap_sig_bdd_1832 : BOOLEAN;
    signal ap_sig_cseq_ST_st150_fsm_97 : STD_LOGIC;
    signal ap_sig_bdd_1839 : BOOLEAN;
    signal ap_sig_cseq_ST_st175_fsm_122 : STD_LOGIC;
    signal ap_sig_bdd_1847 : BOOLEAN;
    signal grp_fu_1080_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1080_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1084_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1084_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1088_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1088_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1092_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1092_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1096_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1096_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1100_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1100_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1104_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1104_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1114_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st139_fsm_86 : STD_LOGIC;
    signal ap_sig_bdd_1870 : BOOLEAN;
    signal ap_sig_cseq_ST_st179_fsm_126 : STD_LOGIC;
    signal ap_sig_bdd_1877 : BOOLEAN;
    signal grp_fu_1118_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_1889 : BOOLEAN;
    signal grp_fu_1127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1275_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_1289_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal i1_i_cast_fu_1320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_i_fu_1324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1340_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_1357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1377_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_fu_1381_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal smax_fu_1417_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1458_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_1971 : BOOLEAN;
    signal tmp_62_fu_1462_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_63_fu_1465_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal i1_cast_fu_1496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1524_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1524_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1524_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_55_cast_fu_1559_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal out_correlation4_sum_fu_1563_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1024_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1024_ce : STD_LOGIC;
    signal grp_fu_1030_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1030_ce : STD_LOGIC;
    signal grp_fu_1036_ce : STD_LOGIC;
    signal grp_fu_1042_ce : STD_LOGIC;
    signal grp_fu_1048_ce : STD_LOGIC;
    signal grp_fu_1054_ce : STD_LOGIC;
    signal grp_fu_1060_ce : STD_LOGIC;
    signal grp_fu_1074_ce : STD_LOGIC;
    signal grp_fu_1080_ce : STD_LOGIC;
    signal grp_fu_1084_ce : STD_LOGIC;
    signal grp_fu_1088_ce : STD_LOGIC;
    signal grp_fu_1092_ce : STD_LOGIC;
    signal grp_fu_1096_ce : STD_LOGIC;
    signal grp_fu_1100_ce : STD_LOGIC;
    signal grp_fu_1104_ce : STD_LOGIC;
    signal grp_fu_1114_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st110_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_2119 : BOOLEAN;
    signal ap_sig_cseq_ST_st111_fsm_58 : STD_LOGIC;
    signal ap_sig_bdd_2127 : BOOLEAN;
    signal ap_sig_cseq_ST_st112_fsm_59 : STD_LOGIC;
    signal ap_sig_bdd_2135 : BOOLEAN;
    signal ap_sig_cseq_ST_st113_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_2143 : BOOLEAN;
    signal ap_sig_cseq_ST_st114_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_2151 : BOOLEAN;
    signal ap_sig_cseq_ST_st115_fsm_62 : STD_LOGIC;
    signal ap_sig_bdd_2159 : BOOLEAN;
    signal ap_sig_cseq_ST_st116_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_2167 : BOOLEAN;
    signal ap_sig_cseq_ST_st117_fsm_64 : STD_LOGIC;
    signal ap_sig_bdd_2175 : BOOLEAN;
    signal ap_sig_cseq_ST_st118_fsm_65 : STD_LOGIC;
    signal ap_sig_bdd_2183 : BOOLEAN;
    signal ap_sig_cseq_ST_st119_fsm_66 : STD_LOGIC;
    signal ap_sig_bdd_2191 : BOOLEAN;
    signal ap_sig_cseq_ST_st120_fsm_67 : STD_LOGIC;
    signal ap_sig_bdd_2199 : BOOLEAN;
    signal ap_sig_cseq_ST_st121_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_2207 : BOOLEAN;
    signal ap_sig_cseq_ST_st122_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_2215 : BOOLEAN;
    signal ap_sig_cseq_ST_st123_fsm_70 : STD_LOGIC;
    signal ap_sig_bdd_2223 : BOOLEAN;
    signal ap_sig_cseq_ST_st140_fsm_87 : STD_LOGIC;
    signal ap_sig_bdd_2234 : BOOLEAN;
    signal ap_sig_cseq_ST_st141_fsm_88 : STD_LOGIC;
    signal ap_sig_bdd_2242 : BOOLEAN;
    signal ap_sig_cseq_ST_st142_fsm_89 : STD_LOGIC;
    signal ap_sig_bdd_2250 : BOOLEAN;
    signal ap_sig_cseq_ST_st143_fsm_90 : STD_LOGIC;
    signal ap_sig_bdd_2258 : BOOLEAN;
    signal ap_sig_cseq_ST_st144_fsm_91 : STD_LOGIC;
    signal ap_sig_bdd_2266 : BOOLEAN;
    signal ap_sig_cseq_ST_st145_fsm_92 : STD_LOGIC;
    signal ap_sig_bdd_2274 : BOOLEAN;
    signal ap_sig_cseq_ST_st146_fsm_93 : STD_LOGIC;
    signal ap_sig_bdd_2282 : BOOLEAN;
    signal ap_sig_cseq_ST_st147_fsm_94 : STD_LOGIC;
    signal ap_sig_bdd_2290 : BOOLEAN;
    signal ap_sig_cseq_ST_st148_fsm_95 : STD_LOGIC;
    signal ap_sig_bdd_2298 : BOOLEAN;
    signal ap_sig_cseq_ST_st149_fsm_96 : STD_LOGIC;
    signal ap_sig_bdd_2306 : BOOLEAN;
    signal ap_sig_cseq_ST_st151_fsm_98 : STD_LOGIC;
    signal ap_sig_bdd_2315 : BOOLEAN;
    signal ap_sig_cseq_ST_st152_fsm_99 : STD_LOGIC;
    signal ap_sig_bdd_2323 : BOOLEAN;
    signal ap_sig_cseq_ST_st180_fsm_127 : STD_LOGIC;
    signal ap_sig_bdd_2334 : BOOLEAN;
    signal ap_sig_cseq_ST_st181_fsm_128 : STD_LOGIC;
    signal ap_sig_bdd_2342 : BOOLEAN;
    signal ap_sig_cseq_ST_st182_fsm_129 : STD_LOGIC;
    signal ap_sig_bdd_2350 : BOOLEAN;
    signal ap_sig_cseq_ST_st183_fsm_130 : STD_LOGIC;
    signal ap_sig_bdd_2358 : BOOLEAN;
    signal ap_sig_cseq_ST_st184_fsm_131 : STD_LOGIC;
    signal ap_sig_bdd_2366 : BOOLEAN;
    signal ap_sig_cseq_ST_st185_fsm_132 : STD_LOGIC;
    signal ap_sig_bdd_2374 : BOOLEAN;
    signal ap_sig_cseq_ST_st186_fsm_133 : STD_LOGIC;
    signal ap_sig_bdd_2382 : BOOLEAN;
    signal ap_sig_cseq_ST_st187_fsm_134 : STD_LOGIC;
    signal ap_sig_bdd_2390 : BOOLEAN;
    signal ap_sig_cseq_ST_st188_fsm_135 : STD_LOGIC;
    signal ap_sig_bdd_2398 : BOOLEAN;
    signal ap_sig_cseq_ST_st189_fsm_136 : STD_LOGIC;
    signal ap_sig_bdd_2406 : BOOLEAN;
    signal ap_sig_cseq_ST_st190_fsm_137 : STD_LOGIC;
    signal ap_sig_bdd_2414 : BOOLEAN;
    signal ap_sig_cseq_ST_st191_fsm_138 : STD_LOGIC;
    signal ap_sig_bdd_2422 : BOOLEAN;
    signal ap_sig_cseq_ST_st192_fsm_139 : STD_LOGIC;
    signal ap_sig_bdd_2430 : BOOLEAN;
    signal ap_sig_cseq_ST_st193_fsm_140 : STD_LOGIC;
    signal ap_sig_bdd_2438 : BOOLEAN;
    signal grp_fu_1118_ce : STD_LOGIC;
    signal grp_fu_1124_ce : STD_LOGIC;
    signal grp_fu_1127_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1127_ce : STD_LOGIC;
    signal grp_fu_1132_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1132_ce : STD_LOGIC;
    signal grp_fu_1137_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1137_ce : STD_LOGIC;
    signal grp_fu_1142_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1142_ce : STD_LOGIC;
    signal grp_fu_1458_ce : STD_LOGIC;
    signal grp_fu_1524_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (145 downto 0);

    component correlation_accel_v1_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_sitofp_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_fsqrt_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_flog_32ns_32ns_32_13_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_urem_31ns_4ns_31_35 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component correlation_accel_v1_weight_rom IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_bramA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_acc_returnA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v1_gmem32_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    weight_rom_U : component correlation_accel_v1_weight_rom
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weight_rom_address0,
        ce0 => weight_rom_ce0,
        we0 => weight_rom_we0,
        d0 => weight_rom_d0,
        q0 => weight_rom_q0,
        address1 => weight_rom_address1,
        ce1 => weight_rom_ce1,
        we1 => weight_rom_we1,
        d1 => weight_rom_d1,
        q1 => weight_rom_q1);

    bramA_U : component correlation_accel_v1_bramA
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramA_address0,
        ce0 => bramA_ce0,
        we0 => bramA_we0,
        d0 => bramA_d0,
        q0 => bramA_q0,
        address1 => bramA_address1,
        ce1 => bramA_ce1,
        q1 => bramA_q1);

    bramB_U : component correlation_accel_v1_bramA
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bramB_address0,
        ce0 => bramB_ce0,
        we0 => bramB_we0,
        d0 => bramB_d0,
        q0 => bramB_q0,
        address1 => bramB_address1,
        ce1 => bramB_ce1,
        q1 => bramB_q1);

    correlation_accel_v1_gmem32_m_axi_U : component correlation_accel_v1_gmem32_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_GMEM32_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_GMEM32_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_GMEM32_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_GMEM32_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_GMEM32_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_GMEM32_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_GMEM32_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_GMEM32_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM32_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM32_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM32_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem32_AWVALID,
        AWREADY => m_axi_gmem32_AWREADY,
        AWADDR => m_axi_gmem32_AWADDR,
        AWID => m_axi_gmem32_AWID,
        AWLEN => m_axi_gmem32_AWLEN,
        AWSIZE => m_axi_gmem32_AWSIZE,
        AWBURST => m_axi_gmem32_AWBURST,
        AWLOCK => m_axi_gmem32_AWLOCK,
        AWCACHE => m_axi_gmem32_AWCACHE,
        AWPROT => m_axi_gmem32_AWPROT,
        AWQOS => m_axi_gmem32_AWQOS,
        AWREGION => m_axi_gmem32_AWREGION,
        AWUSER => m_axi_gmem32_AWUSER,
        WVALID => m_axi_gmem32_WVALID,
        WREADY => m_axi_gmem32_WREADY,
        WDATA => m_axi_gmem32_WDATA,
        WSTRB => m_axi_gmem32_WSTRB,
        WLAST => m_axi_gmem32_WLAST,
        WID => m_axi_gmem32_WID,
        WUSER => m_axi_gmem32_WUSER,
        ARVALID => m_axi_gmem32_ARVALID,
        ARREADY => m_axi_gmem32_ARREADY,
        ARADDR => m_axi_gmem32_ARADDR,
        ARID => m_axi_gmem32_ARID,
        ARLEN => m_axi_gmem32_ARLEN,
        ARSIZE => m_axi_gmem32_ARSIZE,
        ARBURST => m_axi_gmem32_ARBURST,
        ARLOCK => m_axi_gmem32_ARLOCK,
        ARCACHE => m_axi_gmem32_ARCACHE,
        ARPROT => m_axi_gmem32_ARPROT,
        ARQOS => m_axi_gmem32_ARQOS,
        ARREGION => m_axi_gmem32_ARREGION,
        ARUSER => m_axi_gmem32_ARUSER,
        RVALID => m_axi_gmem32_RVALID,
        RREADY => m_axi_gmem32_RREADY,
        RDATA => m_axi_gmem32_RDATA,
        RLAST => m_axi_gmem32_RLAST,
        RID => m_axi_gmem32_RID,
        RUSER => m_axi_gmem32_RUSER,
        RRESP => m_axi_gmem32_RRESP,
        BVALID => m_axi_gmem32_BVALID,
        BREADY => m_axi_gmem32_BREADY,
        BRESP => m_axi_gmem32_BRESP,
        BID => m_axi_gmem32_BID,
        BUSER => m_axi_gmem32_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => correlation_accel_v1_gmem32_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem32_ARVALID,
        I_ARREADY => gmem32_ARREADY,
        I_ARADDR => gmem32_ARADDR,
        I_ARID => gmem32_ARID,
        I_ARLEN => gmem32_ARLEN,
        I_ARSIZE => gmem32_ARSIZE,
        I_ARLOCK => gmem32_ARLOCK,
        I_ARCACHE => gmem32_ARCACHE,
        I_ARQOS => gmem32_ARQOS,
        I_ARPROT => gmem32_ARPROT,
        I_ARUSER => gmem32_ARUSER,
        I_ARBURST => gmem32_ARBURST,
        I_ARREGION => gmem32_ARREGION,
        I_RVALID => gmem32_RVALID,
        I_RREADY => gmem32_RREADY,
        I_RDATA => gmem32_RDATA,
        I_RID => gmem32_RID,
        I_RUSER => gmem32_RUSER,
        I_RRESP => gmem32_RRESP,
        I_RLAST => gmem32_RLAST,
        I_AWVALID => gmem32_AWVALID,
        I_AWREADY => gmem32_AWREADY,
        I_AWADDR => gmem32_AWADDR,
        I_AWID => gmem32_AWID,
        I_AWLEN => gmem32_AWLEN,
        I_AWSIZE => gmem32_AWSIZE,
        I_AWLOCK => gmem32_AWLOCK,
        I_AWCACHE => gmem32_AWCACHE,
        I_AWQOS => gmem32_AWQOS,
        I_AWPROT => gmem32_AWPROT,
        I_AWUSER => gmem32_AWUSER,
        I_AWBURST => gmem32_AWBURST,
        I_AWREGION => gmem32_AWREGION,
        I_WVALID => gmem32_WVALID,
        I_WREADY => gmem32_WREADY,
        I_WDATA => gmem32_WDATA,
        I_WID => gmem32_WID,
        I_WUSER => gmem32_WUSER,
        I_WLAST => gmem32_WLAST,
        I_WSTRB => gmem32_WSTRB,
        I_BVALID => gmem32_BVALID,
        I_BREADY => gmem32_BREADY,
        I_BRESP => gmem32_BRESP,
        I_BID => gmem32_BID,
        I_BUSER => gmem32_BUSER);

    acc_returnA_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_returnA_address0,
        ce0 => acc_returnA_ce0,
        we0 => acc_returnA_we0,
        d0 => acc_returnA_d0,
        q0 => acc_returnA_q0,
        address1 => acc_returnA_address1,
        ce1 => acc_returnA_ce1,
        we1 => acc_returnA_we1,
        d1 => acc_returnA_d1);

    acc_returnB_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_returnB_address0,
        ce0 => acc_returnB_ce0,
        we0 => acc_returnB_we0,
        d0 => acc_returnB_d0,
        q0 => acc_returnB_q0,
        address1 => acc_returnB_address1,
        ce1 => acc_returnB_ce1,
        we1 => acc_returnB_we1,
        d1 => acc_returnB_d1);

    acc_weight_returnSquareA_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnSquareA_address0,
        ce0 => acc_weight_returnSquareA_ce0,
        we0 => acc_weight_returnSquareA_we0,
        d0 => acc_weight_returnSquareA_d0,
        q0 => acc_weight_returnSquareA_q0,
        address1 => acc_weight_returnSquareA_address1,
        ce1 => acc_weight_returnSquareA_ce1,
        we1 => acc_weight_returnSquareA_we1,
        d1 => acc_weight_returnSquareA_d1);

    acc_weight_returnA_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnA_address0,
        ce0 => acc_weight_returnA_ce0,
        we0 => acc_weight_returnA_we0,
        d0 => acc_weight_returnA_d0,
        q0 => acc_weight_returnA_q0,
        address1 => acc_weight_returnA_address1,
        ce1 => acc_weight_returnA_ce1,
        we1 => acc_weight_returnA_we1,
        d1 => acc_weight_returnA_d1);

    acc_weight_returnSquareB_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnSquareB_address0,
        ce0 => acc_weight_returnSquareB_ce0,
        we0 => acc_weight_returnSquareB_we0,
        d0 => acc_weight_returnSquareB_d0,
        q0 => acc_weight_returnSquareB_q0,
        address1 => acc_weight_returnSquareB_address1,
        ce1 => acc_weight_returnSquareB_ce1,
        we1 => acc_weight_returnSquareB_we1,
        d1 => acc_weight_returnSquareB_d1);

    acc_weight_returnB_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnB_address0,
        ce0 => acc_weight_returnB_ce0,
        we0 => acc_weight_returnB_we0,
        d0 => acc_weight_returnB_d0,
        q0 => acc_weight_returnB_q0,
        address1 => acc_weight_returnB_address1,
        ce1 => acc_weight_returnB_ce1,
        we1 => acc_weight_returnB_we1,
        d1 => acc_weight_returnB_d1);

    acc_weight_returnA_returnB_U : component correlation_accel_v1_acc_returnA
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => acc_weight_returnA_returnB_address0,
        ce0 => acc_weight_returnA_returnB_ce0,
        we0 => acc_weight_returnA_returnB_we0,
        d0 => acc_weight_returnA_returnB_d0,
        q0 => acc_weight_returnA_returnB_q0,
        address1 => acc_weight_returnA_returnB_address1,
        ce1 => acc_weight_returnA_returnB_ce1,
        we1 => acc_weight_returnA_returnB_we1,
        d1 => acc_weight_returnA_returnB_d1);

    correlation_accel_v1_faddfsub_32ns_32ns_32_5_full_dsp_U1 : component correlation_accel_v1_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1024_p0,
        din1 => grp_fu_1024_p1,
        opcode => grp_fu_1024_opcode,
        ce => grp_fu_1024_ce,
        dout => grp_fu_1024_p2);

    correlation_accel_v1_faddfsub_32ns_32ns_32_5_full_dsp_U2 : component correlation_accel_v1_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1030_p0,
        din1 => grp_fu_1030_p1,
        opcode => grp_fu_1030_opcode,
        ce => grp_fu_1030_ce,
        dout => grp_fu_1030_p2);

    correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp_U3 : component correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1036_p0,
        din1 => grp_fu_1036_p1,
        ce => grp_fu_1036_ce,
        dout => grp_fu_1036_p2);

    correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp_U4 : component correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1042_p0,
        din1 => grp_fu_1042_p1,
        ce => grp_fu_1042_ce,
        dout => grp_fu_1042_p2);

    correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp_U5 : component correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1048_p0,
        din1 => grp_fu_1048_p1,
        ce => grp_fu_1048_ce,
        dout => grp_fu_1048_p2);

    correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp_U6 : component correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1054_p0,
        din1 => grp_fu_1054_p1,
        ce => grp_fu_1054_ce,
        dout => grp_fu_1054_p2);

    correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp_U7 : component correlation_accel_v1_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1060_p0,
        din1 => grp_fu_1060_p1,
        ce => grp_fu_1060_ce,
        dout => grp_fu_1060_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp_U8 : component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1074_p0,
        din1 => grp_fu_1074_p1,
        ce => grp_fu_1074_ce,
        dout => grp_fu_1074_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp_U9 : component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1080_p0,
        din1 => grp_fu_1080_p1,
        ce => grp_fu_1080_ce,
        dout => grp_fu_1080_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp_U10 : component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1084_p0,
        din1 => grp_fu_1084_p1,
        ce => grp_fu_1084_ce,
        dout => grp_fu_1084_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp_U11 : component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1088_p0,
        din1 => grp_fu_1088_p1,
        ce => grp_fu_1088_ce,
        dout => grp_fu_1088_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp_U12 : component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1092_p0,
        din1 => grp_fu_1092_p1,
        ce => grp_fu_1092_ce,
        dout => grp_fu_1092_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp_U13 : component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1096_p0,
        din1 => grp_fu_1096_p1,
        ce => grp_fu_1096_ce,
        dout => grp_fu_1096_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp_U14 : component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1100_p0,
        din1 => grp_fu_1100_p1,
        ce => grp_fu_1100_ce,
        dout => grp_fu_1100_p2);

    correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp_U15 : component correlation_accel_v1_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1104_p0,
        din1 => grp_fu_1104_p1,
        ce => grp_fu_1104_ce,
        dout => grp_fu_1104_p2);

    correlation_accel_v1_fdiv_32ns_32ns_32_16_U16 : component correlation_accel_v1_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1114_p0,
        din1 => grp_fu_1114_p1,
        ce => grp_fu_1114_ce,
        dout => grp_fu_1114_p2);

    correlation_accel_v1_fdiv_32ns_32ns_32_16_U17 : component correlation_accel_v1_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1118_p0,
        din1 => grp_fu_1118_p1,
        ce => grp_fu_1118_ce,
        dout => grp_fu_1118_p2);

    correlation_accel_v1_sitofp_32s_32_6_U18 : component correlation_accel_v1_sitofp_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1124_p0,
        ce => grp_fu_1124_ce,
        dout => grp_fu_1124_p1);

    correlation_accel_v1_fsqrt_32ns_32ns_32_16_U19 : component correlation_accel_v1_fsqrt_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1127_p0,
        din1 => grp_fu_1127_p1,
        ce => grp_fu_1127_ce,
        dout => grp_fu_1127_p2);

    correlation_accel_v1_fsqrt_32ns_32ns_32_16_U20 : component correlation_accel_v1_fsqrt_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1132_p0,
        din1 => grp_fu_1132_p1,
        ce => grp_fu_1132_ce,
        dout => grp_fu_1132_p2);

    correlation_accel_v1_flog_32ns_32ns_32_13_full_dsp_U21 : component correlation_accel_v1_flog_32ns_32ns_32_13_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1137_p0,
        din1 => grp_fu_1137_p1,
        ce => grp_fu_1137_ce,
        dout => grp_fu_1137_p2);

    correlation_accel_v1_flog_32ns_32ns_32_13_full_dsp_U22 : component correlation_accel_v1_flog_32ns_32ns_32_13_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1142_p0,
        din1 => grp_fu_1142_p1,
        ce => grp_fu_1142_ce,
        dout => grp_fu_1142_p2);

    correlation_accel_v1_mul_32s_32s_32_6_U23 : component correlation_accel_v1_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1458_p0,
        din1 => grp_fu_1458_p1,
        ce => grp_fu_1458_ce,
        dout => grp_fu_1458_p2);

    correlation_accel_v1_urem_31ns_4ns_31_35_U24 : component correlation_accel_v1_urem_31ns_4ns_31_35
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 31,
        din1_WIDTH => 4,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1524_p0,
        din1 => grp_fu_1524_p1,
        ce => grp_fu_1524_ce,
        dout => grp_fu_1524_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_ARREADY assign process. --
    ap_reg_ioackin_gmem32_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_38)))) then 
                    ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = gmem32_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) or ((ap_const_logic_1 = gmem32_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_38)))) then 
                    ap_reg_ioackin_gmem32_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_AWREADY assign process. --
    ap_reg_ioackin_gmem32_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st194_fsm_141)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY))) then 
                        ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem32_AWREADY)) then 
                        ap_reg_ioackin_gmem32_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem32_WREADY assign process. --
    ap_reg_ioackin_gmem32_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st195_fsm_142)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_WREADY))) then 
                        ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem32_WREADY)) then 
                        ap_reg_ioackin_gmem32_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_1396_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond4_fu_1396_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_1396_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1480_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_43)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond2_fu_1480_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_43) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1480_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_43)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_lv1_0 = tmp_14_fu_1500_p2))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and not((ap_const_lv1_0 = tmp_14_fu_1500_p2)))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_lv1_0 = tmp_14_fu_1500_p2)))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it10 assign process. --
    ap_reg_ppiten_pp2_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it10 <= ap_reg_ppiten_pp2_it9;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it11 assign process. --
    ap_reg_ppiten_pp2_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it11 <= ap_reg_ppiten_pp2_it10;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it12 assign process. --
    ap_reg_ppiten_pp2_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it12 <= ap_reg_ppiten_pp2_it11;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it13 assign process. --
    ap_reg_ppiten_pp2_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it13 <= ap_reg_ppiten_pp2_it12;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it14 assign process. --
    ap_reg_ppiten_pp2_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it14 <= ap_reg_ppiten_pp2_it13;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it15 assign process. --
    ap_reg_ppiten_pp2_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it15 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it15 <= ap_reg_ppiten_pp2_it14;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it16 assign process. --
    ap_reg_ppiten_pp2_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it16 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it16 <= ap_reg_ppiten_pp2_it15;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it17 assign process. --
    ap_reg_ppiten_pp2_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it17 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it17 <= ap_reg_ppiten_pp2_it16;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it18 assign process. --
    ap_reg_ppiten_pp2_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it18 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it18 <= ap_reg_ppiten_pp2_it17;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it19 assign process. --
    ap_reg_ppiten_pp2_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it19 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it19 <= ap_reg_ppiten_pp2_it18;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it20 assign process. --
    ap_reg_ppiten_pp2_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it20 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it20 <= ap_reg_ppiten_pp2_it19;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it21 assign process. --
    ap_reg_ppiten_pp2_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it21 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it21 <= ap_reg_ppiten_pp2_it20;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it22 assign process. --
    ap_reg_ppiten_pp2_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it22 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it22 <= ap_reg_ppiten_pp2_it21;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it23 assign process. --
    ap_reg_ppiten_pp2_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it23 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it23 <= ap_reg_ppiten_pp2_it22;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it24 assign process. --
    ap_reg_ppiten_pp2_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it24 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it24 <= ap_reg_ppiten_pp2_it23;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it25 assign process. --
    ap_reg_ppiten_pp2_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it25 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it25 <= ap_reg_ppiten_pp2_it24;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it26 assign process. --
    ap_reg_ppiten_pp2_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it26 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it26 <= ap_reg_ppiten_pp2_it25;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it27 assign process. --
    ap_reg_ppiten_pp2_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it27 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it27 <= ap_reg_ppiten_pp2_it26;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it28 assign process. --
    ap_reg_ppiten_pp2_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it28 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it28 <= ap_reg_ppiten_pp2_it27;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it29 assign process. --
    ap_reg_ppiten_pp2_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it29 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it29 <= ap_reg_ppiten_pp2_it28;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it3 assign process. --
    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it30 assign process. --
    ap_reg_ppiten_pp2_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it30 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it30 <= ap_reg_ppiten_pp2_it29;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it31 assign process. --
    ap_reg_ppiten_pp2_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it31 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it31 <= ap_reg_ppiten_pp2_it30;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it32 assign process. --
    ap_reg_ppiten_pp2_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it32 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it32 <= ap_reg_ppiten_pp2_it31;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it33 assign process. --
    ap_reg_ppiten_pp2_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it33 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it33 <= ap_reg_ppiten_pp2_it32;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it34 assign process. --
    ap_reg_ppiten_pp2_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it34 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it34 <= ap_reg_ppiten_pp2_it33;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it35 assign process. --
    ap_reg_ppiten_pp2_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it35 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it35 <= ap_reg_ppiten_pp2_it34;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it36 assign process. --
    ap_reg_ppiten_pp2_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it36 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it36 <= ap_reg_ppiten_pp2_it35;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it37 assign process. --
    ap_reg_ppiten_pp2_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it37 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it37 <= ap_reg_ppiten_pp2_it36;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it38 assign process. --
    ap_reg_ppiten_pp2_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it38 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it38 <= ap_reg_ppiten_pp2_it37;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it39 assign process. --
    ap_reg_ppiten_pp2_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it39 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it39 <= ap_reg_ppiten_pp2_it38;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it4 assign process. --
    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it40 assign process. --
    ap_reg_ppiten_pp2_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it40 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it40 <= ap_reg_ppiten_pp2_it39;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it41 assign process. --
    ap_reg_ppiten_pp2_it41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it41 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it41 <= ap_reg_ppiten_pp2_it40;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it42 assign process. --
    ap_reg_ppiten_pp2_it42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it42 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it42 <= ap_reg_ppiten_pp2_it41;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it43 assign process. --
    ap_reg_ppiten_pp2_it43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it43 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it43 <= ap_reg_ppiten_pp2_it42;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it5 assign process. --
    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it6 assign process. --
    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it7 assign process. --
    ap_reg_ppiten_pp2_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it7 <= ap_reg_ppiten_pp2_it6;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it8 assign process. --
    ap_reg_ppiten_pp2_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it8 <= ap_reg_ppiten_pp2_it7;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it9 assign process. --
    ap_reg_ppiten_pp2_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it9 <= ap_reg_ppiten_pp2_it8;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51) and not((ap_const_lv1_0 = exitcond_fu_1541_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55) and not((ap_const_lv1_0 = exitcond_reg_2097))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- column_index_0_in_reg_884 assign process. --
    column_index_0_in_reg_884_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st198_fsm_145) and not((gmem32_BVALID = ap_const_logic_0)))) then 
                column_index_0_in_reg_884 <= column_index_reg_1919;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_29)) then 
                column_index_0_in_reg_884 <= row_index_cast_reg_1881;
            end if; 
        end if;
    end process;

    -- counter_1_reg_893 assign process. --
    counter_1_reg_893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st198_fsm_145) and not((gmem32_BVALID = ap_const_logic_0)))) then 
                counter_1_reg_893 <= tmp_56_reg_2185;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_29)) then 
                counter_1_reg_893 <= counter_reg_849;
            end if; 
        end if;
    end process;

    -- counter_reg_849 assign process. --
    counter_reg_849_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                counter_reg_849 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_30) and (ap_const_lv1_0 = tmp_8_fu_1441_p2))) then 
                counter_reg_849 <= counter_2_reg_1914;
            end if; 
        end if;
    end process;

    -- i1_i_reg_803 assign process. --
    i1_i_reg_803_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_i_fu_1303_p2)))) then 
                i1_i_reg_803 <= ap_const_lv31_2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                i1_i_reg_803 <= i_3_reg_1628;
            end if; 
        end if;
    end process;

    -- i1_reg_916 assign process. --
    i1_reg_916_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
                i1_reg_916 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_const_lv1_0 = tmp_14_reg_1958)))) then 
                i1_reg_916 <= i_reg_1962;
            end if; 
        end if;
    end process;

    -- i2_reg_1012 assign process. --
    i2_reg_1012_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51))) then 
                i2_reg_1012 <= i_1_reg_2101;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                i2_reg_1012 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i_i_reg_791 assign process. --
    i_i_reg_791_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                i_i_reg_791 <= i_2_fu_1314_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_i_reg_791 <= ap_const_lv8_2;
            end if; 
        end if;
    end process;

    -- indvar1_reg_904 assign process. --
    indvar1_reg_904_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and (ap_const_lv1_0 = exitcond2_reg_1949) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                indvar1_reg_904 <= indvar_next1_reg_1953;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_43)) then 
                indvar1_reg_904 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_872 assign process. --
    indvar_reg_872_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and (exitcond4_reg_1900 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_872 <= indvar_next_reg_1904;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                indvar_reg_872 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    -- indvars_iv2_reg_814 assign process. --
    indvars_iv2_reg_814_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                indvars_iv2_reg_814 <= ap_const_lv32_FFFFFFFF;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_30) and (ap_const_lv1_0 = tmp_8_fu_1441_p2))) then 
                indvars_iv2_reg_814 <= indvars_iv_next3_fu_1452_p2;
            end if; 
        end if;
    end process;

    -- indvars_iv_reg_826 assign process. --
    indvars_iv_reg_826_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                indvars_iv_reg_826 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_30) and (ap_const_lv1_0 = tmp_8_fu_1441_p2))) then 
                indvars_iv_reg_826 <= indvars_iv_next_fu_1446_p2;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_861 assign process. --
    phi_mul_reg_861_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                phi_mul_reg_861 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_30) and (ap_const_lv1_0 = tmp_8_fu_1441_p2))) then 
                phi_mul_reg_861 <= next_mul_reg_1876;
            end if; 
        end if;
    end process;

    -- reg_1157 assign process. --
    reg_1157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and not((ap_const_lv1_0 = tmp_14_reg_1958)))) then 
                reg_1157 <= weight_rom_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50))) then 
                reg_1157 <= weight_rom_q1;
            end if; 
        end if;
    end process;

    -- row_index_reg_838 assign process. --
    row_index_reg_838_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                row_index_reg_838 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_30) and (ap_const_lv1_0 = tmp_8_fu_1441_p2))) then 
                row_index_reg_838 <= row_index_1_reg_1889;
            end if; 
        end if;
    end process;

    -- sum_returnA_reg_928 assign process. --
    sum_returnA_reg_928_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
                sum_returnA_reg_928 <= reg_1170;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                sum_returnA_reg_928 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_returnB_reg_940 assign process. --
    sum_returnB_reg_940_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
                sum_returnB_reg_940 <= sum_returnB_1_reg_2150;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                sum_returnB_reg_940 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnA_reg_964 assign process. --
    sum_weight_returnA_reg_964_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then 
                sum_weight_returnA_reg_964 <= sum_weight_returnA_1_reg_2160;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                sum_weight_returnA_reg_964 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnA_returnB_reg_1000 assign process. --
    sum_weight_returnA_returnB_reg_1000_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
                sum_weight_returnA_returnB_reg_1000 <= grp_fu_1024_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                sum_weight_returnA_returnB_reg_1000 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnB_reg_988 assign process. --
    sum_weight_returnB_reg_988_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
                sum_weight_returnB_reg_988 <= sum_weight_returnB_1_reg_2170;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                sum_weight_returnB_reg_988 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnSquareA_reg_952 assign process. --
    sum_weight_returnSquareA_reg_952_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then 
                sum_weight_returnSquareA_reg_952 <= sum_weight_returnSquareA_1_reg_2155;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                sum_weight_returnSquareA_reg_952 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- sum_weight_returnSquareB_reg_976 assign process. --
    sum_weight_returnSquareB_reg_976_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
                sum_weight_returnSquareB_reg_976 <= sum_weight_returnSquareB_1_reg_2165;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st98_fsm_50)) then 
                sum_weight_returnSquareB_reg_976 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- tmp_i_reg_779 assign process. --
    tmp_i_reg_779_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                tmp_i_reg_779 <= reg_1147;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                tmp_i_reg_779 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it33))) then
                acc_returnA_addr_1_reg_2030 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
                acc_returnB_addr_1_reg_2036 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
                acc_weight_returnA_addr_1_reg_2054 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
                acc_weight_returnA_returnB_add_6_reg_2076 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
                acc_weight_returnB_addr_1_reg_2065 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
                acc_weight_returnSquareA_addr_1_reg_2042 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
                acc_weight_returnSquareB_addr_1_reg_2048 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
                tmp_31_reg_2060 <= grp_fu_1088_p2;
                tmp_33_reg_2071 <= grp_fu_1092_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it35 <= acc_returnA_addr_1_reg_2030;
                ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it36 <= ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it35;
                ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it37 <= ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it36;
                ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it38 <= ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it37;
                ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it35 <= acc_returnB_addr_1_reg_2036;
                ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it36 <= ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it35;
                ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it37 <= ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it36;
                ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it38 <= ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it37;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it35 <= acc_weight_returnA_addr_1_reg_2054;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it36 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it35;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it37 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it36;
                ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it38 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it37;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it35 <= acc_weight_returnA_returnB_add_6_reg_2076;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it36 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it35;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it37 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it36;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it38 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it37;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it39 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it38;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it40 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it39;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it41 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it40;
                ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it42 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it41;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it35 <= acc_weight_returnB_addr_1_reg_2065;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it36 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it35;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it37 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it36;
                ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it38 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it37;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it35 <= acc_weight_returnSquareA_addr_1_reg_2042;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it36 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it35;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it37 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it36;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it38 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it37;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it39 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it38;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it40 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it39;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it41 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it40;
                ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it42 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it41;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it35 <= acc_weight_returnSquareB_addr_1_reg_2048;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it36 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it35;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it37 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it36;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it38 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it37;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it39 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it38;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it40 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it39;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it41 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it40;
                ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it42 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it41;
                ap_reg_ppstg_lnReturnA_reg_2012_pp2_it31 <= lnReturnA_reg_2012;
                ap_reg_ppstg_lnReturnA_reg_2012_pp2_it32 <= ap_reg_ppstg_lnReturnA_reg_2012_pp2_it31;
                ap_reg_ppstg_lnReturnA_reg_2012_pp2_it33 <= ap_reg_ppstg_lnReturnA_reg_2012_pp2_it32;
                ap_reg_ppstg_lnReturnA_reg_2012_pp2_it34 <= ap_reg_ppstg_lnReturnA_reg_2012_pp2_it33;
                ap_reg_ppstg_lnReturnB_reg_2021_pp2_it31 <= lnReturnB_reg_2021;
                ap_reg_ppstg_lnReturnB_reg_2021_pp2_it32 <= ap_reg_ppstg_lnReturnB_reg_2021_pp2_it31;
                ap_reg_ppstg_lnReturnB_reg_2021_pp2_it33 <= ap_reg_ppstg_lnReturnB_reg_2021_pp2_it32;
                ap_reg_ppstg_lnReturnB_reg_2021_pp2_it34 <= ap_reg_ppstg_lnReturnB_reg_2021_pp2_it33;
                ap_reg_ppstg_reg_1157_pp2_it10 <= ap_reg_ppstg_reg_1157_pp2_it9;
                ap_reg_ppstg_reg_1157_pp2_it11 <= ap_reg_ppstg_reg_1157_pp2_it10;
                ap_reg_ppstg_reg_1157_pp2_it12 <= ap_reg_ppstg_reg_1157_pp2_it11;
                ap_reg_ppstg_reg_1157_pp2_it13 <= ap_reg_ppstg_reg_1157_pp2_it12;
                ap_reg_ppstg_reg_1157_pp2_it14 <= ap_reg_ppstg_reg_1157_pp2_it13;
                ap_reg_ppstg_reg_1157_pp2_it15 <= ap_reg_ppstg_reg_1157_pp2_it14;
                ap_reg_ppstg_reg_1157_pp2_it16 <= ap_reg_ppstg_reg_1157_pp2_it15;
                ap_reg_ppstg_reg_1157_pp2_it17 <= ap_reg_ppstg_reg_1157_pp2_it16;
                ap_reg_ppstg_reg_1157_pp2_it18 <= ap_reg_ppstg_reg_1157_pp2_it17;
                ap_reg_ppstg_reg_1157_pp2_it19 <= ap_reg_ppstg_reg_1157_pp2_it18;
                ap_reg_ppstg_reg_1157_pp2_it2 <= reg_1157;
                ap_reg_ppstg_reg_1157_pp2_it20 <= ap_reg_ppstg_reg_1157_pp2_it19;
                ap_reg_ppstg_reg_1157_pp2_it21 <= ap_reg_ppstg_reg_1157_pp2_it20;
                ap_reg_ppstg_reg_1157_pp2_it22 <= ap_reg_ppstg_reg_1157_pp2_it21;
                ap_reg_ppstg_reg_1157_pp2_it23 <= ap_reg_ppstg_reg_1157_pp2_it22;
                ap_reg_ppstg_reg_1157_pp2_it24 <= ap_reg_ppstg_reg_1157_pp2_it23;
                ap_reg_ppstg_reg_1157_pp2_it25 <= ap_reg_ppstg_reg_1157_pp2_it24;
                ap_reg_ppstg_reg_1157_pp2_it26 <= ap_reg_ppstg_reg_1157_pp2_it25;
                ap_reg_ppstg_reg_1157_pp2_it27 <= ap_reg_ppstg_reg_1157_pp2_it26;
                ap_reg_ppstg_reg_1157_pp2_it28 <= ap_reg_ppstg_reg_1157_pp2_it27;
                ap_reg_ppstg_reg_1157_pp2_it29 <= ap_reg_ppstg_reg_1157_pp2_it28;
                ap_reg_ppstg_reg_1157_pp2_it3 <= ap_reg_ppstg_reg_1157_pp2_it2;
                ap_reg_ppstg_reg_1157_pp2_it30 <= ap_reg_ppstg_reg_1157_pp2_it29;
                ap_reg_ppstg_reg_1157_pp2_it31 <= ap_reg_ppstg_reg_1157_pp2_it30;
                ap_reg_ppstg_reg_1157_pp2_it32 <= ap_reg_ppstg_reg_1157_pp2_it31;
                ap_reg_ppstg_reg_1157_pp2_it33 <= ap_reg_ppstg_reg_1157_pp2_it32;
                ap_reg_ppstg_reg_1157_pp2_it34 <= ap_reg_ppstg_reg_1157_pp2_it33;
                ap_reg_ppstg_reg_1157_pp2_it4 <= ap_reg_ppstg_reg_1157_pp2_it3;
                ap_reg_ppstg_reg_1157_pp2_it5 <= ap_reg_ppstg_reg_1157_pp2_it4;
                ap_reg_ppstg_reg_1157_pp2_it6 <= ap_reg_ppstg_reg_1157_pp2_it5;
                ap_reg_ppstg_reg_1157_pp2_it7 <= ap_reg_ppstg_reg_1157_pp2_it6;
                ap_reg_ppstg_reg_1157_pp2_it8 <= ap_reg_ppstg_reg_1157_pp2_it7;
                ap_reg_ppstg_reg_1157_pp2_it9 <= ap_reg_ppstg_reg_1157_pp2_it8;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it10 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it9;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it11 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it10;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it12 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it11;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it13 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it12;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it14 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it13;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it15 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it14;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it16 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it15;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it17 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it16;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it18 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it17;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it19 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it18;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it2 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it1;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it20 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it19;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it21 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it20;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it22 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it21;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it23 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it22;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it24 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it23;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it25 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it24;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it26 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it25;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it27 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it26;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it28 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it27;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it29 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it28;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it3 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it2;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it30 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it29;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it31 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it30;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it32 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it31;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it33 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it32;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it34 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it33;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it35 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it34;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it36 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it35;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it37 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it36;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it38 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it37;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it39 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it38;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it4 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it3;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it40 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it39;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it41 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it40;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it42 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it41;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it5 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it4;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it6 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it5;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it7 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it6;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it8 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it7;
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it9 <= ap_reg_ppstg_tmp_14_reg_1958_pp2_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                ap_reg_ppstg_exitcond2_reg_1949_pp1_it1 <= exitcond2_reg_1949;
                ap_reg_ppstg_indvar1_reg_904_pp1_it1 <= indvar1_reg_904;
                exitcond2_reg_1949 <= exitcond2_fu_1480_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond4_reg_1900_pp0_it1 <= exitcond4_reg_1900;
                ap_reg_ppstg_indvar_reg_872_pp0_it1 <= indvar_reg_872;
                exitcond4_reg_1900 <= exitcond4_fu_1396_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51)) then
                ap_reg_ppstg_exitcond_reg_2097_pp3_it1 <= exitcond_reg_2097;
                exitcond_reg_2097 <= exitcond_fu_1541_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48)) then
                ap_reg_ppstg_tmp_14_reg_1958_pp2_it1 <= tmp_14_reg_1958;
                tmp_14_reg_1958 <= tmp_14_fu_1500_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and not((ap_const_lv1_0 = tmp_14_reg_1958)))) then
                bramA_load_1_reg_1997 <= bramA_q1;
                bramA_load_reg_1992 <= bramA_q0;
                bramB_load_1_reg_2007 <= bramB_q1;
                bramB_load_reg_2002 <= bramB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_30)) then
                column_index_reg_1919 <= column_index_fu_1435_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_29)) then
                counter_2_reg_1914 <= counter_2_fu_1429_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_37)) then
                gmem32_addr_1_reg_1943 <= tmp_64_fu_1470_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_56)) then
                gmem32_addr_2_reg_2180 <= out_correlation4_sum_cast_fu_1568_p1(32 - 1 downto 0);
                tmp_56_reg_2185 <= tmp_56_fu_1578_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = tmp_4_fu_1366_p2)))) then
                gmem32_addr_reg_1894 <= tmp_55_fu_1386_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51))) then
                i_1_reg_2101 <= i_1_fu_1547_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_59_i_fu_1324_p2)))) then
                i_3_reg_1628 <= i_3_fu_1334_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then
                i_reg_1962 <= i_fu_1505_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                indvar_next1_reg_1953 <= indvar_next1_fu_1485_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_1904 <= indvar_next_fu_1401_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it29))) then
                lnReturnA_reg_2012 <= grp_fu_1137_p2;
                lnReturnB_reg_2021 <= grp_fu_1142_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                next_mul_reg_1876 <= next_mul_fu_1357_p2;
                row_index_1_reg_1889 <= row_index_1_fu_1371_p2;
                row_index_cast_reg_1881(0) <= row_index_cast_fu_1362_p1(0);
    row_index_cast_reg_1881(1) <= row_index_cast_fu_1362_p1(1);
    row_index_cast_reg_1881(2) <= row_index_cast_fu_1362_p1(2);
    row_index_cast_reg_1881(3) <= row_index_cast_fu_1362_p1(3);
    row_index_cast_reg_1881(4) <= row_index_cast_fu_1362_p1(4);
    row_index_cast_reg_1881(5) <= row_index_cast_fu_1362_p1(5);
    row_index_cast_reg_1881(6) <= row_index_cast_fu_1362_p1(6);
    row_index_cast_reg_1881(7) <= row_index_cast_fu_1362_p1(7);
    row_index_cast_reg_1881(8) <= row_index_cast_fu_1362_p1(8);
    row_index_cast_reg_1881(9) <= row_index_cast_fu_1362_p1(9);
    row_index_cast_reg_1881(10) <= row_index_cast_fu_1362_p1(10);
    row_index_cast_reg_1881(11) <= row_index_cast_fu_1362_p1(11);
    row_index_cast_reg_1881(12) <= row_index_cast_fu_1362_p1(12);
    row_index_cast_reg_1881(13) <= row_index_cast_fu_1362_p1(13);
    row_index_cast_reg_1881(14) <= row_index_cast_fu_1362_p1(14);
    row_index_cast_reg_1881(15) <= row_index_cast_fu_1362_p1(15);
    row_index_cast_reg_1881(16) <= row_index_cast_fu_1362_p1(16);
    row_index_cast_reg_1881(17) <= row_index_cast_fu_1362_p1(17);
    row_index_cast_reg_1881(18) <= row_index_cast_fu_1362_p1(18);
    row_index_cast_reg_1881(19) <= row_index_cast_fu_1362_p1(19);
    row_index_cast_reg_1881(20) <= row_index_cast_fu_1362_p1(20);
    row_index_cast_reg_1881(21) <= row_index_cast_fu_1362_p1(21);
    row_index_cast_reg_1881(22) <= row_index_cast_fu_1362_p1(22);
    row_index_cast_reg_1881(23) <= row_index_cast_fu_1362_p1(23);
    row_index_cast_reg_1881(24) <= row_index_cast_fu_1362_p1(24);
    row_index_cast_reg_1881(25) <= row_index_cast_fu_1362_p1(25);
    row_index_cast_reg_1881(26) <= row_index_cast_fu_1362_p1(26);
    row_index_cast_reg_1881(27) <= row_index_cast_fu_1362_p1(27);
    row_index_cast_reg_1881(28) <= row_index_cast_fu_1362_p1(28);
    row_index_cast_reg_1881(29) <= row_index_cast_fu_1362_p1(29);
    row_index_cast_reg_1881(30) <= row_index_cast_fu_1362_p1(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                p_add_i32_shr_reg_1661(0) <= p_add_i32_shr_fu_1353_p1(0);
    p_add_i32_shr_reg_1661(1) <= p_add_i32_shr_fu_1353_p1(1);
    p_add_i32_shr_reg_1661(2) <= p_add_i32_shr_fu_1353_p1(2);
    p_add_i32_shr_reg_1661(3) <= p_add_i32_shr_fu_1353_p1(3);
    p_add_i32_shr_reg_1661(4) <= p_add_i32_shr_fu_1353_p1(4);
    p_add_i32_shr_reg_1661(5) <= p_add_i32_shr_fu_1353_p1(5);
    p_add_i32_shr_reg_1661(6) <= p_add_i32_shr_fu_1353_p1(6);
    p_add_i32_shr_reg_1661(7) <= p_add_i32_shr_fu_1353_p1(7);
    p_add_i32_shr_reg_1661(8) <= p_add_i32_shr_fu_1353_p1(8);
    p_add_i32_shr_reg_1661(9) <= p_add_i32_shr_fu_1353_p1(9);
    p_add_i32_shr_reg_1661(10) <= p_add_i32_shr_fu_1353_p1(10);
    p_add_i32_shr_reg_1661(11) <= p_add_i32_shr_fu_1353_p1(11);
    p_add_i32_shr_reg_1661(12) <= p_add_i32_shr_fu_1353_p1(12);
    p_add_i32_shr_reg_1661(13) <= p_add_i32_shr_fu_1353_p1(13);
    p_add_i32_shr_reg_1661(14) <= p_add_i32_shr_fu_1353_p1(14);
    p_add_i32_shr_reg_1661(15) <= p_add_i32_shr_fu_1353_p1(15);
    p_add_i32_shr_reg_1661(16) <= p_add_i32_shr_fu_1353_p1(16);
    p_add_i32_shr_reg_1661(17) <= p_add_i32_shr_fu_1353_p1(17);
    p_add_i32_shr_reg_1661(18) <= p_add_i32_shr_fu_1353_p1(18);
    p_add_i32_shr_reg_1661(19) <= p_add_i32_shr_fu_1353_p1(19);
    p_add_i32_shr_reg_1661(20) <= p_add_i32_shr_fu_1353_p1(20);
    p_add_i32_shr_reg_1661(21) <= p_add_i32_shr_fu_1353_p1(21);
    p_add_i32_shr_reg_1661(22) <= p_add_i32_shr_fu_1353_p1(22);
    p_add_i32_shr_reg_1661(23) <= p_add_i32_shr_fu_1353_p1(23);
    p_add_i32_shr_reg_1661(24) <= p_add_i32_shr_fu_1353_p1(24);
    p_add_i32_shr_reg_1661(25) <= p_add_i32_shr_fu_1353_p1(25);
    p_add_i32_shr_reg_1661(26) <= p_add_i32_shr_fu_1353_p1(26);
    p_add_i32_shr_reg_1661(27) <= p_add_i32_shr_fu_1353_p1(27);
    p_add_i32_shr_reg_1661(28) <= p_add_i32_shr_fu_1353_p1(28);
    p_add_i32_shr_reg_1661(29) <= p_add_i32_shr_fu_1353_p1(29);
                tmp_2_reg_1649 <= grp_fu_1124_p1;
                tmp_6_reg_1655 <= tmp_6_fu_1350_p1;
                tmp_reg_1644 <= tmp_fu_1345_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it33)) or (ap_const_logic_1 = ap_sig_cseq_ST_st128_fsm_75) or (ap_const_logic_1 = ap_sig_cseq_ST_st132_fsm_79) or (ap_const_logic_1 = ap_sig_cseq_ST_st153_fsm_100) or (ap_const_logic_1 = ap_sig_cseq_ST_st178_fsm_125))) then
                reg_1147 <= grp_fu_1074_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1)))) then
                reg_1170 <= grp_fu_1024_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and (exitcond4_reg_1900 = ap_const_lv1_0) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and (ap_const_lv1_0 = exitcond2_reg_1949) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                reg_1176 <= gmem32_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st153_fsm_100) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it16)) or (ap_const_logic_1 = ap_sig_cseq_ST_st124_fsm_71) or ((ap_const_logic_1 = ap_sig_cseq_ST_st194_fsm_141) and not((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY))))) then
                reg_1182 <= grp_fu_1114_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st153_fsm_100) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it16)) or (ap_const_logic_1 = ap_sig_cseq_ST_st124_fsm_71))) then
                reg_1192 <= grp_fu_1118_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it33)) or (ap_const_logic_1 = ap_sig_cseq_ST_st128_fsm_75) or (ap_const_logic_1 = ap_sig_cseq_ST_st132_fsm_79) or (ap_const_logic_1 = ap_sig_cseq_ST_st153_fsm_100))) then
                reg_1202 <= grp_fu_1080_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it33)) or (ap_const_logic_1 = ap_sig_cseq_ST_st128_fsm_75) or (ap_const_logic_1 = ap_sig_cseq_ST_st153_fsm_100))) then
                reg_1209 <= grp_fu_1084_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it34)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_52) and (ap_const_lv1_0 = exitcond_reg_2097)))) then
                reg_1215 <= acc_returnA_q0;
                reg_1221 <= acc_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it34)) or ((ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53)))) then
                reg_1227 <= acc_weight_returnA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it34)) or ((ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54)))) then
                reg_1233 <= acc_weight_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it38)))) then
                reg_1239 <= acc_weight_returnSquareA_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it38)))) then
                reg_1245 <= acc_weight_returnSquareB_q0;
                reg_1251 <= acc_weight_returnA_returnB_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st133_fsm_80) or (ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_85) or (ap_const_logic_1 = ap_sig_cseq_ST_st158_fsm_105))) then
                reg_1257 <= grp_fu_1024_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st137_fsm_84) or (ap_const_logic_1 = ap_sig_cseq_ST_st159_fsm_106))) then
                reg_1264 <= grp_fu_1024_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st158_fsm_105) or (ap_const_logic_1 = ap_sig_cseq_ST_st137_fsm_84))) then
                reg_1269 <= grp_fu_1030_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1))) then
                sum_returnB_1_reg_2150 <= grp_fu_1030_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then
                sum_weight_returnA_1_reg_2160 <= grp_fu_1030_p2;
                sum_weight_returnSquareA_1_reg_2155 <= grp_fu_1024_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then
                sum_weight_returnB_1_reg_2170 <= grp_fu_1030_p2;
                sum_weight_returnSquareB_1_reg_2165 <= grp_fu_1024_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_36)) then
                tmp_10_reg_1938 <= grp_fu_1458_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_59_i_fu_1324_p2))) then
                tmp_1_reg_1633 <= tmp_1_fu_1340_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it37))) then
                tmp_24_reg_2082 <= grp_fu_1096_p2;
                tmp_27_reg_2087 <= grp_fu_1100_p2;
                tmp_34_reg_2092 <= grp_fu_1104_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st132_fsm_79)) then
                tmp_50_reg_2190 <= grp_fu_1084_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_101)) then
                tmp_52_reg_2195 <= grp_fu_1114_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51) and (ap_const_lv1_0 = exitcond_fu_1541_p2))) then
                tmp_57_reg_2106(0) <= tmp_57_fu_1553_p1(0);
    tmp_57_reg_2106(1) <= tmp_57_fu_1553_p1(1);
    tmp_57_reg_2106(2) <= tmp_57_fu_1553_p1(2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_61_cast_reg_1601(0) <= tmp_61_cast_fu_1285_p1(0);
    tmp_61_cast_reg_1601(1) <= tmp_61_cast_fu_1285_p1(1);
    tmp_61_cast_reg_1601(2) <= tmp_61_cast_fu_1285_p1(2);
    tmp_61_cast_reg_1601(3) <= tmp_61_cast_fu_1285_p1(3);
    tmp_61_cast_reg_1601(4) <= tmp_61_cast_fu_1285_p1(4);
    tmp_61_cast_reg_1601(5) <= tmp_61_cast_fu_1285_p1(5);
    tmp_61_cast_reg_1601(6) <= tmp_61_cast_fu_1285_p1(6);
    tmp_61_cast_reg_1601(7) <= tmp_61_cast_fu_1285_p1(7);
    tmp_61_cast_reg_1601(8) <= tmp_61_cast_fu_1285_p1(8);
    tmp_61_cast_reg_1601(9) <= tmp_61_cast_fu_1285_p1(9);
    tmp_61_cast_reg_1601(10) <= tmp_61_cast_fu_1285_p1(10);
    tmp_61_cast_reg_1601(11) <= tmp_61_cast_fu_1285_p1(11);
    tmp_61_cast_reg_1601(12) <= tmp_61_cast_fu_1285_p1(12);
    tmp_61_cast_reg_1601(13) <= tmp_61_cast_fu_1285_p1(13);
    tmp_61_cast_reg_1601(14) <= tmp_61_cast_fu_1285_p1(14);
    tmp_61_cast_reg_1601(15) <= tmp_61_cast_fu_1285_p1(15);
    tmp_61_cast_reg_1601(16) <= tmp_61_cast_fu_1285_p1(16);
    tmp_61_cast_reg_1601(17) <= tmp_61_cast_fu_1285_p1(17);
    tmp_61_cast_reg_1601(18) <= tmp_61_cast_fu_1285_p1(18);
    tmp_61_cast_reg_1601(19) <= tmp_61_cast_fu_1285_p1(19);
    tmp_61_cast_reg_1601(20) <= tmp_61_cast_fu_1285_p1(20);
    tmp_61_cast_reg_1601(21) <= tmp_61_cast_fu_1285_p1(21);
    tmp_61_cast_reg_1601(22) <= tmp_61_cast_fu_1285_p1(22);
    tmp_61_cast_reg_1601(23) <= tmp_61_cast_fu_1285_p1(23);
    tmp_61_cast_reg_1601(24) <= tmp_61_cast_fu_1285_p1(24);
    tmp_61_cast_reg_1601(25) <= tmp_61_cast_fu_1285_p1(25);
    tmp_61_cast_reg_1601(26) <= tmp_61_cast_fu_1285_p1(26);
    tmp_61_cast_reg_1601(27) <= tmp_61_cast_fu_1285_p1(27);
    tmp_61_cast_reg_1601(28) <= tmp_61_cast_fu_1285_p1(28);
    tmp_61_cast_reg_1601(29) <= tmp_61_cast_fu_1285_p1(29);
                tmp_62_cast_reg_1606(0) <= tmp_62_cast_fu_1299_p1(0);
    tmp_62_cast_reg_1606(1) <= tmp_62_cast_fu_1299_p1(1);
    tmp_62_cast_reg_1606(2) <= tmp_62_cast_fu_1299_p1(2);
    tmp_62_cast_reg_1606(3) <= tmp_62_cast_fu_1299_p1(3);
    tmp_62_cast_reg_1606(4) <= tmp_62_cast_fu_1299_p1(4);
    tmp_62_cast_reg_1606(5) <= tmp_62_cast_fu_1299_p1(5);
    tmp_62_cast_reg_1606(6) <= tmp_62_cast_fu_1299_p1(6);
    tmp_62_cast_reg_1606(7) <= tmp_62_cast_fu_1299_p1(7);
    tmp_62_cast_reg_1606(8) <= tmp_62_cast_fu_1299_p1(8);
    tmp_62_cast_reg_1606(9) <= tmp_62_cast_fu_1299_p1(9);
    tmp_62_cast_reg_1606(10) <= tmp_62_cast_fu_1299_p1(10);
    tmp_62_cast_reg_1606(11) <= tmp_62_cast_fu_1299_p1(11);
    tmp_62_cast_reg_1606(12) <= tmp_62_cast_fu_1299_p1(12);
    tmp_62_cast_reg_1606(13) <= tmp_62_cast_fu_1299_p1(13);
    tmp_62_cast_reg_1606(14) <= tmp_62_cast_fu_1299_p1(14);
    tmp_62_cast_reg_1606(15) <= tmp_62_cast_fu_1299_p1(15);
    tmp_62_cast_reg_1606(16) <= tmp_62_cast_fu_1299_p1(16);
    tmp_62_cast_reg_1606(17) <= tmp_62_cast_fu_1299_p1(17);
    tmp_62_cast_reg_1606(18) <= tmp_62_cast_fu_1299_p1(18);
    tmp_62_cast_reg_1606(19) <= tmp_62_cast_fu_1299_p1(19);
    tmp_62_cast_reg_1606(20) <= tmp_62_cast_fu_1299_p1(20);
    tmp_62_cast_reg_1606(21) <= tmp_62_cast_fu_1299_p1(21);
    tmp_62_cast_reg_1606(22) <= tmp_62_cast_fu_1299_p1(22);
    tmp_62_cast_reg_1606(23) <= tmp_62_cast_fu_1299_p1(23);
    tmp_62_cast_reg_1606(24) <= tmp_62_cast_fu_1299_p1(24);
    tmp_62_cast_reg_1606(25) <= tmp_62_cast_fu_1299_p1(25);
    tmp_62_cast_reg_1606(26) <= tmp_62_cast_fu_1299_p1(26);
    tmp_62_cast_reg_1606(27) <= tmp_62_cast_fu_1299_p1(27);
    tmp_62_cast_reg_1606(28) <= tmp_62_cast_fu_1299_p1(28);
    tmp_62_cast_reg_1606(29) <= tmp_62_cast_fu_1299_p1(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_28)) then
                tmp_61_reg_1909 <= tmp_61_fu_1412_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st174_fsm_121)) then
                volatilityA_reg_2200 <= grp_fu_1127_p2;
                volatilityB_reg_2205 <= grp_fu_1132_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                weight_rom_load_1_reg_1639 <= weight_rom_q0;
            end if;
        end if;
    end process;
    tmp_61_cast_reg_1601(32 downto 30) <= "000";
    tmp_62_cast_reg_1606(32 downto 30) <= "000";
    p_add_i32_shr_reg_1661(31 downto 30) <= "00";
    acc_returnA_addr_reg_1666(2 downto 0) <= "000";
    acc_returnB_addr_reg_1671(2 downto 0) <= "000";
    acc_weight_returnSquareA_addr_reg_1676(2 downto 0) <= "000";
    acc_weight_returnA_addr_reg_1681(2 downto 0) <= "000";
    acc_weight_returnSquareB_addr_reg_1686(2 downto 0) <= "000";
    acc_weight_returnB_addr_reg_1691(2 downto 0) <= "000";
    acc_weight_returnA_returnB_add_reg_1696(2 downto 0) <= "000";
    acc_returnA_addr_6_reg_1701(2 downto 0) <= "001";
    acc_returnB_addr_6_reg_1706(2 downto 0) <= "001";
    acc_weight_returnSquareA_addr_6_reg_1711(2 downto 0) <= "001";
    acc_weight_returnA_addr_6_reg_1716(2 downto 0) <= "001";
    acc_weight_returnSquareB_addr_6_reg_1721(2 downto 0) <= "001";
    acc_weight_returnB_addr_6_reg_1726(2 downto 0) <= "001";
    acc_weight_returnA_returnB_add_1_reg_1731(2 downto 0) <= "001";
    acc_returnA_addr_7_reg_1736(2 downto 0) <= "010";
    acc_returnB_addr_7_reg_1741(2 downto 0) <= "010";
    acc_weight_returnSquareA_addr_7_reg_1746(2 downto 0) <= "010";
    acc_weight_returnA_addr_7_reg_1751(2 downto 0) <= "010";
    acc_weight_returnSquareB_addr_7_reg_1756(2 downto 0) <= "010";
    acc_weight_returnB_addr_7_reg_1761(2 downto 0) <= "010";
    acc_weight_returnA_returnB_add_2_reg_1766(2 downto 0) <= "010";
    acc_returnA_addr_3_reg_1771(2 downto 0) <= "011";
    acc_returnB_addr_3_reg_1776(2 downto 0) <= "011";
    acc_weight_returnSquareA_addr_3_reg_1781(2 downto 0) <= "011";
    acc_weight_returnA_addr_3_reg_1786(2 downto 0) <= "011";
    acc_weight_returnSquareB_addr_3_reg_1791(2 downto 0) <= "011";
    acc_weight_returnB_addr_3_reg_1796(2 downto 0) <= "011";
    acc_weight_returnA_returnB_add_3_reg_1801(2 downto 0) <= "011";
    acc_returnA_addr_4_reg_1806(2 downto 0) <= "100";
    acc_returnB_addr_4_reg_1811(2 downto 0) <= "100";
    acc_weight_returnSquareA_addr_4_reg_1816(2 downto 0) <= "100";
    acc_weight_returnA_addr_4_reg_1821(2 downto 0) <= "100";
    acc_weight_returnSquareB_addr_4_reg_1826(2 downto 0) <= "100";
    acc_weight_returnB_addr_4_reg_1831(2 downto 0) <= "100";
    acc_weight_returnA_returnB_add_4_reg_1836(2 downto 0) <= "100";
    acc_returnA_addr_5_reg_1841(2 downto 0) <= "101";
    acc_returnB_addr_5_reg_1846(2 downto 0) <= "101";
    acc_weight_returnSquareA_addr_5_reg_1851(2 downto 0) <= "101";
    acc_weight_returnA_addr_5_reg_1856(2 downto 0) <= "101";
    acc_weight_returnSquareB_addr_5_reg_1861(2 downto 0) <= "101";
    acc_weight_returnB_addr_5_reg_1866(2 downto 0) <= "101";
    acc_weight_returnA_returnB_add_5_reg_1871(2 downto 0) <= "101";
    row_index_cast_reg_1881(31) <= '0';
    tmp_57_reg_2106(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, gmem32_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_362, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_385, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it42, ap_reg_ppiten_pp2_it43, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it0, ap_sig_ioackin_gmem32_AWREADY, tmp_59_i_fu_1324_p2, tmp_4_fu_1366_p2, exitcond4_fu_1396_p2, tmp_8_fu_1441_p2, exitcond2_fu_1480_p2, tmp_14_fu_1500_p2, exitcond_fu_1541_p2, ap_sig_cseq_ST_pp3_stg4_fsm_55, exitcond_i_fu_1303_p2, ap_sig_ioackin_gmem32_ARREADY, ap_sig_ioackin_gmem32_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_1303_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = tmp_59_i_fu_1324_p2)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                if ((ap_const_lv1_0 = tmp_4_fu_1366_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_27;
            when ap_ST_pp0_stg0_fsm_27 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_1396_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_27;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_1396_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_27;
                end if;
            when ap_ST_st31_fsm_28 => 
                ap_NS_fsm <= ap_ST_st32_fsm_29;
            when ap_ST_st32_fsm_29 => 
                ap_NS_fsm <= ap_ST_st33_fsm_30;
            when ap_ST_st33_fsm_30 => 
                if ((ap_const_lv1_0 = tmp_8_fu_1441_p2)) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_31;
                end if;
            when ap_ST_st34_fsm_31 => 
                ap_NS_fsm <= ap_ST_st35_fsm_32;
            when ap_ST_st35_fsm_32 => 
                ap_NS_fsm <= ap_ST_st36_fsm_33;
            when ap_ST_st36_fsm_33 => 
                ap_NS_fsm <= ap_ST_st37_fsm_34;
            when ap_ST_st37_fsm_34 => 
                ap_NS_fsm <= ap_ST_st38_fsm_35;
            when ap_ST_st38_fsm_35 => 
                ap_NS_fsm <= ap_ST_st39_fsm_36;
            when ap_ST_st39_fsm_36 => 
                ap_NS_fsm <= ap_ST_st40_fsm_37;
            when ap_ST_st40_fsm_37 => 
                ap_NS_fsm <= ap_ST_st41_fsm_38;
            when ap_ST_st41_fsm_38 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_38;
                end if;
            when ap_ST_st42_fsm_39 => 
                ap_NS_fsm <= ap_ST_st43_fsm_40;
            when ap_ST_st43_fsm_40 => 
                ap_NS_fsm <= ap_ST_st44_fsm_41;
            when ap_ST_st44_fsm_41 => 
                ap_NS_fsm <= ap_ST_st45_fsm_42;
            when ap_ST_st45_fsm_42 => 
                ap_NS_fsm <= ap_ST_st46_fsm_43;
            when ap_ST_st46_fsm_43 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_44;
            when ap_ST_pp1_stg0_fsm_44 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1480_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_44;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_1480_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st50_fsm_45;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_44;
                end if;
            when ap_ST_st50_fsm_45 => 
                ap_NS_fsm <= ap_ST_st51_fsm_46;
            when ap_ST_st51_fsm_46 => 
                ap_NS_fsm <= ap_ST_st52_fsm_47;
            when ap_ST_st52_fsm_47 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_48;
            when ap_ST_pp2_stg0_fsm_48 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it43) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it42)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = tmp_14_fu_1500_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_48;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and (ap_const_lv1_0 = tmp_14_fu_1500_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then
                    ap_NS_fsm <= ap_ST_st97_fsm_49;
                else
                    ap_NS_fsm <= ap_ST_st97_fsm_49;
                end if;
            when ap_ST_st97_fsm_49 => 
                ap_NS_fsm <= ap_ST_st98_fsm_50;
            when ap_ST_st98_fsm_50 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_51;
            when ap_ST_pp3_stg0_fsm_51 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_const_lv1_0 = exitcond_fu_1541_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg1_fsm_52;
                else
                    ap_NS_fsm <= ap_ST_st109_fsm_56;
                end if;
            when ap_ST_pp3_stg1_fsm_52 => 
                ap_NS_fsm <= ap_ST_pp3_stg2_fsm_53;
            when ap_ST_pp3_stg2_fsm_53 => 
                ap_NS_fsm <= ap_ST_pp3_stg3_fsm_54;
            when ap_ST_pp3_stg3_fsm_54 => 
                ap_NS_fsm <= ap_ST_pp3_stg4_fsm_55;
            when ap_ST_pp3_stg4_fsm_55 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it0))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_51;
                else
                    ap_NS_fsm <= ap_ST_st109_fsm_56;
                end if;
            when ap_ST_st109_fsm_56 => 
                ap_NS_fsm <= ap_ST_st110_fsm_57;
            when ap_ST_st110_fsm_57 => 
                ap_NS_fsm <= ap_ST_st111_fsm_58;
            when ap_ST_st111_fsm_58 => 
                ap_NS_fsm <= ap_ST_st112_fsm_59;
            when ap_ST_st112_fsm_59 => 
                ap_NS_fsm <= ap_ST_st113_fsm_60;
            when ap_ST_st113_fsm_60 => 
                ap_NS_fsm <= ap_ST_st114_fsm_61;
            when ap_ST_st114_fsm_61 => 
                ap_NS_fsm <= ap_ST_st115_fsm_62;
            when ap_ST_st115_fsm_62 => 
                ap_NS_fsm <= ap_ST_st116_fsm_63;
            when ap_ST_st116_fsm_63 => 
                ap_NS_fsm <= ap_ST_st117_fsm_64;
            when ap_ST_st117_fsm_64 => 
                ap_NS_fsm <= ap_ST_st118_fsm_65;
            when ap_ST_st118_fsm_65 => 
                ap_NS_fsm <= ap_ST_st119_fsm_66;
            when ap_ST_st119_fsm_66 => 
                ap_NS_fsm <= ap_ST_st120_fsm_67;
            when ap_ST_st120_fsm_67 => 
                ap_NS_fsm <= ap_ST_st121_fsm_68;
            when ap_ST_st121_fsm_68 => 
                ap_NS_fsm <= ap_ST_st122_fsm_69;
            when ap_ST_st122_fsm_69 => 
                ap_NS_fsm <= ap_ST_st123_fsm_70;
            when ap_ST_st123_fsm_70 => 
                ap_NS_fsm <= ap_ST_st124_fsm_71;
            when ap_ST_st124_fsm_71 => 
                ap_NS_fsm <= ap_ST_st125_fsm_72;
            when ap_ST_st125_fsm_72 => 
                ap_NS_fsm <= ap_ST_st126_fsm_73;
            when ap_ST_st126_fsm_73 => 
                ap_NS_fsm <= ap_ST_st127_fsm_74;
            when ap_ST_st127_fsm_74 => 
                ap_NS_fsm <= ap_ST_st128_fsm_75;
            when ap_ST_st128_fsm_75 => 
                ap_NS_fsm <= ap_ST_st129_fsm_76;
            when ap_ST_st129_fsm_76 => 
                ap_NS_fsm <= ap_ST_st130_fsm_77;
            when ap_ST_st130_fsm_77 => 
                ap_NS_fsm <= ap_ST_st131_fsm_78;
            when ap_ST_st131_fsm_78 => 
                ap_NS_fsm <= ap_ST_st132_fsm_79;
            when ap_ST_st132_fsm_79 => 
                ap_NS_fsm <= ap_ST_st133_fsm_80;
            when ap_ST_st133_fsm_80 => 
                ap_NS_fsm <= ap_ST_st134_fsm_81;
            when ap_ST_st134_fsm_81 => 
                ap_NS_fsm <= ap_ST_st135_fsm_82;
            when ap_ST_st135_fsm_82 => 
                ap_NS_fsm <= ap_ST_st136_fsm_83;
            when ap_ST_st136_fsm_83 => 
                ap_NS_fsm <= ap_ST_st137_fsm_84;
            when ap_ST_st137_fsm_84 => 
                ap_NS_fsm <= ap_ST_st138_fsm_85;
            when ap_ST_st138_fsm_85 => 
                ap_NS_fsm <= ap_ST_st139_fsm_86;
            when ap_ST_st139_fsm_86 => 
                ap_NS_fsm <= ap_ST_st140_fsm_87;
            when ap_ST_st140_fsm_87 => 
                ap_NS_fsm <= ap_ST_st141_fsm_88;
            when ap_ST_st141_fsm_88 => 
                ap_NS_fsm <= ap_ST_st142_fsm_89;
            when ap_ST_st142_fsm_89 => 
                ap_NS_fsm <= ap_ST_st143_fsm_90;
            when ap_ST_st143_fsm_90 => 
                ap_NS_fsm <= ap_ST_st144_fsm_91;
            when ap_ST_st144_fsm_91 => 
                ap_NS_fsm <= ap_ST_st145_fsm_92;
            when ap_ST_st145_fsm_92 => 
                ap_NS_fsm <= ap_ST_st146_fsm_93;
            when ap_ST_st146_fsm_93 => 
                ap_NS_fsm <= ap_ST_st147_fsm_94;
            when ap_ST_st147_fsm_94 => 
                ap_NS_fsm <= ap_ST_st148_fsm_95;
            when ap_ST_st148_fsm_95 => 
                ap_NS_fsm <= ap_ST_st149_fsm_96;
            when ap_ST_st149_fsm_96 => 
                ap_NS_fsm <= ap_ST_st150_fsm_97;
            when ap_ST_st150_fsm_97 => 
                ap_NS_fsm <= ap_ST_st151_fsm_98;
            when ap_ST_st151_fsm_98 => 
                ap_NS_fsm <= ap_ST_st152_fsm_99;
            when ap_ST_st152_fsm_99 => 
                ap_NS_fsm <= ap_ST_st153_fsm_100;
            when ap_ST_st153_fsm_100 => 
                ap_NS_fsm <= ap_ST_st154_fsm_101;
            when ap_ST_st154_fsm_101 => 
                ap_NS_fsm <= ap_ST_st155_fsm_102;
            when ap_ST_st155_fsm_102 => 
                ap_NS_fsm <= ap_ST_st156_fsm_103;
            when ap_ST_st156_fsm_103 => 
                ap_NS_fsm <= ap_ST_st157_fsm_104;
            when ap_ST_st157_fsm_104 => 
                ap_NS_fsm <= ap_ST_st158_fsm_105;
            when ap_ST_st158_fsm_105 => 
                ap_NS_fsm <= ap_ST_st159_fsm_106;
            when ap_ST_st159_fsm_106 => 
                ap_NS_fsm <= ap_ST_st160_fsm_107;
            when ap_ST_st160_fsm_107 => 
                ap_NS_fsm <= ap_ST_st161_fsm_108;
            when ap_ST_st161_fsm_108 => 
                ap_NS_fsm <= ap_ST_st162_fsm_109;
            when ap_ST_st162_fsm_109 => 
                ap_NS_fsm <= ap_ST_st163_fsm_110;
            when ap_ST_st163_fsm_110 => 
                ap_NS_fsm <= ap_ST_st164_fsm_111;
            when ap_ST_st164_fsm_111 => 
                ap_NS_fsm <= ap_ST_st165_fsm_112;
            when ap_ST_st165_fsm_112 => 
                ap_NS_fsm <= ap_ST_st166_fsm_113;
            when ap_ST_st166_fsm_113 => 
                ap_NS_fsm <= ap_ST_st167_fsm_114;
            when ap_ST_st167_fsm_114 => 
                ap_NS_fsm <= ap_ST_st168_fsm_115;
            when ap_ST_st168_fsm_115 => 
                ap_NS_fsm <= ap_ST_st169_fsm_116;
            when ap_ST_st169_fsm_116 => 
                ap_NS_fsm <= ap_ST_st170_fsm_117;
            when ap_ST_st170_fsm_117 => 
                ap_NS_fsm <= ap_ST_st171_fsm_118;
            when ap_ST_st171_fsm_118 => 
                ap_NS_fsm <= ap_ST_st172_fsm_119;
            when ap_ST_st172_fsm_119 => 
                ap_NS_fsm <= ap_ST_st173_fsm_120;
            when ap_ST_st173_fsm_120 => 
                ap_NS_fsm <= ap_ST_st174_fsm_121;
            when ap_ST_st174_fsm_121 => 
                ap_NS_fsm <= ap_ST_st175_fsm_122;
            when ap_ST_st175_fsm_122 => 
                ap_NS_fsm <= ap_ST_st176_fsm_123;
            when ap_ST_st176_fsm_123 => 
                ap_NS_fsm <= ap_ST_st177_fsm_124;
            when ap_ST_st177_fsm_124 => 
                ap_NS_fsm <= ap_ST_st178_fsm_125;
            when ap_ST_st178_fsm_125 => 
                ap_NS_fsm <= ap_ST_st179_fsm_126;
            when ap_ST_st179_fsm_126 => 
                ap_NS_fsm <= ap_ST_st180_fsm_127;
            when ap_ST_st180_fsm_127 => 
                ap_NS_fsm <= ap_ST_st181_fsm_128;
            when ap_ST_st181_fsm_128 => 
                ap_NS_fsm <= ap_ST_st182_fsm_129;
            when ap_ST_st182_fsm_129 => 
                ap_NS_fsm <= ap_ST_st183_fsm_130;
            when ap_ST_st183_fsm_130 => 
                ap_NS_fsm <= ap_ST_st184_fsm_131;
            when ap_ST_st184_fsm_131 => 
                ap_NS_fsm <= ap_ST_st185_fsm_132;
            when ap_ST_st185_fsm_132 => 
                ap_NS_fsm <= ap_ST_st186_fsm_133;
            when ap_ST_st186_fsm_133 => 
                ap_NS_fsm <= ap_ST_st187_fsm_134;
            when ap_ST_st187_fsm_134 => 
                ap_NS_fsm <= ap_ST_st188_fsm_135;
            when ap_ST_st188_fsm_135 => 
                ap_NS_fsm <= ap_ST_st189_fsm_136;
            when ap_ST_st189_fsm_136 => 
                ap_NS_fsm <= ap_ST_st190_fsm_137;
            when ap_ST_st190_fsm_137 => 
                ap_NS_fsm <= ap_ST_st191_fsm_138;
            when ap_ST_st191_fsm_138 => 
                ap_NS_fsm <= ap_ST_st192_fsm_139;
            when ap_ST_st192_fsm_139 => 
                ap_NS_fsm <= ap_ST_st193_fsm_140;
            when ap_ST_st193_fsm_140 => 
                ap_NS_fsm <= ap_ST_st194_fsm_141;
            when ap_ST_st194_fsm_141 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st195_fsm_142;
                else
                    ap_NS_fsm <= ap_ST_st194_fsm_141;
                end if;
            when ap_ST_st195_fsm_142 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem32_WREADY))) then
                    ap_NS_fsm <= ap_ST_st196_fsm_143;
                else
                    ap_NS_fsm <= ap_ST_st195_fsm_142;
                end if;
            when ap_ST_st196_fsm_143 => 
                ap_NS_fsm <= ap_ST_st197_fsm_144;
            when ap_ST_st197_fsm_144 => 
                ap_NS_fsm <= ap_ST_st198_fsm_145;
            when ap_ST_st198_fsm_145 => 
                if (not((gmem32_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st198_fsm_145;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_returnA_addr_3_gep_fu_404_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_returnA_addr_4_gep_fu_453_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_returnA_addr_5_gep_fu_502_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_returnA_addr_6_gep_fu_306_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_returnA_addr_7_gep_fu_355_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_returnA_addr_gep_fu_257_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_returnA_address0 assign process. --
    acc_returnA_address0_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_reg_ppiten_pp3_it0, acc_returnA_addr_reg_1666, acc_returnA_addr_7_reg_1736, acc_returnA_addr_4_reg_1806, ap_sig_cseq_ST_pp3_stg0_fsm_51, tmp_57_fu_1553_p1, ap_sig_cseq_ST_st52_fsm_47, tmp_20_fu_1530_p1, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_returnA_address0 <= acc_returnA_addr_4_reg_1806;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_returnA_address0 <= acc_returnA_addr_7_reg_1736;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_returnA_address0 <= acc_returnA_addr_reg_1666;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51))) then 
            acc_returnA_address0 <= tmp_57_fu_1553_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it34)) then 
            acc_returnA_address0 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
        else 
            acc_returnA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_returnA_address1 assign process. --
    acc_returnA_address1_assign_proc : process(ap_reg_ppiten_pp2_it39, acc_returnA_addr_6_reg_1701, acc_returnA_addr_3_reg_1771, acc_returnA_addr_5_reg_1841, ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it38, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39)) then 
            acc_returnA_address1 <= ap_reg_ppstg_acc_returnA_addr_1_reg_2030_pp2_it38;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_returnA_address1 <= acc_returnA_addr_5_reg_1841;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_returnA_address1 <= acc_returnA_addr_3_reg_1771;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_returnA_address1 <= acc_returnA_addr_6_reg_1701;
        else 
            acc_returnA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_returnA_ce0 assign process. --
    acc_returnA_ce0_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg0_fsm_51, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51)) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_returnA_ce0 <= ap_const_logic_1;
        else 
            acc_returnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnA_ce1 assign process. --
    acc_returnA_ce1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it39) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_returnA_ce1 <= ap_const_logic_1;
        else 
            acc_returnA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnA_d0 <= ap_const_lv32_0;

    -- acc_returnA_d1 assign process. --
    acc_returnA_d1_assign_proc : process(ap_reg_ppiten_pp2_it39, grp_fu_1024_p2, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39)) then 
            acc_returnA_d1 <= grp_fu_1024_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_returnA_d1 <= ap_const_lv32_0;
        else 
            acc_returnA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_returnA_we0 assign process. --
    acc_returnA_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_returnA_we0 <= ap_const_logic_1;
        else 
            acc_returnA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnA_we1 assign process. --
    acc_returnA_we1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_reg_ppstg_tmp_14_reg_1958_pp2_it38, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it38))))) then 
            acc_returnA_we1 <= ap_const_logic_1;
        else 
            acc_returnA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnB_addr_3_gep_fu_411_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_returnB_addr_4_gep_fu_460_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_returnB_addr_5_gep_fu_509_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_returnB_addr_6_gep_fu_313_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_returnB_addr_7_gep_fu_362_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_returnB_addr_gep_fu_264_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_returnB_address0 assign process. --
    acc_returnB_address0_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_reg_ppiten_pp3_it0, acc_returnB_addr_reg_1671, acc_returnB_addr_7_reg_1741, acc_returnB_addr_4_reg_1811, ap_sig_cseq_ST_pp3_stg0_fsm_51, tmp_57_fu_1553_p1, ap_sig_cseq_ST_st52_fsm_47, tmp_20_fu_1530_p1, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_returnB_address0 <= acc_returnB_addr_4_reg_1811;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_returnB_address0 <= acc_returnB_addr_7_reg_1741;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_returnB_address0 <= acc_returnB_addr_reg_1671;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51))) then 
            acc_returnB_address0 <= tmp_57_fu_1553_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it34)) then 
            acc_returnB_address0 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
        else 
            acc_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_returnB_address1 assign process. --
    acc_returnB_address1_assign_proc : process(ap_reg_ppiten_pp2_it39, acc_returnB_addr_6_reg_1706, acc_returnB_addr_3_reg_1776, acc_returnB_addr_5_reg_1846, ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it38, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39)) then 
            acc_returnB_address1 <= ap_reg_ppstg_acc_returnB_addr_1_reg_2036_pp2_it38;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_returnB_address1 <= acc_returnB_addr_5_reg_1846;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_returnB_address1 <= acc_returnB_addr_3_reg_1776;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_returnB_address1 <= acc_returnB_addr_6_reg_1706;
        else 
            acc_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_returnB_ce0 assign process. --
    acc_returnB_ce0_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg0_fsm_51, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51)) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_ce1 assign process. --
    acc_returnB_ce1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it39) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_returnB_d0 <= ap_const_lv32_0;

    -- acc_returnB_d1 assign process. --
    acc_returnB_d1_assign_proc : process(ap_reg_ppiten_pp2_it39, grp_fu_1030_p2, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39)) then 
            acc_returnB_d1 <= grp_fu_1030_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_returnB_we0 assign process. --
    acc_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_returnB_we0 <= ap_const_logic_1;
        else 
            acc_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_returnB_we1 assign process. --
    acc_returnB_we1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_reg_ppstg_tmp_14_reg_1958_pp2_it38, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it38))))) then 
            acc_returnB_we1 <= ap_const_logic_1;
        else 
            acc_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_addr_3_gep_fu_425_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_addr_4_gep_fu_474_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_addr_5_gep_fu_523_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_addr_6_gep_fu_327_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_addr_7_gep_fu_376_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_addr_gep_fu_278_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_address0 assign process. --
    acc_weight_returnA_address0_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp3_stg1_fsm_52, ap_reg_ppiten_pp3_it0, acc_weight_returnA_addr_reg_1681, acc_weight_returnA_addr_7_reg_1751, acc_weight_returnA_addr_4_reg_1821, tmp_57_reg_2106, ap_sig_cseq_ST_st52_fsm_47, tmp_20_fu_1530_p1, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_4_reg_1821;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_7_reg_1751;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnA_address0 <= acc_weight_returnA_addr_reg_1681;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then 
            acc_weight_returnA_address0 <= tmp_57_reg_2106(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it34)) then 
            acc_weight_returnA_address0 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
        else 
            acc_weight_returnA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_address1 assign process. --
    acc_weight_returnA_address1_assign_proc : process(ap_reg_ppiten_pp2_it39, acc_weight_returnA_addr_6_reg_1716, acc_weight_returnA_addr_3_reg_1786, acc_weight_returnA_addr_5_reg_1856, ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it38, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39)) then 
            acc_weight_returnA_address1 <= ap_reg_ppstg_acc_weight_returnA_addr_1_reg_2054_pp2_it38;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_5_reg_1856;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_3_reg_1786;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnA_address1 <= acc_weight_returnA_addr_6_reg_1716;
        else 
            acc_weight_returnA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_ce0 assign process. --
    acc_weight_returnA_ce0_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_sig_cseq_ST_pp3_stg1_fsm_52, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnA_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_ce1 assign process. --
    acc_weight_returnA_ce1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it39) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnA_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_d0 <= ap_const_lv32_0;

    -- acc_weight_returnA_d1 assign process. --
    acc_weight_returnA_d1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46, grp_fu_1036_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39)) then 
            acc_weight_returnA_d1 <= grp_fu_1036_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnA_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    acc_weight_returnA_returnB_add_1_gep_fu_348_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_2_gep_fu_397_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_3_gep_fu_446_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_4_gep_fu_495_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_5_gep_fu_544_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnA_returnB_add_gep_fu_299_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnA_returnB_address0 assign process. --
    acc_weight_returnA_returnB_address0_assign_proc : process(ap_reg_ppiten_pp2_it38, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_53, acc_weight_returnA_returnB_add_reg_1696, acc_weight_returnA_returnB_add_2_reg_1766, acc_weight_returnA_returnB_add_4_reg_1836, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it37, tmp_57_reg_2106, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_4_reg_1836;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_2_reg_1766;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnA_returnB_address0 <= acc_weight_returnA_returnB_add_reg_1696;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            acc_weight_returnA_returnB_address0 <= tmp_57_reg_2106(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it38)) then 
            acc_weight_returnA_returnB_address0 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it37;
        else 
            acc_weight_returnA_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_address1 assign process. --
    acc_weight_returnA_returnB_address1_assign_proc : process(ap_reg_ppiten_pp2_it43, acc_weight_returnA_returnB_add_1_reg_1731, acc_weight_returnA_returnB_add_3_reg_1801, acc_weight_returnA_returnB_add_5_reg_1871, ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it42, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43)) then 
            acc_weight_returnA_returnB_address1 <= ap_reg_ppstg_acc_weight_returnA_returnB_add_6_reg_2076_pp2_it42;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_5_reg_1871;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_3_reg_1801;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnA_returnB_address1 <= acc_weight_returnA_returnB_add_1_reg_1731;
        else 
            acc_weight_returnA_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce0 assign process. --
    acc_weight_returnA_returnB_ce0_assign_proc : process(ap_reg_ppiten_pp2_it38, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_53, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it38) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53)) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_ce1 assign process. --
    acc_weight_returnA_returnB_ce1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it43) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnA_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnA_returnB_d1 assign process. --
    acc_weight_returnA_returnB_d1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46, grp_fu_1060_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43)) then 
            acc_weight_returnA_returnB_d1 <= grp_fu_1060_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnA_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnA_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we0 assign process. --
    acc_weight_returnA_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_returnB_we1 assign process. --
    acc_weight_returnA_returnB_we1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_reg_ppstg_tmp_14_reg_1958_pp2_it42, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it42))))) then 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_we0 assign process. --
    acc_weight_returnA_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnA_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnA_we1 assign process. --
    acc_weight_returnA_we1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_reg_ppstg_tmp_14_reg_1958_pp2_it38, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it38))))) then 
            acc_weight_returnA_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnB_addr_3_gep_fu_439_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnB_addr_4_gep_fu_488_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnB_addr_5_gep_fu_537_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnB_addr_6_gep_fu_341_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnB_addr_7_gep_fu_390_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnB_addr_gep_fu_292_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnB_address0 assign process. --
    acc_weight_returnB_address0_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_53, acc_weight_returnB_addr_reg_1691, acc_weight_returnB_addr_7_reg_1761, acc_weight_returnB_addr_4_reg_1831, tmp_57_reg_2106, ap_sig_cseq_ST_st52_fsm_47, tmp_20_fu_1530_p1, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_4_reg_1831;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_7_reg_1761;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnB_address0 <= acc_weight_returnB_addr_reg_1691;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            acc_weight_returnB_address0 <= tmp_57_reg_2106(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it34)) then 
            acc_weight_returnB_address0 <= tmp_20_fu_1530_p1(3 - 1 downto 0);
        else 
            acc_weight_returnB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnB_address1 assign process. --
    acc_weight_returnB_address1_assign_proc : process(ap_reg_ppiten_pp2_it39, acc_weight_returnB_addr_6_reg_1726, acc_weight_returnB_addr_3_reg_1796, acc_weight_returnB_addr_5_reg_1866, ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it38, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39)) then 
            acc_weight_returnB_address1 <= ap_reg_ppstg_acc_weight_returnB_addr_1_reg_2065_pp2_it38;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_5_reg_1866;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_3_reg_1796;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnB_address1 <= acc_weight_returnB_addr_6_reg_1726;
        else 
            acc_weight_returnB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnB_ce0 assign process. --
    acc_weight_returnB_ce0_assign_proc : process(ap_reg_ppiten_pp2_it34, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_53, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it34) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53)) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnB_ce1 assign process. --
    acc_weight_returnB_ce1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it39) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnB_d1 assign process. --
    acc_weight_returnB_d1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46, grp_fu_1042_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39)) then 
            acc_weight_returnB_d1 <= grp_fu_1042_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnB_we0 assign process. --
    acc_weight_returnB_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnB_we1 assign process. --
    acc_weight_returnB_we1_assign_proc : process(ap_reg_ppiten_pp2_it39, ap_reg_ppstg_tmp_14_reg_1958_pp2_it38, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it39) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it38))))) then 
            acc_weight_returnB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareA_addr_3_gep_fu_418_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_4_gep_fu_467_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_5_gep_fu_516_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_6_gep_fu_320_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_7_gep_fu_369_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquareA_addr_gep_fu_271_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquareA_address0 assign process. --
    acc_weight_returnSquareA_address0_assign_proc : process(ap_reg_ppiten_pp2_it38, ap_sig_cseq_ST_pp3_stg1_fsm_52, ap_reg_ppiten_pp3_it0, acc_weight_returnSquareA_addr_reg_1676, acc_weight_returnSquareA_addr_7_reg_1746, acc_weight_returnSquareA_addr_4_reg_1816, ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it37, tmp_57_reg_2106, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_4_reg_1816;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_7_reg_1746;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnSquareA_address0 <= acc_weight_returnSquareA_addr_reg_1676;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then 
            acc_weight_returnSquareA_address0 <= tmp_57_reg_2106(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it38)) then 
            acc_weight_returnSquareA_address0 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it37;
        else 
            acc_weight_returnSquareA_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_address1 assign process. --
    acc_weight_returnSquareA_address1_assign_proc : process(ap_reg_ppiten_pp2_it43, acc_weight_returnSquareA_addr_6_reg_1711, acc_weight_returnSquareA_addr_3_reg_1781, acc_weight_returnSquareA_addr_5_reg_1851, ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it42, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43)) then 
            acc_weight_returnSquareA_address1 <= ap_reg_ppstg_acc_weight_returnSquareA_addr_1_reg_2042_pp2_it42;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_5_reg_1851;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_3_reg_1781;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnSquareA_address1 <= acc_weight_returnSquareA_addr_6_reg_1711;
        else 
            acc_weight_returnSquareA_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_ce0 assign process. --
    acc_weight_returnSquareA_ce0_assign_proc : process(ap_reg_ppiten_pp2_it38, ap_sig_cseq_ST_pp3_stg1_fsm_52, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it38) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg1_fsm_52) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnSquareA_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareA_ce1 assign process. --
    acc_weight_returnSquareA_ce1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it43) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnSquareA_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareA_d0 <= ap_const_lv32_0;

    -- acc_weight_returnSquareA_d1 assign process. --
    acc_weight_returnSquareA_d1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46, grp_fu_1048_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43)) then 
            acc_weight_returnSquareA_d1 <= grp_fu_1048_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnSquareA_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquareA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquareA_we0 assign process. --
    acc_weight_returnSquareA_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnSquareA_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareA_we1 assign process. --
    acc_weight_returnSquareA_we1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_reg_ppstg_tmp_14_reg_1958_pp2_it42, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it42))))) then 
            acc_weight_returnSquareA_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareB_addr_3_gep_fu_432_p3 <= ap_const_lv64_3(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_4_gep_fu_481_p3 <= ap_const_lv64_4(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_5_gep_fu_530_p3 <= ap_const_lv64_5(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_6_gep_fu_334_p3 <= ap_const_lv64_1(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_7_gep_fu_383_p3 <= ap_const_lv64_2(3 - 1 downto 0);
    acc_weight_returnSquareB_addr_gep_fu_285_p3 <= ap_const_lv64_0(3 - 1 downto 0);

    -- acc_weight_returnSquareB_address0 assign process. --
    acc_weight_returnSquareB_address0_assign_proc : process(ap_reg_ppiten_pp2_it38, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_53, acc_weight_returnSquareB_addr_reg_1686, acc_weight_returnSquareB_addr_7_reg_1756, acc_weight_returnSquareB_addr_4_reg_1826, ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it37, tmp_57_reg_2106, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_4_reg_1826;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_7_reg_1756;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnSquareB_address0 <= acc_weight_returnSquareB_addr_reg_1686;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            acc_weight_returnSquareB_address0 <= tmp_57_reg_2106(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it38)) then 
            acc_weight_returnSquareB_address0 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it37;
        else 
            acc_weight_returnSquareB_address0 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_address1 assign process. --
    acc_weight_returnSquareB_address1_assign_proc : process(ap_reg_ppiten_pp2_it43, acc_weight_returnSquareB_addr_6_reg_1721, acc_weight_returnSquareB_addr_3_reg_1791, acc_weight_returnSquareB_addr_5_reg_1861, ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it42, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43)) then 
            acc_weight_returnSquareB_address1 <= ap_reg_ppstg_acc_weight_returnSquareB_addr_1_reg_2048_pp2_it42;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_5_reg_1861;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_3_reg_1791;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45)) then 
            acc_weight_returnSquareB_address1 <= acc_weight_returnSquareB_addr_6_reg_1721;
        else 
            acc_weight_returnSquareB_address1 <= "XXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_ce0 assign process. --
    acc_weight_returnSquareB_ce0_assign_proc : process(ap_reg_ppiten_pp2_it38, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_pp3_stg2_fsm_53, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it38) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53)) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnSquareB_ce0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_ce1 assign process. --
    acc_weight_returnSquareB_ce1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it43) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnSquareB_ce1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc_weight_returnSquareB_d0 <= ap_const_lv32_0;

    -- acc_weight_returnSquareB_d1 assign process. --
    acc_weight_returnSquareB_d1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46, grp_fu_1054_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43)) then 
            acc_weight_returnSquareB_d1 <= grp_fu_1054_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnSquareB_d1 <= ap_const_lv32_0;
        else 
            acc_weight_returnSquareB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- acc_weight_returnSquareB_we0 assign process. --
    acc_weight_returnSquareB_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46))) then 
            acc_weight_returnSquareB_we0 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- acc_weight_returnSquareB_we1 assign process. --
    acc_weight_returnSquareB_we1_assign_proc : process(ap_reg_ppiten_pp2_it43, ap_reg_ppstg_tmp_14_reg_1958_pp2_it42, ap_sig_cseq_ST_st52_fsm_47, ap_sig_cseq_ST_st50_fsm_45, ap_sig_cseq_ST_st51_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_46) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it43) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it42))))) then 
            acc_weight_returnSquareB_we1 <= ap_const_logic_1;
        else 
            acc_weight_returnSquareB_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, tmp_4_fu_1366_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = tmp_4_fu_1366_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, tmp_4_fu_1366_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = tmp_4_fu_1366_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_1007 assign process. --
    ap_sig_bdd_1007_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1007 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_1033 assign process. --
    ap_sig_bdd_1033_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1033 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_1042 assign process. --
    ap_sig_bdd_1042_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1042 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_1051 assign process. --
    ap_sig_bdd_1051_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1051 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_1067 assign process. --
    ap_sig_bdd_1067_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1067 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_1076 assign process. --
    ap_sig_bdd_1076_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1076 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_1336 assign process. --
    ap_sig_bdd_1336_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1336 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_1375 assign process. --
    ap_sig_bdd_1375_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1375 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    -- ap_sig_bdd_1386 assign process. --
    ap_sig_bdd_1386_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1386 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_1397 assign process. --
    ap_sig_bdd_1397_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1397 <= (ap_const_lv1_1 = ap_CS_fsm(101 downto 101));
    end process;


    -- ap_sig_bdd_1406 assign process. --
    ap_sig_bdd_1406_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1406 <= (ap_const_lv1_1 = ap_CS_fsm(121 downto 121));
    end process;


    -- ap_sig_bdd_1415 assign process. --
    ap_sig_bdd_1415_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1415 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_1427 assign process. --
    ap_sig_bdd_1427_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1427 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_1439 assign process. --
    ap_sig_bdd_1439_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1439 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_1547 assign process. --
    ap_sig_bdd_1547_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1547 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_1555 assign process. --
    ap_sig_bdd_1555_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1555 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_1586 assign process. --
    ap_sig_bdd_1586_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1586 <= (ap_const_lv1_1 = ap_CS_fsm(145 downto 145));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_164 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_1650 assign process. --
    ap_sig_bdd_1650_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1650 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_1666 assign process. --
    ap_sig_bdd_1666_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1666 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_1688 assign process. --
    ap_sig_bdd_1688_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1688 <= (ap_const_lv1_1 = ap_CS_fsm(142 downto 142));
    end process;


    -- ap_sig_bdd_1713 assign process. --
    ap_sig_bdd_1713_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1713 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_1733 assign process. --
    ap_sig_bdd_1733_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1733 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_1740 assign process. --
    ap_sig_bdd_1740_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1740 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_1784 assign process. --
    ap_sig_bdd_1784_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1784 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_1793 assign process. --
    ap_sig_bdd_1793_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1793 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_1800 assign process. --
    ap_sig_bdd_1800_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1800 <= (ap_const_lv1_1 = ap_CS_fsm(81 downto 81));
    end process;


    -- ap_sig_bdd_1807 assign process. --
    ap_sig_bdd_1807_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1807 <= (ap_const_lv1_1 = ap_CS_fsm(102 downto 102));
    end process;


    -- ap_sig_bdd_1832 assign process. --
    ap_sig_bdd_1832_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1832 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    -- ap_sig_bdd_1839 assign process. --
    ap_sig_bdd_1839_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1839 <= (ap_const_lv1_1 = ap_CS_fsm(97 downto 97));
    end process;


    -- ap_sig_bdd_1847 assign process. --
    ap_sig_bdd_1847_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1847 <= (ap_const_lv1_1 = ap_CS_fsm(122 downto 122));
    end process;


    -- ap_sig_bdd_1870 assign process. --
    ap_sig_bdd_1870_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1870 <= (ap_const_lv1_1 = ap_CS_fsm(86 downto 86));
    end process;


    -- ap_sig_bdd_1877 assign process. --
    ap_sig_bdd_1877_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1877 <= (ap_const_lv1_1 = ap_CS_fsm(126 downto 126));
    end process;


    -- ap_sig_bdd_1889 assign process. --
    ap_sig_bdd_1889_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1889 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_1971 assign process. --
    ap_sig_bdd_1971_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1971 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_2119 assign process. --
    ap_sig_bdd_2119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2119 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_2127 assign process. --
    ap_sig_bdd_2127_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2127 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    -- ap_sig_bdd_2135 assign process. --
    ap_sig_bdd_2135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2135 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    -- ap_sig_bdd_2143 assign process. --
    ap_sig_bdd_2143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2143 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_2151 assign process. --
    ap_sig_bdd_2151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2151 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_2159 assign process. --
    ap_sig_bdd_2159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2159 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    -- ap_sig_bdd_2167 assign process. --
    ap_sig_bdd_2167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2167 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_2175 assign process. --
    ap_sig_bdd_2175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2175 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    -- ap_sig_bdd_2183 assign process. --
    ap_sig_bdd_2183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2183 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    -- ap_sig_bdd_2191 assign process. --
    ap_sig_bdd_2191_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2191 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    -- ap_sig_bdd_2199 assign process. --
    ap_sig_bdd_2199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2199 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    -- ap_sig_bdd_2207 assign process. --
    ap_sig_bdd_2207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2207 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_2215 assign process. --
    ap_sig_bdd_2215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2215 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_2223 assign process. --
    ap_sig_bdd_2223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2223 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    -- ap_sig_bdd_2234 assign process. --
    ap_sig_bdd_2234_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2234 <= (ap_const_lv1_1 = ap_CS_fsm(87 downto 87));
    end process;


    -- ap_sig_bdd_2242 assign process. --
    ap_sig_bdd_2242_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2242 <= (ap_const_lv1_1 = ap_CS_fsm(88 downto 88));
    end process;


    -- ap_sig_bdd_2250 assign process. --
    ap_sig_bdd_2250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2250 <= (ap_const_lv1_1 = ap_CS_fsm(89 downto 89));
    end process;


    -- ap_sig_bdd_2258 assign process. --
    ap_sig_bdd_2258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2258 <= (ap_const_lv1_1 = ap_CS_fsm(90 downto 90));
    end process;


    -- ap_sig_bdd_2266 assign process. --
    ap_sig_bdd_2266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2266 <= (ap_const_lv1_1 = ap_CS_fsm(91 downto 91));
    end process;


    -- ap_sig_bdd_2274 assign process. --
    ap_sig_bdd_2274_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2274 <= (ap_const_lv1_1 = ap_CS_fsm(92 downto 92));
    end process;


    -- ap_sig_bdd_2282 assign process. --
    ap_sig_bdd_2282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2282 <= (ap_const_lv1_1 = ap_CS_fsm(93 downto 93));
    end process;


    -- ap_sig_bdd_2290 assign process. --
    ap_sig_bdd_2290_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2290 <= (ap_const_lv1_1 = ap_CS_fsm(94 downto 94));
    end process;


    -- ap_sig_bdd_2298 assign process. --
    ap_sig_bdd_2298_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2298 <= (ap_const_lv1_1 = ap_CS_fsm(95 downto 95));
    end process;


    -- ap_sig_bdd_2306 assign process. --
    ap_sig_bdd_2306_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2306 <= (ap_const_lv1_1 = ap_CS_fsm(96 downto 96));
    end process;


    -- ap_sig_bdd_2315 assign process. --
    ap_sig_bdd_2315_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2315 <= (ap_const_lv1_1 = ap_CS_fsm(98 downto 98));
    end process;


    -- ap_sig_bdd_2323 assign process. --
    ap_sig_bdd_2323_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2323 <= (ap_const_lv1_1 = ap_CS_fsm(99 downto 99));
    end process;


    -- ap_sig_bdd_2334 assign process. --
    ap_sig_bdd_2334_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2334 <= (ap_const_lv1_1 = ap_CS_fsm(127 downto 127));
    end process;


    -- ap_sig_bdd_2342 assign process. --
    ap_sig_bdd_2342_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2342 <= (ap_const_lv1_1 = ap_CS_fsm(128 downto 128));
    end process;


    -- ap_sig_bdd_2350 assign process. --
    ap_sig_bdd_2350_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2350 <= (ap_const_lv1_1 = ap_CS_fsm(129 downto 129));
    end process;


    -- ap_sig_bdd_2358 assign process. --
    ap_sig_bdd_2358_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2358 <= (ap_const_lv1_1 = ap_CS_fsm(130 downto 130));
    end process;


    -- ap_sig_bdd_2366 assign process. --
    ap_sig_bdd_2366_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2366 <= (ap_const_lv1_1 = ap_CS_fsm(131 downto 131));
    end process;


    -- ap_sig_bdd_2374 assign process. --
    ap_sig_bdd_2374_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2374 <= (ap_const_lv1_1 = ap_CS_fsm(132 downto 132));
    end process;


    -- ap_sig_bdd_2382 assign process. --
    ap_sig_bdd_2382_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2382 <= (ap_const_lv1_1 = ap_CS_fsm(133 downto 133));
    end process;


    -- ap_sig_bdd_2390 assign process. --
    ap_sig_bdd_2390_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2390 <= (ap_const_lv1_1 = ap_CS_fsm(134 downto 134));
    end process;


    -- ap_sig_bdd_2398 assign process. --
    ap_sig_bdd_2398_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2398 <= (ap_const_lv1_1 = ap_CS_fsm(135 downto 135));
    end process;


    -- ap_sig_bdd_2406 assign process. --
    ap_sig_bdd_2406_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2406 <= (ap_const_lv1_1 = ap_CS_fsm(136 downto 136));
    end process;


    -- ap_sig_bdd_2414 assign process. --
    ap_sig_bdd_2414_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2414 <= (ap_const_lv1_1 = ap_CS_fsm(137 downto 137));
    end process;


    -- ap_sig_bdd_2422 assign process. --
    ap_sig_bdd_2422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2422 <= (ap_const_lv1_1 = ap_CS_fsm(138 downto 138));
    end process;


    -- ap_sig_bdd_2430 assign process. --
    ap_sig_bdd_2430_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2430 <= (ap_const_lv1_1 = ap_CS_fsm(139 downto 139));
    end process;


    -- ap_sig_bdd_2438 assign process. --
    ap_sig_bdd_2438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_2438 <= (ap_const_lv1_1 = ap_CS_fsm(140 downto 140));
    end process;


    -- ap_sig_bdd_353 assign process. --
    ap_sig_bdd_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_353 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_362 assign process. --
    ap_sig_bdd_362_assign_proc : process(gmem32_RVALID, exitcond4_reg_1900)
    begin
                ap_sig_bdd_362 <= ((gmem32_RVALID = ap_const_logic_0) and (exitcond4_reg_1900 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_378 assign process. --
    ap_sig_bdd_378_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_378 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_385 assign process. --
    ap_sig_bdd_385_assign_proc : process(gmem32_RVALID, exitcond2_reg_1949)
    begin
                ap_sig_bdd_385 <= ((gmem32_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond2_reg_1949));
    end process;


    -- ap_sig_bdd_401 assign process. --
    ap_sig_bdd_401_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_401 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_546 assign process. --
    ap_sig_bdd_546_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_546 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_562 assign process. --
    ap_sig_bdd_562_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_562 <= (ap_const_lv1_1 = ap_CS_fsm(75 downto 75));
    end process;


    -- ap_sig_bdd_570 assign process. --
    ap_sig_bdd_570_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_570 <= (ap_const_lv1_1 = ap_CS_fsm(79 downto 79));
    end process;


    -- ap_sig_bdd_578 assign process. --
    ap_sig_bdd_578_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_578 <= (ap_const_lv1_1 = ap_CS_fsm(100 downto 100));
    end process;


    -- ap_sig_bdd_586 assign process. --
    ap_sig_bdd_586_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_586 <= (ap_const_lv1_1 = ap_CS_fsm(125 downto 125));
    end process;


    -- ap_sig_bdd_595 assign process. --
    ap_sig_bdd_595_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_595 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_642 assign process. --
    ap_sig_bdd_642_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_642 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_652 assign process. --
    ap_sig_bdd_652_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_652 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_659 assign process. --
    ap_sig_bdd_659_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_659 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    -- ap_sig_bdd_699 assign process. --
    ap_sig_bdd_699_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_699 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    -- ap_sig_bdd_708 assign process. --
    ap_sig_bdd_708_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_708 <= (ap_const_lv1_1 = ap_CS_fsm(141 downto 141));
    end process;


    -- ap_sig_bdd_776 assign process. --
    ap_sig_bdd_776_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_776 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    -- ap_sig_bdd_791 assign process. --
    ap_sig_bdd_791_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_791 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    -- ap_sig_bdd_825 assign process. --
    ap_sig_bdd_825_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_825 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    -- ap_sig_bdd_832 assign process. --
    ap_sig_bdd_832_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_832 <= (ap_const_lv1_1 = ap_CS_fsm(85 downto 85));
    end process;


    -- ap_sig_bdd_840 assign process. --
    ap_sig_bdd_840_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_840 <= (ap_const_lv1_1 = ap_CS_fsm(105 downto 105));
    end process;


    -- ap_sig_bdd_849 assign process. --
    ap_sig_bdd_849_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_849 <= (ap_const_lv1_1 = ap_CS_fsm(84 downto 84));
    end process;


    -- ap_sig_bdd_856 assign process. --
    ap_sig_bdd_856_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_856 <= (ap_const_lv1_1 = ap_CS_fsm(106 downto 106));
    end process;


    -- ap_sig_bdd_880 assign process. --
    ap_sig_bdd_880_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_880 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_889 assign process. --
    ap_sig_bdd_889_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_889 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_908 assign process. --
    ap_sig_bdd_908_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_908 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_27 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_27_assign_proc : process(ap_sig_bdd_353)
    begin
        if (ap_sig_bdd_353) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_44 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_44_assign_proc : process(ap_sig_bdd_378)
    begin
        if (ap_sig_bdd_378) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_48 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_48_assign_proc : process(ap_sig_bdd_401)
    begin
        if (ap_sig_bdd_401) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_51 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_51_assign_proc : process(ap_sig_bdd_1336)
    begin
        if (ap_sig_bdd_1336) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg1_fsm_52 assign process. --
    ap_sig_cseq_ST_pp3_stg1_fsm_52_assign_proc : process(ap_sig_bdd_659)
    begin
        if (ap_sig_bdd_659) then 
            ap_sig_cseq_ST_pp3_stg1_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg1_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg2_fsm_53 assign process. --
    ap_sig_cseq_ST_pp3_stg2_fsm_53_assign_proc : process(ap_sig_bdd_776)
    begin
        if (ap_sig_bdd_776) then 
            ap_sig_cseq_ST_pp3_stg2_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg2_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg3_fsm_54 assign process. --
    ap_sig_cseq_ST_pp3_stg3_fsm_54_assign_proc : process(ap_sig_bdd_791)
    begin
        if (ap_sig_bdd_791) then 
            ap_sig_cseq_ST_pp3_stg3_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg3_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg4_fsm_55 assign process. --
    ap_sig_cseq_ST_pp3_stg4_fsm_55_assign_proc : process(ap_sig_bdd_1375)
    begin
        if (ap_sig_bdd_1375) then 
            ap_sig_cseq_ST_pp3_stg4_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg4_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st109_fsm_56 assign process. --
    ap_sig_cseq_ST_st109_fsm_56_assign_proc : process(ap_sig_bdd_1386)
    begin
        if (ap_sig_bdd_1386) then 
            ap_sig_cseq_ST_st109_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st109_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st110_fsm_57 assign process. --
    ap_sig_cseq_ST_st110_fsm_57_assign_proc : process(ap_sig_bdd_2119)
    begin
        if (ap_sig_bdd_2119) then 
            ap_sig_cseq_ST_st110_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st110_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st111_fsm_58 assign process. --
    ap_sig_cseq_ST_st111_fsm_58_assign_proc : process(ap_sig_bdd_2127)
    begin
        if (ap_sig_bdd_2127) then 
            ap_sig_cseq_ST_st111_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st111_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st112_fsm_59 assign process. --
    ap_sig_cseq_ST_st112_fsm_59_assign_proc : process(ap_sig_bdd_2135)
    begin
        if (ap_sig_bdd_2135) then 
            ap_sig_cseq_ST_st112_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st112_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st113_fsm_60 assign process. --
    ap_sig_cseq_ST_st113_fsm_60_assign_proc : process(ap_sig_bdd_2143)
    begin
        if (ap_sig_bdd_2143) then 
            ap_sig_cseq_ST_st113_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st113_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st114_fsm_61 assign process. --
    ap_sig_cseq_ST_st114_fsm_61_assign_proc : process(ap_sig_bdd_2151)
    begin
        if (ap_sig_bdd_2151) then 
            ap_sig_cseq_ST_st114_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st114_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st115_fsm_62 assign process. --
    ap_sig_cseq_ST_st115_fsm_62_assign_proc : process(ap_sig_bdd_2159)
    begin
        if (ap_sig_bdd_2159) then 
            ap_sig_cseq_ST_st115_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st115_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st116_fsm_63 assign process. --
    ap_sig_cseq_ST_st116_fsm_63_assign_proc : process(ap_sig_bdd_2167)
    begin
        if (ap_sig_bdd_2167) then 
            ap_sig_cseq_ST_st116_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st116_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st117_fsm_64 assign process. --
    ap_sig_cseq_ST_st117_fsm_64_assign_proc : process(ap_sig_bdd_2175)
    begin
        if (ap_sig_bdd_2175) then 
            ap_sig_cseq_ST_st117_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st117_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st118_fsm_65 assign process. --
    ap_sig_cseq_ST_st118_fsm_65_assign_proc : process(ap_sig_bdd_2183)
    begin
        if (ap_sig_bdd_2183) then 
            ap_sig_cseq_ST_st118_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st118_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st119_fsm_66 assign process. --
    ap_sig_cseq_ST_st119_fsm_66_assign_proc : process(ap_sig_bdd_2191)
    begin
        if (ap_sig_bdd_2191) then 
            ap_sig_cseq_ST_st119_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st119_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st120_fsm_67 assign process. --
    ap_sig_cseq_ST_st120_fsm_67_assign_proc : process(ap_sig_bdd_2199)
    begin
        if (ap_sig_bdd_2199) then 
            ap_sig_cseq_ST_st120_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st120_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st121_fsm_68 assign process. --
    ap_sig_cseq_ST_st121_fsm_68_assign_proc : process(ap_sig_bdd_2207)
    begin
        if (ap_sig_bdd_2207) then 
            ap_sig_cseq_ST_st121_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st121_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st122_fsm_69 assign process. --
    ap_sig_cseq_ST_st122_fsm_69_assign_proc : process(ap_sig_bdd_2215)
    begin
        if (ap_sig_bdd_2215) then 
            ap_sig_cseq_ST_st122_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st122_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st123_fsm_70 assign process. --
    ap_sig_cseq_ST_st123_fsm_70_assign_proc : process(ap_sig_bdd_2223)
    begin
        if (ap_sig_bdd_2223) then 
            ap_sig_cseq_ST_st123_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st123_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st124_fsm_71 assign process. --
    ap_sig_cseq_ST_st124_fsm_71_assign_proc : process(ap_sig_bdd_699)
    begin
        if (ap_sig_bdd_699) then 
            ap_sig_cseq_ST_st124_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st124_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st125_fsm_72 assign process. --
    ap_sig_cseq_ST_st125_fsm_72_assign_proc : process(ap_sig_bdd_1832)
    begin
        if (ap_sig_bdd_1832) then 
            ap_sig_cseq_ST_st125_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st125_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st128_fsm_75 assign process. --
    ap_sig_cseq_ST_st128_fsm_75_assign_proc : process(ap_sig_bdd_562)
    begin
        if (ap_sig_bdd_562) then 
            ap_sig_cseq_ST_st128_fsm_75 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st128_fsm_75 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st129_fsm_76 assign process. --
    ap_sig_cseq_ST_st129_fsm_76_assign_proc : process(ap_sig_bdd_1793)
    begin
        if (ap_sig_bdd_1793) then 
            ap_sig_cseq_ST_st129_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st129_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st132_fsm_79 assign process. --
    ap_sig_cseq_ST_st132_fsm_79_assign_proc : process(ap_sig_bdd_570)
    begin
        if (ap_sig_bdd_570) then 
            ap_sig_cseq_ST_st132_fsm_79 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st132_fsm_79 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st133_fsm_80 assign process. --
    ap_sig_cseq_ST_st133_fsm_80_assign_proc : process(ap_sig_bdd_825)
    begin
        if (ap_sig_bdd_825) then 
            ap_sig_cseq_ST_st133_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st133_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st134_fsm_81 assign process. --
    ap_sig_cseq_ST_st134_fsm_81_assign_proc : process(ap_sig_bdd_1800)
    begin
        if (ap_sig_bdd_1800) then 
            ap_sig_cseq_ST_st134_fsm_81 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st134_fsm_81 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st137_fsm_84 assign process. --
    ap_sig_cseq_ST_st137_fsm_84_assign_proc : process(ap_sig_bdd_849)
    begin
        if (ap_sig_bdd_849) then 
            ap_sig_cseq_ST_st137_fsm_84 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st137_fsm_84 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st138_fsm_85 assign process. --
    ap_sig_cseq_ST_st138_fsm_85_assign_proc : process(ap_sig_bdd_832)
    begin
        if (ap_sig_bdd_832) then 
            ap_sig_cseq_ST_st138_fsm_85 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st138_fsm_85 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st139_fsm_86 assign process. --
    ap_sig_cseq_ST_st139_fsm_86_assign_proc : process(ap_sig_bdd_1870)
    begin
        if (ap_sig_bdd_1870) then 
            ap_sig_cseq_ST_st139_fsm_86 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st139_fsm_86 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_652)
    begin
        if (ap_sig_bdd_652) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st140_fsm_87 assign process. --
    ap_sig_cseq_ST_st140_fsm_87_assign_proc : process(ap_sig_bdd_2234)
    begin
        if (ap_sig_bdd_2234) then 
            ap_sig_cseq_ST_st140_fsm_87 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st140_fsm_87 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st141_fsm_88 assign process. --
    ap_sig_cseq_ST_st141_fsm_88_assign_proc : process(ap_sig_bdd_2242)
    begin
        if (ap_sig_bdd_2242) then 
            ap_sig_cseq_ST_st141_fsm_88 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st141_fsm_88 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st142_fsm_89 assign process. --
    ap_sig_cseq_ST_st142_fsm_89_assign_proc : process(ap_sig_bdd_2250)
    begin
        if (ap_sig_bdd_2250) then 
            ap_sig_cseq_ST_st142_fsm_89 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st142_fsm_89 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st143_fsm_90 assign process. --
    ap_sig_cseq_ST_st143_fsm_90_assign_proc : process(ap_sig_bdd_2258)
    begin
        if (ap_sig_bdd_2258) then 
            ap_sig_cseq_ST_st143_fsm_90 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st143_fsm_90 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st144_fsm_91 assign process. --
    ap_sig_cseq_ST_st144_fsm_91_assign_proc : process(ap_sig_bdd_2266)
    begin
        if (ap_sig_bdd_2266) then 
            ap_sig_cseq_ST_st144_fsm_91 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st144_fsm_91 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st145_fsm_92 assign process. --
    ap_sig_cseq_ST_st145_fsm_92_assign_proc : process(ap_sig_bdd_2274)
    begin
        if (ap_sig_bdd_2274) then 
            ap_sig_cseq_ST_st145_fsm_92 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st145_fsm_92 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st146_fsm_93 assign process. --
    ap_sig_cseq_ST_st146_fsm_93_assign_proc : process(ap_sig_bdd_2282)
    begin
        if (ap_sig_bdd_2282) then 
            ap_sig_cseq_ST_st146_fsm_93 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st146_fsm_93 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st147_fsm_94 assign process. --
    ap_sig_cseq_ST_st147_fsm_94_assign_proc : process(ap_sig_bdd_2290)
    begin
        if (ap_sig_bdd_2290) then 
            ap_sig_cseq_ST_st147_fsm_94 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st147_fsm_94 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st148_fsm_95 assign process. --
    ap_sig_cseq_ST_st148_fsm_95_assign_proc : process(ap_sig_bdd_2298)
    begin
        if (ap_sig_bdd_2298) then 
            ap_sig_cseq_ST_st148_fsm_95 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st148_fsm_95 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st149_fsm_96 assign process. --
    ap_sig_cseq_ST_st149_fsm_96_assign_proc : process(ap_sig_bdd_2306)
    begin
        if (ap_sig_bdd_2306) then 
            ap_sig_cseq_ST_st149_fsm_96 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st149_fsm_96 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_1547)
    begin
        if (ap_sig_bdd_1547) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st150_fsm_97 assign process. --
    ap_sig_cseq_ST_st150_fsm_97_assign_proc : process(ap_sig_bdd_1839)
    begin
        if (ap_sig_bdd_1839) then 
            ap_sig_cseq_ST_st150_fsm_97 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st150_fsm_97 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st151_fsm_98 assign process. --
    ap_sig_cseq_ST_st151_fsm_98_assign_proc : process(ap_sig_bdd_2315)
    begin
        if (ap_sig_bdd_2315) then 
            ap_sig_cseq_ST_st151_fsm_98 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st151_fsm_98 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st152_fsm_99 assign process. --
    ap_sig_cseq_ST_st152_fsm_99_assign_proc : process(ap_sig_bdd_2323)
    begin
        if (ap_sig_bdd_2323) then 
            ap_sig_cseq_ST_st152_fsm_99 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st152_fsm_99 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st153_fsm_100 assign process. --
    ap_sig_cseq_ST_st153_fsm_100_assign_proc : process(ap_sig_bdd_578)
    begin
        if (ap_sig_bdd_578) then 
            ap_sig_cseq_ST_st153_fsm_100 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st153_fsm_100 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st154_fsm_101 assign process. --
    ap_sig_cseq_ST_st154_fsm_101_assign_proc : process(ap_sig_bdd_1397)
    begin
        if (ap_sig_bdd_1397) then 
            ap_sig_cseq_ST_st154_fsm_101 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st154_fsm_101 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st155_fsm_102 assign process. --
    ap_sig_cseq_ST_st155_fsm_102_assign_proc : process(ap_sig_bdd_1807)
    begin
        if (ap_sig_bdd_1807) then 
            ap_sig_cseq_ST_st155_fsm_102 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st155_fsm_102 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st158_fsm_105 assign process. --
    ap_sig_cseq_ST_st158_fsm_105_assign_proc : process(ap_sig_bdd_840)
    begin
        if (ap_sig_bdd_840) then 
            ap_sig_cseq_ST_st158_fsm_105 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st158_fsm_105 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st159_fsm_106 assign process. --
    ap_sig_cseq_ST_st159_fsm_106_assign_proc : process(ap_sig_bdd_856)
    begin
        if (ap_sig_bdd_856) then 
            ap_sig_cseq_ST_st159_fsm_106 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st159_fsm_106 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_1889)
    begin
        if (ap_sig_bdd_1889) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st174_fsm_121 assign process. --
    ap_sig_cseq_ST_st174_fsm_121_assign_proc : process(ap_sig_bdd_1406)
    begin
        if (ap_sig_bdd_1406) then 
            ap_sig_cseq_ST_st174_fsm_121 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st174_fsm_121 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st175_fsm_122 assign process. --
    ap_sig_cseq_ST_st175_fsm_122_assign_proc : process(ap_sig_bdd_1847)
    begin
        if (ap_sig_bdd_1847) then 
            ap_sig_cseq_ST_st175_fsm_122 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st175_fsm_122 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st178_fsm_125 assign process. --
    ap_sig_cseq_ST_st178_fsm_125_assign_proc : process(ap_sig_bdd_586)
    begin
        if (ap_sig_bdd_586) then 
            ap_sig_cseq_ST_st178_fsm_125 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st178_fsm_125 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st179_fsm_126 assign process. --
    ap_sig_cseq_ST_st179_fsm_126_assign_proc : process(ap_sig_bdd_1877)
    begin
        if (ap_sig_bdd_1877) then 
            ap_sig_cseq_ST_st179_fsm_126 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st179_fsm_126 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st180_fsm_127 assign process. --
    ap_sig_cseq_ST_st180_fsm_127_assign_proc : process(ap_sig_bdd_2334)
    begin
        if (ap_sig_bdd_2334) then 
            ap_sig_cseq_ST_st180_fsm_127 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st180_fsm_127 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st181_fsm_128 assign process. --
    ap_sig_cseq_ST_st181_fsm_128_assign_proc : process(ap_sig_bdd_2342)
    begin
        if (ap_sig_bdd_2342) then 
            ap_sig_cseq_ST_st181_fsm_128 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st181_fsm_128 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st182_fsm_129 assign process. --
    ap_sig_cseq_ST_st182_fsm_129_assign_proc : process(ap_sig_bdd_2350)
    begin
        if (ap_sig_bdd_2350) then 
            ap_sig_cseq_ST_st182_fsm_129 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st182_fsm_129 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st183_fsm_130 assign process. --
    ap_sig_cseq_ST_st183_fsm_130_assign_proc : process(ap_sig_bdd_2358)
    begin
        if (ap_sig_bdd_2358) then 
            ap_sig_cseq_ST_st183_fsm_130 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st183_fsm_130 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st184_fsm_131 assign process. --
    ap_sig_cseq_ST_st184_fsm_131_assign_proc : process(ap_sig_bdd_2366)
    begin
        if (ap_sig_bdd_2366) then 
            ap_sig_cseq_ST_st184_fsm_131 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st184_fsm_131 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st185_fsm_132 assign process. --
    ap_sig_cseq_ST_st185_fsm_132_assign_proc : process(ap_sig_bdd_2374)
    begin
        if (ap_sig_bdd_2374) then 
            ap_sig_cseq_ST_st185_fsm_132 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st185_fsm_132 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st186_fsm_133 assign process. --
    ap_sig_cseq_ST_st186_fsm_133_assign_proc : process(ap_sig_bdd_2382)
    begin
        if (ap_sig_bdd_2382) then 
            ap_sig_cseq_ST_st186_fsm_133 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st186_fsm_133 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st187_fsm_134 assign process. --
    ap_sig_cseq_ST_st187_fsm_134_assign_proc : process(ap_sig_bdd_2390)
    begin
        if (ap_sig_bdd_2390) then 
            ap_sig_cseq_ST_st187_fsm_134 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st187_fsm_134 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st188_fsm_135 assign process. --
    ap_sig_cseq_ST_st188_fsm_135_assign_proc : process(ap_sig_bdd_2398)
    begin
        if (ap_sig_bdd_2398) then 
            ap_sig_cseq_ST_st188_fsm_135 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st188_fsm_135 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st189_fsm_136 assign process. --
    ap_sig_cseq_ST_st189_fsm_136_assign_proc : process(ap_sig_bdd_2406)
    begin
        if (ap_sig_bdd_2406) then 
            ap_sig_cseq_ST_st189_fsm_136 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st189_fsm_136 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st190_fsm_137 assign process. --
    ap_sig_cseq_ST_st190_fsm_137_assign_proc : process(ap_sig_bdd_2414)
    begin
        if (ap_sig_bdd_2414) then 
            ap_sig_cseq_ST_st190_fsm_137 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st190_fsm_137 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st191_fsm_138 assign process. --
    ap_sig_cseq_ST_st191_fsm_138_assign_proc : process(ap_sig_bdd_2422)
    begin
        if (ap_sig_bdd_2422) then 
            ap_sig_cseq_ST_st191_fsm_138 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st191_fsm_138 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st192_fsm_139 assign process. --
    ap_sig_cseq_ST_st192_fsm_139_assign_proc : process(ap_sig_bdd_2430)
    begin
        if (ap_sig_bdd_2430) then 
            ap_sig_cseq_ST_st192_fsm_139 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st192_fsm_139 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st193_fsm_140 assign process. --
    ap_sig_cseq_ST_st193_fsm_140_assign_proc : process(ap_sig_bdd_2438)
    begin
        if (ap_sig_bdd_2438) then 
            ap_sig_cseq_ST_st193_fsm_140 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st193_fsm_140 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st194_fsm_141 assign process. --
    ap_sig_cseq_ST_st194_fsm_141_assign_proc : process(ap_sig_bdd_708)
    begin
        if (ap_sig_bdd_708) then 
            ap_sig_cseq_ST_st194_fsm_141 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st194_fsm_141 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st195_fsm_142 assign process. --
    ap_sig_cseq_ST_st195_fsm_142_assign_proc : process(ap_sig_bdd_1688)
    begin
        if (ap_sig_bdd_1688) then 
            ap_sig_cseq_ST_st195_fsm_142 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st195_fsm_142 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st198_fsm_145 assign process. --
    ap_sig_cseq_ST_st198_fsm_145_assign_proc : process(ap_sig_bdd_1586)
    begin
        if (ap_sig_bdd_1586) then 
            ap_sig_cseq_ST_st198_fsm_145 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st198_fsm_145 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_164)
    begin
        if (ap_sig_bdd_164) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_908)
    begin
        if (ap_sig_bdd_908) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_1007)
    begin
        if (ap_sig_bdd_1007) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_1650)
    begin
        if (ap_sig_bdd_1650) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_1415)
    begin
        if (ap_sig_bdd_1415) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_1555)
    begin
        if (ap_sig_bdd_1555) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_28 assign process. --
    ap_sig_cseq_ST_st31_fsm_28_assign_proc : process(ap_sig_bdd_1033)
    begin
        if (ap_sig_bdd_1033) then 
            ap_sig_cseq_ST_st31_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_29 assign process. --
    ap_sig_cseq_ST_st32_fsm_29_assign_proc : process(ap_sig_bdd_1042)
    begin
        if (ap_sig_bdd_1042) then 
            ap_sig_cseq_ST_st32_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_30 assign process. --
    ap_sig_cseq_ST_st33_fsm_30_assign_proc : process(ap_sig_bdd_1051)
    begin
        if (ap_sig_bdd_1051) then 
            ap_sig_cseq_ST_st33_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_31 assign process. --
    ap_sig_cseq_ST_st34_fsm_31_assign_proc : process(ap_sig_bdd_1971)
    begin
        if (ap_sig_bdd_1971) then 
            ap_sig_cseq_ST_st34_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_36 assign process. --
    ap_sig_cseq_ST_st39_fsm_36_assign_proc : process(ap_sig_bdd_1067)
    begin
        if (ap_sig_bdd_1067) then 
            ap_sig_cseq_ST_st39_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_37 assign process. --
    ap_sig_cseq_ST_st40_fsm_37_assign_proc : process(ap_sig_bdd_1076)
    begin
        if (ap_sig_bdd_1076) then 
            ap_sig_cseq_ST_st40_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_38 assign process. --
    ap_sig_cseq_ST_st41_fsm_38_assign_proc : process(ap_sig_bdd_1666)
    begin
        if (ap_sig_bdd_1666) then 
            ap_sig_cseq_ST_st41_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_43 assign process. --
    ap_sig_cseq_ST_st46_fsm_43_assign_proc : process(ap_sig_bdd_1427)
    begin
        if (ap_sig_bdd_1427) then 
            ap_sig_cseq_ST_st46_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_45 assign process. --
    ap_sig_cseq_ST_st50_fsm_45_assign_proc : process(ap_sig_bdd_1733)
    begin
        if (ap_sig_bdd_1733) then 
            ap_sig_cseq_ST_st50_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_46 assign process. --
    ap_sig_cseq_ST_st51_fsm_46_assign_proc : process(ap_sig_bdd_1740)
    begin
        if (ap_sig_bdd_1740) then 
            ap_sig_cseq_ST_st51_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_47 assign process. --
    ap_sig_cseq_ST_st52_fsm_47_assign_proc : process(ap_sig_bdd_1439)
    begin
        if (ap_sig_bdd_1439) then 
            ap_sig_cseq_ST_st52_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_546)
    begin
        if (ap_sig_bdd_546) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_880)
    begin
        if (ap_sig_bdd_880) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_889)
    begin
        if (ap_sig_bdd_889) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_595)
    begin
        if (ap_sig_bdd_595) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st97_fsm_49 assign process. --
    ap_sig_cseq_ST_st97_fsm_49_assign_proc : process(ap_sig_bdd_1713)
    begin
        if (ap_sig_bdd_1713) then 
            ap_sig_cseq_ST_st97_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st97_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st98_fsm_50 assign process. --
    ap_sig_cseq_ST_st98_fsm_50_assign_proc : process(ap_sig_bdd_642)
    begin
        if (ap_sig_bdd_642) then 
            ap_sig_cseq_ST_st98_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st98_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_1784)
    begin
        if (ap_sig_bdd_1784) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem32_ARREADY assign process. --
    ap_sig_ioackin_gmem32_ARREADY_assign_proc : process(gmem32_ARREADY, ap_reg_ioackin_gmem32_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) then 
            ap_sig_ioackin_gmem32_ARREADY <= gmem32_ARREADY;
        else 
            ap_sig_ioackin_gmem32_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem32_AWREADY assign process. --
    ap_sig_ioackin_gmem32_AWREADY_assign_proc : process(gmem32_AWREADY, ap_reg_ioackin_gmem32_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_AWREADY)) then 
            ap_sig_ioackin_gmem32_AWREADY <= gmem32_AWREADY;
        else 
            ap_sig_ioackin_gmem32_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem32_WREADY assign process. --
    ap_sig_ioackin_gmem32_WREADY_assign_proc : process(gmem32_WREADY, ap_reg_ioackin_gmem32_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_WREADY)) then 
            ap_sig_ioackin_gmem32_WREADY <= gmem32_WREADY;
        else 
            ap_sig_ioackin_gmem32_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- bramA_address0 assign process. --
    bramA_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it0, tmp_s_fu_1407_p1, tmp_15_fu_1511_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            bramA_address0 <= tmp_s_fu_1407_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            bramA_address0 <= tmp_15_fu_1511_p1(8 - 1 downto 0);
        else 
            bramA_address0 <= "XXXXXXXX";
        end if; 
    end process;

    bramA_address1 <= tmp_16_fu_1517_p1(8 - 1 downto 0);

    -- bramA_ce0 assign process. --
    bramA_ce0_assign_proc : process(ap_sig_bdd_362, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            bramA_ce0 <= ap_const_logic_1;
        else 
            bramA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- bramA_ce1 assign process. --
    bramA_ce1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            bramA_ce1 <= ap_const_logic_1;
        else 
            bramA_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bramA_d0 <= reg_1176;

    -- bramA_we0 assign process. --
    bramA_we0_assign_proc : process(ap_sig_bdd_362, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond4_reg_1900_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1900_pp0_it1)))) then 
            bramA_we0 <= ap_const_logic_1;
        else 
            bramA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- bramB_address0 assign process. --
    bramB_address0_assign_proc : process(ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it0, tmp_12_fu_1491_p1, tmp_15_fu_1511_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            bramB_address0 <= tmp_12_fu_1491_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            bramB_address0 <= tmp_15_fu_1511_p1(8 - 1 downto 0);
        else 
            bramB_address0 <= "XXXXXXXX";
        end if; 
    end process;

    bramB_address1 <= tmp_16_fu_1517_p1(8 - 1 downto 0);

    -- bramB_ce0 assign process. --
    bramB_ce0_assign_proc : process(ap_sig_bdd_385, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            bramB_ce0 <= ap_const_logic_1;
        else 
            bramB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- bramB_ce1 assign process. --
    bramB_ce1_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            bramB_ce1 <= ap_const_logic_1;
        else 
            bramB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bramB_d0 <= reg_1176;

    -- bramB_we0 assign process. --
    bramB_we0_assign_proc : process(ap_sig_bdd_385, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond2_reg_1949_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1949_pp1_it1)))) then 
            bramB_we0 <= ap_const_logic_1;
        else 
            bramB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    column_index_fu_1435_p2 <= std_logic_vector(unsigned(column_index_0_in_reg_884) + unsigned(ap_const_lv32_1));
    correlation_accel_v1_gmem32_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    counter_2_fu_1429_p2 <= std_logic_vector(unsigned(counter_reg_849) + unsigned(tmp_13_fu_1423_p2));
    exitcond2_fu_1480_p2 <= "1" when (indvar1_phi_fu_908_p4 = tmp_6_reg_1655) else "0";
    exitcond4_fu_1396_p2 <= "1" when (indvar_phi_fu_876_p4 = tmp_6_reg_1655) else "0";
    exitcond_fu_1541_p2 <= "1" when (i2_phi_fu_1016_p4 = ap_const_lv3_6) else "0";
    exitcond_i_fu_1303_p2 <= "1" when (i_i_reg_791 = ap_const_lv8_FC) else "0";

    -- gmem32_ARADDR assign process. --
    gmem32_ARADDR_assign_proc : process(gmem32_addr_reg_1894, gmem32_addr_1_reg_1943, ap_reg_ioackin_gmem32_ARREADY, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st41_fsm_38)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_38)) then 
                gmem32_ARADDR <= gmem32_addr_1_reg_1943;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                gmem32_ARADDR <= gmem32_addr_reg_1894;
            else 
                gmem32_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem32_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gmem32_ARBURST <= ap_const_lv2_0;
    gmem32_ARCACHE <= ap_const_lv4_0;
    gmem32_ARID <= ap_const_lv1_0;
    gmem32_ARLEN <= p_add_i32_shr_reg_1661;
    gmem32_ARLOCK <= ap_const_lv2_0;
    gmem32_ARPROT <= ap_const_lv3_0;
    gmem32_ARQOS <= ap_const_lv4_0;
    gmem32_ARREGION <= ap_const_lv4_0;
    gmem32_ARSIZE <= ap_const_lv3_0;
    gmem32_ARUSER <= ap_const_lv1_0;

    -- gmem32_ARVALID assign process. --
    gmem32_ARVALID_assign_proc : process(ap_reg_ioackin_gmem32_ARREADY, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st41_fsm_38)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_gmem32_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_38)))) then 
            gmem32_ARVALID <= ap_const_logic_1;
        else 
            gmem32_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem32_AWADDR <= gmem32_addr_2_reg_2180;
    gmem32_AWBURST <= ap_const_lv2_0;
    gmem32_AWCACHE <= ap_const_lv4_0;
    gmem32_AWID <= ap_const_lv1_0;
    gmem32_AWLEN <= ap_const_lv32_1;
    gmem32_AWLOCK <= ap_const_lv2_0;
    gmem32_AWPROT <= ap_const_lv3_0;
    gmem32_AWQOS <= ap_const_lv4_0;
    gmem32_AWREGION <= ap_const_lv4_0;
    gmem32_AWSIZE <= ap_const_lv3_0;
    gmem32_AWUSER <= ap_const_lv1_0;

    -- gmem32_AWVALID assign process. --
    gmem32_AWVALID_assign_proc : process(ap_sig_cseq_ST_st194_fsm_141, ap_reg_ioackin_gmem32_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st194_fsm_141) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_AWREADY))) then 
            gmem32_AWVALID <= ap_const_logic_1;
        else 
            gmem32_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem32_BREADY assign process. --
    gmem32_BREADY_assign_proc : process(gmem32_BVALID, ap_sig_cseq_ST_st198_fsm_145)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st198_fsm_145) and not((gmem32_BVALID = ap_const_logic_0)))) then 
            gmem32_BREADY <= ap_const_logic_1;
        else 
            gmem32_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem32_RREADY assign process. --
    gmem32_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_27, exitcond4_reg_1900, ap_sig_bdd_362, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_44, exitcond2_reg_1949, ap_sig_bdd_385, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and (exitcond4_reg_1900 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_362 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and (ap_const_lv1_0 = exitcond2_reg_1949) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_385 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            gmem32_RREADY <= ap_const_logic_1;
        else 
            gmem32_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem32_WDATA <= reg_1182;
    gmem32_WID <= ap_const_lv1_0;
    gmem32_WLAST <= ap_const_logic_0;
    gmem32_WSTRB <= ap_const_lv4_F;
    gmem32_WUSER <= ap_const_lv1_0;

    -- gmem32_WVALID assign process. --
    gmem32_WVALID_assign_proc : process(ap_reg_ioackin_gmem32_WREADY, ap_sig_cseq_ST_st195_fsm_142)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st195_fsm_142) and (ap_const_logic_0 = ap_reg_ioackin_gmem32_WREADY))) then 
            gmem32_WVALID <= ap_const_logic_1;
        else 
            gmem32_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1024_ce <= ap_const_logic_1;

    -- grp_fu_1024_opcode assign process. --
    grp_fu_1024_opcode_assign_proc : process(ap_reg_ppiten_pp2_it35, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it0, exitcond_reg_2097, ap_reg_ppstg_tmp_14_reg_1958_pp2_it34, ap_sig_cseq_ST_pp3_stg2_fsm_53, ap_sig_cseq_ST_pp3_stg3_fsm_54, ap_sig_cseq_ST_st133_fsm_80, ap_sig_cseq_ST_pp3_stg0_fsm_51, ap_sig_cseq_ST_pp3_stg4_fsm_55, ap_sig_cseq_ST_st154_fsm_101, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st134_fsm_81, ap_sig_cseq_ST_st155_fsm_102)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st133_fsm_80) or (ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76) or (ap_const_logic_1 = ap_sig_cseq_ST_st134_fsm_81))) then 
            grp_fu_1024_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_101) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st155_fsm_102) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it34))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55)))) then 
            grp_fu_1024_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1024_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_1024_p0 assign process. --
    grp_fu_1024_p0_assign_proc : process(ap_reg_ppiten_pp2_it35, sum_weight_returnSquareA_reg_952, sum_weight_returnA_returnB_reg_1000, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it0, reg_1182, acc_returnA_q0, ap_sig_cseq_ST_pp3_stg2_fsm_53, ap_sig_cseq_ST_pp3_stg3_fsm_54, reg_1257, ap_sig_cseq_ST_st133_fsm_80, weight_rom_load_1_reg_1639, ap_sig_cseq_ST_pp3_stg0_fsm_51, ap_sig_cseq_ST_pp3_stg4_fsm_55, tmp_52_reg_2195, ap_sig_cseq_ST_st154_fsm_101, sum_returnA_phi_fu_932_p4, sum_weight_returnSquareA_phi_fu_956_p4, sum_weight_returnSquareB_phi_fu_980_p4, sum_weight_returnA_returnB_phi_fu_1004_p4, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st134_fsm_81, ap_sig_cseq_ST_st155_fsm_102)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st155_fsm_102)) then 
            grp_fu_1024_p0 <= tmp_52_reg_2195;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_101)) then 
            grp_fu_1024_p0 <= reg_1182;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st134_fsm_81)) then 
            grp_fu_1024_p0 <= reg_1257;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st133_fsm_80)) then 
            grp_fu_1024_p0 <= sum_weight_returnSquareA_reg_952;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76)) then 
            grp_fu_1024_p0 <= sum_weight_returnA_returnB_reg_1000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51))) then 
            grp_fu_1024_p0 <= sum_weight_returnA_returnB_phi_fu_1004_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
            grp_fu_1024_p0 <= sum_weight_returnSquareB_phi_fu_980_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then 
            grp_fu_1024_p0 <= sum_weight_returnSquareA_phi_fu_956_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            grp_fu_1024_p0 <= sum_returnA_phi_fu_932_p4;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35)) then 
            grp_fu_1024_p0 <= acc_returnA_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_1024_p0 <= weight_rom_load_1_reg_1639;
        else 
            grp_fu_1024_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1024_p1 assign process. --
    grp_fu_1024_p1_assign_proc : process(ap_reg_ppiten_pp2_it35, reg_1147, reg_1157, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it0, reg_1209, reg_1215, ap_sig_cseq_ST_pp3_stg2_fsm_53, ap_sig_cseq_ST_pp3_stg3_fsm_54, reg_1239, reg_1245, reg_1251, ap_sig_cseq_ST_st133_fsm_80, ap_reg_ppstg_lnReturnA_reg_2012_pp2_it34, ap_sig_cseq_ST_pp3_stg0_fsm_51, ap_sig_cseq_ST_pp3_stg4_fsm_55, tmp_50_reg_2190, ap_sig_cseq_ST_st154_fsm_101, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st134_fsm_81, ap_sig_cseq_ST_st155_fsm_102)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st134_fsm_81)) then 
            grp_fu_1024_p1 <= tmp_50_reg_2190;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st133_fsm_80) or (ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_101))) then 
            grp_fu_1024_p1 <= reg_1147;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76) or (ap_const_logic_1 = ap_sig_cseq_ST_st155_fsm_102))) then 
            grp_fu_1024_p1 <= reg_1209;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51))) then 
            grp_fu_1024_p1 <= reg_1251;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
            grp_fu_1024_p1 <= reg_1245;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then 
            grp_fu_1024_p1 <= reg_1239;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            grp_fu_1024_p1 <= reg_1215;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35)) then 
            grp_fu_1024_p1 <= ap_reg_ppstg_lnReturnA_reg_2012_pp2_it34;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_1024_p1 <= reg_1157;
        else 
            grp_fu_1024_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1030_ce <= ap_const_logic_1;

    -- grp_fu_1030_opcode assign process. --
    grp_fu_1030_opcode_assign_proc : process(ap_reg_ppiten_pp2_it35, ap_reg_ppiten_pp3_it0, exitcond_reg_2097, ap_reg_ppstg_tmp_14_reg_1958_pp2_it34, ap_sig_cseq_ST_pp3_stg2_fsm_53, ap_sig_cseq_ST_pp3_stg3_fsm_54, ap_sig_cseq_ST_st133_fsm_80, ap_sig_cseq_ST_pp3_stg4_fsm_55, ap_sig_cseq_ST_st154_fsm_101)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st133_fsm_80)) then 
            grp_fu_1030_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_101) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53)) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it34))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54)) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55)))) then 
            grp_fu_1030_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1030_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_1030_p0 assign process. --
    grp_fu_1030_p0_assign_proc : process(ap_reg_ppiten_pp2_it35, sum_weight_returnSquareB_reg_976, ap_reg_ppiten_pp3_it0, reg_1192, acc_returnB_q0, ap_sig_cseq_ST_pp3_stg2_fsm_53, ap_sig_cseq_ST_pp3_stg3_fsm_54, ap_sig_cseq_ST_st133_fsm_80, ap_sig_cseq_ST_pp3_stg4_fsm_55, ap_sig_cseq_ST_st154_fsm_101, sum_returnB_phi_fu_944_p4, sum_weight_returnA_phi_fu_968_p4, sum_weight_returnB_phi_fu_992_p4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_101)) then 
            grp_fu_1030_p0 <= reg_1192;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st133_fsm_80)) then 
            grp_fu_1030_p0 <= sum_weight_returnSquareB_reg_976;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
            grp_fu_1030_p0 <= sum_weight_returnB_phi_fu_992_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then 
            grp_fu_1030_p0 <= sum_weight_returnA_phi_fu_968_p4;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            grp_fu_1030_p0 <= sum_returnB_phi_fu_944_p4;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35)) then 
            grp_fu_1030_p0 <= acc_returnB_q0;
        else 
            grp_fu_1030_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1030_p1 assign process. --
    grp_fu_1030_p1_assign_proc : process(ap_reg_ppiten_pp2_it35, ap_reg_ppiten_pp3_it0, reg_1202, reg_1221, reg_1227, ap_sig_cseq_ST_pp3_stg2_fsm_53, reg_1233, ap_sig_cseq_ST_pp3_stg3_fsm_54, ap_sig_cseq_ST_st133_fsm_80, ap_reg_ppstg_lnReturnB_reg_2021_pp2_it34, ap_sig_cseq_ST_pp3_stg4_fsm_55, ap_sig_cseq_ST_st154_fsm_101)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st133_fsm_80) or (ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_101))) then 
            grp_fu_1030_p1 <= reg_1202;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
            grp_fu_1030_p1 <= reg_1233;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then 
            grp_fu_1030_p1 <= reg_1227;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            grp_fu_1030_p1 <= reg_1221;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it35)) then 
            grp_fu_1030_p1 <= ap_reg_ppstg_lnReturnB_reg_2021_pp2_it34;
        else 
            grp_fu_1030_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1036_ce <= ap_const_logic_1;
    grp_fu_1036_p0 <= acc_weight_returnA_q0;
    grp_fu_1036_p1 <= reg_1209;
    grp_fu_1042_ce <= ap_const_logic_1;
    grp_fu_1042_p0 <= acc_weight_returnB_q0;
    grp_fu_1042_p1 <= tmp_31_reg_2060;
    grp_fu_1048_ce <= ap_const_logic_1;
    grp_fu_1048_p0 <= acc_weight_returnSquareA_q0;
    grp_fu_1048_p1 <= tmp_24_reg_2082;
    grp_fu_1054_ce <= ap_const_logic_1;
    grp_fu_1054_p0 <= acc_weight_returnSquareB_q0;
    grp_fu_1054_p1 <= tmp_27_reg_2087;
    grp_fu_1060_ce <= ap_const_logic_1;
    grp_fu_1060_p0 <= acc_weight_returnA_returnB_q0;
    grp_fu_1060_p1 <= tmp_34_reg_2092;
    grp_fu_1074_ce <= ap_const_logic_1;

    -- grp_fu_1074_p0 assign process. --
    grp_fu_1074_p0_assign_proc : process(ap_reg_ppiten_pp2_it31, reg_1147, reg_1182, lnReturnA_reg_2012, volatilityA_reg_2200, tmp_i_reg_779, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st125_fsm_72, ap_sig_cseq_ST_st150_fsm_97, ap_sig_cseq_ST_st175_fsm_122)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st175_fsm_122)) then 
            grp_fu_1074_p0 <= volatilityA_reg_2200;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76)) then 
            grp_fu_1074_p0 <= reg_1147;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st125_fsm_72) or (ap_const_logic_1 = ap_sig_cseq_ST_st150_fsm_97))) then 
            grp_fu_1074_p0 <= reg_1182;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it31)) then 
            grp_fu_1074_p0 <= lnReturnA_reg_2012;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_1074_p0 <= tmp_i_reg_779;
        else 
            grp_fu_1074_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1074_p1 assign process. --
    grp_fu_1074_p1_assign_proc : process(ap_reg_ppiten_pp2_it31, sum_weight_returnA_reg_964, reg_1182, lnReturnA_reg_2012, volatilityB_reg_2205, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st125_fsm_72, ap_sig_cseq_ST_st150_fsm_97, ap_sig_cseq_ST_st175_fsm_122)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st175_fsm_122)) then 
            grp_fu_1074_p1 <= volatilityB_reg_2205;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st150_fsm_97)) then 
            grp_fu_1074_p1 <= reg_1182;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76)) then 
            grp_fu_1074_p1 <= sum_weight_returnA_reg_964;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st125_fsm_72)) then 
            grp_fu_1074_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it31)) then 
            grp_fu_1074_p1 <= lnReturnA_reg_2012;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_1074_p1 <= ap_const_lv32_3F70A3D7;
        else 
            grp_fu_1074_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1080_ce <= ap_const_logic_1;

    -- grp_fu_1080_p0 assign process. --
    grp_fu_1080_p0_assign_proc : process(ap_reg_ppiten_pp2_it31, reg_1192, reg_1202, lnReturnB_reg_2021, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st125_fsm_72, ap_sig_cseq_ST_st150_fsm_97)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76)) then 
            grp_fu_1080_p0 <= reg_1202;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st125_fsm_72) or (ap_const_logic_1 = ap_sig_cseq_ST_st150_fsm_97))) then 
            grp_fu_1080_p0 <= reg_1192;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it31)) then 
            grp_fu_1080_p0 <= lnReturnB_reg_2021;
        else 
            grp_fu_1080_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1080_p1 assign process. --
    grp_fu_1080_p1_assign_proc : process(ap_reg_ppiten_pp2_it31, sum_weight_returnB_reg_988, reg_1192, lnReturnB_reg_2021, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st125_fsm_72, ap_sig_cseq_ST_st150_fsm_97)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st150_fsm_97)) then 
            grp_fu_1080_p1 <= reg_1192;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76)) then 
            grp_fu_1080_p1 <= sum_weight_returnB_reg_988;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st125_fsm_72)) then 
            grp_fu_1080_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it31)) then 
            grp_fu_1080_p1 <= lnReturnB_reg_2021;
        else 
            grp_fu_1080_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1084_ce <= ap_const_logic_1;

    -- grp_fu_1084_p0 assign process. --
    grp_fu_1084_p0_assign_proc : process(ap_reg_ppiten_pp2_it31, reg_1182, reg_1192, lnReturnA_reg_2012, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st125_fsm_72, ap_sig_cseq_ST_st150_fsm_97)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76)) then 
            grp_fu_1084_p0 <= reg_1192;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st125_fsm_72) or (ap_const_logic_1 = ap_sig_cseq_ST_st150_fsm_97))) then 
            grp_fu_1084_p0 <= reg_1182;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it31)) then 
            grp_fu_1084_p0 <= lnReturnA_reg_2012;
        else 
            grp_fu_1084_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1084_p1 assign process. --
    grp_fu_1084_p1_assign_proc : process(ap_reg_ppiten_pp2_it31, sum_weight_returnA_reg_964, sum_weight_returnB_reg_988, ap_reg_ppstg_reg_1157_pp2_it30, reg_1192, ap_sig_cseq_ST_st129_fsm_76, ap_sig_cseq_ST_st125_fsm_72, ap_sig_cseq_ST_st150_fsm_97)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st150_fsm_97)) then 
            grp_fu_1084_p1 <= reg_1192;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st129_fsm_76)) then 
            grp_fu_1084_p1 <= sum_weight_returnA_reg_964;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st125_fsm_72)) then 
            grp_fu_1084_p1 <= sum_weight_returnB_reg_988;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it31)) then 
            grp_fu_1084_p1 <= ap_reg_ppstg_reg_1157_pp2_it30;
        else 
            grp_fu_1084_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1088_ce <= ap_const_logic_1;
    grp_fu_1088_p0 <= lnReturnB_reg_2021;
    grp_fu_1088_p1 <= ap_reg_ppstg_reg_1157_pp2_it30;
    grp_fu_1092_ce <= ap_const_logic_1;
    grp_fu_1092_p0 <= lnReturnA_reg_2012;
    grp_fu_1092_p1 <= lnReturnB_reg_2021;
    grp_fu_1096_ce <= ap_const_logic_1;
    grp_fu_1096_p0 <= reg_1147;
    grp_fu_1096_p1 <= ap_reg_ppstg_reg_1157_pp2_it34;
    grp_fu_1100_ce <= ap_const_logic_1;
    grp_fu_1100_p0 <= reg_1202;
    grp_fu_1100_p1 <= ap_reg_ppstg_reg_1157_pp2_it34;
    grp_fu_1104_ce <= ap_const_logic_1;
    grp_fu_1104_p0 <= tmp_33_reg_2071;
    grp_fu_1104_p1 <= ap_reg_ppstg_reg_1157_pp2_it34;

    -- grp_fu_1114_ce assign process. --
    grp_fu_1114_ce_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_sig_cseq_ST_st153_fsm_100, ap_reg_ppstg_tmp_14_reg_1958_pp2_it16, ap_sig_cseq_ST_st124_fsm_71, ap_sig_cseq_ST_st194_fsm_141, ap_sig_ioackin_gmem32_AWREADY, ap_sig_cseq_ST_st138_fsm_85, ap_reg_ppstg_tmp_14_reg_1958_pp2_it1, ap_reg_ppstg_tmp_14_reg_1958_pp2_it2, ap_reg_ppstg_tmp_14_reg_1958_pp2_it3, ap_reg_ppstg_tmp_14_reg_1958_pp2_it4, ap_reg_ppstg_tmp_14_reg_1958_pp2_it5, ap_reg_ppstg_tmp_14_reg_1958_pp2_it6, ap_reg_ppstg_tmp_14_reg_1958_pp2_it7, ap_reg_ppstg_tmp_14_reg_1958_pp2_it8, ap_reg_ppstg_tmp_14_reg_1958_pp2_it9, ap_reg_ppstg_tmp_14_reg_1958_pp2_it10, ap_reg_ppstg_tmp_14_reg_1958_pp2_it11, ap_reg_ppstg_tmp_14_reg_1958_pp2_it12, ap_reg_ppstg_tmp_14_reg_1958_pp2_it13, ap_reg_ppstg_tmp_14_reg_1958_pp2_it14, ap_reg_ppstg_tmp_14_reg_1958_pp2_it15, ap_sig_cseq_ST_st109_fsm_56, ap_sig_cseq_ST_st154_fsm_101, ap_sig_cseq_ST_st150_fsm_97, ap_sig_cseq_ST_st139_fsm_86, ap_sig_cseq_ST_st179_fsm_126, ap_sig_cseq_ST_st110_fsm_57, ap_sig_cseq_ST_st111_fsm_58, ap_sig_cseq_ST_st112_fsm_59, ap_sig_cseq_ST_st113_fsm_60, ap_sig_cseq_ST_st114_fsm_61, ap_sig_cseq_ST_st115_fsm_62, ap_sig_cseq_ST_st116_fsm_63, ap_sig_cseq_ST_st117_fsm_64, ap_sig_cseq_ST_st118_fsm_65, ap_sig_cseq_ST_st119_fsm_66, ap_sig_cseq_ST_st120_fsm_67, ap_sig_cseq_ST_st121_fsm_68, ap_sig_cseq_ST_st122_fsm_69, ap_sig_cseq_ST_st123_fsm_70, ap_sig_cseq_ST_st140_fsm_87, ap_sig_cseq_ST_st141_fsm_88, ap_sig_cseq_ST_st142_fsm_89, ap_sig_cseq_ST_st143_fsm_90, ap_sig_cseq_ST_st144_fsm_91, ap_sig_cseq_ST_st145_fsm_92, ap_sig_cseq_ST_st146_fsm_93, ap_sig_cseq_ST_st147_fsm_94, ap_sig_cseq_ST_st148_fsm_95, ap_sig_cseq_ST_st149_fsm_96, ap_sig_cseq_ST_st151_fsm_98, ap_sig_cseq_ST_st152_fsm_99, ap_sig_cseq_ST_st180_fsm_127, ap_sig_cseq_ST_st181_fsm_128, ap_sig_cseq_ST_st182_fsm_129, ap_sig_cseq_ST_st183_fsm_130, ap_sig_cseq_ST_st184_fsm_131, ap_sig_cseq_ST_st185_fsm_132, ap_sig_cseq_ST_st186_fsm_133, ap_sig_cseq_ST_st187_fsm_134, ap_sig_cseq_ST_st188_fsm_135, ap_sig_cseq_ST_st189_fsm_136, ap_sig_cseq_ST_st190_fsm_137, ap_sig_cseq_ST_st191_fsm_138, ap_sig_cseq_ST_st192_fsm_139, ap_sig_cseq_ST_st193_fsm_140)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st153_fsm_100) or (ap_const_logic_1 = ap_sig_cseq_ST_st124_fsm_71) or ((ap_const_logic_1 = ap_sig_cseq_ST_st194_fsm_141) and not((ap_const_logic_0 = ap_sig_ioackin_gmem32_AWREADY))) or (ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_85) or (ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_56) or (ap_const_logic_1 = ap_sig_cseq_ST_st154_fsm_101) or (ap_const_logic_1 = ap_sig_cseq_ST_st150_fsm_97) or (ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_86) or (ap_const_logic_1 = ap_sig_cseq_ST_st179_fsm_126) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it16)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it1)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it2)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it3)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it4)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it5)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it6)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it7)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it8)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it9)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it10)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it11)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it12)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it13)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it14)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_14_reg_1958_pp2_it15)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st110_fsm_57) or (ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_58) or (ap_const_logic_1 = ap_sig_cseq_ST_st112_fsm_59) or (ap_const_logic_1 = ap_sig_cseq_ST_st113_fsm_60) or (ap_const_logic_1 = ap_sig_cseq_ST_st114_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_62) or (ap_const_logic_1 = ap_sig_cseq_ST_st116_fsm_63) or (ap_const_logic_1 = ap_sig_cseq_ST_st117_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st118_fsm_65) or (ap_const_logic_1 = ap_sig_cseq_ST_st119_fsm_66) or (ap_const_logic_1 = ap_sig_cseq_ST_st120_fsm_67) or (ap_const_logic_1 = ap_sig_cseq_ST_st121_fsm_68) or (ap_const_logic_1 = ap_sig_cseq_ST_st122_fsm_69) or (ap_const_logic_1 = ap_sig_cseq_ST_st123_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st140_fsm_87) or (ap_const_logic_1 = ap_sig_cseq_ST_st141_fsm_88) or (ap_const_logic_1 = ap_sig_cseq_ST_st142_fsm_89) or (ap_const_logic_1 = ap_sig_cseq_ST_st143_fsm_90) or (ap_const_logic_1 = ap_sig_cseq_ST_st144_fsm_91) or (ap_const_logic_1 = ap_sig_cseq_ST_st145_fsm_92) or (ap_const_logic_1 = ap_sig_cseq_ST_st146_fsm_93) or (ap_const_logic_1 = ap_sig_cseq_ST_st147_fsm_94) or (ap_const_logic_1 = ap_sig_cseq_ST_st148_fsm_95) or (ap_const_logic_1 = ap_sig_cseq_ST_st149_fsm_96) or (ap_const_logic_1 = ap_sig_cseq_ST_st151_fsm_98) or (ap_const_logic_1 = ap_sig_cseq_ST_st152_fsm_99) or (ap_const_logic_1 = ap_sig_cseq_ST_st180_fsm_127) or (ap_const_logic_1 = ap_sig_cseq_ST_st181_fsm_128) or (ap_const_logic_1 = ap_sig_cseq_ST_st182_fsm_129) or (ap_const_logic_1 = ap_sig_cseq_ST_st183_fsm_130) or (ap_const_logic_1 = ap_sig_cseq_ST_st184_fsm_131) or (ap_const_logic_1 = ap_sig_cseq_ST_st185_fsm_132) or (ap_const_logic_1 = ap_sig_cseq_ST_st186_fsm_133) or (ap_const_logic_1 = ap_sig_cseq_ST_st187_fsm_134) or (ap_const_logic_1 = ap_sig_cseq_ST_st188_fsm_135) or (ap_const_logic_1 = ap_sig_cseq_ST_st189_fsm_136) or (ap_const_logic_1 = ap_sig_cseq_ST_st190_fsm_137) or (ap_const_logic_1 = ap_sig_cseq_ST_st191_fsm_138) or (ap_const_logic_1 = ap_sig_cseq_ST_st192_fsm_139) or (ap_const_logic_1 = ap_sig_cseq_ST_st193_fsm_140))) then 
            grp_fu_1114_ce <= ap_const_logic_1;
        else 
            grp_fu_1114_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_1114_p0 assign process. --
    grp_fu_1114_p0_assign_proc : process(ap_reg_ppiten_pp2_it2, sum_returnA_reg_928, reg_1257, ap_sig_cseq_ST_st138_fsm_85, reg_1264, bramA_load_reg_1992, ap_sig_cseq_ST_st109_fsm_56, ap_sig_cseq_ST_st139_fsm_86, ap_sig_cseq_ST_st179_fsm_126)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_86)) then 
            grp_fu_1114_p0 <= reg_1257;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_85) or (ap_const_logic_1 = ap_sig_cseq_ST_st179_fsm_126))) then 
            grp_fu_1114_p0 <= reg_1264;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_56)) then 
            grp_fu_1114_p0 <= sum_returnA_reg_928;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2)) then 
            grp_fu_1114_p0 <= bramA_load_reg_1992;
        else 
            grp_fu_1114_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1114_p1 assign process. --
    grp_fu_1114_p1_assign_proc : process(ap_reg_ppiten_pp2_it2, reg_1147, reg_1157, ap_sig_cseq_ST_st138_fsm_85, tmp_2_reg_1649, bramA_load_1_reg_1997, ap_sig_cseq_ST_st109_fsm_56, ap_sig_cseq_ST_st139_fsm_86, ap_sig_cseq_ST_st179_fsm_126)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st179_fsm_126)) then 
            grp_fu_1114_p1 <= reg_1147;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_85) or (ap_const_logic_1 = ap_sig_cseq_ST_st139_fsm_86))) then 
            grp_fu_1114_p1 <= reg_1157;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_56)) then 
            grp_fu_1114_p1 <= tmp_2_reg_1649;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2)) then 
            grp_fu_1114_p1 <= bramA_load_1_reg_1997;
        else 
            grp_fu_1114_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1118_ce <= ap_const_logic_1;

    -- grp_fu_1118_p0 assign process. --
    grp_fu_1118_p0_assign_proc : process(ap_reg_ppiten_pp2_it2, sum_returnB_reg_940, ap_sig_cseq_ST_st138_fsm_85, reg_1269, bramB_load_reg_2002, ap_sig_cseq_ST_st109_fsm_56)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_85)) then 
            grp_fu_1118_p0 <= reg_1269;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_56)) then 
            grp_fu_1118_p0 <= sum_returnB_reg_940;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2)) then 
            grp_fu_1118_p0 <= bramB_load_reg_2002;
        else 
            grp_fu_1118_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_1118_p1 assign process. --
    grp_fu_1118_p1_assign_proc : process(ap_reg_ppiten_pp2_it2, reg_1157, ap_sig_cseq_ST_st138_fsm_85, tmp_2_reg_1649, bramB_load_1_reg_2007, ap_sig_cseq_ST_st109_fsm_56)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st138_fsm_85)) then 
            grp_fu_1118_p1 <= reg_1157;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_56)) then 
            grp_fu_1118_p1 <= tmp_2_reg_1649;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2)) then 
            grp_fu_1118_p1 <= bramB_load_1_reg_2007;
        else 
            grp_fu_1118_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1124_ce <= ap_const_logic_1;
    grp_fu_1124_p0 <= tmp_1_reg_1633;
    grp_fu_1127_ce <= ap_const_logic_1;
    grp_fu_1127_p0 <= ap_const_lv32_0;
    grp_fu_1127_p1 <= reg_1257;
    grp_fu_1132_ce <= ap_const_logic_1;
    grp_fu_1132_p0 <= ap_const_lv32_0;
    grp_fu_1132_p1 <= reg_1269;
    grp_fu_1137_ce <= ap_const_logic_1;
    grp_fu_1137_p0 <= ap_const_lv32_0;
    grp_fu_1137_p1 <= reg_1182;
    grp_fu_1142_ce <= ap_const_logic_1;
    grp_fu_1142_p0 <= ap_const_lv32_0;
    grp_fu_1142_p1 <= reg_1192;
    grp_fu_1458_ce <= ap_const_logic_1;
    grp_fu_1458_p0 <= column_index_reg_1919;
    grp_fu_1458_p1 <= number_of_days;
    grp_fu_1524_ce <= ap_const_logic_1;
    grp_fu_1524_p0 <= i1_phi_fu_920_p4;
    grp_fu_1524_p1 <= ap_const_lv31_6(4 - 1 downto 0);
    i1_cast_fu_1496_p1 <= std_logic_vector(resize(unsigned(i1_phi_fu_920_p4),32));
    i1_i_cast_fu_1320_p1 <= std_logic_vector(resize(unsigned(i1_i_reg_803),32));

    -- i1_phi_fu_920_p4 assign process. --
    i1_phi_fu_920_p4_assign_proc : process(i1_reg_916, ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it1, tmp_14_reg_1958, i_reg_1962)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_const_lv1_0 = tmp_14_reg_1958)))) then 
            i1_phi_fu_920_p4 <= i_reg_1962;
        else 
            i1_phi_fu_920_p4 <= i1_reg_916;
        end if; 
    end process;


    -- i2_phi_fu_1016_p4 assign process. --
    i2_phi_fu_1016_p4_assign_proc : process(i2_reg_1012, ap_reg_ppiten_pp3_it1, exitcond_reg_2097, ap_sig_cseq_ST_pp3_stg0_fsm_51, i_1_reg_2101)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_reg_2097) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_51))) then 
            i2_phi_fu_1016_p4 <= i_1_reg_2101;
        else 
            i2_phi_fu_1016_p4 <= i2_reg_1012;
        end if; 
    end process;

    i_1_fu_1547_p2 <= std_logic_vector(unsigned(i2_phi_fu_1016_p4) + unsigned(ap_const_lv3_1));
    i_2_fu_1314_p2 <= std_logic_vector(unsigned(i_i_reg_791) + unsigned(ap_const_lv8_1));
    i_3_fu_1334_p2 <= std_logic_vector(unsigned(i1_i_reg_803) + unsigned(ap_const_lv31_1));
    i_fu_1505_p2 <= std_logic_vector(unsigned(i1_phi_fu_920_p4) + unsigned(ap_const_lv31_1));

    -- indvar1_phi_fu_908_p4 assign process. --
    indvar1_phi_fu_908_p4_assign_proc : process(indvar1_reg_904, ap_sig_cseq_ST_pp1_stg0_fsm_44, exitcond2_reg_1949, ap_reg_ppiten_pp1_it1, indvar_next1_reg_1953)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_44) and (ap_const_lv1_0 = exitcond2_reg_1949) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            indvar1_phi_fu_908_p4 <= indvar_next1_reg_1953;
        else 
            indvar1_phi_fu_908_p4 <= indvar1_reg_904;
        end if; 
    end process;

    indvar_next1_fu_1485_p2 <= std_logic_vector(unsigned(indvar1_phi_fu_908_p4) + unsigned(ap_const_lv30_1));
    indvar_next_fu_1401_p2 <= std_logic_vector(unsigned(indvar_phi_fu_876_p4) + unsigned(ap_const_lv30_1));

    -- indvar_phi_fu_876_p4 assign process. --
    indvar_phi_fu_876_p4_assign_proc : process(indvar_reg_872, ap_sig_cseq_ST_pp0_stg0_fsm_27, exitcond4_reg_1900, ap_reg_ppiten_pp0_it1, indvar_next_reg_1904)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_27) and (exitcond4_reg_1900 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_876_p4 <= indvar_next_reg_1904;
        else 
            indvar_phi_fu_876_p4 <= indvar_reg_872;
        end if; 
    end process;

    indvars_iv_next3_fu_1452_p2 <= std_logic_vector(unsigned(indvars_iv2_reg_814) + unsigned(ap_const_lv32_FFFFFFFF));
    indvars_iv_next_fu_1446_p2 <= std_logic_vector(unsigned(indvars_iv_reg_826) + unsigned(ap_const_lv32_1));
    next_mul_fu_1357_p1 <= number_of_days;
    next_mul_fu_1357_p2 <= std_logic_vector(unsigned(phi_mul_reg_861) + unsigned(next_mul_fu_1357_p1));
        out_correlation4_sum_cast_fu_1568_p1 <= std_logic_vector(resize(signed(out_correlation4_sum_fu_1563_p2),64));

    out_correlation4_sum_fu_1563_p2 <= std_logic_vector(unsigned(tmp_61_cast_reg_1601) + unsigned(tmp_55_cast_fu_1559_p1));
    p_add_i32_shr_fu_1353_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_1350_p1),32));
    row_index_1_fu_1371_p2 <= std_logic_vector(unsigned(row_index_reg_838) + unsigned(ap_const_lv31_1));
    row_index_cast_fu_1362_p1 <= std_logic_vector(resize(unsigned(row_index_reg_838),32));
    smax_fu_1417_p3 <= 
        number_of_indices when (tmp_61_reg_1909(0) = '1') else 
        indvars_iv_reg_826;

    -- sum_returnA_phi_fu_932_p4 assign process. --
    sum_returnA_phi_fu_932_p4_assign_proc : process(sum_returnA_reg_928, reg_1170, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_reg_2097_pp3_it1, ap_sig_cseq_ST_pp3_stg2_fsm_53)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            sum_returnA_phi_fu_932_p4 <= reg_1170;
        else 
            sum_returnA_phi_fu_932_p4 <= sum_returnA_reg_928;
        end if; 
    end process;


    -- sum_returnB_phi_fu_944_p4 assign process. --
    sum_returnB_phi_fu_944_p4_assign_proc : process(sum_returnB_reg_940, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_reg_2097_pp3_it1, ap_sig_cseq_ST_pp3_stg2_fsm_53, sum_returnB_1_reg_2150)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg2_fsm_53))) then 
            sum_returnB_phi_fu_944_p4 <= sum_returnB_1_reg_2150;
        else 
            sum_returnB_phi_fu_944_p4 <= sum_returnB_reg_940;
        end if; 
    end process;


    -- sum_weight_returnA_phi_fu_968_p4 assign process. --
    sum_weight_returnA_phi_fu_968_p4_assign_proc : process(sum_weight_returnA_reg_964, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_reg_2097_pp3_it1, ap_sig_cseq_ST_pp3_stg3_fsm_54, sum_weight_returnA_1_reg_2160)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then 
            sum_weight_returnA_phi_fu_968_p4 <= sum_weight_returnA_1_reg_2160;
        else 
            sum_weight_returnA_phi_fu_968_p4 <= sum_weight_returnA_reg_964;
        end if; 
    end process;

    sum_weight_returnA_returnB_phi_fu_1004_p4 <= sum_weight_returnA_returnB_reg_1000;

    -- sum_weight_returnB_phi_fu_992_p4 assign process. --
    sum_weight_returnB_phi_fu_992_p4_assign_proc : process(sum_weight_returnB_reg_988, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_reg_2097_pp3_it1, sum_weight_returnB_1_reg_2170, ap_sig_cseq_ST_pp3_stg4_fsm_55)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
            sum_weight_returnB_phi_fu_992_p4 <= sum_weight_returnB_1_reg_2170;
        else 
            sum_weight_returnB_phi_fu_992_p4 <= sum_weight_returnB_reg_988;
        end if; 
    end process;


    -- sum_weight_returnSquareA_phi_fu_956_p4 assign process. --
    sum_weight_returnSquareA_phi_fu_956_p4_assign_proc : process(sum_weight_returnSquareA_reg_952, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_reg_2097_pp3_it1, ap_sig_cseq_ST_pp3_stg3_fsm_54, sum_weight_returnSquareA_1_reg_2155)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg3_fsm_54))) then 
            sum_weight_returnSquareA_phi_fu_956_p4 <= sum_weight_returnSquareA_1_reg_2155;
        else 
            sum_weight_returnSquareA_phi_fu_956_p4 <= sum_weight_returnSquareA_reg_952;
        end if; 
    end process;


    -- sum_weight_returnSquareB_phi_fu_980_p4 assign process. --
    sum_weight_returnSquareB_phi_fu_980_p4_assign_proc : process(sum_weight_returnSquareB_reg_976, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond_reg_2097_pp3_it1, sum_weight_returnSquareB_1_reg_2165, ap_sig_cseq_ST_pp3_stg4_fsm_55)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_2097_pp3_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg4_fsm_55))) then 
            sum_weight_returnSquareB_phi_fu_980_p4 <= sum_weight_returnSquareB_1_reg_2165;
        else 
            sum_weight_returnSquareB_phi_fu_980_p4 <= sum_weight_returnSquareB_reg_976;
        end if; 
    end process;

    tmp_11_fu_1381_p2 <= std_logic_vector(unsigned(tmp_62_cast_reg_1606) + unsigned(tmp_9_fu_1377_p1));
    tmp_12_fu_1491_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar1_reg_904_pp1_it1),64));
    tmp_13_fu_1423_p2 <= std_logic_vector(unsigned(smax_fu_1417_p3) + unsigned(indvars_iv2_reg_814));
    tmp_14_fu_1500_p2 <= "1" when (signed(i1_cast_fu_1496_p1) < signed(tmp_1_reg_1633)) else "0";
    tmp_15_fu_1511_p1 <= std_logic_vector(resize(unsigned(i1_phi_fu_920_p4),64));
    tmp_16_fu_1517_p1 <= std_logic_vector(resize(unsigned(i_fu_1505_p2),64));
    tmp_1_fu_1340_p0 <= number_of_days;
    tmp_1_fu_1340_p2 <= std_logic_vector(signed(tmp_1_fu_1340_p0) + signed(ap_const_lv32_FFFFFFFF));
    tmp_20_fu_1530_p1 <= std_logic_vector(resize(unsigned(grp_fu_1524_p2),64));
    tmp_3_fu_1275_p4 <= out_correlation(31 downto 2);
    tmp_4_fu_1366_p2 <= "1" when (signed(row_index_cast_fu_1362_p1) < signed(tmp_reg_1644)) else "0";
        tmp_55_cast_fu_1559_p1 <= std_logic_vector(resize(signed(counter_1_reg_893),33));

        tmp_55_fu_1386_p1 <= std_logic_vector(resize(signed(tmp_11_fu_1381_p2),64));

    tmp_56_fu_1578_p2 <= std_logic_vector(unsigned(counter_1_reg_893) + unsigned(ap_const_lv32_1));
    tmp_57_fu_1553_p1 <= std_logic_vector(resize(unsigned(i2_phi_fu_1016_p4),64));
    tmp_58_i_fu_1309_p1 <= std_logic_vector(resize(unsigned(i_i_reg_791),64));
    tmp_59_i_fu_1324_p1 <= number_of_days;
    tmp_59_i_fu_1324_p2 <= "1" when (signed(i1_i_cast_fu_1320_p1) < signed(tmp_59_i_fu_1324_p1)) else "0";
    tmp_5_fu_1289_p4 <= in_indices(31 downto 2);
    tmp_60_i_fu_1329_p1 <= std_logic_vector(resize(unsigned(i1_i_reg_803),64));
    tmp_61_cast_fu_1285_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_1275_p4),33));
    tmp_61_fu_1412_p2 <= "1" when (signed(indvars_iv_reg_826) < signed(number_of_indices)) else "0";
    tmp_62_cast_fu_1299_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_1289_p4),33));
        tmp_62_fu_1462_p1 <= std_logic_vector(resize(signed(tmp_10_reg_1938),33));

    tmp_63_fu_1465_p2 <= std_logic_vector(unsigned(tmp_62_cast_reg_1606) + unsigned(tmp_62_fu_1462_p1));
        tmp_64_fu_1470_p1 <= std_logic_vector(resize(signed(tmp_63_fu_1465_p2),64));

    tmp_6_fu_1350_p0 <= number_of_days;
    tmp_6_fu_1350_p1 <= tmp_6_fu_1350_p0(30 - 1 downto 0);
    tmp_8_fu_1441_p2 <= "1" when (signed(column_index_fu_1435_p2) < signed(number_of_indices)) else "0";
        tmp_9_fu_1377_p1 <= std_logic_vector(resize(signed(phi_mul_reg_861),33));

    tmp_fu_1345_p2 <= std_logic_vector(unsigned(number_of_indices) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_s_fu_1407_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_872_pp0_it1),64));

    -- weight_rom_address0 assign process. --
    weight_rom_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, tmp_58_i_fu_1309_p1, tmp_16_fu_1517_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            weight_rom_address0 <= tmp_58_i_fu_1309_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            weight_rom_address0 <= tmp_16_fu_1517_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            weight_rom_address0 <= ap_const_lv8_0;
        else 
            weight_rom_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- weight_rom_address1 assign process. --
    weight_rom_address1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13, tmp_60_i_fu_1329_p1, ap_sig_cseq_ST_st97_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_address1 <= ap_const_lv8_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st97_fsm_49))) then 
            weight_rom_address1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            weight_rom_address1 <= tmp_60_i_fu_1329_p1(8 - 1 downto 0);
        else 
            weight_rom_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- weight_rom_ce0 assign process. --
    weight_rom_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_pp2_stg0_fsm_48, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_48) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
            weight_rom_ce0 <= ap_const_logic_1;
        else 
            weight_rom_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_ce1 assign process. --
    weight_rom_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st97_fsm_49)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st97_fsm_49))) then 
            weight_rom_ce1 <= ap_const_logic_1;
        else 
            weight_rom_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_d0 assign process. --
    weight_rom_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, reg_1147, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            weight_rom_d0 <= reg_1147;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_d0 <= ap_const_lv32_3F800000;
        else 
            weight_rom_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_rom_d1 assign process. --
    weight_rom_d1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, reg_1170, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            weight_rom_d1 <= reg_1170;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            weight_rom_d1 <= ap_const_lv32_3F800000;
        else 
            weight_rom_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- weight_rom_we0 assign process. --
    weight_rom_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            weight_rom_we0 <= ap_const_logic_1;
        else 
            weight_rom_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- weight_rom_we1 assign process. --
    weight_rom_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            weight_rom_we1 <= ap_const_logic_1;
        else 
            weight_rom_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
