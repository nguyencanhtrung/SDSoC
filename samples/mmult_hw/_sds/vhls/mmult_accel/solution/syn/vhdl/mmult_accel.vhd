-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_A_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_A_EN_A : OUT STD_LOGIC;
    in_A_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_A_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_A_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    in_A_Clk_A : OUT STD_LOGIC;
    in_A_Rst_A : OUT STD_LOGIC;
    in_B_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_B_EN_A : OUT STD_LOGIC;
    in_B_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_B_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_B_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    in_B_Clk_A : OUT STD_LOGIC;
    in_B_Rst_A : OUT STD_LOGIC;
    out_C_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_C_EN_A : OUT STD_LOGIC;
    out_C_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_C_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_C_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_C_Clk_A : OUT STD_LOGIC;
    out_C_Rst_A : OUT STD_LOGIC );
end;


architecture behav of mmult_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmult_accel,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=362561,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=537,HLS_SYN_LUT=840}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_32 : BOOLEAN;
    signal row_1_fu_148_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_1_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_73 : BOOLEAN;
    signal tmp_fu_158_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_247 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_cast2_fu_166_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_cast2_reg_253 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal col_1_fu_176_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_1_reg_262 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_fu_192_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_270 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_99 : BOOLEAN;
    signal exitcond_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_A_load_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_114 : BOOLEAN;
    signal in_B_load_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_124 : BOOLEAN;
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal row_reg_86 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_97 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_reg_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_121 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_A_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal in_B_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_C_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal grp_fu_138_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal tmp_1_fu_154_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_cast1_fu_182_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_198_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_208_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_212_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_220_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_230_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_133_ce : STD_LOGIC;
    signal grp_fu_138_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component mmult_accel_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_accel_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mmult_accel_fadd_32ns_32ns_32_5_full_dsp_U1 : component mmult_accel_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_133_p0,
        din1 => grp_fu_133_p1,
        ce => grp_fu_133_ce,
        dout => grp_fu_133_p2);

    mmult_accel_fmul_32ns_32ns_32_4_max_dsp_U2 : component mmult_accel_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_138_p0,
        din1 => grp_fu_138_p1,
        ce => grp_fu_138_ce,
        dout => grp_fu_138_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- col_reg_97 assign process. --
    col_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_142_p2 = ap_const_lv1_0))) then 
                col_reg_97 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_186_p2)))) then 
                col_reg_97 <= col_1_reg_262;
            end if; 
        end if;
    end process;

    -- k_reg_121 assign process. --
    k_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_170_p2))) then 
                k_reg_121 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                k_reg_121 <= k_1_reg_270;
            end if; 
        end if;
    end process;

    -- result_reg_108 assign process. --
    result_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_170_p2))) then 
                result_reg_108 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                result_reg_108 <= grp_fu_133_p2;
            end if; 
        end if;
    end process;

    -- row_reg_86 assign process. --
    row_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_170_p2)))) then 
                row_reg_86 <= row_1_reg_242;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                row_reg_86 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                col_1_reg_262 <= col_1_fu_176_p2;
                col_cast2_reg_253(0) <= col_cast2_fu_166_p1(0);
    col_cast2_reg_253(1) <= col_cast2_fu_166_p1(1);
    col_cast2_reg_253(2) <= col_cast2_fu_166_p1(2);
    col_cast2_reg_253(3) <= col_cast2_fu_166_p1(3);
    col_cast2_reg_253(4) <= col_cast2_fu_166_p1(4);
    col_cast2_reg_253(5) <= col_cast2_fu_166_p1(5);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                in_A_load_reg_285 <= in_A_Dout_A;
                in_B_load_reg_290 <= in_B_Dout_A;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_1_reg_270 <= k_1_fu_192_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                row_1_reg_242 <= row_1_fu_148_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_142_p2 = ap_const_lv1_0))) then
                tmp_reg_247(5) <= tmp_fu_158_p3(5);
    tmp_reg_247(6) <= tmp_fu_158_p3(6);
    tmp_reg_247(7) <= tmp_fu_158_p3(7);
    tmp_reg_247(8) <= tmp_fu_158_p3(8);
    tmp_reg_247(9) <= tmp_fu_158_p3(9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_s_reg_295 <= grp_fu_138_p2;
            end if;
        end if;
    end process;
    tmp_reg_247(4 downto 0) <= "00000";
    col_cast2_reg_253(9 downto 6) <= "0000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_142_p2, exitcond_fu_186_p2, exitcond1_fu_170_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_142_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond1_fu_170_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_186_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_142_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_142_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_142_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_142_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_114 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_124 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_32 assign process. --
    ap_sig_bdd_32_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_32 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_73 assign process. --
    ap_sig_bdd_73_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_73 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_88 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_99 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_32)
    begin
        if (ap_sig_bdd_32) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_73)
    begin
        if (ap_sig_bdd_73) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_88)
    begin
        if (ap_sig_bdd_88) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_99)
    begin
        if (ap_sig_bdd_99) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_114)
    begin
        if (ap_sig_bdd_114) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_124)
    begin
        if (ap_sig_bdd_124) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_176_p2 <= std_logic_vector(unsigned(col_reg_97) + unsigned(ap_const_lv6_1));
    col_cast2_fu_166_p1 <= std_logic_vector(resize(unsigned(col_reg_97),10));
    exitcond1_fu_170_p2 <= "1" when (col_reg_97 = ap_const_lv6_20) else "0";
    exitcond2_fu_142_p2 <= "1" when (row_reg_86 = ap_const_lv6_20) else "0";
    exitcond_fu_186_p2 <= "1" when (k_reg_121 = ap_const_lv6_20) else "0";
    grp_fu_133_ce <= ap_const_logic_1;
    grp_fu_133_p0 <= result_reg_108;
    grp_fu_133_p1 <= tmp_s_reg_295;
    grp_fu_138_ce <= ap_const_logic_1;
    grp_fu_138_p0 <= in_A_load_reg_285;
    grp_fu_138_p1 <= in_B_load_reg_290;
    in_A_Addr_A <= std_logic_vector(shift_left(unsigned(in_A_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    in_A_Addr_A_orig <= tmp_6_fu_203_p1(32 - 1 downto 0);
    in_A_Clk_A <= ap_clk;
    in_A_Din_A <= ap_const_lv32_0;

    -- in_A_EN_A assign process. --
    in_A_EN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            in_A_EN_A <= ap_const_logic_1;
        else 
            in_A_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    in_A_Rst_A <= ap_rst_n_inv;
    in_A_WEN_A <= ap_const_lv4_0;
    in_B_Addr_A <= std_logic_vector(shift_left(unsigned(in_B_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    in_B_Addr_A_orig <= tmp_9_fu_225_p1(32 - 1 downto 0);
    in_B_Clk_A <= ap_clk;
    in_B_Din_A <= ap_const_lv32_0;

    -- in_B_EN_A assign process. --
    in_B_EN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            in_B_EN_A <= ap_const_logic_1;
        else 
            in_B_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    in_B_Rst_A <= ap_rst_n_inv;
    in_B_WEN_A <= ap_const_lv4_0;
    k_1_fu_192_p2 <= std_logic_vector(unsigned(k_reg_121) + unsigned(ap_const_lv6_1));
    k_cast1_fu_182_p1 <= std_logic_vector(resize(unsigned(k_reg_121),10));
    out_C_Addr_A <= std_logic_vector(shift_left(unsigned(out_C_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_C_Addr_A_orig <= tmp_3_fu_234_p1(32 - 1 downto 0);
    out_C_Clk_A <= ap_clk;
    out_C_Din_A <= result_reg_108;

    -- out_C_EN_A assign process. --
    out_C_EN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            out_C_EN_A <= ap_const_logic_1;
        else 
            out_C_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_C_Rst_A <= ap_rst_n_inv;

    -- out_C_WEN_A assign process. --
    out_C_WEN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond_fu_186_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_186_p2))))) then 
            out_C_WEN_A <= ap_const_lv4_F;
        else 
            out_C_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    row_1_fu_148_p2 <= std_logic_vector(unsigned(row_reg_86) + unsigned(ap_const_lv6_1));
    tmp_1_fu_154_p1 <= row_reg_86(5 - 1 downto 0);
    tmp_2_fu_230_p2 <= std_logic_vector(unsigned(col_cast2_reg_253) + unsigned(tmp_reg_247));
    tmp_3_fu_234_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_230_p2),64));
    tmp_4_fu_208_p1 <= k_reg_121(5 - 1 downto 0);
    tmp_5_fu_198_p2 <= std_logic_vector(unsigned(k_cast1_fu_182_p1) + unsigned(tmp_reg_247));
    tmp_6_fu_203_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_198_p2),64));
    tmp_7_fu_212_p3 <= (tmp_4_fu_208_p1 & ap_const_lv5_0);
    tmp_8_fu_220_p2 <= std_logic_vector(unsigned(tmp_7_fu_212_p3) + unsigned(col_cast2_reg_253));
    tmp_9_fu_225_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_220_p2),64));
    tmp_fu_158_p3 <= (tmp_1_fu_154_p1 & ap_const_lv5_0);
end behav;
