-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlation_accel_v4_backEnd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NUMBER_OF_DAYS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_DAYS_empty_n : IN STD_LOGIC;
    NUMBER_OF_DAYS_read : OUT STD_LOGIC;
    NUMBER_OF_INDICES_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    NUMBER_OF_INDICES_empty_n : IN STD_LOGIC;
    NUMBER_OF_INDICES_read : OUT STD_LOGIC;
    sum_weight_in_c1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_in_c1_V_empty_n : IN STD_LOGIC;
    sum_weight_in_c1_V_read : OUT STD_LOGIC;
    sum_return_in_c1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_return_in_c1_V_empty_n : IN STD_LOGIC;
    sum_return_in_c1_V_read : OUT STD_LOGIC;
    sum_weight_returnSquare_in_c1_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquare_in_c1_s_empty_n : IN STD_LOGIC;
    sum_weight_returnSquare_in_c1_s_read : OUT STD_LOGIC;
    sum_weight_return_in_c1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_return_in_c1_V_empty_n : IN STD_LOGIC;
    sum_weight_return_in_c1_V_read : OUT STD_LOGIC;
    sum_weight_returnA_returnB_in_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_returnB_in_s_empty_n : IN STD_LOGIC;
    sum_weight_returnA_returnB_in_s_read : OUT STD_LOGIC;
    sum_returnA_in_c1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_returnA_in_c1_V_empty_n : IN STD_LOGIC;
    sum_returnA_in_c1_V_read : OUT STD_LOGIC;
    sum_weight_returnSquareA_in_c1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquareA_in_c1_empty_n : IN STD_LOGIC;
    sum_weight_returnSquareA_in_c1_read : OUT STD_LOGIC;
    sum_weight_returnA_in_c1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_in_c1_V_empty_n : IN STD_LOGIC;
    sum_weight_returnA_in_c1_V_read : OUT STD_LOGIC;
    sum_weight_in_c2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_in_c2_V_empty_n : IN STD_LOGIC;
    sum_weight_in_c2_V_read : OUT STD_LOGIC;
    sum_return_in_c2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_return_in_c2_V_empty_n : IN STD_LOGIC;
    sum_return_in_c2_V_read : OUT STD_LOGIC;
    sum_weight_returnSquare_in_c2_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquare_in_c2_s_empty_n : IN STD_LOGIC;
    sum_weight_returnSquare_in_c2_s_read : OUT STD_LOGIC;
    sum_weight_return_in_c2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_return_in_c2_V_empty_n : IN STD_LOGIC;
    sum_weight_return_in_c2_V_read : OUT STD_LOGIC;
    sum_weight_returnA_returnB_in_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_returnB_in_2_empty_n : IN STD_LOGIC;
    sum_weight_returnA_returnB_in_2_read : OUT STD_LOGIC;
    sum_returnA_in_c2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_returnA_in_c2_V_empty_n : IN STD_LOGIC;
    sum_returnA_in_c2_V_read : OUT STD_LOGIC;
    sum_weight_returnSquareA_in_c2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnSquareA_in_c2_empty_n : IN STD_LOGIC;
    sum_weight_returnSquareA_in_c2_read : OUT STD_LOGIC;
    sum_weight_returnA_in_c2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_weight_returnA_in_c2_V_empty_n : IN STD_LOGIC;
    sum_weight_returnA_in_c2_V_read : OUT STD_LOGIC;
    out_correlation_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_correlation_TVALID : OUT STD_LOGIC;
    out_correlation_TREADY : IN STD_LOGIC;
    out_correlation_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_correlation_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_correlation_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_correlation_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_correlation_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_correlation_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of correlation_accel_v4_backEnd is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (93 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (93 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (93 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (93 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (93 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (93 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (93 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (93 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (93 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (93 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_208 : BOOLEAN;
    signal ap_sig_cseq_ST_st53_fsm_52 : STD_LOGIC;
    signal ap_sig_bdd_215 : BOOLEAN;
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_227 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_234 : BOOLEAN;
    signal ap_sig_cseq_ST_st78_fsm_77 : STD_LOGIC;
    signal ap_sig_bdd_243 : BOOLEAN;
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_258 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal ap_sig_cseq_ST_st58_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_273 : BOOLEAN;
    signal reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_282 : BOOLEAN;
    signal ap_sig_cseq_ST_st59_fsm_58 : STD_LOGIC;
    signal ap_sig_bdd_289 : BOOLEAN;
    signal grp_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal NUMBER_OF_INDICES_read_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_304 : BOOLEAN;
    signal tmp_i_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_54_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_316 : BOOLEAN;
    signal tmp_44_i_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_i_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_327 : BOOLEAN;
    signal tmp_45_i_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_536_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_385 : BOOLEAN;
    signal tmp_84_i_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_i_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal column_index_fu_545_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal column_index_reg_669 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_72_i_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_i_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st54_fsm_53 : STD_LOGIC;
    signal ap_sig_bdd_432 : BOOLEAN;
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal volatilityA_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st74_fsm_73 : STD_LOGIC;
    signal ap_sig_bdd_441 : BOOLEAN;
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal volatilityB_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_i_reg_318 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st94_fsm_93 : STD_LOGIC;
    signal ap_sig_bdd_453 : BOOLEAN;
    signal ap_sig_ioackin_out_correlation_TREADY : STD_LOGIC;
    signal sum_weight2_i_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_return2_i_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquare2_i_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_return2_i_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA_returnB2_i_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_returnA2_i_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnSquareA2_i_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_weight_returnA2_i_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_out_correlation_TREADY : STD_LOGIC := '0';
    signal grp_fu_410_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_514 : BOOLEAN;
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_521 : BOOLEAN;
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_bdd_528 : BOOLEAN;
    signal grp_fu_416_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_542 : BOOLEAN;
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_549 : BOOLEAN;
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_556 : BOOLEAN;
    signal ap_sig_cseq_ST_st75_fsm_74 : STD_LOGIC;
    signal ap_sig_bdd_564 : BOOLEAN;
    signal grp_fu_426_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_578 : BOOLEAN;
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_585 : BOOLEAN;
    signal ap_sig_cseq_ST_st79_fsm_78 : STD_LOGIC;
    signal ap_sig_bdd_592 : BOOLEAN;
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_450_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_604 : BOOLEAN;
    signal grp_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_index_cast_i_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_410_ce : STD_LOGIC;
    signal grp_fu_416_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_416_ce : STD_LOGIC;
    signal grp_fu_421_ce : STD_LOGIC;
    signal grp_fu_426_ce : STD_LOGIC;
    signal grp_fu_431_ce : STD_LOGIC;
    signal grp_fu_438_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_933 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_941 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_949 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_957 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_968 : BOOLEAN;
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_976 : BOOLEAN;
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_987 : BOOLEAN;
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_998 : BOOLEAN;
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_1006 : BOOLEAN;
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_bdd_1016 : BOOLEAN;
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_1024 : BOOLEAN;
    signal ap_sig_cseq_ST_st60_fsm_59 : STD_LOGIC;
    signal ap_sig_bdd_1034 : BOOLEAN;
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_1042 : BOOLEAN;
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_1050 : BOOLEAN;
    signal ap_sig_cseq_ST_st63_fsm_62 : STD_LOGIC;
    signal ap_sig_bdd_1058 : BOOLEAN;
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_1066 : BOOLEAN;
    signal ap_sig_cseq_ST_st65_fsm_64 : STD_LOGIC;
    signal ap_sig_bdd_1074 : BOOLEAN;
    signal ap_sig_cseq_ST_st66_fsm_65 : STD_LOGIC;
    signal ap_sig_bdd_1082 : BOOLEAN;
    signal ap_sig_cseq_ST_st67_fsm_66 : STD_LOGIC;
    signal ap_sig_bdd_1090 : BOOLEAN;
    signal ap_sig_cseq_ST_st68_fsm_67 : STD_LOGIC;
    signal ap_sig_bdd_1098 : BOOLEAN;
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_1106 : BOOLEAN;
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_1114 : BOOLEAN;
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_bdd_1122 : BOOLEAN;
    signal ap_sig_cseq_ST_st72_fsm_71 : STD_LOGIC;
    signal ap_sig_bdd_1130 : BOOLEAN;
    signal ap_sig_cseq_ST_st73_fsm_72 : STD_LOGIC;
    signal ap_sig_bdd_1138 : BOOLEAN;
    signal ap_sig_cseq_ST_st76_fsm_75 : STD_LOGIC;
    signal ap_sig_bdd_1148 : BOOLEAN;
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_1156 : BOOLEAN;
    signal grp_fu_443_ce : STD_LOGIC;
    signal grp_fu_450_ce : STD_LOGIC;
    signal grp_fu_453_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_453_ce : STD_LOGIC;
    signal grp_fu_458_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_458_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (93 downto 0);
    signal ap_sig_bdd_423 : BOOLEAN;

    component correlation_accel_v4_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v4_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v4_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v4_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlation_accel_v4_fsqrt_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    correlation_accel_v4_faddfsub_32ns_32ns_32_5_full_dsp_U98 : component correlation_accel_v4_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_410_p0,
        din1 => grp_fu_410_p1,
        opcode => grp_fu_410_opcode,
        ce => grp_fu_410_ce,
        dout => grp_fu_410_p2);

    correlation_accel_v4_faddfsub_32ns_32ns_32_5_full_dsp_U99 : component correlation_accel_v4_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_416_p0,
        din1 => grp_fu_416_p1,
        opcode => grp_fu_416_opcode,
        ce => grp_fu_416_ce,
        dout => grp_fu_416_p2);

    correlation_accel_v4_fmul_32ns_32ns_32_4_max_dsp_U100 : component correlation_accel_v4_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_421_p0,
        din1 => grp_fu_421_p1,
        ce => grp_fu_421_ce,
        dout => grp_fu_421_p2);

    correlation_accel_v4_fmul_32ns_32ns_32_4_max_dsp_U101 : component correlation_accel_v4_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_426_p0,
        din1 => grp_fu_426_p1,
        ce => grp_fu_426_ce,
        dout => grp_fu_426_p2);

    correlation_accel_v4_fmul_32ns_32ns_32_4_max_dsp_U102 : component correlation_accel_v4_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        ce => grp_fu_431_ce,
        dout => grp_fu_431_p2);

    correlation_accel_v4_fdiv_32ns_32ns_32_16_U103 : component correlation_accel_v4_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_438_p0,
        din1 => grp_fu_438_p1,
        ce => grp_fu_438_ce,
        dout => grp_fu_438_p2);

    correlation_accel_v4_fdiv_32ns_32ns_32_16_U104 : component correlation_accel_v4_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_443_p0,
        din1 => grp_fu_443_p1,
        ce => grp_fu_443_ce,
        dout => grp_fu_443_p2);

    correlation_accel_v4_sitofp_32ns_32_6_U105 : component correlation_accel_v4_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_450_p0,
        ce => grp_fu_450_ce,
        dout => grp_fu_450_p1);

    correlation_accel_v4_fsqrt_32ns_32ns_32_16_U106 : component correlation_accel_v4_fsqrt_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_453_p0,
        din1 => grp_fu_453_p1,
        ce => grp_fu_453_ce,
        dout => grp_fu_453_p2);

    correlation_accel_v4_fsqrt_32ns_32ns_32_16_U107 : component correlation_accel_v4_fsqrt_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_458_p0,
        din1 => grp_fu_458_p1,
        ce => grp_fu_458_ce,
        dout => grp_fu_458_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (tmp_45_i_fu_531_p2 = ap_const_lv1_0) and not(ap_sig_bdd_385))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_out_correlation_TREADY assign process. --
    ap_reg_ioackin_out_correlation_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_out_correlation_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and not(((ap_const_logic_0 = ap_sig_ioackin_out_correlation_TREADY)))))) then 
                    ap_reg_ioackin_out_correlation_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and (ap_const_logic_1 = out_correlation_TREADY)))) then 
                    ap_reg_ioackin_out_correlation_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- column_index_i_reg_318 assign process. --
    column_index_i_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and not(((ap_const_logic_0 = ap_sig_ioackin_out_correlation_TREADY))))) then 
                column_index_i_reg_318 <= column_index_reg_669;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                column_index_i_reg_318 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;

    -- sum_return2_i_reg_339 assign process. --
    sum_return2_i_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_423) then
                if ((ap_const_lv1_0 = tmp_fu_536_p1)) then 
                    sum_return2_i_reg_339 <= sum_return_in_c2_V_dout;
                elsif (not((ap_const_lv1_0 = tmp_fu_536_p1))) then 
                    sum_return2_i_reg_339 <= sum_return_in_c1_V_dout;
                end if;
            end if; 
        end if;
    end process;

    -- sum_returnA2_i_reg_379 assign process. --
    sum_returnA2_i_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_423) then
                if ((ap_const_lv1_0 = tmp_fu_536_p1)) then 
                    sum_returnA2_i_reg_379 <= sum_returnA_in_c2_V_dout;
                elsif (not((ap_const_lv1_0 = tmp_fu_536_p1))) then 
                    sum_returnA2_i_reg_379 <= sum_returnA_in_c1_V_dout;
                end if;
            end if; 
        end if;
    end process;

    -- sum_weight2_i_reg_329 assign process. --
    sum_weight2_i_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_423) then
                if ((ap_const_lv1_0 = tmp_fu_536_p1)) then 
                    sum_weight2_i_reg_329 <= sum_weight_in_c2_V_dout;
                elsif (not((ap_const_lv1_0 = tmp_fu_536_p1))) then 
                    sum_weight2_i_reg_329 <= sum_weight_in_c1_V_dout;
                end if;
            end if; 
        end if;
    end process;

    -- sum_weight_return2_i_reg_359 assign process. --
    sum_weight_return2_i_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_423) then
                if ((ap_const_lv1_0 = tmp_fu_536_p1)) then 
                    sum_weight_return2_i_reg_359 <= sum_weight_return_in_c2_V_dout;
                elsif (not((ap_const_lv1_0 = tmp_fu_536_p1))) then 
                    sum_weight_return2_i_reg_359 <= sum_weight_return_in_c1_V_dout;
                end if;
            end if; 
        end if;
    end process;

    -- sum_weight_returnA2_i_reg_399 assign process. --
    sum_weight_returnA2_i_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_423) then
                if ((ap_const_lv1_0 = tmp_fu_536_p1)) then 
                    sum_weight_returnA2_i_reg_399 <= sum_weight_returnA_in_c2_V_dout;
                elsif (not((ap_const_lv1_0 = tmp_fu_536_p1))) then 
                    sum_weight_returnA2_i_reg_399 <= sum_weight_returnA_in_c1_V_dout;
                end if;
            end if; 
        end if;
    end process;

    -- sum_weight_returnA_returnB2_i_reg_369 assign process. --
    sum_weight_returnA_returnB2_i_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_423) then
                if ((ap_const_lv1_0 = tmp_fu_536_p1)) then 
                    sum_weight_returnA_returnB2_i_reg_369 <= sum_weight_returnA_returnB_in_2_dout;
                elsif (not((ap_const_lv1_0 = tmp_fu_536_p1))) then 
                    sum_weight_returnA_returnB2_i_reg_369 <= sum_weight_returnA_returnB_in_s_dout;
                end if;
            end if; 
        end if;
    end process;

    -- sum_weight_returnSquare2_i_reg_349 assign process. --
    sum_weight_returnSquare2_i_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_423) then
                if ((ap_const_lv1_0 = tmp_fu_536_p1)) then 
                    sum_weight_returnSquare2_i_reg_349 <= sum_weight_returnSquare_in_c2_s_dout;
                elsif (not((ap_const_lv1_0 = tmp_fu_536_p1))) then 
                    sum_weight_returnSquare2_i_reg_349 <= sum_weight_returnSquare_in_c1_s_dout;
                end if;
            end if; 
        end if;
    end process;

    -- sum_weight_returnSquareA2_i_reg_389 assign process. --
    sum_weight_returnSquareA2_i_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_423) then
                if ((ap_const_lv1_0 = tmp_fu_536_p1)) then 
                    sum_weight_returnSquareA2_i_reg_389 <= sum_weight_returnSquareA_in_c2_dout;
                elsif (not((ap_const_lv1_0 = tmp_fu_536_p1))) then 
                    sum_weight_returnSquareA2_i_reg_389 <= sum_weight_returnSquareA_in_c1_dout;
                end if;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_304))) then
                NUMBER_OF_INDICES_read_reg_556 <= NUMBER_OF_INDICES_dout;
                tmp_i_reg_562 <= tmp_i_fu_516_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_385))) then
                column_index_reg_669 <= column_index_fu_545_p2;
                tmp_84_i_reg_664 <= tmp_84_i_fu_540_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52))) then
                reg_463 <= grp_fu_438_p2;
                reg_471 <= grp_fu_443_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77))) then
                reg_480 <= grp_fu_421_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then
                reg_487 <= grp_fu_426_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27))) then
                reg_493 <= grp_fu_431_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57))) then
                reg_498 <= grp_fu_410_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58))) then
                reg_505 <= grp_fu_410_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then
                reg_510 <= grp_fu_416_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_44_i_reg_573 <= tmp_44_i_fu_522_p2;
                tmp_i_54_reg_567 <= grp_fu_450_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then
                tmp_72_i_reg_674 <= grp_fu_421_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then
                tmp_74_i_reg_679 <= grp_fu_438_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73)) then
                volatilityA_reg_684 <= grp_fu_453_p2;
                volatilityB_reg_689 <= grp_fu_458_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_304, tmp_45_i_fu_531_p2, ap_sig_bdd_385, ap_sig_ioackin_out_correlation_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_304)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (((tmp_45_i_fu_531_p2 = ap_const_lv1_0) and not(ap_sig_bdd_385))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_385))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_out_correlation_TREADY)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st94_fsm_93;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- NUMBER_OF_DAYS_read assign process. --
    NUMBER_OF_DAYS_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_304)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_304))) then 
            NUMBER_OF_DAYS_read <= ap_const_logic_1;
        else 
            NUMBER_OF_DAYS_read <= ap_const_logic_0;
        end if; 
    end process;


    -- NUMBER_OF_INDICES_read assign process. --
    NUMBER_OF_INDICES_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_304)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_304))) then 
            NUMBER_OF_INDICES_read <= ap_const_logic_1;
        else 
            NUMBER_OF_INDICES_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (tmp_45_i_fu_531_p2 = ap_const_lv1_0) and not(ap_sig_bdd_385)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (tmp_45_i_fu_531_p2 = ap_const_lv1_0) and not(ap_sig_bdd_385))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1006 assign process. --
    ap_sig_bdd_1006_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1006 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_1016 assign process. --
    ap_sig_bdd_1016_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1016 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    -- ap_sig_bdd_1024 assign process. --
    ap_sig_bdd_1024_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1024 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_1034 assign process. --
    ap_sig_bdd_1034_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1034 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    -- ap_sig_bdd_1042 assign process. --
    ap_sig_bdd_1042_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1042 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_1050 assign process. --
    ap_sig_bdd_1050_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1050 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_1058 assign process. --
    ap_sig_bdd_1058_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1058 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    -- ap_sig_bdd_1066 assign process. --
    ap_sig_bdd_1066_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1066 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_1074 assign process. --
    ap_sig_bdd_1074_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1074 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    -- ap_sig_bdd_1082 assign process. --
    ap_sig_bdd_1082_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1082 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    -- ap_sig_bdd_1090 assign process. --
    ap_sig_bdd_1090_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1090 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    -- ap_sig_bdd_1098 assign process. --
    ap_sig_bdd_1098_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1098 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    -- ap_sig_bdd_1106 assign process. --
    ap_sig_bdd_1106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1106 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_1114 assign process. --
    ap_sig_bdd_1114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1114 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_1122 assign process. --
    ap_sig_bdd_1122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1122 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_1130 assign process. --
    ap_sig_bdd_1130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1130 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    -- ap_sig_bdd_1138 assign process. --
    ap_sig_bdd_1138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1138 <= (ap_const_lv1_1 = ap_CS_fsm(72 downto 72));
    end process;


    -- ap_sig_bdd_1148 assign process. --
    ap_sig_bdd_1148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1148 <= (ap_const_lv1_1 = ap_CS_fsm(75 downto 75));
    end process;


    -- ap_sig_bdd_1156 assign process. --
    ap_sig_bdd_1156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1156 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_208 assign process. --
    ap_sig_bdd_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_208 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_215 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    -- ap_sig_bdd_227 assign process. --
    ap_sig_bdd_227_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_227 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_234 assign process. --
    ap_sig_bdd_234_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_234 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_243 assign process. --
    ap_sig_bdd_243_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_243 <= (ap_const_lv1_1 = ap_CS_fsm(77 downto 77));
    end process;


    -- ap_sig_bdd_258 assign process. --
    ap_sig_bdd_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_258 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_273 assign process. --
    ap_sig_bdd_273_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_273 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_282 assign process. --
    ap_sig_bdd_282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_282 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_289 assign process. --
    ap_sig_bdd_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_289 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    -- ap_sig_bdd_304 assign process. --
    ap_sig_bdd_304_assign_proc : process(ap_start, ap_done_reg, NUMBER_OF_DAYS_empty_n, NUMBER_OF_INDICES_empty_n)
    begin
                ap_sig_bdd_304 <= ((NUMBER_OF_INDICES_empty_n = ap_const_logic_0) or (NUMBER_OF_DAYS_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_316 assign process. --
    ap_sig_bdd_316_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_316 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_327 assign process. --
    ap_sig_bdd_327_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_327 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_385 assign process. --
    ap_sig_bdd_385_assign_proc : process(sum_weight_in_c1_V_empty_n, sum_return_in_c1_V_empty_n, sum_weight_returnSquare_in_c1_s_empty_n, sum_weight_return_in_c1_V_empty_n, sum_weight_returnA_returnB_in_s_empty_n, sum_returnA_in_c1_V_empty_n, sum_weight_returnSquareA_in_c1_empty_n, sum_weight_returnA_in_c1_V_empty_n, sum_weight_in_c2_V_empty_n, sum_return_in_c2_V_empty_n, sum_weight_returnSquare_in_c2_s_empty_n, sum_weight_return_in_c2_V_empty_n, sum_weight_returnA_returnB_in_2_empty_n, sum_returnA_in_c2_V_empty_n, sum_weight_returnSquareA_in_c2_empty_n, sum_weight_returnA_in_c2_V_empty_n, tmp_45_i_fu_531_p2, tmp_fu_536_p1)
    begin
                ap_sig_bdd_385 <= (((sum_weight_in_c2_V_empty_n = ap_const_logic_0) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and (sum_return_in_c2_V_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and (sum_weight_returnSquare_in_c2_s_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and (sum_weight_return_in_c2_V_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and (sum_weight_returnA_returnB_in_2_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and (sum_returnA_in_c2_V_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and (sum_weight_returnSquareA_in_c2_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and (sum_weight_returnA_in_c2_V_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (sum_weight_in_c1_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_fu_536_p1))) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and (sum_return_in_c1_V_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and (sum_weight_returnSquare_in_c1_s_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and (sum_weight_return_in_c1_V_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and (sum_weight_returnA_returnB_in_s_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and (sum_returnA_in_c1_V_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and (sum_weight_returnSquareA_in_c1_empty_n = ap_const_logic_0)) or (not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and (sum_weight_returnA_in_c1_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_423 assign process. --
    ap_sig_bdd_423_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, ap_sig_bdd_385)
    begin
                ap_sig_bdd_423 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_385));
    end process;


    -- ap_sig_bdd_432 assign process. --
    ap_sig_bdd_432_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_432 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    -- ap_sig_bdd_441 assign process. --
    ap_sig_bdd_441_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_441 <= (ap_const_lv1_1 = ap_CS_fsm(73 downto 73));
    end process;


    -- ap_sig_bdd_453 assign process. --
    ap_sig_bdd_453_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_453 <= (ap_const_lv1_1 = ap_CS_fsm(93 downto 93));
    end process;


    -- ap_sig_bdd_514 assign process. --
    ap_sig_bdd_514_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_514 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_521 assign process. --
    ap_sig_bdd_521_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_521 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_528 assign process. --
    ap_sig_bdd_528_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_528 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    -- ap_sig_bdd_542 assign process. --
    ap_sig_bdd_542_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_542 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_549 assign process. --
    ap_sig_bdd_549_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_549 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_556 assign process. --
    ap_sig_bdd_556_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_556 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_564 assign process. --
    ap_sig_bdd_564_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_564 <= (ap_const_lv1_1 = ap_CS_fsm(74 downto 74));
    end process;


    -- ap_sig_bdd_578 assign process. --
    ap_sig_bdd_578_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_578 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_585 assign process. --
    ap_sig_bdd_585_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_585 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_592 assign process. --
    ap_sig_bdd_592_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_592 <= (ap_const_lv1_1 = ap_CS_fsm(78 downto 78));
    end process;


    -- ap_sig_bdd_604 assign process. --
    ap_sig_bdd_604_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_604 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_933 assign process. --
    ap_sig_bdd_933_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_933 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_941 assign process. --
    ap_sig_bdd_941_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_941 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_949 assign process. --
    ap_sig_bdd_949_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_949 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_957 assign process. --
    ap_sig_bdd_957_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_957 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_968 assign process. --
    ap_sig_bdd_968_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_968 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_976 assign process. --
    ap_sig_bdd_976_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_976 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_987 assign process. --
    ap_sig_bdd_987_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_987 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_998 assign process. --
    ap_sig_bdd_998_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_998 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_208)
    begin
        if (ap_sig_bdd_208) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_542)
    begin
        if (ap_sig_bdd_542) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_968)
    begin
        if (ap_sig_bdd_968) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_976)
    begin
        if (ap_sig_bdd_976) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_227)
    begin
        if (ap_sig_bdd_227) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_514)
    begin
        if (ap_sig_bdd_514) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_604)
    begin
        if (ap_sig_bdd_604) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_549)
    begin
        if (ap_sig_bdd_549) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_987)
    begin
        if (ap_sig_bdd_987) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_234)
    begin
        if (ap_sig_bdd_234) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_258)
    begin
        if (ap_sig_bdd_258) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_521)
    begin
        if (ap_sig_bdd_521) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_998)
    begin
        if (ap_sig_bdd_998) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_1006)
    begin
        if (ap_sig_bdd_1006) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_282)
    begin
        if (ap_sig_bdd_282) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_585)
    begin
        if (ap_sig_bdd_585) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_933)
    begin
        if (ap_sig_bdd_933) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_941)
    begin
        if (ap_sig_bdd_941) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_556)
    begin
        if (ap_sig_bdd_556) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st53_fsm_52 assign process. --
    ap_sig_cseq_ST_st53_fsm_52_assign_proc : process(ap_sig_bdd_215)
    begin
        if (ap_sig_bdd_215) then 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st54_fsm_53 assign process. --
    ap_sig_cseq_ST_st54_fsm_53_assign_proc : process(ap_sig_bdd_432)
    begin
        if (ap_sig_bdd_432) then 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st55_fsm_54 assign process. --
    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_bdd_528)
    begin
        if (ap_sig_bdd_528) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st56_fsm_55 assign process. --
    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_bdd_1016)
    begin
        if (ap_sig_bdd_1016) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st57_fsm_56 assign process. --
    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_bdd_1024)
    begin
        if (ap_sig_bdd_1024) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st58_fsm_57 assign process. --
    ap_sig_cseq_ST_st58_fsm_57_assign_proc : process(ap_sig_bdd_273)
    begin
        if (ap_sig_bdd_273) then 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st59_fsm_58 assign process. --
    ap_sig_cseq_ST_st59_fsm_58_assign_proc : process(ap_sig_bdd_289)
    begin
        if (ap_sig_bdd_289) then 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_949)
    begin
        if (ap_sig_bdd_949) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st60_fsm_59 assign process. --
    ap_sig_cseq_ST_st60_fsm_59_assign_proc : process(ap_sig_bdd_1034)
    begin
        if (ap_sig_bdd_1034) then 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st61_fsm_60 assign process. --
    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_bdd_1042)
    begin
        if (ap_sig_bdd_1042) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st62_fsm_61 assign process. --
    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_bdd_1050)
    begin
        if (ap_sig_bdd_1050) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st63_fsm_62 assign process. --
    ap_sig_cseq_ST_st63_fsm_62_assign_proc : process(ap_sig_bdd_1058)
    begin
        if (ap_sig_bdd_1058) then 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st64_fsm_63 assign process. --
    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_bdd_1066)
    begin
        if (ap_sig_bdd_1066) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st65_fsm_64 assign process. --
    ap_sig_cseq_ST_st65_fsm_64_assign_proc : process(ap_sig_bdd_1074)
    begin
        if (ap_sig_bdd_1074) then 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st66_fsm_65 assign process. --
    ap_sig_cseq_ST_st66_fsm_65_assign_proc : process(ap_sig_bdd_1082)
    begin
        if (ap_sig_bdd_1082) then 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st67_fsm_66 assign process. --
    ap_sig_cseq_ST_st67_fsm_66_assign_proc : process(ap_sig_bdd_1090)
    begin
        if (ap_sig_bdd_1090) then 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st68_fsm_67 assign process. --
    ap_sig_cseq_ST_st68_fsm_67_assign_proc : process(ap_sig_bdd_1098)
    begin
        if (ap_sig_bdd_1098) then 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_68 assign process. --
    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_bdd_1106)
    begin
        if (ap_sig_bdd_1106) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_957)
    begin
        if (ap_sig_bdd_957) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st70_fsm_69 assign process. --
    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_bdd_1114)
    begin
        if (ap_sig_bdd_1114) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st71_fsm_70 assign process. --
    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_bdd_1122)
    begin
        if (ap_sig_bdd_1122) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st72_fsm_71 assign process. --
    ap_sig_cseq_ST_st72_fsm_71_assign_proc : process(ap_sig_bdd_1130)
    begin
        if (ap_sig_bdd_1130) then 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st73_fsm_72 assign process. --
    ap_sig_cseq_ST_st73_fsm_72_assign_proc : process(ap_sig_bdd_1138)
    begin
        if (ap_sig_bdd_1138) then 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st73_fsm_72 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st74_fsm_73 assign process. --
    ap_sig_cseq_ST_st74_fsm_73_assign_proc : process(ap_sig_bdd_441)
    begin
        if (ap_sig_bdd_441) then 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st75_fsm_74 assign process. --
    ap_sig_cseq_ST_st75_fsm_74_assign_proc : process(ap_sig_bdd_564)
    begin
        if (ap_sig_bdd_564) then 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st76_fsm_75 assign process. --
    ap_sig_cseq_ST_st76_fsm_75_assign_proc : process(ap_sig_bdd_1148)
    begin
        if (ap_sig_bdd_1148) then 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st77_fsm_76 assign process. --
    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_bdd_1156)
    begin
        if (ap_sig_bdd_1156) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st78_fsm_77 assign process. --
    ap_sig_cseq_ST_st78_fsm_77_assign_proc : process(ap_sig_bdd_243)
    begin
        if (ap_sig_bdd_243) then 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st79_fsm_78 assign process. --
    ap_sig_cseq_ST_st79_fsm_78_assign_proc : process(ap_sig_bdd_592)
    begin
        if (ap_sig_bdd_592) then 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_316)
    begin
        if (ap_sig_bdd_316) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_327)
    begin
        if (ap_sig_bdd_327) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st94_fsm_93 assign process. --
    ap_sig_cseq_ST_st94_fsm_93_assign_proc : process(ap_sig_bdd_453)
    begin
        if (ap_sig_bdd_453) then 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_578)
    begin
        if (ap_sig_bdd_578) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_out_correlation_TREADY assign process. --
    ap_sig_ioackin_out_correlation_TREADY_assign_proc : process(out_correlation_TREADY, ap_reg_ioackin_out_correlation_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_correlation_TREADY)) then 
            ap_sig_ioackin_out_correlation_TREADY <= out_correlation_TREADY;
        else 
            ap_sig_ioackin_out_correlation_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    column_index_cast_i_fu_527_p1 <= std_logic_vector(resize(unsigned(column_index_i_reg_318),32));
    column_index_fu_545_p2 <= std_logic_vector(unsigned(column_index_i_reg_318) + unsigned(ap_const_lv31_1));
    grp_fu_410_ce <= ap_const_logic_1;

    -- grp_fu_410_opcode assign process. --
    grp_fu_410_opcode_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st54_fsm_53, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st55_fsm_54)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            grp_fu_410_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then 
            grp_fu_410_opcode <= ap_const_lv2_0;
        else 
            grp_fu_410_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_410_p0 assign process. --
    grp_fu_410_p0_assign_proc : process(reg_463, reg_498, ap_sig_cseq_ST_st33_fsm_32, tmp_74_i_reg_679, ap_sig_cseq_ST_st54_fsm_53, sum_weight_returnA_returnB2_i_reg_369, sum_weight_returnSquareA2_i_reg_389, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st55_fsm_54)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
            grp_fu_410_p0 <= tmp_74_i_reg_679;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
            grp_fu_410_p0 <= reg_463;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_410_p0 <= reg_498;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_410_p0 <= sum_weight_returnSquareA2_i_reg_389;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_410_p0 <= sum_weight_returnA_returnB2_i_reg_369;
        else 
            grp_fu_410_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_410_p1 assign process. --
    grp_fu_410_p1_assign_proc : process(reg_480, reg_493, ap_sig_cseq_ST_st33_fsm_32, tmp_72_i_reg_674, ap_sig_cseq_ST_st54_fsm_53, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st55_fsm_54)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_410_p1 <= tmp_72_i_reg_674;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53))) then 
            grp_fu_410_p1 <= reg_480;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then 
            grp_fu_410_p1 <= reg_493;
        else 
            grp_fu_410_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_416_ce <= ap_const_logic_1;

    -- grp_fu_416_opcode assign process. --
    grp_fu_416_opcode_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st54_fsm_53)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_416_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
            grp_fu_416_opcode <= ap_const_lv2_0;
        else 
            grp_fu_416_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_416_p0 assign process. --
    grp_fu_416_p0_assign_proc : process(reg_471, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st54_fsm_53, sum_weight_returnSquare2_i_reg_349)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
            grp_fu_416_p0 <= reg_471;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_416_p0 <= sum_weight_returnSquare2_i_reg_349;
        else 
            grp_fu_416_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_416_p1 <= reg_487;
    grp_fu_421_ce <= ap_const_logic_1;

    -- grp_fu_421_p0 assign process. --
    grp_fu_421_p0_assign_proc : process(reg_463, reg_471, reg_480, volatilityA_reg_684, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74)) then 
            grp_fu_421_p0 <= volatilityA_reg_684;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            grp_fu_421_p0 <= reg_471;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_421_p0 <= reg_480;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49))) then 
            grp_fu_421_p0 <= reg_463;
        else 
            grp_fu_421_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_421_p1 assign process. --
    grp_fu_421_p1_assign_proc : process(reg_463, volatilityB_reg_689, sum_weight_returnA2_i_reg_399, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74)) then 
            grp_fu_421_p1 <= volatilityB_reg_689;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_421_p1 <= reg_463;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            grp_fu_421_p1 <= sum_weight_returnA2_i_reg_399;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_421_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_421_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_426_ce <= ap_const_logic_1;

    -- grp_fu_426_p0 assign process. --
    grp_fu_426_p0_assign_proc : process(reg_471, reg_487, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_426_p0 <= reg_487;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49))) then 
            grp_fu_426_p0 <= reg_471;
        else 
            grp_fu_426_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_426_p1 assign process. --
    grp_fu_426_p1_assign_proc : process(reg_471, sum_weight_return2_i_reg_359, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_426_p1 <= reg_471;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            grp_fu_426_p1 <= sum_weight_return2_i_reg_359;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_426_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_426_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_431_ce <= ap_const_logic_1;
    grp_fu_431_p0 <= reg_463;

    -- grp_fu_431_p1 assign process. --
    grp_fu_431_p1_assign_proc : process(reg_471, sum_weight_return2_i_reg_359, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_431_p1 <= reg_471;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_431_p1 <= sum_weight_return2_i_reg_359;
        else 
            grp_fu_431_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_438_ce assign process. --
    grp_fu_438_ce_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st28_fsm_27, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st78_fsm_77, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st58_fsm_57, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st59_fsm_58, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st74_fsm_73, ap_sig_cseq_ST_st94_fsm_93, ap_sig_ioackin_out_correlation_TREADY, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st55_fsm_54, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st75_fsm_74, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st36_fsm_35, ap_sig_cseq_ST_st56_fsm_55, ap_sig_cseq_ST_st57_fsm_56, ap_sig_cseq_ST_st60_fsm_59, ap_sig_cseq_ST_st61_fsm_60, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st63_fsm_62, ap_sig_cseq_ST_st64_fsm_63, ap_sig_cseq_ST_st65_fsm_64, ap_sig_cseq_ST_st66_fsm_65, ap_sig_cseq_ST_st67_fsm_66, ap_sig_cseq_ST_st68_fsm_67, ap_sig_cseq_ST_st69_fsm_68, ap_sig_cseq_ST_st70_fsm_69, ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st72_fsm_71, ap_sig_cseq_ST_st73_fsm_72, ap_sig_cseq_ST_st76_fsm_75, ap_sig_cseq_ST_st77_fsm_76)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77) or (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st58_fsm_57) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and ((ap_const_logic_0 = ap_sig_ioackin_out_correlation_TREADY))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) or (ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56) or (ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) or (ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63) or (ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65) or (ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66) or (ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67) or (ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) or (ap_const_logic_1 = ap_sig_cseq_ST_st73_fsm_72) or (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75) or (ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76))) then 
            grp_fu_438_ce <= ap_const_logic_0;
        else 
            grp_fu_438_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fu_438_p0 assign process. --
    grp_fu_438_p0_assign_proc : process(reg_498, ap_sig_cseq_ST_st38_fsm_37, reg_505, sum_returnA2_i_reg_379, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st79_fsm_78)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            grp_fu_438_p0 <= reg_498;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78))) then 
            grp_fu_438_p0 <= reg_505;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_438_p0 <= sum_returnA2_i_reg_379;
        else 
            grp_fu_438_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_438_p1 assign process. --
    grp_fu_438_p1_assign_proc : process(reg_480, ap_sig_cseq_ST_st38_fsm_37, tmp_i_54_reg_567, sum_weight2_i_reg_329, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st79_fsm_78)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st79_fsm_78)) then 
            grp_fu_438_p1 <= reg_480;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            grp_fu_438_p1 <= sum_weight2_i_reg_329;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_438_p1 <= tmp_i_54_reg_567;
        else 
            grp_fu_438_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_443_ce <= ap_const_logic_1;

    -- grp_fu_443_p0 assign process. --
    grp_fu_443_p0_assign_proc : process(ap_sig_cseq_ST_st38_fsm_37, reg_510, sum_return2_i_reg_339, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            grp_fu_443_p0 <= reg_510;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_443_p0 <= sum_return2_i_reg_339;
        else 
            grp_fu_443_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_443_p1 assign process. --
    grp_fu_443_p1_assign_proc : process(ap_sig_cseq_ST_st38_fsm_37, tmp_i_54_reg_567, sum_weight2_i_reg_329, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            grp_fu_443_p1 <= sum_weight2_i_reg_329;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_443_p1 <= tmp_i_54_reg_567;
        else 
            grp_fu_443_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_450_ce <= ap_const_logic_1;
    grp_fu_450_p0 <= tmp_i_reg_562;
    grp_fu_453_ce <= ap_const_logic_1;
    grp_fu_453_p0 <= ap_const_lv32_0;
    grp_fu_453_p1 <= reg_498;
    grp_fu_458_ce <= ap_const_logic_1;
    grp_fu_458_p0 <= ap_const_lv32_0;
    grp_fu_458_p1 <= reg_510;
    out_correlation_TDATA <= grp_fu_438_p2;
    out_correlation_TDEST <= ap_const_lv1_0;
    out_correlation_TID <= ap_const_lv1_0;
    out_correlation_TKEEP <= ap_const_lv4_F;
    out_correlation_TLAST <= tmp_84_i_reg_664;
    out_correlation_TSTRB <= ap_const_lv4_1;
    out_correlation_TUSER <= ap_const_lv1_0;

    -- out_correlation_TVALID assign process. --
    out_correlation_TVALID_assign_proc : process(ap_sig_cseq_ST_st94_fsm_93, ap_reg_ioackin_out_correlation_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93) and (ap_const_logic_0 = ap_reg_ioackin_out_correlation_TREADY)))) then 
            out_correlation_TVALID <= ap_const_logic_1;
        else 
            out_correlation_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_returnA_in_c1_V_read assign process. --
    sum_returnA_in_c1_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and not(ap_sig_bdd_385))) then 
            sum_returnA_in_c1_V_read <= ap_const_logic_1;
        else 
            sum_returnA_in_c1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_returnA_in_c2_V_read assign process. --
    sum_returnA_in_c2_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and not(ap_sig_bdd_385))) then 
            sum_returnA_in_c2_V_read <= ap_const_logic_1;
        else 
            sum_returnA_in_c2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_return_in_c1_V_read assign process. --
    sum_return_in_c1_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and not(ap_sig_bdd_385))) then 
            sum_return_in_c1_V_read <= ap_const_logic_1;
        else 
            sum_return_in_c1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_return_in_c2_V_read assign process. --
    sum_return_in_c2_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and not(ap_sig_bdd_385))) then 
            sum_return_in_c2_V_read <= ap_const_logic_1;
        else 
            sum_return_in_c2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_in_c1_V_read assign process. --
    sum_weight_in_c1_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and not(ap_sig_bdd_385))) then 
            sum_weight_in_c1_V_read <= ap_const_logic_1;
        else 
            sum_weight_in_c1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_in_c2_V_read assign process. --
    sum_weight_in_c2_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and not(ap_sig_bdd_385))) then 
            sum_weight_in_c2_V_read <= ap_const_logic_1;
        else 
            sum_weight_in_c2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnA_in_c1_V_read assign process. --
    sum_weight_returnA_in_c1_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and not(ap_sig_bdd_385))) then 
            sum_weight_returnA_in_c1_V_read <= ap_const_logic_1;
        else 
            sum_weight_returnA_in_c1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnA_in_c2_V_read assign process. --
    sum_weight_returnA_in_c2_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and not(ap_sig_bdd_385))) then 
            sum_weight_returnA_in_c2_V_read <= ap_const_logic_1;
        else 
            sum_weight_returnA_in_c2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnA_returnB_in_2_read assign process. --
    sum_weight_returnA_returnB_in_2_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and not(ap_sig_bdd_385))) then 
            sum_weight_returnA_returnB_in_2_read <= ap_const_logic_1;
        else 
            sum_weight_returnA_returnB_in_2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnA_returnB_in_s_read assign process. --
    sum_weight_returnA_returnB_in_s_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and not(ap_sig_bdd_385))) then 
            sum_weight_returnA_returnB_in_s_read <= ap_const_logic_1;
        else 
            sum_weight_returnA_returnB_in_s_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnSquareA_in_c1_read assign process. --
    sum_weight_returnSquareA_in_c1_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and not(ap_sig_bdd_385))) then 
            sum_weight_returnSquareA_in_c1_read <= ap_const_logic_1;
        else 
            sum_weight_returnSquareA_in_c1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnSquareA_in_c2_read assign process. --
    sum_weight_returnSquareA_in_c2_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and not(ap_sig_bdd_385))) then 
            sum_weight_returnSquareA_in_c2_read <= ap_const_logic_1;
        else 
            sum_weight_returnSquareA_in_c2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnSquare_in_c1_s_read assign process. --
    sum_weight_returnSquare_in_c1_s_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and not(ap_sig_bdd_385))) then 
            sum_weight_returnSquare_in_c1_s_read <= ap_const_logic_1;
        else 
            sum_weight_returnSquare_in_c1_s_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_returnSquare_in_c2_s_read assign process. --
    sum_weight_returnSquare_in_c2_s_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and not(ap_sig_bdd_385))) then 
            sum_weight_returnSquare_in_c2_s_read <= ap_const_logic_1;
        else 
            sum_weight_returnSquare_in_c2_s_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_return_in_c1_V_read assign process. --
    sum_weight_return_in_c1_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_536_p1)) and not(ap_sig_bdd_385))) then 
            sum_weight_return_in_c1_V_read <= ap_const_logic_1;
        else 
            sum_weight_return_in_c1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_weight_return_in_c2_V_read assign process. --
    sum_weight_return_in_c2_V_read_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_45_i_fu_531_p2, tmp_fu_536_p1, ap_sig_bdd_385)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((tmp_45_i_fu_531_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_536_p1) and not(ap_sig_bdd_385))) then 
            sum_weight_return_in_c2_V_read <= ap_const_logic_1;
        else 
            sum_weight_return_in_c2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_44_i_fu_522_p2 <= std_logic_vector(unsigned(NUMBER_OF_INDICES_read_reg_556) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_45_i_fu_531_p2 <= "1" when (signed(column_index_cast_i_fu_527_p1) < signed(NUMBER_OF_INDICES_read_reg_556)) else "0";
    tmp_84_i_fu_540_p2 <= "1" when (column_index_cast_i_fu_527_p1 = tmp_44_i_reg_573) else "0";
    tmp_fu_536_p1 <= column_index_i_reg_318(1 - 1 downto 0);
    tmp_i_fu_516_p2 <= std_logic_vector(unsigned(NUMBER_OF_DAYS_dout) + unsigned(ap_const_lv32_FFFFFFFF));
end behav;
