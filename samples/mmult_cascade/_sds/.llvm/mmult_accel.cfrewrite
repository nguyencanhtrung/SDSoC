void _p0_mmult_accel_0(float in_A[256], float in_B[256], float out_C[256]);
void _p0_mmult_accel_0(float in_A[256], float in_B[256], float out_C[256])
{
  switch_to_next_partition(0);
  int start_seq[3];
  start_seq[0] = 0x00000000;
  start_seq[1] = 0x00010000;
  start_seq[2] = 0x00020000;
  cf_request_handle_t _p0_swinst_mmult_accel_0_cmd;
  cf_send_i(&(_p0_swinst_mmult_accel_0.cmd_mmult_accel), start_seq, 3*sizeof(int), &_p0_swinst_mmult_accel_0_cmd);
  cf_wait(_p0_swinst_mmult_accel_0_cmd);

  cf_send_i(&(_p0_swinst_mmult_accel_0.in_B), in_B, 256 * 4, &_p0_request_0);

  cf_receive_i(&(_p0_swinst_mmult_accel_0.out_C), out_C, 256 * 4, &_p0_mmult_accel_0_num_out_C, &_p0_request_1);

  cf_wait(_p0_request_0);
  cf_wait(_p0_request_1);
  cf_wait(_p0_request_2);
  cf_wait(_p0_request_3);
}
void _p0_mmult_accel_1(float in_A[256], float in_B[256], float out_C[256]);
void _p0_mmult_accel_1(float in_A[256], float in_B[256], float out_C[256])
{
  switch_to_next_partition(0);
  int start_seq[3];
  start_seq[0] = 0x00000000;
  start_seq[1] = 0x00010000;
  start_seq[2] = 0x00020000;
  cf_request_handle_t _p0_swinst_mmult_accel_1_cmd;
  cf_send_i(&(_p0_swinst_mmult_accel_1.cmd_mmult_accel), start_seq, 3*sizeof(int), &_p0_swinst_mmult_accel_1_cmd);
  cf_wait(_p0_swinst_mmult_accel_1_cmd);

  cf_send_i(&(_p0_swinst_mmult_accel_1.in_A), in_A, 256 * 4, &_p0_request_2);
  cf_send_i(&(_p0_swinst_mmult_accel_1.in_B), in_B, 256 * 4, &_p0_request_3);


}

