-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sharpen_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_r_empty_n : IN STD_LOGIC;
    input_r_read : OUT STD_LOGIC;
    output_r_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_full_n : IN STD_LOGIC;
    output_r_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sharpen_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sharpen_filter,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.950001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.046250,HLS_SYN_LAT=2076609,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=297,HLS_SYN_LUT=306}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st10_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv21_1FAFB9 : STD_LOGIC_VECTOR (20 downto 0) := "111111010111110111001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_781 : STD_LOGIC_VECTOR (10 downto 0) := "11110000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal indvar_flatten_reg_167 : STD_LOGIC_VECTOR (20 downto 0);
    signal row_reg_178 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_assign_reg_189 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_479 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_54 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_7_reg_528_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_72 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal or_cond_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_532_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_88 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_228_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal col_assign_mid2_fu_240_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_assign_mid2_reg_488 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it3 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_mid2_fu_254_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_mid2_reg_498 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_505_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_505_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_505_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_512 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_512_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal buff_A_1_addr_reg_517 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_buff_A_1_addr_reg_517_pp0_it2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_7_reg_528_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_532_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_532_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_532_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_reg_532_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_299_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_1_load_reg_541 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal return_value_reg_546 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_0_load_reg_552 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_buff_C_1_0_load_reg_552_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_557 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_1_load_reg_563 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_buff_C_1_1_load_reg_563_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_2_fu_318_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_2_reg_569 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_buff_C_1_2_reg_569_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_buff_C_1_2_reg_569_pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_2_1_load_reg_579 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_weight_2_1_1_i_fu_399_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_weight_2_1_1_i_reg_584 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_594 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_reg_599 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_0_ce0 : STD_LOGIC;
    signal buff_A_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_0_ce1 : STD_LOGIC;
    signal buff_A_0_we1 : STD_LOGIC;
    signal buff_A_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_1_ce0 : STD_LOGIC;
    signal buff_A_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_1_ce1 : STD_LOGIC;
    signal buff_A_1_we1 : STD_LOGIC;
    signal buff_A_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_2_ce0 : STD_LOGIC;
    signal buff_A_2_we0 : STD_LOGIC;
    signal buff_A_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_2_ce1 : STD_LOGIC;
    signal buff_A_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_phi_fu_182_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_assign_phi_fu_193_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buff_C_2_1_fu_70 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_2_2_1_fu_351_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_0_1_fu_74 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_0_2_1_fu_344_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_0_fu_78 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_1_1_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_s_fu_248_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_1_i_cast_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_0_1_i_cast_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_i_fu_365_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i_fu_378_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_cast_fu_385_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_1_1_i_cast2_fu_375_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_1_1_i_fu_389_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_1_1_i_cast_fu_395_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_i_cast_fu_371_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_1_2_i_cast_fu_415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_weight_2_1_2_i_fu_418_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_2_1_i_cast_fu_423_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_weight_2_2_1_i_fu_426_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_444 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_164 : BOOLEAN;
    signal ap_sig_bdd_251 : BOOLEAN;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal ap_sig_bdd_267 : BOOLEAN;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal ap_sig_bdd_260 : BOOLEAN;
    signal ap_sig_bdd_255 : BOOLEAN;

    component sharpen_filter_buff_A_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sharpen_filter_buff_A_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buff_A_0_U : component sharpen_filter_buff_A_0
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_A_0_address0,
        ce0 => buff_A_0_ce0,
        q0 => buff_A_0_q0,
        address1 => buff_A_0_address1,
        ce1 => buff_A_0_ce1,
        we1 => buff_A_0_we1,
        d1 => buff_A_0_d1);

    buff_A_1_U : component sharpen_filter_buff_A_0
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_A_1_address0,
        ce0 => buff_A_1_ce0,
        q0 => buff_A_1_q0,
        address1 => buff_A_1_address1,
        ce1 => buff_A_1_ce1,
        we1 => buff_A_1_we1,
        d1 => buff_A_1_d1);

    buff_A_2_U : component sharpen_filter_buff_A_2
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_A_2_address0,
        ce0 => buff_A_2_ce0,
        we0 => buff_A_2_we0,
        d0 => buff_A_2_d0,
        address1 => buff_A_2_address1,
        ce1 => buff_A_2_ce1,
        q1 => buff_A_2_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((exitcond_flatten_fu_222_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then
                    if (not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
                        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
                        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it3 assign process. --
    ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_160) then
                if (ap_sig_bdd_251) then 
                    ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it3 <= ap_const_lv8_0;
                elsif (ap_sig_bdd_164) then 
                    ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it3 <= buff_A_0_q0;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it3 <= ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it2;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it2 assign process. --
    ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_156) then
                if (ap_sig_bdd_267) then 
                    ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it2 <= ap_const_lv8_0;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it2 <= ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it1;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it5 assign process. --
    ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_255) then
                if (ap_sig_bdd_260) then 
                    ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it5 <= y_reg_557;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it5 <= ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it4;
                end if;
            end if; 
        end if;
    end process;

    -- col_assign_reg_189 assign process. --
    col_assign_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_flatten_reg_479 = ap_const_lv1_0))) then 
                col_assign_reg_189 <= col_fu_299_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                col_assign_reg_189 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_167 assign process. --
    indvar_flatten_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_flatten_fu_222_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_167 <= indvar_flatten_next_fu_228_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_167 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    -- row_reg_178 assign process. --
    row_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_flatten_reg_479 = ap_const_lv1_0))) then 
                row_reg_178 <= row_mid2_reg_498;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                row_reg_178 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it3 <= ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it4 <= ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it3;
                buff_C_1_0_fu_78 <= buff_C_1_1_fu_82;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then
                ap_reg_ppstg_buff_A_1_addr_reg_517_pp0_it2 <= buff_A_1_addr_reg_517;
                ap_reg_ppstg_buff_C_1_0_load_reg_552_pp0_it4 <= buff_C_1_0_load_reg_552;
                ap_reg_ppstg_buff_C_1_1_load_reg_563_pp0_it4 <= buff_C_1_1_load_reg_563;
                ap_reg_ppstg_buff_C_1_2_reg_569_pp0_it4 <= buff_C_1_2_reg_569;
                ap_reg_ppstg_buff_C_1_2_reg_569_pp0_it5 <= ap_reg_ppstg_buff_C_1_2_reg_569_pp0_it4;
                ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it2 <= ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it1;
                ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it3 <= ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2;
                ap_reg_ppstg_or_cond_reg_532_pp0_it2 <= or_cond_reg_532;
                ap_reg_ppstg_or_cond_reg_532_pp0_it3 <= ap_reg_ppstg_or_cond_reg_532_pp0_it2;
                ap_reg_ppstg_or_cond_reg_532_pp0_it4 <= ap_reg_ppstg_or_cond_reg_532_pp0_it3;
                ap_reg_ppstg_or_cond_reg_532_pp0_it5 <= ap_reg_ppstg_or_cond_reg_532_pp0_it4;
                ap_reg_ppstg_or_cond_reg_532_pp0_it6 <= ap_reg_ppstg_or_cond_reg_532_pp0_it5;
                ap_reg_ppstg_tmp_2_reg_505_pp0_it2 <= tmp_2_reg_505;
                ap_reg_ppstg_tmp_2_reg_505_pp0_it3 <= ap_reg_ppstg_tmp_2_reg_505_pp0_it2;
                ap_reg_ppstg_tmp_2_reg_505_pp0_it4 <= ap_reg_ppstg_tmp_2_reg_505_pp0_it3;
                    ap_reg_ppstg_tmp_3_reg_512_pp0_it2(10 downto 0) <= tmp_3_reg_512(10 downto 0);
                ap_reg_ppstg_tmp_7_reg_528_pp0_it2 <= tmp_7_reg_528;
                ap_reg_ppstg_tmp_7_reg_528_pp0_it3 <= ap_reg_ppstg_tmp_7_reg_528_pp0_it2;
                buff_C_1_0_load_reg_552 <= buff_C_1_0_fu_78;
                buff_C_2_1_load_reg_579 <= buff_C_2_1_fu_70;
                tmp_2_i_reg_599 <= tmp_2_i_fu_442_p2;
                tmp_8_reg_594 <= tmp_8_fu_438_p1;
                tmp_i_reg_589 <= tmp_i_fu_432_p2;
                x_weight_2_1_1_i_reg_584 <= x_weight_2_1_1_i_fu_399_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it1 <= col_assign_mid2_reg_488;
                ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it1 <= exitcond_flatten_reg_479;
                exitcond_flatten_reg_479 <= exitcond_flatten_fu_222_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_flatten_reg_479 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_2_fu_272_p2)))) then
                buff_A_1_addr_reg_517 <= tmp_3_fu_277_p1(11 - 1 downto 0);
                    tmp_3_reg_512(10 downto 0) <= tmp_3_fu_277_p1(10 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it1) and not((ap_const_lv1_0 = tmp_2_reg_505)))) then
                buff_A_1_load_reg_541 <= buff_A_1_q0;
                return_value_reg_546 <= buff_A_0_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                buff_C_0_1_fu_74 <= buff_C_0_2_1_fu_344_p3;
                buff_C_2_1_fu_70 <= buff_C_2_2_1_fu_351_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                buff_C_1_1_fu_82 <= buff_C_1_2_fu_318_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 = ap_const_lv1_0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                buff_C_1_1_load_reg_563 <= buff_C_1_1_fu_82;
                buff_C_1_2_reg_569 <= buff_C_1_2_fu_318_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_flatten_fu_222_p2 = ap_const_lv1_0))) then
                col_assign_mid2_reg_488 <= col_assign_mid2_fu_240_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_flatten_reg_479 = ap_const_lv1_0))) then
                or_cond_reg_532 <= or_cond_fu_293_p2;
                tmp_2_reg_505 <= tmp_2_fu_272_p2;
                tmp_7_reg_528 <= tmp_7_fu_282_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_flatten_fu_222_p2 = ap_const_lv1_0))) then
                row_mid2_reg_498 <= row_mid2_fu_254_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_528_pp0_it2)) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                y_reg_557 <= input_r_dout;
            end if;
        end if;
    end process;
    tmp_3_reg_512(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_3_reg_512_pp0_it2(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it6, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st10_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st10_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it2 <= "XXXXXXXX";
    ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it1 <= "XXXXXXXX";
    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
                ap_sig_bdd_156 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
                ap_sig_bdd_160 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it1, tmp_2_reg_505)
    begin
                ap_sig_bdd_164 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it1) and not((ap_const_lv1_0 = tmp_2_reg_505)));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_251 assign process. --
    ap_sig_bdd_251_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it1, tmp_2_reg_505)
    begin
                ap_sig_bdd_251 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it1) and (ap_const_lv1_0 = tmp_2_reg_505));
    end process;


    -- ap_sig_bdd_255 assign process. --
    ap_sig_bdd_255_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
                ap_sig_bdd_255 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))));
    end process;


    -- ap_sig_bdd_260 assign process. --
    ap_sig_bdd_260_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it3, ap_reg_ppstg_tmp_7_reg_528_pp0_it3)
    begin
                ap_sig_bdd_260 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it3) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_528_pp0_it3)));
    end process;


    -- ap_sig_bdd_267 assign process. --
    ap_sig_bdd_267_assign_proc : process(exitcond_flatten_reg_479, tmp_7_fu_282_p2)
    begin
                ap_sig_bdd_267 <= ((exitcond_flatten_reg_479 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_7_fu_282_p2));
    end process;


    -- ap_sig_bdd_444 assign process. --
    ap_sig_bdd_444_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_444 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_54 assign process. --
    ap_sig_bdd_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_54 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(input_r_empty_n, ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2, ap_reg_ppstg_tmp_7_reg_528_pp0_it2)
    begin
                ap_sig_bdd_72 <= ((input_r_empty_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_528_pp0_it2)));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(output_r_full_n, ap_reg_ppstg_or_cond_reg_532_pp0_it6)
    begin
                ap_sig_bdd_88 <= ((output_r_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_reg_532_pp0_it6)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_54)
    begin
        if (ap_sig_bdd_54) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_2 assign process. --
    ap_sig_cseq_ST_st10_fsm_2_assign_proc : process(ap_sig_bdd_444)
    begin
        if (ap_sig_bdd_444) then 
            ap_sig_cseq_ST_st10_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_0_address0 <= tmp_3_fu_277_p1(11 - 1 downto 0);
    buff_A_0_address1 <= tmp_9_fu_330_p1(11 - 1 downto 0);

    -- buff_A_0_ce0 assign process. --
    buff_A_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            buff_A_0_ce0 <= ap_const_logic_1;
        else 
            buff_A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_0_ce1 assign process. --
    buff_A_0_ce1_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            buff_A_0_ce1 <= ap_const_logic_1;
        else 
            buff_A_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_0_d1 <= y_reg_557;

    -- buff_A_0_we1 assign process. --
    buff_A_0_we1_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it3, ap_reg_ppstg_tmp_7_reg_528_pp0_it3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it3) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_528_pp0_it3))))) then 
            buff_A_0_we1 <= ap_const_logic_1;
        else 
            buff_A_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_1_address0 <= tmp_3_fu_277_p1(11 - 1 downto 0);
    buff_A_1_address1 <= ap_reg_ppstg_buff_A_1_addr_reg_517_pp0_it2;

    -- buff_A_1_ce0 assign process. --
    buff_A_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            buff_A_1_ce0 <= ap_const_logic_1;
        else 
            buff_A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_1_ce1 assign process. --
    buff_A_1_ce1_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            buff_A_1_ce1 <= ap_const_logic_1;
        else 
            buff_A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_1_d1 <= return_value_reg_546;

    -- buff_A_1_we1 assign process. --
    buff_A_1_we1_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_tmp_2_reg_505_pp0_it2)
    begin
        if ((((ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_2_reg_505_pp0_it2))))) then 
            buff_A_1_we1 <= ap_const_logic_1;
        else 
            buff_A_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_2_address0 <= ap_reg_ppstg_tmp_3_reg_512_pp0_it2(11 - 1 downto 0);
    buff_A_2_address1 <= tmp_6_fu_334_p1(11 - 1 downto 0);

    -- buff_A_2_ce0 assign process. --
    buff_A_2_ce0_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            buff_A_2_ce0 <= ap_const_logic_1;
        else 
            buff_A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_2_ce1 assign process. --
    buff_A_2_ce1_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            buff_A_2_ce1 <= ap_const_logic_1;
        else 
            buff_A_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_2_d0 <= buff_A_1_load_reg_541;

    -- buff_A_2_we0 assign process. --
    buff_A_2_we0_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_tmp_2_reg_505_pp0_it2)
    begin
        if ((((ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_2_reg_505_pp0_it2))))) then 
            buff_A_2_we0 <= ap_const_logic_1;
        else 
            buff_A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_C_0_2_1_fu_344_p3 <= 
        buff_A_2_q1 when (ap_reg_ppstg_tmp_2_reg_505_pp0_it4(0) = '1') else 
        buff_C_0_1_fu_74;
    buff_C_1_2_fu_318_p3 <= 
        ap_reg_phiprechg_buff_C_1_2_1_reg_200pp0_it3 when (ap_reg_ppstg_tmp_2_reg_505_pp0_it2(0) = '1') else 
        buff_C_1_1_fu_82;
    buff_C_2_2_1_fu_351_p3 <= 
        ap_reg_phiprechg_buff_C_2_2_reg_211pp0_it5 when (ap_reg_ppstg_tmp_2_reg_505_pp0_it4(0) = '1') else 
        buff_C_2_1_fu_70;
    col_assign_mid2_fu_240_p3 <= 
        ap_const_lv11_0 when (exitcond4_fu_234_p2(0) = '1') else 
        col_assign_phi_fu_193_p4;

    -- col_assign_phi_fu_193_p4 assign process. --
    col_assign_phi_fu_193_p4_assign_proc : process(col_assign_reg_189, exitcond_flatten_reg_479, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, col_fu_299_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_479 = ap_const_lv1_0))) then 
            col_assign_phi_fu_193_p4 <= col_fu_299_p2;
        else 
            col_assign_phi_fu_193_p4 <= col_assign_reg_189;
        end if; 
    end process;

    col_fu_299_p2 <= std_logic_vector(unsigned(col_assign_mid2_reg_488) + unsigned(ap_const_lv11_1));
    exitcond4_fu_234_p2 <= "1" when (col_assign_phi_fu_193_p4 = ap_const_lv11_781) else "0";
    exitcond_flatten_fu_222_p2 <= "1" when (indvar_flatten_reg_167 = ap_const_lv21_1FAFB9) else "0";
    indvar_flatten_next_fu_228_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_167) + unsigned(ap_const_lv21_1));

    -- input_r_read assign process. --
    input_r_read_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2, ap_reg_ppstg_tmp_7_reg_528_pp0_it2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_reg_ppstg_exitcond_flatten_reg_479_pp0_it2 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_7_reg_528_pp0_it2)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            input_r_read <= ap_const_logic_1;
        else 
            input_r_read <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_293_p2 <= (tmp_1_fu_267_p2 and tmp_5_fu_288_p2);
    output_r_din <= 
        tmp_8_reg_594 when (tmp_i_reg_589(0) = '1') else 
        tmp_2_i_reg_599;

    -- output_r_write assign process. --
    output_r_write_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_or_cond_reg_532_pp0_it6, ap_sig_bdd_88, ap_reg_ppiten_pp0_it7)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_reg_532_pp0_it6)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            output_r_write <= ap_const_logic_1;
        else 
            output_r_write <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_i_cast_fu_385_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_378_p3),11));
    p_shl_i_fu_378_p3 <= (ap_reg_ppstg_buff_C_1_1_load_reg_563_pp0_it4 & ap_const_lv2_0);
    row_mid2_fu_254_p3 <= 
        row_s_fu_248_p2 when (exitcond4_fu_234_p2(0) = '1') else 
        row_phi_fu_182_p4;

    -- row_phi_fu_182_p4 assign process. --
    row_phi_fu_182_p4_assign_proc : process(row_reg_178, exitcond_flatten_reg_479, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, row_mid2_reg_498)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_479 = ap_const_lv1_0))) then 
            row_phi_fu_182_p4 <= row_mid2_reg_498;
        else 
            row_phi_fu_182_p4 <= row_reg_178;
        end if; 
    end process;

    row_s_fu_248_p2 <= std_logic_vector(unsigned(row_phi_fu_182_p4) + unsigned(ap_const_lv11_1));
    sum_i_cast_fu_371_p1 <= std_logic_vector(resize(unsigned(sum_i_fu_365_p2),12));
    sum_i_fu_365_p2 <= std_logic_vector(unsigned(tmp_6_1_i_cast_fu_362_p1) + unsigned(tmp_6_0_1_i_cast_fu_358_p1));
    tmp_1_fu_267_p2 <= "0" when (row_mid2_reg_498 = ap_const_lv11_0) else "1";
    tmp_2_fu_272_p2 <= "1" when (unsigned(col_assign_mid2_reg_488) < unsigned(ap_const_lv11_780)) else "0";
    tmp_2_i_fu_442_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_8_fu_438_p1));
    tmp_3_fu_277_p1 <= std_logic_vector(resize(unsigned(col_assign_mid2_reg_488),64));
    tmp_5_fu_288_p2 <= "0" when (col_assign_mid2_reg_488 = ap_const_lv11_0) else "1";
    tmp_6_0_1_i_cast_fu_358_p1 <= std_logic_vector(resize(unsigned(buff_C_0_1_fu_74),9));
    tmp_6_1_1_i_cast2_fu_375_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_buff_C_1_1_load_reg_563_pp0_it4),11));
    tmp_6_1_2_i_cast_fu_415_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_buff_C_1_2_reg_569_pp0_it5),12));
    tmp_6_1_i_cast_fu_362_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_buff_C_1_0_load_reg_552_pp0_it4),9));
    tmp_6_2_1_i_cast_fu_423_p1 <= std_logic_vector(resize(unsigned(buff_C_2_1_load_reg_579),12));
    tmp_6_fu_334_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it3),64));
    tmp_7_1_1_i_cast_fu_395_p1 <= std_logic_vector(resize(unsigned(tmp_7_1_1_i_fu_389_p2),12));
    tmp_7_1_1_i_fu_389_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_385_p1) + unsigned(tmp_6_1_1_i_cast2_fu_375_p1));
    tmp_7_fu_282_p2 <= (tmp_2_fu_272_p2 and tmp_fu_262_p2);
    tmp_8_fu_438_p1 <= x_weight_2_2_1_i_fu_426_p2(8 - 1 downto 0);
    tmp_9_fu_330_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_col_assign_mid2_reg_488_pp0_it3),64));
    tmp_fu_262_p2 <= "1" when (unsigned(row_mid2_reg_498) < unsigned(ap_const_lv11_438)) else "0";
    tmp_i_fu_432_p2 <= "1" when (signed(x_weight_2_2_1_i_fu_426_p2) > signed(ap_const_lv12_0)) else "0";
    x_weight_2_1_1_i_fu_399_p2 <= std_logic_vector(unsigned(tmp_7_1_1_i_cast_fu_395_p1) - unsigned(sum_i_cast_fu_371_p1));
    x_weight_2_1_2_i_fu_418_p2 <= std_logic_vector(unsigned(x_weight_2_1_1_i_reg_584) - unsigned(tmp_6_1_2_i_cast_fu_415_p1));
    x_weight_2_2_1_i_fu_426_p2 <= std_logic_vector(unsigned(x_weight_2_1_2_i_fu_418_p2) - unsigned(tmp_6_2_1_i_cast_fu_423_p1));
end behav;
